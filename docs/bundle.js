/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 352);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _curry2;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__isPlaceholder__ = __webpack_require__(110);



/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return Object(__WEBPACK_IMPORTED_MODULE_1__isPlaceholder__["a" /* default */])(a) ? f2 : Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function (_b) {
          return fn(a, _b);
        });
      default:
        return Object(__WEBPACK_IMPORTED_MODULE_1__isPlaceholder__["a" /* default */])(a) && Object(__WEBPACK_IMPORTED_MODULE_1__isPlaceholder__["a" /* default */])(b) ? f2 : Object(__WEBPACK_IMPORTED_MODULE_1__isPlaceholder__["a" /* default */])(a) ? Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function (_a) {
          return fn(_a, b);
        }) : Object(__WEBPACK_IMPORTED_MODULE_1__isPlaceholder__["a" /* default */])(b) ? Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);
var core = __webpack_require__(38);
var hide = __webpack_require__(20);
var redefine = __webpack_require__(21);
var ctx = __webpack_require__(31);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _curry1;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isPlaceholder__ = __webpack_require__(110);


/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || Object(__WEBPACK_IMPORTED_MODULE_0__isPlaceholder__["a" /* default */])(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _curry3;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__isPlaceholder__ = __webpack_require__(110);




/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(a) ? f3 : Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function (_b, _c) {
          return fn(a, _b, _c);
        });
      case 2:
        return Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(a) && Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(b) ? f3 : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(a) ? Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function (_a, _c) {
          return fn(_a, b, _c);
        }) : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(b) ? Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function (_b, _c) {
          return fn(a, _b, _c);
        }) : Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function (_c) {
          return fn(a, b, _c);
        });
      default:
        return Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(a) && Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(b) && Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(c) ? f3 : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(a) && Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(b) ? Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function (_a, _b) {
          return fn(_a, _b, c);
        }) : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(a) && Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(c) ? Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function (_a, _c) {
          return fn(_a, b, _c);
        }) : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(b) && Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(c) ? Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function (_b, _c) {
          return fn(a, _b, _c);
        }) : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(a) ? Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function (_a) {
          return fn(_a, b, c);
        }) : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(b) ? Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function (_b) {
          return fn(a, _b, c);
        }) : Object(__WEBPACK_IMPORTED_MODULE_2__isPlaceholder__["a" /* default */])(c) ? Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function (_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return epsilon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return epsilon2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return pi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return halfPi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return quarterPi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return tau; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return degrees; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return radians; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return abs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return atan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return atan2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return cos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return exp; });
/* unused harmony export floor */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return pow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return sin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return sign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return sqrt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return tan; });
/* harmony export (immutable) */ __webpack_exports__["b"] = acos;
/* harmony export (immutable) */ __webpack_exports__["c"] = asin;
/* harmony export (immutable) */ __webpack_exports__["m"] = haversin;
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;

var degrees = 180 / pi;
var radians = pi / 180;

var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var floor = Math.floor;
var log = Math.log;
var pow = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
var sqrt = Math.sqrt;
var tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 6 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(92)('wks');
var uid = __webpack_require__(57);
var Symbol = __webpack_require__(6).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(7)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(5);
var IE8_DOM_DEFINE = __webpack_require__(204);
var toPrimitive = __webpack_require__(39);
var dP = Object.defineProperty;

exports.f = __webpack_require__(10) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(41);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _dispatchable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isArray__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__isTransformer__ = __webpack_require__(173);



/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */
function _dispatchable(methodNames, xf, fn) {
  return function () {
    if (arguments.length === 0) {
      return fn();
    }
    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();
    if (!Object(__WEBPACK_IMPORTED_MODULE_0__isArray__["a" /* default */])(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }
        idx += 1;
      }
      if (Object(__WEBPACK_IMPORTED_MODULE_1__isTransformer__["a" /* default */])(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
}

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
  init: function () {
    return this.xf['@@transducer/init']();
  },
  result: function (result) {
    return this.xf['@@transducer/result'](result);
  }
});

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(40);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_curryN__ = __webpack_require__(112);





/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      var sumArgs = (...args) => R.sum(args);
 *
 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
var curryN = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__internal_curry2__["a" /* default */])(function curryN(length, fn) {
  if (length === 1) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry1__["a" /* default */])(fn);
  }
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(length, Object(__WEBPACK_IMPORTED_MODULE_3__internal_curryN__["a" /* default */])(length, [], fn));
});
/* harmony default export */ __webpack_exports__["a"] = (curryN);

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _has;
function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/***/ }),
/* 19 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(11);
var createDesc = __webpack_require__(56);
module.exports = __webpack_require__(10) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);
var hide = __webpack_require__(20);
var has = __webpack_require__(19);
var SRC = __webpack_require__(57)('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(38).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var fails = __webpack_require__(7);
var defined = __webpack_require__(40);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_map__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_xmap__ = __webpack_require__(649);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__keys__ = __webpack_require__(46);








/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex
 * @example
 *
 *      var double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */
var map = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['fantasy-land/map', 'map'], __WEBPACK_IMPORTED_MODULE_4__internal_xmap__["a" /* default */], function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return Object(__WEBPACK_IMPORTED_MODULE_5__curryN__["a" /* default */])(functor.length, function () {
        return fn.call(this, functor.apply(this, arguments));
      });
    case '[object Object]':
      return Object(__WEBPACK_IMPORTED_MODULE_3__internal_reduce__["a" /* default */])(function (acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, Object(__WEBPACK_IMPORTED_MODULE_6__keys__["a" /* default */])(functor));
    default:
      return Object(__WEBPACK_IMPORTED_MODULE_2__internal_map__["a" /* default */])(fn, functor);
  }
}));
/* harmony default export */ __webpack_exports__["a"] = (map);

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(79);
var defined = __webpack_require__(40);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(80);
var createDesc = __webpack_require__(56);
var toIObject = __webpack_require__(24);
var toPrimitive = __webpack_require__(39);
var has = __webpack_require__(19);
var IE8_DOM_DEFINE = __webpack_require__(204);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(10) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(19);
var toObject = __webpack_require__(15);
var IE_PROTO = __webpack_require__(130)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_creator__ = __webpack_require__(165);
/* unused harmony reexport creator */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_local__ = __webpack_require__(609);
/* unused harmony reexport local */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_matcher__ = __webpack_require__(269);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__src_matcher__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_mouse__ = __webpack_require__(610);
/* unused harmony reexport mouse */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_namespace__ = __webpack_require__(166);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_4__src_namespace__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_namespaces__ = __webpack_require__(167);
/* unused harmony reexport namespaces */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_select__ = __webpack_require__(611);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_6__src_select__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_selectAll__ = __webpack_require__(639);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_7__src_selectAll__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_selection_index__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_8__src_selection_index__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_selector__ = __webpack_require__(171);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_9__src_selector__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_selectorAll__ = __webpack_require__(270);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_10__src_selectorAll__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_selection_style__ = __webpack_require__(273);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_11__src_selection_style__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_touch__ = __webpack_require__(640);
/* unused harmony reexport touch */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_touches__ = __webpack_require__(641);
/* unused harmony reexport touches */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_window__ = __webpack_require__(172);
/* unused harmony reexport window */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_selection_on__ = __webpack_require__(169);
/* unused harmony reexport event */
/* unused harmony reexport customEvent */


















/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _reduce;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isArrayLike__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xwrap__ = __webpack_require__(275);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bind__ = __webpack_require__(276);




function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);
    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }
    idx += 1;
  }
  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);
    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }
    step = iter.next();
  }
  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName](Object(__WEBPACK_IMPORTED_MODULE_2__bind__["a" /* default */])(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = Object(__WEBPACK_IMPORTED_MODULE_1__xwrap__["a" /* default */])(fn);
  }
  if (Object(__WEBPACK_IMPORTED_MODULE_0__isArrayLike__["a" /* default */])(list)) {
    return _arrayReduce(fn, acc, list);
  }
  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }
  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }
  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }
  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_equals__ = __webpack_require__(672);



/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      var a = {}; a.v = a;
 *      var b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */
var equals = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function equals(a, b) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_equals__["a" /* default */])(a, b, [], []);
});
/* harmony default export */ __webpack_exports__["a"] = (equals);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(330);
var isBuffer = __webpack_require__(842);

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object' && !isArray(obj)) {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(17);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 32 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(7);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return root; });
/* harmony export (immutable) */ __webpack_exports__["a"] = Selection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__select__ = __webpack_require__(612);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectAll__ = __webpack_require__(613);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__filter__ = __webpack_require__(614);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__data__ = __webpack_require__(615);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__enter__ = __webpack_require__(271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__exit__ = __webpack_require__(617);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__merge__ = __webpack_require__(618);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__order__ = __webpack_require__(619);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__sort__ = __webpack_require__(620);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__call__ = __webpack_require__(621);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__nodes__ = __webpack_require__(622);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__node__ = __webpack_require__(623);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__size__ = __webpack_require__(624);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__empty__ = __webpack_require__(625);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__each__ = __webpack_require__(626);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__attr__ = __webpack_require__(627);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__style__ = __webpack_require__(273);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__property__ = __webpack_require__(628);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__classed__ = __webpack_require__(629);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__text__ = __webpack_require__(630);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__html__ = __webpack_require__(631);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__raise__ = __webpack_require__(632);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__lower__ = __webpack_require__(633);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__append__ = __webpack_require__(634);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__insert__ = __webpack_require__(635);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__remove__ = __webpack_require__(636);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__datum__ = __webpack_require__(637);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__on__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__dispatch__ = __webpack_require__(638);






























var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: __WEBPACK_IMPORTED_MODULE_0__select__["a" /* default */],
  selectAll: __WEBPACK_IMPORTED_MODULE_1__selectAll__["a" /* default */],
  filter: __WEBPACK_IMPORTED_MODULE_2__filter__["a" /* default */],
  data: __WEBPACK_IMPORTED_MODULE_3__data__["a" /* default */],
  enter: __WEBPACK_IMPORTED_MODULE_4__enter__["b" /* default */],
  exit: __WEBPACK_IMPORTED_MODULE_5__exit__["a" /* default */],
  merge: __WEBPACK_IMPORTED_MODULE_6__merge__["a" /* default */],
  order: __WEBPACK_IMPORTED_MODULE_7__order__["a" /* default */],
  sort: __WEBPACK_IMPORTED_MODULE_8__sort__["a" /* default */],
  call: __WEBPACK_IMPORTED_MODULE_9__call__["a" /* default */],
  nodes: __WEBPACK_IMPORTED_MODULE_10__nodes__["a" /* default */],
  node: __WEBPACK_IMPORTED_MODULE_11__node__["a" /* default */],
  size: __WEBPACK_IMPORTED_MODULE_12__size__["a" /* default */],
  empty: __WEBPACK_IMPORTED_MODULE_13__empty__["a" /* default */],
  each: __WEBPACK_IMPORTED_MODULE_14__each__["a" /* default */],
  attr: __WEBPACK_IMPORTED_MODULE_15__attr__["a" /* default */],
  style: __WEBPACK_IMPORTED_MODULE_16__style__["a" /* default */],
  property: __WEBPACK_IMPORTED_MODULE_17__property__["a" /* default */],
  classed: __WEBPACK_IMPORTED_MODULE_18__classed__["a" /* default */],
  text: __WEBPACK_IMPORTED_MODULE_19__text__["a" /* default */],
  html: __WEBPACK_IMPORTED_MODULE_20__html__["a" /* default */],
  raise: __WEBPACK_IMPORTED_MODULE_21__raise__["a" /* default */],
  lower: __WEBPACK_IMPORTED_MODULE_22__lower__["a" /* default */],
  append: __WEBPACK_IMPORTED_MODULE_23__append__["a" /* default */],
  insert: __WEBPACK_IMPORTED_MODULE_24__insert__["a" /* default */],
  remove: __WEBPACK_IMPORTED_MODULE_25__remove__["a" /* default */],
  datum: __WEBPACK_IMPORTED_MODULE_26__datum__["a" /* default */],
  on: __WEBPACK_IMPORTED_MODULE_27__on__["a" /* default */],
  dispatch: __WEBPACK_IMPORTED_MODULE_28__dispatch__["a" /* default */]
};

/* harmony default export */ __webpack_exports__["b"] = (selection);


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _concat;
/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];

  idx = 0;
  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }
  idx = 0;
  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }
  return result;
}

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry3__ = __webpack_require__(3);



/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */
var slice = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry3__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__["a" /* default */])('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));
/* harmony default export */ __webpack_exports__["a"] = (slice);

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export CREATED */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SCHEDULED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return STARTING; });
/* unused harmony export STARTED */
/* unused harmony export RUNNING */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ENDING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ENDED; });
/* harmony export (immutable) */ __webpack_exports__["g"] = init;
/* harmony export (immutable) */ __webpack_exports__["h"] = set;
/* harmony export (immutable) */ __webpack_exports__["f"] = get;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_dispatch__ = __webpack_require__(862);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_timer__ = __webpack_require__(338);



var emptyOn = Object(__WEBPACK_IMPORTED_MODULE_0_d3_dispatch__["a" /* dispatch */])("start", "end", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

/* harmony default export */ __webpack_exports__["e"] = (function(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
});

function init(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
  return schedule;
}

function set(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["c" /* timer */])(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["b" /* timeout */])(start);

      // Interrupt the active transition, if any.
      // Dispatch the interrupt event.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions. No interrupt event is dispatched
      // because the cancelled transitions never started. Note that this also
      // removes this transition from the pending list!
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["b" /* timeout */])(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(null, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}


/***/ }),
/* 38 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(8);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 41 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(1);
var core = __webpack_require__(38);
var fails = __webpack_require__(7);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(31);
var IObject = __webpack_require__(79);
var toObject = __webpack_require__(15);
var toLength = __webpack_require__(12);
var asc = __webpack_require__(147);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = projection;
/* harmony export (immutable) */ __webpack_exports__["b"] = projectionMutator;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clip_antimeridian__ = __webpack_require__(241);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clip_circle__ = __webpack_require__(259);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clip_rectangle__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__compose__ = __webpack_require__(240);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__identity__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__rotation__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__transform__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__fit__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__resample__ = __webpack_require__(588);











var transformRadians = Object(__WEBPACK_IMPORTED_MODULE_7__transform__["a" /* transformer */])({
  point: function(x, y) {
    this.stream.point(x * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], y * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */]);
  }
});

function transformRotate(rotate) {
  return Object(__WEBPACK_IMPORTED_MODULE_7__transform__["a" /* transformer */])({
    point: function(x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function projection(project) {
  return projectionMutator(function() { return project; })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150, // scale
      x = 480, y = 250, // translate
      dx, dy, lambda = 0, phi = 0, // center
      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
      theta = null, preclip = __WEBPACK_IMPORTED_MODULE_0__clip_antimeridian__["a" /* default */], // clip angle
      x0 = null, y0, x1, y1, postclip = __WEBPACK_IMPORTED_MODULE_4__identity__["a" /* default */], // clip extent
      delta2 = 0.5, projectResample = Object(__WEBPACK_IMPORTED_MODULE_9__resample__["a" /* default */])(projectTransform, delta2), // precision
      cache,
      cacheStream;

  function projection(point) {
    point = projectRotate(point[0] * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], point[1] * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */]);
    return [point[0] * k + dx, dy - point[1] * k];
  }

  function invert(point) {
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
    return point && [point[0] * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], point[1] * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */]];
  }

  function projectTransform(x, y) {
    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
  }

  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function(_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function(_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? Object(__WEBPACK_IMPORTED_MODULE_1__clip_circle__["a" /* default */])(theta = _ * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */]) : (theta = null, __WEBPACK_IMPORTED_MODULE_0__clip_antimeridian__["a" /* default */]), reset()) : theta * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */];
  };

  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, __WEBPACK_IMPORTED_MODULE_4__identity__["a" /* default */]) : Object(__WEBPACK_IMPORTED_MODULE_2__clip_rectangle__["a" /* default */])(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], phi = _[1] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], recenter()) : [lambda * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], phi * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */]];
  };

  projection.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], deltaPhi = _[1] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */], deltaGamma = _.length > 2 ? _[2] % 360 * __WEBPACK_IMPORTED_MODULE_5__math__["r" /* radians */] : 0, recenter()) : [deltaLambda * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], deltaPhi * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */], deltaGamma * __WEBPACK_IMPORTED_MODULE_5__math__["h" /* degrees */]];
  };

  projection.precision = function(_) {
    return arguments.length ? (projectResample = Object(__WEBPACK_IMPORTED_MODULE_9__resample__["a" /* default */])(projectTransform, delta2 = _ * _), reset()) : Object(__WEBPACK_IMPORTED_MODULE_5__math__["u" /* sqrt */])(delta2);
  };

  projection.fitExtent = function(extent, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_8__fit__["a" /* fitExtent */])(projection, extent, object);
  };

  projection.fitSize = function(size, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_8__fit__["c" /* fitSize */])(projection, size, object);
  };

  projection.fitWidth = function(width, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_8__fit__["d" /* fitWidth */])(projection, width, object);
  };

  projection.fitHeight = function(height, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_8__fit__["b" /* fitHeight */])(projection, height, object);
  };

  function recenter() {
    projectRotate = Object(__WEBPACK_IMPORTED_MODULE_3__compose__["a" /* default */])(rotate = Object(__WEBPACK_IMPORTED_MODULE_6__rotation__["b" /* rotateRadians */])(deltaLambda, deltaPhi, deltaGamma), project);
    var center = project(lambda, phi);
    dx = x - center[0] * k;
    dy = y + center[1] * k;
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function() {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _arity;
function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0:
      return function () {
        return fn.apply(this, arguments);
      };
    case 1:
      return function (a0) {
        return fn.apply(this, arguments);
      };
    case 2:
      return function (a0, a1) {
        return fn.apply(this, arguments);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.apply(this, arguments);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };
    default:
      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
}

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_isArguments__ = __webpack_require__(277);




// cover IE < 9 keys issues
var hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');
var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
// Safari bug
var hasArgsEnumBug = /*#__PURE__*/function () {
  'use strict';

  return arguments.propertyIsEnumerable('length');
}();

var contains = function contains(list, item) {
  var idx = 0;
  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }
    idx += 1;
  }
  return false;
};

/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @see R.keysIn, R.values
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */
var _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
} : function keys(obj) {
  if (Object(obj) !== obj) {
    return [];
  }
  var prop, nIdx;
  var ks = [];
  var checkArgsLength = hasArgsEnumBug && Object(__WEBPACK_IMPORTED_MODULE_2__internal_isArguments__["a" /* default */])(obj);
  for (prop in obj) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(prop, obj) && (!checkArgsLength || prop !== 'length')) {
      ks[ks.length] = prop;
    }
  }
  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;
    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];
      if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }
      nIdx -= 1;
    }
  }
  return ks;
};
var keys = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(_keys);
/* harmony default export */ __webpack_exports__["a"] = (keys);

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_reduce__ = __webpack_require__(28);



/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * [`R.reduced`](#reduced) to shortcut the iteration.
 *
 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
 * is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present. When
 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
 * shortcuting, as this is not implemented by `reduce`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *      //          -               -10
 *      //         / \              / \
 *      //        -   4           -6   4
 *      //       / \              / \
 *      //      -   3   ==>     -3   3
 *      //     / \              / \
 *      //    -   2           -1   2
 *      //   / \              / \
 *      //  0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */
var reduce = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__internal_reduce__["a" /* default */]);
/* harmony default export */ __webpack_exports__["a"] = (reduce);

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(10)) {
  var LIBRARY = __webpack_require__(58);
  var global = __webpack_require__(6);
  var fails = __webpack_require__(7);
  var $export = __webpack_require__(1);
  var $typed = __webpack_require__(102);
  var $buffer = __webpack_require__(153);
  var ctx = __webpack_require__(31);
  var anInstance = __webpack_require__(64);
  var propertyDesc = __webpack_require__(56);
  var hide = __webpack_require__(20);
  var redefineAll = __webpack_require__(66);
  var toInteger = __webpack_require__(41);
  var toLength = __webpack_require__(12);
  var toIndex = __webpack_require__(230);
  var toAbsoluteIndex = __webpack_require__(60);
  var toPrimitive = __webpack_require__(39);
  var has = __webpack_require__(19);
  var classof = __webpack_require__(81);
  var isObject = __webpack_require__(8);
  var toObject = __webpack_require__(15);
  var isArrayIter = __webpack_require__(144);
  var create = __webpack_require__(61);
  var getPrototypeOf = __webpack_require__(26);
  var gOPN = __webpack_require__(62).f;
  var getIterFn = __webpack_require__(146);
  var uid = __webpack_require__(57);
  var wks = __webpack_require__(9);
  var createArrayMethod = __webpack_require__(43);
  var createArrayIncludes = __webpack_require__(93);
  var speciesConstructor = __webpack_require__(100);
  var ArrayIterators = __webpack_require__(149);
  var Iterators = __webpack_require__(71);
  var $iterDetect = __webpack_require__(97);
  var setSpecies = __webpack_require__(63);
  var arrayFill = __webpack_require__(148);
  var arrayCopyWithin = __webpack_require__(220);
  var $DP = __webpack_require__(11);
  var $GOPD = __webpack_require__(25);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(225);
var $export = __webpack_require__(1);
var shared = __webpack_require__(92)('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(228))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(57)('meta');
var isObject = __webpack_require__(8);
var has = __webpack_require__(19);
var setDesc = __webpack_require__(11).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(7)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(9)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(20)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = noop;
function noop() {}


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
/* harmony default export */ __webpack_exports__["a"] = (Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
});

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _reduced;
function _reduced(x) {
  return x && x['@@transducer/reduced'] ? x : {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = Transition;
/* unused harmony export default */
/* harmony export (immutable) */ __webpack_exports__["b"] = newId;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__attr__ = __webpack_require__(867);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attrTween__ = __webpack_require__(880);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__delay__ = __webpack_require__(881);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__duration__ = __webpack_require__(882);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ease__ = __webpack_require__(883);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__filter__ = __webpack_require__(884);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__merge__ = __webpack_require__(885);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__on__ = __webpack_require__(886);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__remove__ = __webpack_require__(887);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__select__ = __webpack_require__(888);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__selectAll__ = __webpack_require__(889);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__selection__ = __webpack_require__(890);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__style__ = __webpack_require__(891);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__styleTween__ = __webpack_require__(892);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__text__ = __webpack_require__(893);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__transition__ = __webpack_require__(894);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__tween__ = __webpack_require__(127);



















var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["e" /* selection */])().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = __WEBPACK_IMPORTED_MODULE_0_d3_selection__["e" /* selection */].prototype;

Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: __WEBPACK_IMPORTED_MODULE_10__select__["a" /* default */],
  selectAll: __WEBPACK_IMPORTED_MODULE_11__selectAll__["a" /* default */],
  filter: __WEBPACK_IMPORTED_MODULE_6__filter__["a" /* default */],
  merge: __WEBPACK_IMPORTED_MODULE_7__merge__["a" /* default */],
  selection: __WEBPACK_IMPORTED_MODULE_12__selection__["a" /* default */],
  transition: __WEBPACK_IMPORTED_MODULE_16__transition__["a" /* default */],
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: __WEBPACK_IMPORTED_MODULE_8__on__["a" /* default */],
  attr: __WEBPACK_IMPORTED_MODULE_1__attr__["a" /* default */],
  attrTween: __WEBPACK_IMPORTED_MODULE_2__attrTween__["a" /* default */],
  style: __WEBPACK_IMPORTED_MODULE_13__style__["a" /* default */],
  styleTween: __WEBPACK_IMPORTED_MODULE_14__styleTween__["a" /* default */],
  text: __WEBPACK_IMPORTED_MODULE_15__text__["a" /* default */],
  remove: __WEBPACK_IMPORTED_MODULE_9__remove__["a" /* default */],
  tween: __WEBPACK_IMPORTED_MODULE_17__tween__["a" /* default */],
  delay: __WEBPACK_IMPORTED_MODULE_3__delay__["a" /* default */],
  duration: __WEBPACK_IMPORTED_MODULE_4__duration__["a" /* default */],
  ease: __WEBPACK_IMPORTED_MODULE_5__ease__["a" /* default */]
};


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 57 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(206);
var enumBugKeys = __webpack_require__(131);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(41);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(5);
var dPs = __webpack_require__(207);
var enumBugKeys = __webpack_require__(131);
var IE_PROTO = __webpack_require__(130)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(128)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(132).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(206);
var hiddenKeys = __webpack_require__(131).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(6);
var dP = __webpack_require__(11);
var DESCRIPTORS = __webpack_require__(10);
var SPECIES = __webpack_require__(9)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 64 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(31);
var call = __webpack_require__(218);
var isArrayIter = __webpack_require__(144);
var anObject = __webpack_require__(5);
var toLength = __webpack_require__(12);
var getIterFn = __webpack_require__(146);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(21);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};

var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates[i], stream, 1);
  stream.polygonEnd();
}

/* harmony default export */ __webpack_exports__["a"] = (function(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
});


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_color__ = __webpack_require__(200);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["f"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_lab__ = __webpack_require__(868);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__ = __webpack_require__(869);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__["a"]; });





/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(11).f;
var has = __webpack_require__(19);
var TAG = __webpack_require__(9)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var defined = __webpack_require__(40);
var fails = __webpack_require__(7);
var spaces = __webpack_require__(134);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 71 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return new Adder;
});

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function(y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;
    else this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};

var temp = new Adder;

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = (a - av) + (b - bv);
}


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
});


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      var t = R.always('Tee');
 *      t(); //=> 'Tee'
 */
var always = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function always(val) {
  return function () {
    return val;
  };
});
/* harmony default export */ __webpack_exports__["a"] = (always);

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns the larger of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.maxBy, R.min
 * @example
 *
 *      R.max(789, 123); //=> 789
 *      R.max('a', 'b'); //=> 'b'
 */
var max = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function max(a, b) {
  return b > a ? b : a;
});
/* harmony default export */ __webpack_exports__["a"] = (max);

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Retrieve the value at a given path.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> a | Undefined
 * @param {Array} path The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path`.
 * @see R.prop
 * @example
 *
 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
 */
var path = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function path(paths, obj) {
  var val = obj;
  var idx = 0;
  while (idx < paths.length) {
    if (val == null) {
      return;
    }
    val = val[paths[idx]];
    idx += 1;
  }
  return val;
});
/* harmony default export */ __webpack_exports__["a"] = (path);

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _contains;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__indexOf__ = __webpack_require__(293);


function _contains(a, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__indexOf__["a" /* default */])(list, a, 0) >= 0;
}

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(32);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(32);
var TAG = __webpack_require__(9)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["g"] = spherical;
/* harmony export (immutable) */ __webpack_exports__["a"] = cartesian;
/* harmony export (immutable) */ __webpack_exports__["d"] = cartesianDot;
/* harmony export (immutable) */ __webpack_exports__["c"] = cartesianCross;
/* harmony export (immutable) */ __webpack_exports__["b"] = cartesianAddInPlace;
/* harmony export (immutable) */ __webpack_exports__["f"] = cartesianScale;
/* harmony export (immutable) */ __webpack_exports__["e"] = cartesianNormalizeInPlace;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);


function spherical(cartesian) {
  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(cartesian[1], cartesian[0]), Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0], phi = spherical[1], cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  return [cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda), cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda), Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x === null ? NaN : +x;
});


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = azimuthalRaw;
/* harmony export (immutable) */ __webpack_exports__["a"] = azimuthalInvert;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);


function azimuthalRaw(scale) {
  return function(x, y) {
    var cx = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x),
        cy = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y),
        k = scale(cx * cy);
    return [
      k * cy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x),
      k * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y)
    ];
  }
}

function azimuthalInvert(angle) {
  return function(x, y) {
    var z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + y * y),
        c = angle(z),
        sc = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(c),
        cc = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(c);
    return [
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x * sc, z * cc),
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(z && y * sc / z)
    ];
  }
}


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__map__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__prop__ = __webpack_require__(174);




/**
 * Returns a new list by plucking the same named property off all objects in
 * the list supplied.
 *
 * `pluck` will work on
 * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
 * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => k -> f {k: v} -> f v
 * @param {Number|String} key The key name to pluck off of each object.
 * @param {Array} f The array or functor to consider.
 * @return {Array} The list of values for the given key.
 * @see R.props
 * @example
 *
 *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
 *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
 *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
 */
var pluck = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function pluck(p, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__map__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__prop__["a" /* default */])(p), list);
});
/* harmony default export */ __webpack_exports__["a"] = (pluck);

/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _isString;
function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
}

/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _checkForMethod;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isArray__ = __webpack_require__(53);


/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */
function _checkForMethod(methodname, fn) {
  return function () {
    var length = arguments.length;
    if (length === 0) {
      return fn();
    }
    var obj = arguments[length - 1];
    return Object(__WEBPACK_IMPORTED_MODULE_0__isArray__["a" /* default */])(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_toString__ = __webpack_require__(671);



/**
 * Returns the string representation of the given value. `eval`'ing the output
 * should result in a value equivalent to the input value. Many of the built-in
 * `toString` methods do not satisfy this requirement.
 *
 * If the given value is an `[object Object]` with a `toString` method other
 * than `Object.prototype.toString`, this method is invoked with no arguments
 * to produce the return value. This means user-defined constructor functions
 * can provide a suitable `toString` method. For example:
 *
 *     function Point(x, y) {
 *       this.x = x;
 *       this.y = y;
 *     }
 *
 *     Point.prototype.toString = function() {
 *       return 'new Point(' + this.x + ', ' + this.y + ')';
 *     };
 *
 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category String
 * @sig * -> String
 * @param {*} val
 * @return {String}
 * @example
 *
 *      R.toString(42); //=> '42'
 *      R.toString('abc'); //=> '"abc"'
 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
 */
var toString = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function toString(val) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_toString__["a" /* default */])(val, []);
});
/* harmony default export */ __webpack_exports__["a"] = (toString);

/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isString__ = __webpack_require__(86);



/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      var list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */
var nth = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_isString__["a" /* default */])(list) ? list.charAt(idx) : list[idx];
});
/* harmony default export */ __webpack_exports__["a"] = (nth);

/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isFunction__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__toString__ = __webpack_require__(88);





/**
 * Turns a named method with a specified arity into a function that can be
 * called directly supplied with arguments and a target object.
 *
 * The returned function is curried and accepts `arity + 1` parameters where
 * the final parameter is the target object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
 * @param {Number} arity Number of arguments the returned function should take
 *        before the target object.
 * @param {String} method Name of the method to call.
 * @return {Function} A new curried function.
 * @see R.construct
 * @example
 *
 *      var sliceFrom = R.invoker(1, 'slice');
 *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
 *      var sliceFrom6 = R.invoker(2, 'slice')(6);
 *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
 * @symb R.invoker(0, 'method')(o) = o['method']()
 * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
 * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
 */
var invoker = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function invoker(arity, method) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__curryN__["a" /* default */])(arity + 1, function () {
    var target = arguments[arity];
    if (target != null && Object(__WEBPACK_IMPORTED_MODULE_1__internal_isFunction__["a" /* default */])(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }
    throw new TypeError(Object(__WEBPACK_IMPORTED_MODULE_3__toString__["a" /* default */])(target) + ' does not have a method named "' + method + '"');
  });
});
/* harmony default export */ __webpack_exports__["a"] = (invoker);

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = hue;
/* harmony export (immutable) */ __webpack_exports__["b"] = gamma;
/* harmony export (immutable) */ __webpack_exports__["a"] = nogamma;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(342);


function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
}


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(24);
var toLength = __webpack_require__(12);
var toAbsoluteIndex = __webpack_require__(60);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 94 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(32);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(8);
var cof = __webpack_require__(32);
var MATCH = __webpack_require__(9)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(9)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(5);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide = __webpack_require__(20);
var redefine = __webpack_require__(21);
var fails = __webpack_require__(7);
var defined = __webpack_require__(40);
var wks = __webpack_require__(9);

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(5);
var aFunction = __webpack_require__(17);
var SPECIES = __webpack_require__(9)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(6);
var $export = __webpack_require__(1);
var redefine = __webpack_require__(21);
var redefineAll = __webpack_require__(66);
var meta = __webpack_require__(50);
var forOf = __webpack_require__(65);
var anInstance = __webpack_require__(64);
var isObject = __webpack_require__(8);
var fails = __webpack_require__(7);
var $iterDetect = __webpack_require__(97);
var setToStringTag = __webpack_require__(69);
var inheritIfRequired = __webpack_require__(135);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);
var hide = __webpack_require__(20);
var uid = __webpack_require__(57);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(58) || !__webpack_require__(7)(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(6)[K];
});


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(1);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(1);
var aFunction = __webpack_require__(17);
var ctx = __webpack_require__(31);
var forOf = __webpack_require__(65);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = rotateRadians;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__compose__ = __webpack_require__(240);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);



function rotationIdentity(lambda, phi) {
  return [lambda > __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda - __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda < -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda + __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */]) ? (deltaPhi || deltaGamma ? Object(__WEBPACK_IMPORTED_MODULE_0__compose__["a" /* default */])(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
    : rotationLambda(deltaLambda))
    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
    : rotationIdentity);
}

function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda - __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda < -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] ? lambda + __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(deltaPhi),
      sinDeltaPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(deltaPhi),
      cosDeltaGamma = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(deltaGamma),
      sinDeltaGamma = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
        x = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(lambda) * cosPhi,
        y = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda) * cosPhi,
        z = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["c" /* asin */])(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }

  rotation.invert = function(lambda, phi) {
    var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
        x = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(lambda) * cosPhi,
        y = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda) * cosPhi,
        z = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      Object(__WEBPACK_IMPORTED_MODULE_1__math__["c" /* asin */])(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };

  return rotation;
}

/* harmony default export */ __webpack_exports__["a"] = (function(rotate) {
  rotate = rotateRadians(rotate[0] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], rotate[1] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], rotate.length > 2 ? rotate[2] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */] : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], coordinates[1] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */]);
    return coordinates[0] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates[1] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates;
  }

  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], coordinates[1] * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */]);
    return coordinates[0] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates[1] *= __WEBPACK_IMPORTED_MODULE_1__math__["h" /* degrees */], coordinates;
  };

  return forward;
});


/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = clipRectangle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__buffer__ = __webpack_require__(243);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__line__ = __webpack_require__(578);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rejoin__ = __webpack_require__(244);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_d3_array__ = __webpack_require__(155);






var clipMax = 1e9, clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
        || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(p[0] - x0) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] ? direction > 0 ? 0 : 3
        : Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(p[0] - x1) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] ? direction > 0 ? 2 : 1
        : Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(p[1] - y0) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] ? direction > 0 ? 1 : 0
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb
        : ca === 0 ? b[1] - a[1]
        : ca === 1 ? a[0] - b[0]
        : ca === 2 ? a[1] - b[1]
        : b[0] - a[0];
  }

  return function(stream) {
    var activeStream = stream,
        bufferStream = Object(__WEBPACK_IMPORTED_MODULE_1__buffer__["a" /* default */])(),
        segments,
        polygon,
        ring,
        x__, y__, v__, // first point
        x_, y_, v_, // previous point
        first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = Object(__WEBPACK_IMPORTED_MODULE_4_d3_array__["a" /* merge */])(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          Object(__WEBPACK_IMPORTED_MODULE_3__rejoin__["a" /* default */])(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (Object(__WEBPACK_IMPORTED_MODULE_2__line__["a" /* default */])(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}


/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = transformer;
/* unused harmony default export */ var _unused_webpack_default_export = (function(methods) {
  return {
    stream: transformer(methods)
  };
});

function transformer(methods) {
  return function(stream) {
    var s = new TransformStream;
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) { this.stream.point(x, y); },
  sphere: function() { this.stream.sphere(); },
  lineStart: function() { this.stream.lineStart(); },
  lineEnd: function() { this.stream.lineEnd(); },
  polygonStart: function() { this.stream.polygonStart(); },
  polygonEnd: function() { this.stream.polygonEnd(); }
};


/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__F__ = __webpack_require__(642);
/* unused harmony reexport F */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__T__ = __webpack_require__(643);
/* unused harmony reexport T */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2____ = __webpack_require__(644);
/* unused harmony reexport __ */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__add__ = __webpack_require__(111);
/* unused harmony reexport add */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__addIndex__ = __webpack_require__(645);
/* unused harmony reexport addIndex */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__adjust__ = __webpack_require__(274);
/* unused harmony reexport adjust */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__all__ = __webpack_require__(646);
/* unused harmony reexport all */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__allPass__ = __webpack_require__(648);
/* unused harmony reexport allPass */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__always__ = __webpack_require__(75);
/* unused harmony reexport always */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__and__ = __webpack_require__(278);
/* unused harmony reexport and */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__any__ = __webpack_require__(279);
/* unused harmony reexport any */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__anyPass__ = __webpack_require__(650);
/* unused harmony reexport anyPass */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__ap__ = __webpack_require__(175);
/* unused harmony reexport ap */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__aperture__ = __webpack_require__(651);
/* unused harmony reexport aperture */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__append__ = __webpack_require__(654);
/* unused harmony reexport append */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__apply__ = __webpack_require__(281);
/* unused harmony reexport apply */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__applySpec__ = __webpack_require__(655);
/* unused harmony reexport applySpec */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__applyTo__ = __webpack_require__(656);
/* unused harmony reexport applyTo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__ascend__ = __webpack_require__(657);
/* unused harmony reexport ascend */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__assoc__ = __webpack_require__(115);
/* unused harmony reexport assoc */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__assocPath__ = __webpack_require__(283);
/* unused harmony reexport assocPath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__binary__ = __webpack_require__(658);
/* unused harmony reexport binary */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__bind__ = __webpack_require__(276);
/* unused harmony reexport bind */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__both__ = __webpack_require__(659);
/* unused harmony reexport both */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__call__ = __webpack_require__(660);
/* unused harmony reexport call */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__chain__ = __webpack_require__(178);
/* unused harmony reexport chain */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__clamp__ = __webpack_require__(664);
/* unused harmony reexport clamp */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__clone__ = __webpack_require__(665);
/* unused harmony reexport clone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__comparator__ = __webpack_require__(666);
/* unused harmony reexport comparator */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__complement__ = __webpack_require__(667);
/* unused harmony reexport complement */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__compose__ = __webpack_require__(180);
/* unused harmony reexport compose */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__composeK__ = __webpack_require__(291);
/* unused harmony reexport composeK */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__composeP__ = __webpack_require__(669);
/* unused harmony reexport composeP */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__concat__ = __webpack_require__(182);
/* unused harmony reexport concat */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__cond__ = __webpack_require__(678);
/* unused harmony reexport cond */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__construct__ = __webpack_require__(679);
/* unused harmony reexport construct */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__constructN__ = __webpack_require__(296);
/* unused harmony reexport constructN */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__contains__ = __webpack_require__(680);
/* unused harmony reexport contains */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__converge__ = __webpack_require__(297);
/* unused harmony reexport converge */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__countBy__ = __webpack_require__(681);
/* unused harmony reexport countBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__curry__ = __webpack_require__(177);
/* unused harmony reexport curry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__curryN__ = __webpack_require__(16);
/* unused harmony reexport curryN */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__dec__ = __webpack_require__(683);
/* unused harmony reexport dec */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__defaultTo__ = __webpack_require__(298);
/* unused harmony reexport defaultTo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__descend__ = __webpack_require__(684);
/* unused harmony reexport descend */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__difference__ = __webpack_require__(299);
/* unused harmony reexport difference */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__differenceWith__ = __webpack_require__(300);
/* unused harmony reexport differenceWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__dissoc__ = __webpack_require__(301);
/* unused harmony reexport dissoc */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__dissocPath__ = __webpack_require__(685);
/* unused harmony reexport dissocPath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__divide__ = __webpack_require__(686);
/* unused harmony reexport divide */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__drop__ = __webpack_require__(303);
/* unused harmony reexport drop */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__dropLast__ = __webpack_require__(688);
/* unused harmony reexport dropLast */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__dropLastWhile__ = __webpack_require__(692);
/* unused harmony reexport dropLastWhile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__dropRepeats__ = __webpack_require__(695);
/* unused harmony reexport dropRepeats */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__dropRepeatsWith__ = __webpack_require__(305);
/* unused harmony reexport dropRepeatsWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__dropWhile__ = __webpack_require__(696);
/* unused harmony reexport dropWhile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__either__ = __webpack_require__(698);
/* unused harmony reexport either */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__empty__ = __webpack_require__(308);
/* unused harmony reexport empty */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__endsWith__ = __webpack_require__(699);
/* unused harmony reexport endsWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__eqBy__ = __webpack_require__(700);
/* unused harmony reexport eqBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__eqProps__ = __webpack_require__(701);
/* unused harmony reexport eqProps */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__equals__ = __webpack_require__(29);
/* unused harmony reexport equals */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__evolve__ = __webpack_require__(702);
/* unused harmony reexport evolve */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__filter__ = __webpack_require__(183);
/* unused harmony reexport filter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__find__ = __webpack_require__(703);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_64__find__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__findIndex__ = __webpack_require__(705);
/* unused harmony reexport findIndex */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__findLast__ = __webpack_require__(707);
/* unused harmony reexport findLast */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__findLastIndex__ = __webpack_require__(709);
/* unused harmony reexport findLastIndex */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__flatten__ = __webpack_require__(711);
/* unused harmony reexport flatten */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__flip__ = __webpack_require__(123);
/* unused harmony reexport flip */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__forEach__ = __webpack_require__(712);
/* unused harmony reexport forEach */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_71__forEachObjIndexed__ = __webpack_require__(713);
/* unused harmony reexport forEachObjIndexed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_72__fromPairs__ = __webpack_require__(714);
/* unused harmony reexport fromPairs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_73__groupBy__ = __webpack_require__(715);
/* unused harmony reexport groupBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_74__groupWith__ = __webpack_require__(716);
/* unused harmony reexport groupWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_75__gt__ = __webpack_require__(717);
/* unused harmony reexport gt */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_76__gte__ = __webpack_require__(718);
/* unused harmony reexport gte */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_77__has__ = __webpack_require__(719);
/* unused harmony reexport has */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_78__hasIn__ = __webpack_require__(720);
/* unused harmony reexport hasIn */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_79__head__ = __webpack_require__(721);
/* unused harmony reexport head */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_80__identical__ = __webpack_require__(294);
/* unused harmony reexport identical */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_81__identity__ = __webpack_require__(188);
/* unused harmony reexport identity */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_82__ifElse__ = __webpack_require__(722);
/* unused harmony reexport ifElse */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_83__inc__ = __webpack_require__(723);
/* unused harmony reexport inc */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_84__indexBy__ = __webpack_require__(724);
/* unused harmony reexport indexBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_85__indexOf__ = __webpack_require__(725);
/* unused harmony reexport indexOf */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_86__init__ = __webpack_require__(726);
/* unused harmony reexport init */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_87__innerJoin__ = __webpack_require__(727);
/* unused harmony reexport innerJoin */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_88__insert__ = __webpack_require__(728);
/* unused harmony reexport insert */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_89__insertAll__ = __webpack_require__(729);
/* unused harmony reexport insertAll */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_90__intersection__ = __webpack_require__(730);
/* unused harmony reexport intersection */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_91__intersperse__ = __webpack_require__(732);
/* unused harmony reexport intersperse */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_92__into__ = __webpack_require__(733);
/* unused harmony reexport into */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_93__invert__ = __webpack_require__(736);
/* unused harmony reexport invert */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_94__invertObj__ = __webpack_require__(737);
/* unused harmony reexport invertObj */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_95__invoker__ = __webpack_require__(90);
/* unused harmony reexport invoker */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_96__is__ = __webpack_require__(312);
/* unused harmony reexport is */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_97__isEmpty__ = __webpack_require__(738);
/* unused harmony reexport isEmpty */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_98__isNil__ = __webpack_require__(284);
/* unused harmony reexport isNil */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_99__join__ = __webpack_require__(739);
/* unused harmony reexport join */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_100__juxt__ = __webpack_require__(313);
/* unused harmony reexport juxt */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_101__keys__ = __webpack_require__(46);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_101__keys__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_102__keysIn__ = __webpack_require__(740);
/* unused harmony reexport keysIn */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_103__last__ = __webpack_require__(306);
/* unused harmony reexport last */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_104__lastIndexOf__ = __webpack_require__(741);
/* unused harmony reexport lastIndexOf */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_105__length__ = __webpack_require__(314);
/* unused harmony reexport length */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_106__lens__ = __webpack_require__(124);
/* unused harmony reexport lens */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_107__lensIndex__ = __webpack_require__(742);
/* unused harmony reexport lensIndex */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_108__lensPath__ = __webpack_require__(743);
/* unused harmony reexport lensPath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_109__lensProp__ = __webpack_require__(744);
/* unused harmony reexport lensProp */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_110__lift__ = __webpack_require__(118);
/* unused harmony reexport lift */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_111__liftN__ = __webpack_require__(285);
/* unused harmony reexport liftN */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_112__lt__ = __webpack_require__(745);
/* unused harmony reexport lt */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_113__lte__ = __webpack_require__(746);
/* unused harmony reexport lte */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_114__map__ = __webpack_require__(23);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_114__map__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_115__mapAccum__ = __webpack_require__(747);
/* unused harmony reexport mapAccum */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_116__mapAccumRight__ = __webpack_require__(748);
/* unused harmony reexport mapAccumRight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_117__mapObjIndexed__ = __webpack_require__(749);
/* unused harmony reexport mapObjIndexed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_118__match__ = __webpack_require__(750);
/* unused harmony reexport match */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_119__mathMod__ = __webpack_require__(751);
/* unused harmony reexport mathMod */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_120__max__ = __webpack_require__(76);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_120__max__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_121__maxBy__ = __webpack_require__(752);
/* unused harmony reexport maxBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_122__mean__ = __webpack_require__(316);
/* unused harmony reexport mean */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_123__median__ = __webpack_require__(753);
/* unused harmony reexport median */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_124__memoize__ = __webpack_require__(754);
/* unused harmony reexport memoize */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_125__memoizeWith__ = __webpack_require__(318);
/* unused harmony reexport memoizeWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_126__merge__ = __webpack_require__(755);
/* unused harmony reexport merge */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_127__mergeAll__ = __webpack_require__(756);
/* unused harmony reexport mergeAll */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_128__mergeDeepLeft__ = __webpack_require__(757);
/* unused harmony reexport mergeDeepLeft */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_129__mergeDeepRight__ = __webpack_require__(758);
/* unused harmony reexport mergeDeepRight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_130__mergeDeepWith__ = __webpack_require__(759);
/* unused harmony reexport mergeDeepWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_131__mergeDeepWithKey__ = __webpack_require__(125);
/* unused harmony reexport mergeDeepWithKey */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_132__mergeWith__ = __webpack_require__(760);
/* unused harmony reexport mergeWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_133__mergeWithKey__ = __webpack_require__(192);
/* unused harmony reexport mergeWithKey */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_134__min__ = __webpack_require__(761);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_134__min__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_135__minBy__ = __webpack_require__(762);
/* unused harmony reexport minBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_136__modulo__ = __webpack_require__(763);
/* unused harmony reexport modulo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_137__multiply__ = __webpack_require__(319);
/* unused harmony reexport multiply */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_138__nAry__ = __webpack_require__(116);
/* unused harmony reexport nAry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_139__negate__ = __webpack_require__(764);
/* unused harmony reexport negate */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_140__none__ = __webpack_require__(765);
/* unused harmony reexport none */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_141__not__ = __webpack_require__(289);
/* unused harmony reexport not */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_142__nth__ = __webpack_require__(89);
/* unused harmony reexport nth */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_143__nthArg__ = __webpack_require__(766);
/* unused harmony reexport nthArg */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_144__o__ = __webpack_require__(767);
/* unused harmony reexport o */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_145__objOf__ = __webpack_require__(311);
/* unused harmony reexport objOf */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_146__of__ = __webpack_require__(768);
/* unused harmony reexport of */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_147__omit__ = __webpack_require__(770);
/* unused harmony reexport omit */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_148__once__ = __webpack_require__(771);
/* unused harmony reexport once */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_149__or__ = __webpack_require__(307);
/* unused harmony reexport or */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_150__over__ = __webpack_require__(320);
/* unused harmony reexport over */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_151__pair__ = __webpack_require__(772);
/* unused harmony reexport pair */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_152__partial__ = __webpack_require__(773);
/* unused harmony reexport partial */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_153__partialRight__ = __webpack_require__(774);
/* unused harmony reexport partialRight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_154__partition__ = __webpack_require__(775);
/* unused harmony reexport partition */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_155__path__ = __webpack_require__(77);
/* unused harmony reexport path */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_156__pathEq__ = __webpack_require__(776);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_156__pathEq__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_157__pathOr__ = __webpack_require__(777);
/* unused harmony reexport pathOr */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_158__pathSatisfies__ = __webpack_require__(778);
/* unused harmony reexport pathSatisfies */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_159__pick__ = __webpack_require__(779);
/* unused harmony reexport pick */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_160__pickAll__ = __webpack_require__(322);
/* unused harmony reexport pickAll */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_161__pickBy__ = __webpack_require__(780);
/* unused harmony reexport pickBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_162__pipe__ = __webpack_require__(290);
/* unused harmony reexport pipe */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_163__pipeK__ = __webpack_require__(781);
/* unused harmony reexport pipeK */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_164__pipeP__ = __webpack_require__(292);
/* unused harmony reexport pipeP */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_165__pluck__ = __webpack_require__(85);
/* unused harmony reexport pluck */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_166__prepend__ = __webpack_require__(323);
/* unused harmony reexport prepend */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_167__product__ = __webpack_require__(782);
/* unused harmony reexport product */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_168__project__ = __webpack_require__(783);
/* unused harmony reexport project */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_169__prop__ = __webpack_require__(174);
/* unused harmony reexport prop */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_170__propEq__ = __webpack_require__(784);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_170__propEq__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_171__propIs__ = __webpack_require__(785);
/* unused harmony reexport propIs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_172__propOr__ = __webpack_require__(786);
/* unused harmony reexport propOr */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_173__propSatisfies__ = __webpack_require__(787);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_173__propSatisfies__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_174__props__ = __webpack_require__(788);
/* unused harmony reexport props */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_175__range__ = __webpack_require__(789);
/* unused harmony reexport range */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_176__reduce__ = __webpack_require__(47);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_176__reduce__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_177__reduceBy__ = __webpack_require__(122);
/* unused harmony reexport reduceBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_178__reduceRight__ = __webpack_require__(325);
/* unused harmony reexport reduceRight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_179__reduceWhile__ = __webpack_require__(790);
/* unused harmony reexport reduceWhile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_180__reduced__ = __webpack_require__(791);
/* unused harmony reexport reduced */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_181__reject__ = __webpack_require__(121);
/* unused harmony reexport reject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_182__remove__ = __webpack_require__(302);
/* unused harmony reexport remove */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_183__repeat__ = __webpack_require__(792);
/* unused harmony reexport repeat */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_184__replace__ = __webpack_require__(793);
/* unused harmony reexport replace */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_185__reverse__ = __webpack_require__(119);
/* unused harmony reexport reverse */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_186__scan__ = __webpack_require__(794);
/* unused harmony reexport scan */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_187__sequence__ = __webpack_require__(327);
/* unused harmony reexport sequence */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_188__set__ = __webpack_require__(795);
/* unused harmony reexport set */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_189__slice__ = __webpack_require__(36);
/* unused harmony reexport slice */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_190__sort__ = __webpack_require__(796);
/* unused harmony reexport sort */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_191__sortBy__ = __webpack_require__(797);
/* unused harmony reexport sortBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_192__sortWith__ = __webpack_require__(798);
/* unused harmony reexport sortWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_193__split__ = __webpack_require__(799);
/* unused harmony reexport split */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_194__splitAt__ = __webpack_require__(800);
/* unused harmony reexport splitAt */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_195__splitEvery__ = __webpack_require__(801);
/* unused harmony reexport splitEvery */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_196__splitWhen__ = __webpack_require__(802);
/* unused harmony reexport splitWhen */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_197__startsWith__ = __webpack_require__(803);
/* unused harmony reexport startsWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_198__subtract__ = __webpack_require__(804);
/* unused harmony reexport subtract */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_199__sum__ = __webpack_require__(317);
/* unused harmony reexport sum */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_200__symmetricDifference__ = __webpack_require__(805);
/* unused harmony reexport symmetricDifference */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_201__symmetricDifferenceWith__ = __webpack_require__(806);
/* unused harmony reexport symmetricDifferenceWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_202__tail__ = __webpack_require__(181);
/* unused harmony reexport tail */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_203__take__ = __webpack_require__(187);
/* unused harmony reexport take */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_204__takeLast__ = __webpack_require__(309);
/* unused harmony reexport takeLast */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_205__takeLastWhile__ = __webpack_require__(807);
/* unused harmony reexport takeLastWhile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_206__takeWhile__ = __webpack_require__(808);
/* unused harmony reexport takeWhile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_207__tap__ = __webpack_require__(810);
/* unused harmony reexport tap */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_208__test__ = __webpack_require__(812);
/* unused harmony reexport test */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_209__times__ = __webpack_require__(326);
/* unused harmony reexport times */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_210__toLower__ = __webpack_require__(814);
/* unused harmony reexport toLower */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_211__toPairs__ = __webpack_require__(815);
/* unused harmony reexport toPairs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_212__toPairsIn__ = __webpack_require__(816);
/* unused harmony reexport toPairsIn */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_213__toString__ = __webpack_require__(88);
/* unused harmony reexport toString */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_214__toUpper__ = __webpack_require__(817);
/* unused harmony reexport toUpper */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_215__transduce__ = __webpack_require__(818);
/* unused harmony reexport transduce */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_216__transpose__ = __webpack_require__(819);
/* unused harmony reexport transpose */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_217__traverse__ = __webpack_require__(820);
/* unused harmony reexport traverse */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_218__trim__ = __webpack_require__(821);
/* unused harmony reexport trim */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_219__tryCatch__ = __webpack_require__(822);
/* unused harmony reexport tryCatch */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_220__type__ = __webpack_require__(179);
/* unused harmony reexport type */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_221__unapply__ = __webpack_require__(823);
/* unused harmony reexport unapply */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_222__unary__ = __webpack_require__(824);
/* unused harmony reexport unary */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_223__uncurryN__ = __webpack_require__(825);
/* unused harmony reexport uncurryN */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_224__unfold__ = __webpack_require__(826);
/* unused harmony reexport unfold */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_225__union__ = __webpack_require__(827);
/* unused harmony reexport union */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_226__unionWith__ = __webpack_require__(828);
/* unused harmony reexport unionWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_227__uniq__ = __webpack_require__(190);
/* unused harmony reexport uniq */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_228__uniqBy__ = __webpack_require__(310);
/* unused harmony reexport uniqBy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_229__uniqWith__ = __webpack_require__(328);
/* unused harmony reexport uniqWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_230__unless__ = __webpack_require__(829);
/* unused harmony reexport unless */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_231__unnest__ = __webpack_require__(830);
/* unused harmony reexport unnest */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_232__until__ = __webpack_require__(831);
/* unused harmony reexport until */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_233__update__ = __webpack_require__(186);
/* unused harmony reexport update */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_234__useWith__ = __webpack_require__(324);
/* unused harmony reexport useWith */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_235__values__ = __webpack_require__(282);
/* unused harmony reexport values */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_236__valuesIn__ = __webpack_require__(832);
/* unused harmony reexport valuesIn */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_237__view__ = __webpack_require__(833);
/* unused harmony reexport view */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_238__when__ = __webpack_require__(834);
/* unused harmony reexport when */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_239__where__ = __webpack_require__(329);
/* unused harmony reexport where */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_240__whereEq__ = __webpack_require__(835);
/* unused harmony reexport whereEq */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_241__without__ = __webpack_require__(836);
/* unused harmony reexport without */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_242__xprod__ = __webpack_require__(837);
/* unused harmony reexport xprod */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_243__zip__ = __webpack_require__(838);
/* unused harmony reexport zip */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_244__zipObj__ = __webpack_require__(839);
/* unused harmony reexport zipObj */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_245__zipWith__ = __webpack_require__(840);
/* unused harmony reexport zipWith */























































































































































































































































/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _isPlaceholder;
function _isPlaceholder(a) {
       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
}

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Adds two values.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a
 * @param {Number} b
 * @return {Number}
 * @see R.subtract
 * @example
 *
 *      R.add(2, 3);       //=>  5
 *      R.add(7)(10);      //=> 17
 */
var add = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function add(a, b) {
  return Number(a) + Number(b);
});
/* harmony default export */ __webpack_exports__["a"] = (add);

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _curryN;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__isPlaceholder__ = __webpack_require__(110);



/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curryN(length, received, fn) {
  return function () {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length && (!Object(__WEBPACK_IMPORTED_MODULE_1__isPlaceholder__["a" /* default */])(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!Object(__WEBPACK_IMPORTED_MODULE_1__isPlaceholder__["a" /* default */])(result)) {
        left -= 1;
      }
      combinedIdx += 1;
    }
    return left <= 0 ? fn.apply(this, combined) : Object(__WEBPACK_IMPORTED_MODULE_0__arity__["a" /* default */])(left, _curryN(length, combined, fn));
  };
}

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _map;
function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);
  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }
  return result;
}

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__isArray__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__isString__ = __webpack_require__(86);




/**
 * Tests whether or not an object is similar to an array.
 *
 * @private
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @example
 *
 *      _isArrayLike([]); //=> true
 *      _isArrayLike(true); //=> false
 *      _isArrayLike({}); //=> false
 *      _isArrayLike({length: 10}); //=> false
 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */
var _isArrayLike = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry1__["a" /* default */])(function isArrayLike(x) {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__isArray__["a" /* default */])(x)) {
    return true;
  }
  if (!x) {
    return false;
  }
  if (typeof x !== 'object') {
    return false;
  }
  if (Object(__WEBPACK_IMPORTED_MODULE_2__isString__["a" /* default */])(x)) {
    return false;
  }
  if (x.nodeType === 1) {
    return !!x.length;
  }
  if (x.length === 0) {
    return true;
  }
  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }
  return false;
});
/* harmony default export */ __webpack_exports__["a"] = (_isArrayLike);

/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Makes a shallow clone of an object, setting or overriding the specified
 * property with the given value. Note that this copies and flattens prototype
 * properties onto the new object as well. All non-primitive properties are
 * copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig String -> a -> {k: v} -> {k: v}
 * @param {String} prop The property name to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except for the changed property.
 * @see R.dissoc
 * @example
 *
 *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
 */
var assoc = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function assoc(prop, val, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  result[prop] = val;
  return result;
});
/* harmony default export */ __webpack_exports__["a"] = (assoc);

/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly `n` parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} n The desired arity of the new function.
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity `n`.
 * @see R.binary, R.unary
 * @example
 *
 *      var takesTwoArgs = (a, b) => [a, b];
 *
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.nAry(1, takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only `n` arguments are passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.nAry(0, f)(a, b) = f()
 * @symb R.nAry(1, f)(a, b) = f(a)
 * @symb R.nAry(2, f)(a, b) = f(a, b)
 */
var nAry = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function nAry(n, fn) {
  switch (n) {
    case 0:
      return function () {
        return fn.call(this);
      };
    case 1:
      return function (a0) {
        return fn.call(this, a0);
      };
    case 2:
      return function (a0, a1) {
        return fn.call(this, a0, a1);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.call(this, a0, a1, a2);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.call(this, a0, a1, a2, a3);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.call(this, a0, a1, a2, a3, a4);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.call(this, a0, a1, a2, a3, a4, a5);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      };
    default:
      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
  }
});
/* harmony default export */ __webpack_exports__["a"] = (nAry);

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _isFunction;
function _isFunction(x) {
  return Object.prototype.toString.call(x) === '[object Function]';
}

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__liftN__ = __webpack_require__(285);



/**
 * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.liftN
 * @example
 *
 *      var madd3 = R.lift((a, b, c) => a + b + c);
 *
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 *
 *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
 *
 *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
 */
var lift = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function lift(fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__liftN__["a" /* default */])(fn.length, fn);
});
/* harmony default export */ __webpack_exports__["a"] = (lift);

/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isString__ = __webpack_require__(86);



/**
 * Returns a new list or string with the elements or characters in reverse
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {Array|String} list
 * @return {Array|String}
 * @example
 *
 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
 *      R.reverse([1, 2]);     //=> [2, 1]
 *      R.reverse([1]);        //=> [1]
 *      R.reverse([]);         //=> []
 *
 *      R.reverse('abc');      //=> 'cba'
 *      R.reverse('ab');       //=> 'ba'
 *      R.reverse('a');        //=> 'a'
 *      R.reverse('');         //=> ''
 */
var reverse = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function reverse(list) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_isString__["a" /* default */])(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
});
/* harmony default export */ __webpack_exports__["a"] = (reverse);

/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _containsWith;
function _containsWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}

/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_complement__ = __webpack_require__(295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__filter__ = __webpack_require__(183);




/**
 * The complement of [`filter`](#filter).
 *
 * Acts as a transducer if a transformer is given in list position. Filterable
 * objects include plain objects or any object that has a filter method such
 * as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.filter, R.transduce, R.addIndex
 * @example
 *
 *      var isOdd = (n) => n % 2 === 1;
 *
 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
var reject = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function reject(pred, filterable) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__filter__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_0__internal_complement__["a" /* default */])(pred), filterable);
});
/* harmony default export */ __webpack_exports__["a"] = (reject);

/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curryN__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_has__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_xreduceBy__ = __webpack_require__(682);






/**
 * Groups the elements of the list according to the result of calling
 * the String-returning function `keyFn` on each element and reduces the elements
 * of each group to a single value via the reducer function `valueFn`.
 *
 * This function is basically a more general [`groupBy`](#groupBy) function.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category List
 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
 * @param {Function} valueFn The function that reduces the elements of each group to a single
 *        value. Receives two values, accumulator for a particular group and the current element.
 * @param {*} acc The (initial) accumulator value for each group.
 * @param {Function} keyFn The function that maps the list's element into a key.
 * @param {Array} list The array to group.
 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
 *         `valueFn` for elements which produced that key when passed to `keyFn`.
 * @see R.groupBy, R.reduce
 * @example
 *
 *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
 *      var namesByGrade = reduceToNamesBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Lucy', score: 92},
 *                      {name: 'Drew', score: 85},
 *                      // ...
 *                      {name: 'Bart', score: 62}];
 *      namesByGrade(students);
 *      // {
 *      //   'A': ['Lucy'],
 *      //   'B': ['Drew']
 *      //   // ...,
 *      //   'F': ['Bart']
 *      // }
 */
var reduceBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curryN__["a" /* default */])(4, [], /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_4__internal_xreduceBy__["a" /* default */], function reduceBy(valueFn, valueAcc, keyFn, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_3__internal_reduce__["a" /* default */])(function (acc, elt) {
    var key = keyFn(elt);
    acc[key] = valueFn(Object(__WEBPACK_IMPORTED_MODULE_2__internal_has__["a" /* default */])(key, acc) ? acc[key] : valueAcc, elt);
    return acc;
  }, {}, list);
}));
/* harmony default export */ __webpack_exports__["a"] = (reduceBy);

/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);



/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      var mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */
var flip = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function flip(fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(fn.length, function (a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});
/* harmony default export */ __webpack_exports__["a"] = (flip);

/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__map__ = __webpack_require__(23);



/**
 * Returns a lens for the given getter and setter functions. The getter "gets"
 * the value of the focus; the setter "sets" the value of the focus. The setter
 * should not mutate the data structure.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
 * @param {Function} getter
 * @param {Function} setter
 * @return {Lens}
 * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lens(R.prop('x'), R.assoc('x'));
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
var lens = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function lens(getter, setter) {
  return function (toFunctorFn) {
    return function (target) {
      return Object(__WEBPACK_IMPORTED_MODULE_1__map__["a" /* default */])(function (focus) {
        return setter(focus, target);
      }, toFunctorFn(getter(target)));
    };
  };
});
/* harmony default export */ __webpack_exports__["a"] = (lens);

/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isObject__ = __webpack_require__(185);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mergeWithKey__ = __webpack_require__(192);




/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to the key and associated values
 *   using the resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeDeepWithKey(concatValues,
 *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
 *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
 *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
 */
var mergeDeepWithKey = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function mergeDeepWithKey(fn, lObj, rObj) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__mergeWithKey__["a" /* default */])(function (k, lVal, rVal) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_isObject__["a" /* default */])(lVal) && Object(__WEBPACK_IMPORTED_MODULE_1__internal_isObject__["a" /* default */])(rVal)) {
      return mergeDeepWithKey(fn, lVal, rVal);
    } else {
      return fn(k, lVal, rVal);
    }
  }, lObj, rObj);
});
/* harmony default export */ __webpack_exports__["a"] = (mergeDeepWithKey);

/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return a = +a, b -= a, function(t) {
    return a + b * t;
  };
});


/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = tweenValue;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(37);


function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
});

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(node, id).value[name];
  };
}


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
var document = __webpack_require__(6).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);
var core = __webpack_require__(38);
var LIBRARY = __webpack_require__(58);
var wksExt = __webpack_require__(205);
var defineProperty = __webpack_require__(11).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(92)('keys');
var uid = __webpack_require__(57);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 131 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(6).document;
module.exports = document && document.documentElement;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(8);
var anObject = __webpack_require__(5);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(31)(Function.call, __webpack_require__(25).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
var setPrototypeOf = __webpack_require__(133).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(41);
var defined = __webpack_require__(40);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 137 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 138 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(41);
var defined = __webpack_require__(40);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(58);
var $export = __webpack_require__(1);
var redefine = __webpack_require__(21);
var hide = __webpack_require__(20);
var has = __webpack_require__(19);
var Iterators = __webpack_require__(71);
var $iterCreate = __webpack_require__(141);
var setToStringTag = __webpack_require__(69);
var getPrototypeOf = __webpack_require__(26);
var ITERATOR = __webpack_require__(9)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(61);
var descriptor = __webpack_require__(56);
var setToStringTag = __webpack_require__(69);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(20)(IteratorPrototype, __webpack_require__(9)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(96);
var defined = __webpack_require__(40);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(9)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(71);
var ITERATOR = __webpack_require__(9)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(11);
var createDesc = __webpack_require__(56);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(81);
var ITERATOR = __webpack_require__(9)('iterator');
var Iterators = __webpack_require__(71);
module.exports = __webpack_require__(38).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(445);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(15);
var toAbsoluteIndex = __webpack_require__(60);
var toLength = __webpack_require__(12);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(51);
var step = __webpack_require__(221);
var Iterators = __webpack_require__(71);
var toIObject = __webpack_require__(24);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(140)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(31);
var invoke = __webpack_require__(211);
var html = __webpack_require__(132);
var cel = __webpack_require__(128);
var global = __webpack_require__(6);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(32)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);
var macrotask = __webpack_require__(150).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(32)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if (Observer) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(17);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(6);
var DESCRIPTORS = __webpack_require__(10);
var LIBRARY = __webpack_require__(58);
var $typed = __webpack_require__(102);
var hide = __webpack_require__(20);
var redefineAll = __webpack_require__(66);
var fails = __webpack_require__(7);
var anInstance = __webpack_require__(64);
var toInteger = __webpack_require__(41);
var toLength = __webpack_require__(12);
var toIndex = __webpack_require__(230);
var gOPN = __webpack_require__(62).f;
var dP = __webpack_require__(11).f;
var arrayFill = __webpack_require__(148);
var setToStringTag = __webpack_require__(69);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_area__ = __webpack_require__(238);
/* unused harmony reexport geoArea */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_bounds__ = __webpack_require__(558);
/* unused harmony reexport geoBounds */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_centroid__ = __webpack_require__(559);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__src_centroid__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_circle__ = __webpack_require__(239);
/* unused harmony reexport geoCircle */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_clip_antimeridian__ = __webpack_require__(241);
/* unused harmony reexport geoClipAntimeridian */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_clip_circle__ = __webpack_require__(259);
/* unused harmony reexport geoClipCircle */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_clip_extent__ = __webpack_require__(577);
/* unused harmony reexport geoClipExtent */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_clip_rectangle__ = __webpack_require__(107);
/* unused harmony reexport geoClipRectangle */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_contains__ = __webpack_require__(579);
/* unused harmony reexport geoContains */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_distance__ = __webpack_require__(260);
/* unused harmony reexport geoDistance */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_graticule__ = __webpack_require__(580);
/* unused harmony reexport geoGraticule */
/* unused harmony reexport geoGraticule10 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_interpolate__ = __webpack_require__(581);
/* unused harmony reexport geoInterpolate */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_length__ = __webpack_require__(261);
/* unused harmony reexport geoLength */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_path_index__ = __webpack_require__(582);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_13__src_path_index__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_projection_albers__ = __webpack_require__(263);
/* unused harmony reexport geoAlbers */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_projection_albersUsa__ = __webpack_require__(590);
/* unused harmony reexport geoAlbersUsa */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_projection_azimuthalEqualArea__ = __webpack_require__(591);
/* unused harmony reexport geoAzimuthalEqualArea */
/* unused harmony reexport geoAzimuthalEqualAreaRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_projection_azimuthalEquidistant__ = __webpack_require__(592);
/* unused harmony reexport geoAzimuthalEquidistant */
/* unused harmony reexport geoAzimuthalEquidistantRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__src_projection_conicConformal__ = __webpack_require__(593);
/* unused harmony reexport geoConicConformal */
/* unused harmony reexport geoConicConformalRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__src_projection_conicEqualArea__ = __webpack_require__(158);
/* unused harmony reexport geoConicEqualArea */
/* unused harmony reexport geoConicEqualAreaRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__src_projection_conicEquidistant__ = __webpack_require__(594);
/* unused harmony reexport geoConicEquidistant */
/* unused harmony reexport geoConicEquidistantRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__src_projection_equirectangular__ = __webpack_require__(264);
/* unused harmony reexport geoEquirectangular */
/* unused harmony reexport geoEquirectangularRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__src_projection_gnomonic__ = __webpack_require__(595);
/* unused harmony reexport geoGnomonic */
/* unused harmony reexport geoGnomonicRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__src_projection_identity__ = __webpack_require__(596);
/* unused harmony reexport geoIdentity */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__src_projection_index__ = __webpack_require__(44);
/* unused harmony reexport geoProjection */
/* unused harmony reexport geoProjectionMutator */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__src_projection_mercator__ = __webpack_require__(161);
/* unused harmony reexport geoMercator */
/* unused harmony reexport geoMercatorRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__src_projection_naturalEarth1__ = __webpack_require__(597);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_26__src_projection_naturalEarth1__["a"]; });
/* unused harmony reexport geoNaturalEarth1Raw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__src_projection_orthographic__ = __webpack_require__(598);
/* unused harmony reexport geoOrthographic */
/* unused harmony reexport geoOrthographicRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__src_projection_stereographic__ = __webpack_require__(599);
/* unused harmony reexport geoStereographic */
/* unused harmony reexport geoStereographicRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__src_projection_transverseMercator__ = __webpack_require__(600);
/* unused harmony reexport geoTransverseMercator */
/* unused harmony reexport geoTransverseMercatorRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__src_rotation__ = __webpack_require__(106);
/* unused harmony reexport geoRotation */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__src_stream__ = __webpack_require__(67);
/* unused harmony reexport geoStream */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__src_transform__ = __webpack_require__(108);
/* unused harmony reexport geoTransform */






 // DEPRECATED! Use d3.geoIdentity().clipExtent(…).




























/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_bisect__ = __webpack_require__(247);
/* unused harmony reexport bisect */
/* unused harmony reexport bisectRight */
/* unused harmony reexport bisectLeft */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_ascending__ = __webpack_require__(74);
/* unused harmony reexport ascending */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_bisector__ = __webpack_require__(248);
/* unused harmony reexport bisector */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_cross__ = __webpack_require__(561);
/* unused harmony reexport cross */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_descending__ = __webpack_require__(562);
/* unused harmony reexport descending */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_deviation__ = __webpack_require__(250);
/* unused harmony reexport deviation */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_extent__ = __webpack_require__(252);
/* unused harmony reexport extent */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_histogram__ = __webpack_require__(563);
/* unused harmony reexport histogram */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_threshold_freedmanDiaconis__ = __webpack_require__(566);
/* unused harmony reexport thresholdFreedmanDiaconis */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_threshold_scott__ = __webpack_require__(567);
/* unused harmony reexport thresholdScott */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_threshold_sturges__ = __webpack_require__(256);
/* unused harmony reexport thresholdSturges */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_max__ = __webpack_require__(568);
/* unused harmony reexport max */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_mean__ = __webpack_require__(569);
/* unused harmony reexport mean */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_median__ = __webpack_require__(570);
/* unused harmony reexport median */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_merge__ = __webpack_require__(571);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_14__src_merge__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_min__ = __webpack_require__(257);
/* unused harmony reexport min */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_pairs__ = __webpack_require__(249);
/* unused harmony reexport pairs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_permute__ = __webpack_require__(572);
/* unused harmony reexport permute */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__src_quantile__ = __webpack_require__(156);
/* unused harmony reexport quantile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__src_range__ = __webpack_require__(254);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_19__src_range__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__src_scan__ = __webpack_require__(573);
/* unused harmony reexport scan */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__src_shuffle__ = __webpack_require__(574);
/* unused harmony reexport shuffle */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__src_sum__ = __webpack_require__(575);
/* unused harmony reexport sum */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__src_ticks__ = __webpack_require__(255);
/* unused harmony reexport ticks */
/* unused harmony reexport tickIncrement */
/* unused harmony reexport tickStep */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__src_transpose__ = __webpack_require__(258);
/* unused harmony reexport transpose */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__src_variance__ = __webpack_require__(251);
/* unused harmony reexport variance */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__src_zip__ = __webpack_require__(576);
/* unused harmony reexport zip */





























/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(83);


/* harmony default export */ __webpack_exports__["a"] = (function(values, p, valueof) {
  if (valueof == null) valueof = __WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */];
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
});


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export conicEqualAreaRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__conic__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cylindricalEqualArea__ = __webpack_require__(589);




function conicEqualAreaRaw(y0, y1) {
  var sy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0), n = (sy0 + Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y1)) / 2;

  // Are the parallels symmetrical around the Equator?
  if (Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(n) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) return Object(__WEBPACK_IMPORTED_MODULE_2__cylindricalEqualArea__["a" /* cylindricalEqualAreaRaw */])(y0);

  var c = 1 + sy0 * (2 * n - sy0), r0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(c) / n;

  function project(x, y) {
    var r = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(c - 2 * n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y)) / n;
    return [r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x *= n), r0 - r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x)];
  }

  project.invert = function(x, y) {
    var r0y = r0 - y;
    return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x, Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(r0y)) / n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(r0y), Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_1__conic__["a" /* conicProjection */])(conicEqualAreaRaw)
      .scale(155.424)
      .center([0, 33.6442]);
});


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = conicProjection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(44);



function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = __WEBPACK_IMPORTED_MODULE_0__math__["o" /* pi */] / 3,
      m = Object(__WEBPACK_IMPORTED_MODULE_1__index__["b" /* projectionMutator */])(projectAt),
      p = m(phi0, phi1);

  p.parallels = function(_) {
    return arguments.length ? m(phi0 = _[0] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi1 = _[1] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */]) : [phi0 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */], phi1 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]];
  };

  return p;
}


/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fitExtent;
/* harmony export (immutable) */ __webpack_exports__["c"] = fitSize;
/* harmony export (immutable) */ __webpack_exports__["d"] = fitWidth;
/* harmony export (immutable) */ __webpack_exports__["b"] = fitHeight;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__stream__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__path_bounds__ = __webpack_require__(262);



function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  Object(__WEBPACK_IMPORTED_MODULE_0__stream__["a" /* default */])(object, projection.stream(__WEBPACK_IMPORTED_MODULE_1__path_bounds__["a" /* default */]));
  fitBounds(__WEBPACK_IMPORTED_MODULE_1__path_bounds__["a" /* default */].result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function(b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function(b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function(b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = mercatorRaw;
/* harmony export (immutable) */ __webpack_exports__["a"] = mercatorProjection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rotation__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(44);




function mercatorRaw(lambda, phi) {
  return [lambda, Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["v" /* tan */])((__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + phi) / 2))];
}

mercatorRaw.invert = function(x, y) {
  return [x, 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["k" /* exp */])(y)) - __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */]];
};

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return mercatorProjection(mercatorRaw)
      .scale(961 / __WEBPACK_IMPORTED_MODULE_0__math__["w" /* tau */]);
});

function mercatorProjection(project) {
  var m = Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null, y0, x1, y1; // clip extent

  m.scale = function(_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function(_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function(_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function(_) {
    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = __WEBPACK_IMPORTED_MODULE_0__math__["o" /* pi */] * scale(),
        t = m(Object(__WEBPACK_IMPORTED_MODULE_1__rotation__["a" /* default */])(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null
        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__identity__ = __webpack_require__(266);


/* harmony default export */ __webpack_exports__["a"] = (function(transform) {
  if (transform == null) return __WEBPACK_IMPORTED_MODULE_0__identity__["a" /* default */];
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2, n = input.length, output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;
    while (j < n) output[j] = input[j], ++j;
    return output;
  };
});


/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export feature */
/* harmony export (immutable) */ __webpack_exports__["b"] = object;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__reverse__ = __webpack_require__(602);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transform__ = __webpack_require__(162);



/* harmony default export */ __webpack_exports__["a"] = (function(topology, o) {
  return o.type === "GeometryCollection"
      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature(topology, o); })}
      : feature(topology, o);
});

function feature(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
}

function object(topology, o) {
  var transformPoint = Object(__WEBPACK_IMPORTED_MODULE_1__transform__["a" /* default */])(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();
    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }
    if (i < 0) Object(__WEBPACK_IMPORTED_MODULE_0__reverse__["a" /* default */])(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];
    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
    return points;
  }

  function ring(arcs) {
    var points = line(arcs);
    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type, coordinates;
    switch (type) {
      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
      case "Point": coordinates = point(o.coordinates); break;
      case "MultiPoint": coordinates = o.coordinates.map(point); break;
      case "LineString": coordinates = line(o.arcs); break;
      case "MultiLineString": coordinates = o.arcs.map(line); break;
      case "Polygon": coordinates = polygon(o.arcs); break;
      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
      default: return null;
    }
    return {type: type, coordinates: coordinates};
  }

  return geometry(o);
}


/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return config; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return projection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return path; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return svg; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_geo__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(27);



var config = {
    width: 1200,
    height: 600,
    scalars: {
        scale: 5.333,
        width: 2.25,
        height: 1.75
    }
};

var projection = Object(__WEBPACK_IMPORTED_MODULE_0_d3_geo__["b" /* geoNaturalEarth1 */])().scale(config.width / config.scalars.scale).translate([config.width / config.scalars.width, config.height / config.scalars.height]);
var path = Object(__WEBPACK_IMPORTED_MODULE_0_d3_geo__["c" /* geoPath */])().pointRadius(2).projection(projection);
var svg = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["c" /* select */])('#map').append('svg').attr('width', config.width).attr('height', config.height);

/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__namespaces__ = __webpack_require__(167);



function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */] && document.documentElement.namespaceURI === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */]
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
});


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespaces__ = __webpack_require__(167);


/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */].hasOwnProperty(prefix) ? {space: __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */][prefix], local: name} : name;
});


/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return xhtml; });
var xhtml = "http://www.w3.org/1999/xhtml";

/* harmony default export */ __webpack_exports__["a"] = ({
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
});


/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_on__ = __webpack_require__(169);


/* harmony default export */ __webpack_exports__["a"] = (function() {
  var current = __WEBPACK_IMPORTED_MODULE_0__selection_on__["b" /* event */], source;
  while (source = current.sourceEvent) current = source;
  return current;
});


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return event; });
/* unused harmony export customEvent */
var filterEvents = {};

var event = null;

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).
    event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(typename, value, capture) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
});

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    event = event0;
  }
}


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
});


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function none() {}

/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
});


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
});


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _isTransformer;
function _isTransformer(obj) {
  return typeof obj['@@transducer/step'] === 'function';
}

/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__path__ = __webpack_require__(77);



/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig s -> {s: a} -> a | Undefined
 * @param {String} p The property name
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 */

var prop = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function prop(p, obj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__path__["a" /* default */])([p], obj);
});
/* harmony default export */ __webpack_exports__["a"] = (prop);

/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map__ = __webpack_require__(23);





/**
 * ap applies a list of functions to a list of values.
 *
 * Dispatches to the `ap` method of the second argument, if present. Also
 * treats curried functions as applicatives.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig [a -> b] -> [a] -> [b]
 * @sig Apply f => f (a -> b) -> f a -> f b
 * @sig (a -> b -> c) -> (a -> b) -> (a -> c)
 * @param {*} applyF
 * @param {*} applyX
 * @return {*}
 * @example
 *
 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
 *
 *      // R.ap can also be used as S combinator
 *      // when only two functions are passed
 *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
 */
var ap = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function ap(applyF, applyX) {
  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
    return applyF(x)(applyX(x));
  } :
  // else
  Object(__WEBPACK_IMPORTED_MODULE_2__internal_reduce__["a" /* default */])(function (acc, f) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */])(acc, Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* default */])(f, applyX));
  }, [], applyF);
});
/* harmony default export */ __webpack_exports__["a"] = (ap);

/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
/* harmony default export */ __webpack_exports__["a"] = (Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
});

/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);



/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN
 * @example
 *
 *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      var curriedAddFourNumbers = R.curry(addFourNumbers);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
var curry = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function curry(fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(fn.length, fn);
});
/* harmony default export */ __webpack_exports__["a"] = (curry);

/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_makeFlat__ = __webpack_require__(286);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_xchain__ = __webpack_require__(661);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__map__ = __webpack_require__(23);






/**
 * `chain` maps a function over a list and concatenates the results. `chain`
 * is also known as `flatMap` in some libraries
 *
 * Dispatches to the `chain` method of the second argument, if present,
 * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain m => (a -> m b) -> m a -> m b
 * @param {Function} fn The function to map with
 * @param {Array} list The list to map over
 * @return {Array} The result of flat-mapping `list` with `fn`
 * @example
 *
 *      var duplicate = n => [n, n];
 *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
 *
 *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
 */
var chain = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['fantasy-land/chain', 'chain'], __WEBPACK_IMPORTED_MODULE_3__internal_xchain__["a" /* default */], function chain(fn, monad) {
  if (typeof monad === 'function') {
    return function (x) {
      return fn(monad(x))(x);
    };
  }
  return Object(__WEBPACK_IMPORTED_MODULE_2__internal_makeFlat__["a" /* default */])(false)(Object(__WEBPACK_IMPORTED_MODULE_4__map__["a" /* default */])(fn, monad));
}));
/* harmony default export */ __webpack_exports__["a"] = (chain);

/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 *      R.type(() => {}); //=> "Function"
 *      R.type(undefined); //=> "Undefined"
 */
var type = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function type(val) {
  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
});
/* harmony default export */ __webpack_exports__["a"] = (type);

/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = compose;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pipe__ = __webpack_require__(290);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reverse__ = __webpack_require__(119);



/**
 * Performs right-to-left function composition. The rightmost function may have
 * any arity; the remaining functions must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipe
 * @example
 *
 *      var classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
 *      var yellGreeting = R.compose(R.toUpper, classyGreeting);
 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
 *
 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
 */
function compose() {
  if (arguments.length === 0) {
    throw new Error('compose requires at least one argument');
  }
  return __WEBPACK_IMPORTED_MODULE_0__pipe__["a" /* default */].apply(this, Object(__WEBPACK_IMPORTED_MODULE_1__reverse__["a" /* default */])(arguments));
}

/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__slice__ = __webpack_require__(36);




/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */
var tail = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry1__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__["a" /* default */])('tail', /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__slice__["a" /* default */])(1, Infinity)));
/* harmony default export */ __webpack_exports__["a"] = (tail);

/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isArray__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_isFunction__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_isString__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__toString__ = __webpack_require__(88);






/**
 * Returns the result of concatenating the given lists or strings.
 *
 * Note: `R.concat` expects both arguments to be of the same type,
 * unlike the native `Array.prototype.concat` method. It will throw
 * an error if you `concat` an Array with a non-Array value.
 *
 * Dispatches to the `concat` method of the first argument, if present.
 * Can also concatenate two members of a [fantasy-land
 * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @sig String -> String -> String
 * @param {Array|String} firstList The first list
 * @param {Array|String} secondList The second list
 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
 * `secondList`.
 *
 * @example
 *
 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 *      R.concat([], []); //=> []
 */
var concat = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function concat(a, b) {
  if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_isArray__["a" /* default */])(a)) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_isArray__["a" /* default */])(b)) {
      return a.concat(b);
    }
    throw new TypeError(Object(__WEBPACK_IMPORTED_MODULE_4__toString__["a" /* default */])(b) + ' is not an array');
  }
  if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_isString__["a" /* default */])(a)) {
    if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_isString__["a" /* default */])(b)) {
      return a + b;
    }
    throw new TypeError(Object(__WEBPACK_IMPORTED_MODULE_4__toString__["a" /* default */])(b) + ' is not a string');
  }
  if (a != null && Object(__WEBPACK_IMPORTED_MODULE_2__internal_isFunction__["a" /* default */])(a['fantasy-land/concat'])) {
    return a['fantasy-land/concat'](b);
  }
  if (a != null && Object(__WEBPACK_IMPORTED_MODULE_2__internal_isFunction__["a" /* default */])(a.concat)) {
    return a.concat(b);
  }
  throw new TypeError(Object(__WEBPACK_IMPORTED_MODULE_4__toString__["a" /* default */])(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
});
/* harmony default export */ __webpack_exports__["a"] = (concat);

/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_filter__ = __webpack_require__(184);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_isObject__ = __webpack_require__(185);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_xfilter__ = __webpack_require__(677);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__keys__ = __webpack_require__(46);








/**
 * Takes a predicate and a `Filterable`, and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array} Filterable
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
var filter = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['filter'], __WEBPACK_IMPORTED_MODULE_5__internal_xfilter__["a" /* default */], function (pred, filterable) {
  return Object(__WEBPACK_IMPORTED_MODULE_3__internal_isObject__["a" /* default */])(filterable) ? Object(__WEBPACK_IMPORTED_MODULE_4__internal_reduce__["a" /* default */])(function (acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }
    return acc;
  }, {}, Object(__WEBPACK_IMPORTED_MODULE_6__keys__["a" /* default */])(filterable)) :
  // else
  Object(__WEBPACK_IMPORTED_MODULE_2__internal_filter__["a" /* default */])(pred, filterable);
}));
/* harmony default export */ __webpack_exports__["a"] = (filter);

/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _filter;
function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
}

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _isObject;
function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
}

/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__adjust__ = __webpack_require__(274);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__always__ = __webpack_require__(75);




/**
 * Returns a new copy of the array with the element at the provided index
 * replaced with the given value.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} idx The index to update.
 * @param {*} x The value to exist at the given index of the returned array.
 * @param {Array|Arguments} list The source array-like object to be updated.
 * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
 * @see R.adjust
 * @example
 *
 *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]
 *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]
 * @symb R.update(-1, a, [b, c]) = [b, a]
 * @symb R.update(0, a, [b, c]) = [a, c]
 * @symb R.update(1, a, [b, c]) = [b, a]
 */
var update = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function update(idx, x, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__adjust__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__always__["a" /* default */])(x), idx, list);
});
/* harmony default export */ __webpack_exports__["a"] = (update);

/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xtake__ = __webpack_require__(690);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__slice__ = __webpack_require__(36);





/**
 * Returns the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `take` method).
 *
 * Dispatches to the `take` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*}
 * @see R.drop
 * @example
 *
 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(3, 'ramda');               //=> 'ram'
 *
 *      var personnel = [
 *        'Dave Brubeck',
 *        'Paul Desmond',
 *        'Eugene Wright',
 *        'Joe Morello',
 *        'Gerry Mulligan',
 *        'Bob Bates',
 *        'Joe Dodge',
 *        'Ron Crotty'
 *      ];
 *
 *      var takeFive = R.take(5);
 *      takeFive(personnel);
 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
 * @symb R.take(-1, [a, b]) = [a, b]
 * @symb R.take(0, [a, b]) = []
 * @symb R.take(1, [a, b]) = [a]
 * @symb R.take(2, [a, b]) = [a, b]
 */
var take = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['take'], __WEBPACK_IMPORTED_MODULE_2__internal_xtake__["a" /* default */], function take(n, xs) {
  return Object(__WEBPACK_IMPORTED_MODULE_3__slice__["a" /* default */])(0, n < 0 ? Infinity : n, xs);
}));
/* harmony default export */ __webpack_exports__["a"] = (take);

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_identity__ = __webpack_require__(189);



/**
 * A function that does nothing but return the parameter supplied to it. Good
 * as a default or placeholder function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> a
 * @param {*} x The value to return.
 * @return {*} The input value, `x`.
 * @example
 *
 *      R.identity(1); //=> 1
 *
 *      var obj = {};
 *      R.identity(obj) === obj; //=> true
 * @symb R.identity(a) = a
 */
var identity = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__internal_identity__["a" /* default */]);
/* harmony default export */ __webpack_exports__["a"] = (identity);

/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _identity;
function _identity(x) {
  return x;
}

/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__identity__ = __webpack_require__(188);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__uniqBy__ = __webpack_require__(310);



/**
 * Returns a new list containing only one copy of each element in the original
 * list. [`R.equals`](#equals) is used to determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
 *      R.uniq([1, '1']);     //=> [1, '1']
 *      R.uniq([[42], [42]]); //=> [[42]]
 */
var uniq = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__uniqBy__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__identity__["a" /* default */]);
/* harmony default export */ __webpack_exports__["a"] = (uniq);

/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__objectAssign__ = __webpack_require__(735);


/* harmony default export */ __webpack_exports__["a"] = (typeof Object.assign === 'function' ? Object.assign : __WEBPACK_IMPORTED_MODULE_0__objectAssign__["a" /* default */]);

/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);



/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the key
 * and the values associated with the key in each object, with the result being
 * used as the value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWithKey, R.merge, R.mergeWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeWithKey(concatValues,
 *                     { a: true, thing: 'foo', values: [10, 20] },
 *                     { b: true, thing: 'bar', values: [15, 35] });
 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
 */
var mergeWithKey = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function mergeWithKey(fn, l, r) {
  var result = {};
  var k;

  for (k in l) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(k, l)) {
      result[k] = Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }

  for (k in r) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(k, r) && !Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(k, result)) {
      result[k] = r[k];
    }
  }

  return result;
});
/* harmony default export */ __webpack_exports__["a"] = (mergeWithKey);

/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export drawArcs */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return processCoordinates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getRefugeeData; });
/* unused harmony export isValidCountry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_ramda__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_axios__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_slugify__ = __webpack_require__(336);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_slugify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_slugify__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__map_settings__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__events__ = __webpack_require__(196);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_d3_transition__ = __webpack_require__(859);
var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }









/**
 * @param  {Array} c Coordinate
 * @return {String}  Svg arc string
 */
var drawArcs = function drawArcs(c) {
    var bend = 1.3;
    var d = { source: c[0], target: c[1] };
    var dx = d.target[0] - d.source[0];
    var dy = d.target[1] - d.source[1];
    var dr = Math.sqrt(dx * dx + dy * dy) * bend;
    var sweep = d.target[0] - d.source[0] < 0 ? 0 : 1;
    return 'M' + d.source[0] + ',' + d.source[1] + 'A' + dr + ' ' + dr + ' 0 0,' + sweep + ' ' + d.target[0] + ',' + d.target[1];
};

/**
 * Returns length for the line indicating the amount of refugees.
 */
function setLineLength(refugeeNum, maxCount) {
    var scaledCount = refugeeNum / maxCount * 200;
    return scaledCount > 20 ? scaledCount : 20;
}

/**
 * Returns color for the line indicating the amount of refugees
 * TODO: Better scaling? RefugeeNum fluctuates from 1 to over 100 000. Colors are good?
 */
function setLineColor(refugeeNum) {

    if (refugeeNum <= 10) {
        //console.log("<10");
        return '#8FBF71';
    }

    if (10 < refugeeNum && refugeeNum <= 100) {
        //console.log("10-50");
        return '#E6FF7B';
    }

    if (100 < refugeeNum && refugeeNum <= 1000) {
        //console.log("50-100");
        return '#FFE452';
    }

    if (1000 < refugeeNum && refugeeNum <= 5000) {
        //console.log("100-500");
        return '#FFA24C';
    }

    if (5000 < refugeeNum) {
        //console.log(refugeeNum);
        return '#FF6251';
    }
}

/**
 * Saves current year's traffic coordinates to a global variable
 */
var processCoordinates = function processCoordinates(traffic) {
    if (window.map.allCoordinates.length) {
        window.map.allCoordinates = [];
        window.map.fromCountryList = [];
        Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["d" /* selectAll */])('.arc').remove();
    }

    if (traffic[window.year]) {
        // Get minimum and maximum counts per country
        var getCount = function getCount(obj) {
            return parseInt(obj.countAsylum || 0) + parseInt(obj.countRefugee || 0);
        };
        var counts = __WEBPACK_IMPORTED_MODULE_0_ramda__["c" /* map */](getCount, traffic[window.year]);
        var _ref = [__WEBPACK_IMPORTED_MODULE_0_ramda__["i" /* reduce */](__WEBPACK_IMPORTED_MODULE_0_ramda__["e" /* min */], Infinity, counts), __WEBPACK_IMPORTED_MODULE_0_ramda__["i" /* reduce */](__WEBPACK_IMPORTED_MODULE_0_ramda__["d" /* max */], -Infinity, counts)],
            minCount = _ref[0],
            maxCount = _ref[1];


        traffic[window.year].map(function (countryObject) {
            var country = countryObject.country,
                countAsylum = countryObject.countAsylum,
                countRefugee = countryObject.countRefugee;


            if (!country || country === 'Various/Unknown' || country === 'Stateless') return true;

            // If we wish to give some presentation of those countries that we haven't
            // got any map-data, we can listen additionalCountryAdded-event and grab
            // those countries from window.additionalCountries
            if (!isValidCountry(country)) {
                var isNew = window.additionalCountries.to != window.country || window.additionalCountries.year != window.year;
                if (isNew) {
                    window.additionalCountries.to = window.country;
                    window.additionalCountries.year = window.year;
                    window.additionalCountries.countries = [countryObject];
                } else {
                    window.additionalCountries.countries.push(countryObject);
                }
                window.dispatchEvent(__WEBPACK_IMPORTED_MODULE_5__events__["a" /* additionalCountryAdded */]);
                return true;
            }

            var fromCountry = __WEBPACK_IMPORTED_MODULE_0_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_0_ramda__["f" /* pathEq */](['properties', 'NAME'], country))(window.map.geoData);
            var toCountry = __WEBPACK_IMPORTED_MODULE_0_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_0_ramda__["f" /* pathEq */](['properties', 'NAME'], window.country))(window.map.geoData);
            var coordinates = [fromCountry.centroid, toCountry.centroid];
            window.map.fromCountryList.push(country);
            window.map.allCoordinates.push(coordinates);

            //Count total of the asylum seekers and the refugees
            var totalRefugees = 0;
            var refugeeCount = 0;
            var asylumCount = 0;

            if (typeof countRefugee != 'undefined') {
                refugeeCount = parseInt(countRefugee);
            }

            if (typeof countAsylum != 'undefined') {
                asylumCount = parseInt(countAsylum);
            }

            totalRefugees = refugeeCount + asylumCount;

            //Animation
            var line = __WEBPACK_IMPORTED_MODULE_4__map_settings__["d" /* svg */].append('path').datum(coordinates).attr('d', drawArcs).attr('class', 'arc');

            var totalLength = line.node().getTotalLength();

            line.attr('stroke-dasharray', setLineLength(totalRefugees, maxCount)).attr('stroke', setLineColor(totalRefugees));
        });
    }
};

var getRefugeeData = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var slugOptions, dataResponse;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        slugOptions = { lower: true, remove: /[$*_+~.,()'"!\-:@]/g };
                        _context.next = 3;
                        return __WEBPACK_IMPORTED_MODULE_2_axios___default.a.get('/data/' + __WEBPACK_IMPORTED_MODULE_3_slugify___default()(window.country, slugOptions) + '.json');

                    case 3:
                        dataResponse = _context.sent;

                        if (!(dataResponse.status === 200)) {
                            _context.next = 6;
                            break;
                        }

                        return _context.abrupt('return', dataResponse.data);

                    case 6:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, _this);
    }));

    return function getRefugeeData() {
        return _ref2.apply(this, arguments);
    };
}();

var isValidCountry = function isValidCountry(name) {
    return __WEBPACK_IMPORTED_MODULE_0_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_0_ramda__["f" /* pathEq */](['properties', 'NAME'], name))(window.map.geoData) !== undefined;
};

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(841);

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(30);
var normalizeHeaderName = __webpack_require__(844);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(332);
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(332);
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(331)))

/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return countryChanged; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return additionalCountryAdded; });
/***
 * In this file is defined every custom event related to this
 * particular component.
 */
var createEvent = function createEvent(name) {
  var event = document.createEvent('Event');
  event.initEvent(name, true, true);
  return event;
};

var countryChanged = createEvent('countryChanged');
var additionalCountryAdded = createEvent('additionalCountryAdded');

/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = now;
/* harmony export (immutable) */ __webpack_exports__["a"] = Timer;
/* harmony export (immutable) */ __webpack_exports__["c"] = timer;
/* unused harmony export timerFlush */
var frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}


/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_value__ = __webpack_require__(199);
/* unused harmony reexport interpolate */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_array__ = __webpack_require__(343);
/* unused harmony reexport interpolateArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_basis__ = __webpack_require__(202);
/* unused harmony reexport interpolateBasis */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__ = __webpack_require__(341);
/* unused harmony reexport interpolateBasisClosed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_date__ = __webpack_require__(344);
/* unused harmony reexport interpolateDate */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_number__ = __webpack_require__(126);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_5__src_number__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_object__ = __webpack_require__(345);
/* unused harmony reexport interpolateObject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_round__ = __webpack_require__(870);
/* unused harmony reexport interpolateRound */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_string__ = __webpack_require__(346);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_8__src_string__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_transform_index__ = __webpack_require__(871);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_zoom__ = __webpack_require__(874);
/* unused harmony reexport interpolateZoom */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_rgb__ = __webpack_require__(340);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["a"]; });
/* unused harmony reexport interpolateRgbBasis */
/* unused harmony reexport interpolateRgbBasisClosed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_hsl__ = __webpack_require__(875);
/* unused harmony reexport interpolateHsl */
/* unused harmony reexport interpolateHslLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_lab__ = __webpack_require__(876);
/* unused harmony reexport interpolateLab */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_hcl__ = __webpack_require__(877);
/* unused harmony reexport interpolateHcl */
/* unused harmony reexport interpolateHclLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(878);
/* unused harmony reexport interpolateCubehelix */
/* unused harmony reexport interpolateCubehelixLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_quantize__ = __webpack_require__(879);
/* unused harmony reexport quantize */



















/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rgb__ = __webpack_require__(340);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(343);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__date__ = __webpack_require__(344);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__object__ = __webpack_require__(345);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__string__ = __webpack_require__(346);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__constant__ = __webpack_require__(342);









/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? Object(__WEBPACK_IMPORTED_MODULE_7__constant__["a" /* default */])(b)
      : (t === "number" ? __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */]
      : t === "string" ? ((c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]) : __WEBPACK_IMPORTED_MODULE_6__string__["a" /* default */])
      : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]
      : b instanceof Date ? __WEBPACK_IMPORTED_MODULE_3__date__["a" /* default */]
      : Array.isArray(b) ? __WEBPACK_IMPORTED_MODULE_2__array__["a" /* default */]
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? __WEBPACK_IMPORTED_MODULE_5__object__["a" /* default */]
      : __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */])(a, b);
});


/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = Color;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return darker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return brighter; });
/* harmony export (immutable) */ __webpack_exports__["e"] = color;
/* harmony export (immutable) */ __webpack_exports__["h"] = rgbConvert;
/* harmony export (immutable) */ __webpack_exports__["g"] = rgb;
/* harmony export (immutable) */ __webpack_exports__["b"] = Rgb;
/* unused harmony export hslConvert */
/* harmony export (immutable) */ __webpack_exports__["f"] = hsl;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(201);


function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Color, color, {
  displayable: function() {
    return this.rgb().displayable();
  },
  toString: function() {
    return this.rgb() + "";
  }
});

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format])
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Rgb, rgb, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (0 <= this.r && this.r <= 255)
        && (0 <= this.g && this.g <= 255)
        && (0 <= this.b && this.b <= 255)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  toString: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(")
        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hsl, hsl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}


/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = extend;
/* harmony default export */ __webpack_exports__["a"] = (function(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
});

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}


/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = basis;
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

/* harmony default export */ __webpack_exports__["b"] = (function(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
});


/***/ }),
/* 203 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(10) && !__webpack_require__(7)(function () {
  return Object.defineProperty(__webpack_require__(128)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(9);


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(19);
var toIObject = __webpack_require__(24);
var arrayIndexOf = __webpack_require__(93)(false);
var IE_PROTO = __webpack_require__(130)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(11);
var anObject = __webpack_require__(5);
var getKeys = __webpack_require__(59);

module.exports = __webpack_require__(10) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(24);
var gOPN = __webpack_require__(62).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(59);
var gOPS = __webpack_require__(94);
var pIE = __webpack_require__(80);
var toObject = __webpack_require__(15);
var IObject = __webpack_require__(79);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(7)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(17);
var isObject = __webpack_require__(8);
var invoke = __webpack_require__(211);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 211 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(6).parseInt;
var $trim = __webpack_require__(70).trim;
var ws = __webpack_require__(134);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(6).parseFloat;
var $trim = __webpack_require__(70).trim;

module.exports = 1 / $parseFloat(__webpack_require__(134) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(32);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(8);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 216 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(137);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(5);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(17);
var toObject = __webpack_require__(15);
var IObject = __webpack_require__(79);
var toLength = __webpack_require__(12);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(15);
var toAbsoluteIndex = __webpack_require__(60);
var toLength = __webpack_require__(12);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 221 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(10) && /./g.flags != 'g') __webpack_require__(11).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(98)
});


/***/ }),
/* 223 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(5);
var isObject = __webpack_require__(8);
var newPromiseCapability = __webpack_require__(152);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(226);
var validate = __webpack_require__(72);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(101)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(11).f;
var create = __webpack_require__(61);
var redefineAll = __webpack_require__(66);
var ctx = __webpack_require__(31);
var anInstance = __webpack_require__(64);
var forOf = __webpack_require__(65);
var $iterDefine = __webpack_require__(140);
var step = __webpack_require__(221);
var setSpecies = __webpack_require__(63);
var DESCRIPTORS = __webpack_require__(10);
var fastKey = __webpack_require__(50).fastKey;
var validate = __webpack_require__(72);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(226);
var validate = __webpack_require__(72);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(101)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each = __webpack_require__(43)(0);
var redefine = __webpack_require__(21);
var meta = __webpack_require__(50);
var assign = __webpack_require__(209);
var weak = __webpack_require__(229);
var isObject = __webpack_require__(8);
var fails = __webpack_require__(7);
var validate = __webpack_require__(72);
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(101)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(66);
var getWeak = __webpack_require__(50).getWeak;
var anObject = __webpack_require__(5);
var isObject = __webpack_require__(8);
var anInstance = __webpack_require__(64);
var forOf = __webpack_require__(65);
var createArrayMethod = __webpack_require__(43);
var $has = __webpack_require__(19);
var validate = __webpack_require__(72);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(41);
var toLength = __webpack_require__(12);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(62);
var gOPS = __webpack_require__(94);
var anObject = __webpack_require__(5);
var Reflect = __webpack_require__(6).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(95);
var isObject = __webpack_require__(8);
var toLength = __webpack_require__(12);
var ctx = __webpack_require__(31);
var IS_CONCAT_SPREADABLE = __webpack_require__(9)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(12);
var repeat = __webpack_require__(136);
var defined = __webpack_require__(40);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(59);
var toIObject = __webpack_require__(24);
var isEnum = __webpack_require__(80).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(81);
var from = __webpack_require__(236);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(65);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 237 */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),
/* 238 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return areaRingSum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return areaStream; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__stream__ = __webpack_require__(67);





var areaRingSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])();

var areaSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;

var areaStream = {
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonStart: function() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? __WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */] + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
  },
  sphere: function() {
    areaSum.add(__WEBPACK_IMPORTED_MODULE_1__math__["w" /* tau */]);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  lambda0 = lambda, cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi = phi / 2 + __WEBPACK_IMPORTED_MODULE_1__math__["q" /* quarterPi */]), sinPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi);
}

function areaPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  phi = phi / 2 + __WEBPACK_IMPORTED_MODULE_1__math__["q" /* quarterPi */]; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
      sinPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(adLambda),
      v = k * sdLambda * Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(adLambda);
  areaRingSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

/* unused harmony default export */ var _unused_webpack_default_export = (function(object) {
  areaSum.reset();
  Object(__WEBPACK_IMPORTED_MODULE_3__stream__["a" /* default */])(object, areaStream);
  return areaSum * 2;
});


/***/ }),
/* 239 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = circleStream;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cartesian__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constant__ = __webpack_require__(560);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__rotation__ = __webpack_require__(106);





// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(radius),
      sinRadius = Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */];
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */];
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["g" /* spherical */])([cosRadius, -sinRadius * Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(t), -sinRadius * Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])(point), point[0] -= cosRadius;
  Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["e" /* cartesianNormalizeInPlace */])(point);
  var radius = Object(__WEBPACK_IMPORTED_MODULE_2__math__["b" /* acos */])(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */] - __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */]) % __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */];
}

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var center = Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])([0, 0]),
      radius = Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(90),
      precision = Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(6),
      ring,
      rotate,
      stream = {point: point};

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= __WEBPACK_IMPORTED_MODULE_2__math__["h" /* degrees */], x[1] *= __WEBPACK_IMPORTED_MODULE_2__math__["h" /* degrees */];
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */],
        p = precision.apply(this, arguments) * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */];
    ring = [];
    rotate = Object(__WEBPACK_IMPORTED_MODULE_3__rotation__["b" /* rotateRadians */])(-c[0] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */], -c[1] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */], 0).invert;
    circleStream(stream, r, p, 1);
    c = {type: "Polygon", coordinates: [ring]};
    ring = rotate = null;
    return c;
  }

  circle.center = function(_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(+_), circle) : radius;
  };

  circle.precision = function(_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_1__constant__["a" /* default */])(+_), circle) : precision;
  };

  return circle;
});


/***/ }),
/* 240 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
});


/***/ }),
/* 241 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(242);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);



/* harmony default export */ __webpack_exports__["a"] = (Object(__WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */])(
  function() { return true; },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], -__WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */]]
));

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] : -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */],
          delta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda1 - lambda0);
      if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(delta - __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */]) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) { // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? __WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */] : -__WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */]);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */]) { // line crosses antimeridian
        if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda0 - sign0) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) lambda0 -= sign0 * __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]; // handle degeneracies
        if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda1 - sign1) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) lambda1 -= sign1 * __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */];
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda0 - lambda1);
  return Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(sinLambda0Lambda1) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]
      ? Object(__WEBPACK_IMPORTED_MODULE_1__math__["d" /* atan */])((Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi0) * (cosPhi1 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi1)) * Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda1)
          - Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi1) * (cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi0)) * Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(lambda0))
          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
      : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * __WEBPACK_IMPORTED_MODULE_1__math__["l" /* halfPi */];
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], phi);
    stream.point(0, phi);
    stream.point(__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], phi);
    stream.point(__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], 0);
    stream.point(__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], -phi);
    stream.point(0, -phi);
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], -phi);
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], 0);
    stream.point(-__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */], phi);
  } else if (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(from[0] - to[0]) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]) {
    var lambda = from[0] < to[0] ? __WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */] : -__WEBPACK_IMPORTED_MODULE_1__math__["o" /* pi */];
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}


/***/ }),
/* 242 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__buffer__ = __webpack_require__(243);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rejoin__ = __webpack_require__(244);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__polygonContains__ = __webpack_require__(246);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_d3_array__ = __webpack_require__(155);






/* harmony default export */ __webpack_exports__["a"] = (function(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink),
        ringBuffer = Object(__WEBPACK_IMPORTED_MODULE_0__buffer__["a" /* default */])(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = Object(__WEBPACK_IMPORTED_MODULE_4_d3_array__["a" /* merge */])(segments);
        var startInside = Object(__WEBPACK_IMPORTED_MODULE_3__polygonContains__["a" /* default */])(polygon, start);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          Object(__WEBPACK_IMPORTED_MODULE_1__rejoin__["a" /* default */])(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i, n = ringSegments.length, m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
          sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
});

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] : __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - a[1])
       - ((b = b.x)[0] < 0 ? b[1] - __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] : __WEBPACK_IMPORTED_MODULE_2__math__["l" /* halfPi */] - b[1]);
}


/***/ }),
/* 243 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__noop__ = __webpack_require__(52);


/* harmony default export */ __webpack_exports__["a"] = (function() {
  var lines = [],
      line;
  return {
    point: function(x, y) {
      line.push([x, y]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
});


/***/ }),
/* 244 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pointEqual__ = __webpack_require__(245);


function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
/* harmony default export */ __webpack_exports__["a"] = (function(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function(segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n, p0 = segment[0], p1 = segment[n], x;

    // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.
    if (Object(__WEBPACK_IMPORTED_MODULE_0__pointEqual__["a" /* default */])(p0, p1)) {
      stream.lineStart();
      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
});

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}


/***/ }),
/* 245 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);


/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(a[0] - b[0]) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */] && Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(a[1] - b[1]) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */];
});


/***/ }),
/* 246 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cartesian__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(4);




var sum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])();

/* harmony default export */ __webpack_exports__["a"] = (function(polygon, point) {
  var lambda = point[0],
      phi = point[1],
      normal = [Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(lambda), -Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(lambda), 0],
      angle = 0,
      winding = 0;

  sum.reset();

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = point0[0],
        phi0 = point0[1] / 2 + __WEBPACK_IMPORTED_MODULE_2__math__["q" /* quarterPi */],
        sinPhi0 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(phi0),
        cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = point1[0],
          phi1 = point1[1] / 2 + __WEBPACK_IMPORTED_MODULE_2__math__["q" /* quarterPi */],
          sinPhi1 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(phi1),
          cosPhi1 = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */],
          k = sinPhi0 * sinPhi1;

      sum.add(Object(__WEBPACK_IMPORTED_MODULE_2__math__["e" /* atan2 */])(k * sign * Object(__WEBPACK_IMPORTED_MODULE_2__math__["t" /* sin */])(absDelta), cosPhi0 * cosPhi1 + k * Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(absDelta)));
      angle += antimeridian ? delta + sign * __WEBPACK_IMPORTED_MODULE_2__math__["w" /* tau */] : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["c" /* cartesianCross */])(Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["a" /* cartesian */])(point0), Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["a" /* cartesian */])(point1));
        Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["e" /* cartesianNormalizeInPlace */])(arc);
        var intersection = Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["c" /* cartesianCross */])(normal, arc);
        Object(__WEBPACK_IMPORTED_MODULE_1__cartesian__["e" /* cartesianNormalizeInPlace */])(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * Object(__WEBPACK_IMPORTED_MODULE_2__math__["c" /* asin */])(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -__WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] || angle < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] && sum < -__WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */]) ^ (winding & 1);
});


/***/ }),
/* 247 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export bisectRight */
/* unused harmony export bisectLeft */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bisector__ = __webpack_require__(248);



var ascendingBisect = Object(__WEBPACK_IMPORTED_MODULE_1__bisector__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */]);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
/* harmony default export */ __webpack_exports__["a"] = (bisectRight);


/***/ }),
/* 248 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(74);


/* harmony default export */ __webpack_exports__["a"] = (function(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
});

function ascendingComparator(f) {
  return function(d, x) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */])(f(d), x);
  };
}


/***/ }),
/* 249 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pair;
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
});

function pair(a, b) {
  return [a, b];
}


/***/ }),
/* 250 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__variance__ = __webpack_require__(251);


/* harmony default export */ __webpack_exports__["a"] = (function(array, f) {
  var v = Object(__WEBPACK_IMPORTED_MODULE_0__variance__["a" /* default */])(array, f);
  return v ? Math.sqrt(v) : v;
});


/***/ }),
/* 251 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(83);


/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
});


/***/ }),
/* 252 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
});


/***/ }),
/* 253 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return slice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return map; });
var array = Array.prototype;

var slice = array.slice;
var map = array.map;


/***/ }),
/* 254 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
});


/***/ }),
/* 255 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export tickIncrement */
/* harmony export (immutable) */ __webpack_exports__["a"] = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

/* unused harmony default export */ var _unused_webpack_default_export = (function(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;

  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
});

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}


/***/ }),
/* 256 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
});


/***/ }),
/* 257 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
});


/***/ }),
/* 258 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__min__ = __webpack_require__(257);


/* harmony default export */ __webpack_exports__["a"] = (function(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = Object(__WEBPACK_IMPORTED_MODULE_0__min__["a" /* default */])(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
});

function length(d) {
  return d.length;
}


/***/ }),
/* 259 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cartesian__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__circle__ = __webpack_require__(239);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pointEqual__ = __webpack_require__(245);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__index__ = __webpack_require__(242);






/* harmony default export */ __webpack_exports__["a"] = (function(radius) {
  var cr = Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(radius),
      delta = 6 * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */],
      smallRadius = cr > 0,
      notHemisphere = Object(__WEBPACK_IMPORTED_MODULE_2__math__["a" /* abs */])(cr) > __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */]; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    Object(__WEBPACK_IMPORTED_MODULE_1__circle__["a" /* circleStream */])(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(lambda) * Object(__WEBPACK_IMPORTED_MODULE_2__math__["g" /* cos */])(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
        c0, // code for previous point
        v0, // visibility of previous point
        v00, // visibility of first point
        clean; // no intersections
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius
              ? v ? 0 : code(lambda, phi)
              : v ? code(lambda + (lambda < 0 ? __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */] : -__WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */]), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        // Handle degeneracies.
        // TODO ignore if not clipping polygons.
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || Object(__WEBPACK_IMPORTED_MODULE_3__pointEqual__["a" /* default */])(point0, point2) || Object(__WEBPACK_IMPORTED_MODULE_3__pointEqual__["a" /* default */])(point1, point2)) {
            point1[0] += __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];
            point1[1] += __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];
            v = visible(point1[0], point1[1]);
          }
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }
        if (v && (!point0 || !Object(__WEBPACK_IMPORTED_MODULE_3__pointEqual__["a" /* default */])(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | ((v00 && v0) << 1);
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])(a),
        pb = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0], // normal
        n2 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["c" /* cartesianCross */])(pa, pb),
        n2n2 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(n2, n2),
        n1n2 = n2[0], // cartesianDot(n1, n2),
        determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 =  cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["c" /* cartesianCross */])(n1, n2),
        A = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(n1, c1),
        B = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(n2, c2);
    Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["b" /* cartesianAddInPlace */])(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(A, u),
        uu = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(u, u),
        t2 = w * w - uu * (Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["d" /* cartesianDot */])(A, A) - 1);

    if (t2 < 0) return;

    var t = Object(__WEBPACK_IMPORTED_MODULE_2__math__["u" /* sqrt */])(t2),
        q = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(u, (-w - t) / uu);
    Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["b" /* cartesianAddInPlace */])(q, A);
    q = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["g" /* spherical */])(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = Object(__WEBPACK_IMPORTED_MODULE_2__math__["a" /* abs */])(delta - __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */]) < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */],
        meridian = polar || delta < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian
        ? polar
          ? phi0 + phi1 > 0 ^ q[1] < (Object(__WEBPACK_IMPORTED_MODULE_2__math__["a" /* abs */])(q[0] - lambda0) < __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */] ? phi0 : phi1)
          : phi0 <= q[1] && q[1] <= phi1
        : delta > __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */] ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["f" /* cartesianScale */])(u, (-w + t) / uu);
      Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["b" /* cartesianAddInPlace */])(q1, A);
      return [q, Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["g" /* spherical */])(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */] - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return Object(__WEBPACK_IMPORTED_MODULE_4__index__["a" /* default */])(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-__WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */], radius - __WEBPACK_IMPORTED_MODULE_2__math__["o" /* pi */]]);
});


/***/ }),
/* 260 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__length__ = __webpack_require__(261);


var coordinates = [null, null],
    object = {type: "LineString", coordinates: coordinates};

/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return Object(__WEBPACK_IMPORTED_MODULE_0__length__["a" /* default */])(object);
});


/***/ }),
/* 261 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__stream__ = __webpack_require__(67);





var lengthSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    lambda0,
    sinPhi0,
    cosPhi0;

var lengthStream = {
  sphere: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: lengthLineStart,
  lineEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonStart: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */]
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
}

function lengthPointFirst(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  lambda0 = lambda, sinPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi), cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */];
  var sinPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(phi),
      cosPhi = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(phi),
      delta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda - lambda0),
      cosDelta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(delta),
      sinDelta = Object(__WEBPACK_IMPORTED_MODULE_1__math__["t" /* sin */])(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["u" /* sqrt */])(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

/* harmony default export */ __webpack_exports__["a"] = (function(object) {
  lengthSum.reset();
  Object(__WEBPACK_IMPORTED_MODULE_3__stream__["a" /* default */])(object, lengthStream);
  return +lengthSum;
});


/***/ }),
/* 262 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__noop__ = __webpack_require__(52);


var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;

var boundsStream = {
  point: boundsPoint,
  lineStart: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  lineEnd: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  polygonStart: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  polygonEnd: __WEBPACK_IMPORTED_MODULE_0__noop__["a" /* default */],
  result: function() {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

/* harmony default export */ __webpack_exports__["a"] = (boundsStream);


/***/ }),
/* 263 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__conicEqualArea__ = __webpack_require__(158);


/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__conicEqualArea__["a" /* default */])()
      .parallels([29.5, 45.5])
      .scale(1070)
      .translate([480, 250])
      .rotate([96, 0])
      .center([-0.6, 38.7]);
});


/***/ }),
/* 264 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = equirectangularRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(44);


function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */])(equirectangularRaw)
      .scale(152.63);
});


/***/ }),
/* 265 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transform__ = __webpack_require__(162);


/* harmony default export */ __webpack_exports__["a"] = (function(topology) {
  var t = Object(__WEBPACK_IMPORTED_MODULE_0__transform__["a" /* default */])(topology.transform), key,
      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;

  function bboxPoint(p) {
    p = t(p);
    if (p[0] < x0) x0 = p[0];
    if (p[0] > x1) x1 = p[0];
    if (p[1] < y0) y0 = p[1];
    if (p[1] > y1) y1 = p[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(bboxGeometry); break;
      case "Point": bboxPoint(o.coordinates); break;
      case "MultiPoint": o.coordinates.forEach(bboxPoint); break;
    }
  }

  topology.arcs.forEach(function(arc) {
    var i = -1, n = arc.length, p;
    while (++i < n) {
      p = t(arc[i], i);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
  });

  for (key in topology.objects) {
    bboxGeometry(topology.objects[key]);
  }

  return [x0, y0, x1, y1];
});


/***/ }),
/* 266 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 267 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1;

  // Stitch empty arcs first, since they may be subsumed by other arcs.
  arcs.forEach(function(i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i], t;
    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });

  arcs.forEach(function(i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f, g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;
      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;
      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
    else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

  return fragments;
});


/***/ }),
/* 268 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__identity__ = __webpack_require__(266);


/* harmony default export */ __webpack_exports__["a"] = (function(transform) {
  if (transform == null) return __WEBPACK_IMPORTED_MODULE_0__identity__["a" /* default */];
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n),
        x1 = Math.round((input[0] - dx) / kx),
        y1 = Math.round((input[1] - dy) / ky);
    output[0] = x1 - x0, x0 = x1;
    output[1] = y1 - y0, y0 = y1;
    while (j < n) output[j] = input[j], ++j;
    return output;
  };
});


/***/ }),
/* 269 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var matcher = function(selector) {
  return function() {
    return this.matches(selector);
  };
};

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!element.matches) {
    var vendorMatches = element.webkitMatchesSelector
        || element.msMatchesSelector
        || element.mozMatchesSelector
        || element.oMatchesSelector;
    matcher = function(selector) {
      return function() {
        return vendorMatches.call(this, selector);
      };
    };
  }
}

/* harmony default export */ __webpack_exports__["a"] = (matcher);


/***/ }),
/* 270 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function empty() {
  return [];
}

/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
});


/***/ }),
/* 271 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = EnterNode;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(272);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(34);



/* harmony default export */ __webpack_exports__["b"] = (function() {
  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._enter || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
});

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};


/***/ }),
/* 272 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(update) {
  return new Array(update.length);
});


/***/ }),
/* 273 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = styleValue;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(172);


function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
});

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node).getComputedStyle(node, null).getPropertyValue(name);
}


/***/ }),
/* 274 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry3__ = __webpack_require__(3);



/**
 * Applies a function to the value at the given index of an array, returning a
 * new copy of the array with the element at the given index replaced with the
 * result of the function application.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig (a -> a) -> Number -> [a] -> [a]
 * @param {Function} fn The function to apply.
 * @param {Number} idx The index.
 * @param {Array|Arguments} list An array-like object whose value
 *        at the supplied index will be replaced.
 * @return {Array} A copy of the supplied array-like object with
 *         the element at index `idx` replaced with the value
 *         returned by applying `fn` to the existing element.
 * @see R.update
 * @example
 *
 *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]
 *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]
 * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]
 * @symb R.adjust(f, 0, [a, b]) = [f(a), b]
 */
var adjust = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry3__["a" /* default */])(function adjust(fn, idx, list) {
  if (idx >= list.length || idx < -list.length) {
    return list;
  }
  var start = idx < 0 ? list.length : 0;
  var _idx = start + idx;
  var _list = Object(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */])(list);
  _list[_idx] = fn(list[_idx]);
  return _list;
});
/* harmony default export */ __webpack_exports__["a"] = (adjust);

/***/ }),
/* 275 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _xwrap;
var XWrap = /*#__PURE__*/function () {
  function XWrap(fn) {
    this.f = fn;
  }
  XWrap.prototype['@@transducer/init'] = function () {
    throw new Error('init not implemented on XWrap');
  };
  XWrap.prototype['@@transducer/result'] = function (acc) {
    return acc;
  };
  XWrap.prototype['@@transducer/step'] = function (acc, x) {
    return this.f(acc, x);
  };

  return XWrap;
}();

function _xwrap(fn) {
  return new XWrap(fn);
}

/***/ }),
/* 276 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      var log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */
var bind = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function bind(fn, thisObj) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(fn.length, function () {
    return fn.apply(thisObj, arguments);
  });
});
/* harmony default export */ __webpack_exports__["a"] = (bind);

/***/ }),
/* 277 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__has__ = __webpack_require__(18);


var toString = Object.prototype.toString;
var _isArguments = function () {
  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
    return toString.call(x) === '[object Arguments]';
  } : function _isArguments(x) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__has__["a" /* default */])('callee', x);
  };
};

/* harmony default export */ __webpack_exports__["a"] = (_isArguments);

/***/ }),
/* 278 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns `true` if both arguments are `true`; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if it is falsy, otherwise the second argument.
 * @see R.both
 * @example
 *
 *      R.and(true, true); //=> true
 *      R.and(true, false); //=> false
 *      R.and(false, true); //=> false
 *      R.and(false, false); //=> false
 */
var and = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function and(a, b) {
  return a && b;
});
/* harmony default export */ __webpack_exports__["a"] = (and);

/***/ }),
/* 279 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xany__ = __webpack_require__(280);




/**
 * Returns `true` if at least one of elements of the list match the predicate,
 * `false` otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
 *         otherwise.
 * @see R.all, R.none, R.transduce
 * @example
 *
 *      var lessThan0 = R.flip(R.lt)(0);
 *      var lessThan2 = R.flip(R.lt)(2);
 *      R.any(lessThan0)([1, 2]); //=> false
 *      R.any(lessThan2)([1, 2]); //=> true
 */
var any = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['any'], __WEBPACK_IMPORTED_MODULE_2__internal_xany__["a" /* default */], function any(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (fn(list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}));
/* harmony default export */ __webpack_exports__["a"] = (any);

/***/ }),
/* 280 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduced__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XAny = /*#__PURE__*/function () {
  function XAny(f, xf) {
    this.xf = xf;
    this.f = f;
    this.any = false;
  }
  XAny.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XAny.prototype['@@transducer/result'] = function (result) {
    if (!this.any) {
      result = this.xf['@@transducer/step'](result, false);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAny.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.any = true;
      result = Object(__WEBPACK_IMPORTED_MODULE_1__reduced__["a" /* default */])(this.xf['@@transducer/step'](result, true));
    }
    return result;
  };

  return XAny;
}();

var _xany = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xany(f, xf) {
  return new XAny(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xany);

/***/ }),
/* 281 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Applies function `fn` to the argument list `args`. This is useful for
 * creating a fixed-arity function from a variadic function. `fn` should be a
 * bound function if context is significant.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> a) -> [*] -> a
 * @param {Function} fn The function which will be called with `args`
 * @param {Array} args The arguments to call `fn` with
 * @return {*} result The result, equivalent to `fn(...args)`
 * @see R.call, R.unapply
 * @example
 *
 *      var nums = [1, 2, 3, -99, 42, 6, 7];
 *      R.apply(Math.max, nums); //=> 42
 * @symb R.apply(f, [a, b, c]) = f(a, b, c)
 */
var apply = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function apply(fn, args) {
  return fn.apply(this, args);
});
/* harmony default export */ __webpack_exports__["a"] = (apply);

/***/ }),
/* 282 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__keys__ = __webpack_require__(46);



/**
 * Returns a list of all the enumerable own properties of the supplied object.
 * Note that the order of the output array is not guaranteed across different
 * JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own properties.
 * @see R.valuesIn, R.keys
 * @example
 *
 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
 */
var values = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function values(obj) {
  var props = Object(__WEBPACK_IMPORTED_MODULE_1__keys__["a" /* default */])(obj);
  var len = props.length;
  var vals = [];
  var idx = 0;
  while (idx < len) {
    vals[idx] = obj[props[idx]];
    idx += 1;
  }
  return vals;
});
/* harmony default export */ __webpack_exports__["a"] = (values);

/***/ }),
/* 283 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_isArray__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_isInteger__ = __webpack_require__(176);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__assoc__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__isNil__ = __webpack_require__(284);







/**
 * Makes a shallow clone of an object, setting or overriding the nodes required
 * to create the given path, and placing the specific value at the tail end of
 * that path. Note that this copies and flattens prototype properties onto the
 * new object as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> {a}
 * @param {Array} path the path to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except along the specified path.
 * @see R.dissocPath
 * @example
 *
 *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
 *
 *      // Any missing or non-object keys in path will be overridden
 *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
 */
var assocPath = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function assocPath(path, val, obj) {
  if (path.length === 0) {
    return val;
  }
  var idx = path[0];
  if (path.length > 1) {
    var nextObj = !Object(__WEBPACK_IMPORTED_MODULE_5__isNil__["a" /* default */])(obj) && Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(idx, obj) ? obj[idx] : Object(__WEBPACK_IMPORTED_MODULE_3__internal_isInteger__["a" /* default */])(path[1]) ? [] : {};
    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
  }
  if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_isInteger__["a" /* default */])(idx) && Object(__WEBPACK_IMPORTED_MODULE_2__internal_isArray__["a" /* default */])(obj)) {
    var arr = [].concat(obj);
    arr[idx] = val;
    return arr;
  } else {
    return Object(__WEBPACK_IMPORTED_MODULE_4__assoc__["a" /* default */])(idx, val, obj);
  }
});
/* harmony default export */ __webpack_exports__["a"] = (assocPath);

/***/ }),
/* 284 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */
var isNil = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function isNil(x) {
  return x == null;
});
/* harmony default export */ __webpack_exports__["a"] = (isNil);

/***/ }),
/* 285 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ap__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__map__ = __webpack_require__(23);






/**
 * "lifts" a function to be the specified arity, so that it may "map over" that
 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig Number -> (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.lift, R.ap
 * @example
 *
 *      var madd3 = R.liftN(3, (...args) => R.sum(args));
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 */
var liftN = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function liftN(arity, fn) {
  var lifted = Object(__WEBPACK_IMPORTED_MODULE_3__curryN__["a" /* default */])(arity, fn);
  return Object(__WEBPACK_IMPORTED_MODULE_3__curryN__["a" /* default */])(arity, function () {
    return Object(__WEBPACK_IMPORTED_MODULE_1__internal_reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_2__ap__["a" /* default */], Object(__WEBPACK_IMPORTED_MODULE_4__map__["a" /* default */])(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});
/* harmony default export */ __webpack_exports__["a"] = (liftN);

/***/ }),
/* 286 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _makeFlat;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isArrayLike__ = __webpack_require__(114);


/**
 * `_makeFlat` is a helper function that returns a one-level or fully recursive
 * function based on the flag passed in.
 *
 * @private
 */
function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j;
    var result = [];
    var idx = 0;
    var ilen = list.length;

    while (idx < ilen) {
      if (Object(__WEBPACK_IMPORTED_MODULE_0__isArrayLike__["a" /* default */])(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j = 0;
        jlen = value.length;
        while (j < jlen) {
          result[result.length] = value[j];
          j += 1;
        }
      } else {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  };
}

/***/ }),
/* 287 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _clone;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cloneRegExp__ = __webpack_require__(288);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__type__ = __webpack_require__(179);



/**
 * Copies an object.
 *
 * @private
 * @param {*} value The value to be copied
 * @param {Array} refFrom Array containing the source references
 * @param {Array} refTo Array containing the copied source references
 * @param {Boolean} deep Whether or not to perform deep cloning.
 * @return {*} The copied value.
 */
function _clone(value, refFrom, refTo, deep) {
  var copy = function copy(copiedValue) {
    var len = refFrom.length;
    var idx = 0;
    while (idx < len) {
      if (value === refFrom[idx]) {
        return refTo[idx];
      }
      idx += 1;
    }
    refFrom[idx + 1] = value;
    refTo[idx + 1] = copiedValue;
    for (var key in value) {
      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
    }
    return copiedValue;
  };
  switch (Object(__WEBPACK_IMPORTED_MODULE_1__type__["a" /* default */])(value)) {
    case 'Object':
      return copy({});
    case 'Array':
      return copy([]);
    case 'Date':
      return new Date(value.valueOf());
    case 'RegExp':
      return Object(__WEBPACK_IMPORTED_MODULE_0__cloneRegExp__["a" /* default */])(value);
    default:
      return value;
  }
}

/***/ }),
/* 288 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _cloneRegExp;
function _cloneRegExp(pattern) {
                                  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
}

/***/ }),
/* 289 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */
var not = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function not(a) {
  return !a;
});
/* harmony default export */ __webpack_exports__["a"] = (not);

/***/ }),
/* 290 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pipe;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_pipe__ = __webpack_require__(668);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reduce__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tail__ = __webpack_require__(181);





/**
 * Performs left-to-right function composition. The leftmost function may have
 * any arity; the remaining functions must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      var f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */
function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(arguments[0].length, Object(__WEBPACK_IMPORTED_MODULE_2__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__internal_pipe__["a" /* default */], arguments[0], Object(__WEBPACK_IMPORTED_MODULE_3__tail__["a" /* default */])(arguments)));
}

/***/ }),
/* 291 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = composeK;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__chain__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__compose__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__map__ = __webpack_require__(23);




/**
 * Returns the right-to-left Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipeK
 * @example
 *
 *       //  get :: String -> Object -> Maybe *
 *       var get = R.curry((propName, obj) => Maybe(obj[propName]))
 *
 *       //  getStateCode :: Maybe String -> Maybe String
 *       var getStateCode = R.composeK(
 *         R.compose(Maybe.of, R.toUpper),
 *         get('state'),
 *         get('address'),
 *         get('user'),
 *       );
 *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
 *       getStateCode({}); //=> Maybe.Nothing()
 * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
 */
function composeK() {
  if (arguments.length === 0) {
    throw new Error('composeK requires at least one argument');
  }
  var init = Array.prototype.slice.call(arguments);
  var last = init.pop();
  return Object(__WEBPACK_IMPORTED_MODULE_1__compose__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__compose__["a" /* default */].apply(this, Object(__WEBPACK_IMPORTED_MODULE_2__map__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__chain__["a" /* default */], init)), last);
}

/***/ }),
/* 292 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pipeP;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_pipeP__ = __webpack_require__(670);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reduce__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tail__ = __webpack_require__(181);





/**
 * Performs left-to-right composition of one or more Promise-returning
 * functions. The leftmost function may have any arity; the remaining functions
 * must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.composeP
 * @example
 *
 *      //  followersForUser :: String -> Promise [User]
 *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);
 */
function pipeP() {
  if (arguments.length === 0) {
    throw new Error('pipeP requires at least one argument');
  }
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(arguments[0].length, Object(__WEBPACK_IMPORTED_MODULE_2__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__internal_pipeP__["a" /* default */], arguments[0], Object(__WEBPACK_IMPORTED_MODULE_3__tail__["a" /* default */])(arguments)));
}

/***/ }),
/* 293 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _indexOf;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__equals__ = __webpack_require__(29);


function _indexOf(list, a, idx) {
  var inf, item;
  // Array.prototype.indexOf doesn't exist below IE9
  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === 'number' && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        // non-zero numbers can utilise Set
        return list.indexOf(a, idx);

      // all these types can utilise Set
      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }
    }
  }
  // anything else not covered above, defer to R.equals
  while (idx < list.length) {
    if (Object(__WEBPACK_IMPORTED_MODULE_0__equals__["a" /* default */])(list[idx], a)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}

/***/ }),
/* 294 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns true if its arguments are identical, false otherwise. Values are
 * identical if they reference the same memory. `NaN` is identical to `NaN`;
 * `0` and `-0` are not identical.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      var o = {};
 *      R.identical(o, o); //=> true
 *      R.identical(1, 1); //=> true
 *      R.identical(1, '1'); //=> false
 *      R.identical([], []); //=> false
 *      R.identical(0, -0); //=> false
 *      R.identical(NaN, NaN); //=> true
 */
var identical = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function identical(a, b) {
  // SameValue algorithm
  if (a === b) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
});
/* harmony default export */ __webpack_exports__["a"] = (identical);

/***/ }),
/* 295 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _complement;
function _complement(f) {
  return function () {
    return !f.apply(this, arguments);
  };
}

/***/ }),
/* 296 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curry__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__nAry__ = __webpack_require__(116);




/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type. The arity of the function
 * returned is specified to allow using variadic constructor functions.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Function
 * @sig Number -> (* -> {*}) -> (* -> {*})
 * @param {Number} n The arity of the constructor function.
 * @param {Function} Fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Variadic Constructor function
 *      function Salad() {
 *        this.ingredients = arguments;
 *      }
 *
 *      Salad.prototype.recipe = function() {
 *        var instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);
 *        return R.join('\n', instructions);
 *      };
 *
 *      var ThreeLayerSalad = R.constructN(3, Salad);
 *
 *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
 *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');
 *
 *      console.log(salad.recipe());
 *      // Add a dollop of Mayonnaise
 *      // Add a dollop of Potato Chips
 *      // Add a dollop of Ketchup
 */
var constructN = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function constructN(n, Fn) {
  if (n > 10) {
    throw new Error('Constructor with greater than ten arguments');
  }
  if (n === 0) {
    return function () {
      return new Fn();
    };
  }
  return Object(__WEBPACK_IMPORTED_MODULE_1__curry__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__nAry__["a" /* default */])(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
    switch (arguments.length) {
      case 1:
        return new Fn($0);
      case 2:
        return new Fn($0, $1);
      case 3:
        return new Fn($0, $1, $2);
      case 4:
        return new Fn($0, $1, $2, $3);
      case 5:
        return new Fn($0, $1, $2, $3, $4);
      case 6:
        return new Fn($0, $1, $2, $3, $4, $5);
      case 7:
        return new Fn($0, $1, $2, $3, $4, $5, $6);
      case 8:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
      case 9:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
      case 10:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
    }
  }));
});
/* harmony default export */ __webpack_exports__["a"] = (constructN);

/***/ }),
/* 297 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_map__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__max__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__pluck__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__reduce__ = __webpack_require__(47);







/**
 * Accepts a converging function and a list of branching functions and returns
 * a new function. When invoked, this new function is applied to some
 * arguments, each branching function is applied to those same arguments. The
 * results of each branching function are passed as arguments to the converging
 * function to produce the return value.
 *
 * @func
 * @memberOf R
 * @since v0.4.2
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} after A function. `after` will be invoked with the return values of
 *        `fn1` and `fn2` as its arguments.
 * @param {Array} functions A list of functions.
 * @return {Function} A new function.
 * @see R.useWith
 * @example
 *
 *      var average = R.converge(R.divide, [R.sum, R.length])
 *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
 *
 *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
 *      strangeConcat("Yodel") //=> "YODELyodel"
 *
 * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
 */
var converge = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function converge(after, fns) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__curryN__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_5__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_3__max__["a" /* default */], 0, Object(__WEBPACK_IMPORTED_MODULE_4__pluck__["a" /* default */])('length', fns)), function () {
    var args = arguments;
    var context = this;
    return after.apply(context, Object(__WEBPACK_IMPORTED_MODULE_1__internal_map__["a" /* default */])(function (fn) {
      return fn.apply(context, args);
    }, fns));
  });
});
/* harmony default export */ __webpack_exports__["a"] = (converge);

/***/ }),
/* 298 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`;
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      var defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */
var defaultTo = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});
/* harmony default export */ __webpack_exports__["a"] = (defaultTo);

/***/ }),
/* 299 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_contains__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Objects and Arrays are compared in terms of
 * value equality, not reference equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without
 * @example
 *
 *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
 *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
 *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
 */
var difference = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function difference(first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!Object(__WEBPACK_IMPORTED_MODULE_0__internal_contains__["a" /* default */])(first[idx], second) && !Object(__WEBPACK_IMPORTED_MODULE_0__internal_contains__["a" /* default */])(first[idx], out)) {
      out[out.length] = first[idx];
    }
    idx += 1;
  }
  return out;
});
/* harmony default export */ __webpack_exports__["a"] = (difference);

/***/ }),
/* 300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_containsWith__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry3__ = __webpack_require__(3);



/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      var cmp = (x, y) => x.a === y.a;
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
 *      var l2 = [{a: 3}, {a: 4}];
 *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
 */
var differenceWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry3__["a" /* default */])(function differenceWith(pred, first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!Object(__WEBPACK_IMPORTED_MODULE_0__internal_containsWith__["a" /* default */])(pred, first[idx], second) && !Object(__WEBPACK_IMPORTED_MODULE_0__internal_containsWith__["a" /* default */])(pred, first[idx], out)) {
      out.push(first[idx]);
    }
    idx += 1;
  }
  return out;
});
/* harmony default export */ __webpack_exports__["a"] = (differenceWith);

/***/ }),
/* 301 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns a new object that does not contain a `prop` property.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Object
 * @sig String -> {k: v} -> {k: v}
 * @param {String} prop The name of the property to dissociate
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original but without the specified property
 * @see R.assoc
 * @example
 *
 *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
 */
var dissoc = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function dissoc(prop, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  delete result[prop];
  return result;
});
/* harmony default export */ __webpack_exports__["a"] = (dissoc);

/***/ }),
/* 302 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Removes the sub-list of `list` starting at index `start` and containing
 * `count` elements. _Note that this is not destructive_: it returns a copy of
 * the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @param {Number} start The position to start removing elements
 * @param {Number} count The number of elements to remove
 * @param {Array} list The list to remove from
 * @return {Array} A new Array with `count` elements from `start` removed.
 * @example
 *
 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
 */
var remove = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function remove(start, count, list) {
  var result = Array.prototype.slice.call(list, 0);
  result.splice(start, count);
  return result;
});
/* harmony default export */ __webpack_exports__["a"] = (remove);

/***/ }),
/* 303 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xdrop__ = __webpack_require__(687);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__slice__ = __webpack_require__(36);





/**
 * Returns all but the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `drop` method).
 *
 * Dispatches to the `drop` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*} A copy of list without the first `n` elements
 * @see R.take, R.transduce, R.dropLast, R.dropWhile
 * @example
 *
 *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(3, 'ramda');               //=> 'da'
 */
var drop = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['drop'], __WEBPACK_IMPORTED_MODULE_2__internal_xdrop__["a" /* default */], function drop(n, xs) {
  return Object(__WEBPACK_IMPORTED_MODULE_3__slice__["a" /* default */])(Math.max(0, n), Infinity, xs);
}));
/* harmony default export */ __webpack_exports__["a"] = (drop);

/***/ }),
/* 304 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XDropRepeatsWith = /*#__PURE__*/function () {
  function XDropRepeatsWith(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.lastValue = undefined;
    this.seenFirstValue = false;
  }

  XDropRepeatsWith.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XDropRepeatsWith.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].result;
  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
    var sameAsLast = false;
    if (!this.seenFirstValue) {
      this.seenFirstValue = true;
    } else if (this.pred(this.lastValue, input)) {
      sameAsLast = true;
    }
    this.lastValue = input;
    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
  };

  return XDropRepeatsWith;
}();

var _xdropRepeatsWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xdropRepeatsWith(pred, xf) {
  return new XDropRepeatsWith(pred, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xdropRepeatsWith);

/***/ }),
/* 305 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xdropRepeatsWith__ = __webpack_require__(304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__last__ = __webpack_require__(306);





/**
 * Returns a new list without any consecutively repeating elements. Equality is
 * determined by applying the supplied predicate to each pair of consecutive elements. The
 * first element in a series of equal elements will be preserved.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
 *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
 */
var dropRepeatsWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_2__internal_xdropRepeatsWith__["a" /* default */], function dropRepeatsWith(pred, list) {
  var result = [];
  var idx = 1;
  var len = list.length;
  if (len !== 0) {
    result[0] = list[0];
    while (idx < len) {
      if (!pred(Object(__WEBPACK_IMPORTED_MODULE_3__last__["a" /* default */])(result), list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
  }
  return result;
}));
/* harmony default export */ __webpack_exports__["a"] = (dropRepeatsWith);

/***/ }),
/* 306 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__nth__ = __webpack_require__(89);


/**
 * Returns the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.init, R.head, R.tail
 * @example
 *
 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
 *      R.last([]); //=> undefined
 *
 *      R.last('abc'); //=> 'c'
 *      R.last(''); //=> ''
 */
var last = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__nth__["a" /* default */])(-1);
/* harmony default export */ __webpack_exports__["a"] = (last);

/***/ }),
/* 307 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns `true` if one or both of its arguments are `true`. Returns `false`
 * if both arguments are `false`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if truthy, otherwise the second argument.
 * @see R.either
 * @example
 *
 *      R.or(true, true); //=> true
 *      R.or(true, false); //=> true
 *      R.or(false, true); //=> true
 *      R.or(false, false); //=> false
 */
var or = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function or(a, b) {
  return a || b;
});
/* harmony default export */ __webpack_exports__["a"] = (or);

/***/ }),
/* 308 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isArguments__ = __webpack_require__(277);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_isArray__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_isObject__ = __webpack_require__(185);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_isString__ = __webpack_require__(86);






/**
 * Returns the empty value of its argument's type. Ramda defines the empty
 * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
 * types are supported if they define `<Type>.empty`,
 * `<Type>.prototype.empty` or implement the
 * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).
 *
 * Dispatches to the `empty` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> a
 * @param {*} x
 * @return {*}
 * @example
 *
 *      R.empty(Just(42));      //=> Nothing()
 *      R.empty([1, 2, 3]);     //=> []
 *      R.empty('unicorns');    //=> ''
 *      R.empty({x: 1, y: 2});  //=> {}
 */
var empty = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function empty(x) {
  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : Object(__WEBPACK_IMPORTED_MODULE_2__internal_isArray__["a" /* default */])(x) ? [] : Object(__WEBPACK_IMPORTED_MODULE_4__internal_isString__["a" /* default */])(x) ? '' : Object(__WEBPACK_IMPORTED_MODULE_3__internal_isObject__["a" /* default */])(x) ? {} : Object(__WEBPACK_IMPORTED_MODULE_1__internal_isArguments__["a" /* default */])(x) ? function () {
    return arguments;
  }() :
  // else
  void 0;
});
/* harmony default export */ __webpack_exports__["a"] = (empty);

/***/ }),
/* 309 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__drop__ = __webpack_require__(303);



/**
 * Returns a new list containing the last `n` elements of the given list.
 * If `n > list.length`, returns a list of `list.length` elements.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements to return.
 * @param {Array} xs The collection to consider.
 * @return {Array}
 * @see R.dropLast
 * @example
 *
 *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(3, 'ramda');               //=> 'mda'
 */
var takeLast = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function takeLast(n, xs) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__drop__["a" /* default */])(n >= 0 ? xs.length - n : 0, xs);
});
/* harmony default export */ __webpack_exports__["a"] = (takeLast);

/***/ }),
/* 310 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_Set__ = __webpack_require__(731);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied function to
 * each list element. Prefers the first item if the supplied function produces
 * the same value on two items. [`R.equals`](#equals) is used for comparison.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> b) -> [a] -> [a]
 * @param {Function} fn A function used to produce a value to use during comparisons.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
 */
var uniqBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function uniqBy(fn, list) {
  var set = new __WEBPACK_IMPORTED_MODULE_0__internal_Set__["a" /* default */]();
  var result = [];
  var idx = 0;
  var appliedItem, item;

  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);
    if (set.add(appliedItem)) {
      result.push(item);
    }
    idx += 1;
  }
  return result;
});
/* harmony default export */ __webpack_exports__["a"] = (uniqBy);

/***/ }),
/* 311 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Creates an object containing a single key:value pair.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @sig String -> a -> {String:a}
 * @param {String} key
 * @param {*} val
 * @return {Object}
 * @see R.pair
 * @example
 *
 *      var matchPhrases = R.compose(
 *        R.objOf('must'),
 *        R.map(R.objOf('match_phrase'))
 *      );
 *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
 */
var objOf = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function objOf(key, val) {
  var obj = {};
  obj[key] = val;
  return obj;
});
/* harmony default export */ __webpack_exports__["a"] = (objOf);

/***/ }),
/* 312 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * See if an object (`val`) is an instance of the supplied constructor. This
 * function will check up the inheritance chain, if any.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Type
 * @sig (* -> {*}) -> a -> Boolean
 * @param {Object} ctor A constructor
 * @param {*} val The value to test
 * @return {Boolean}
 * @example
 *
 *      R.is(Object, {}); //=> true
 *      R.is(Number, 1); //=> true
 *      R.is(Object, 1); //=> false
 *      R.is(String, 's'); //=> true
 *      R.is(String, new String('')); //=> true
 *      R.is(Object, new String('')); //=> true
 *      R.is(Object, 's'); //=> false
 *      R.is(Number, {}); //=> false
 */
var is = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function is(Ctor, val) {
  return val != null && val.constructor === Ctor || val instanceof Ctor;
});
/* harmony default export */ __webpack_exports__["a"] = (is);

/***/ }),
/* 313 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__converge__ = __webpack_require__(297);



/**
 * juxt applies a list of functions to a list of values.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Function
 * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
 * @param {Array} fns An array of functions
 * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
 * @see R.applySpec
 * @example
 *
 *      var getRange = R.juxt([Math.min, Math.max]);
 *      getRange(3, 4, 9, -3); //=> [-3, 9]
 * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
 */
var juxt = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function juxt(fns) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__converge__["a" /* default */])(function () {
    return Array.prototype.slice.call(arguments, 0);
  }, fns);
});
/* harmony default export */ __webpack_exports__["a"] = (juxt);

/***/ }),
/* 314 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isNumber__ = __webpack_require__(315);



/**
 * Returns the number of elements in the array by returning `list.length`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [a] -> Number
 * @param {Array} list The array to inspect.
 * @return {Number} The length of the array.
 * @example
 *
 *      R.length([]); //=> 0
 *      R.length([1, 2, 3]); //=> 3
 */
var length = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function length(list) {
  return list != null && Object(__WEBPACK_IMPORTED_MODULE_1__internal_isNumber__["a" /* default */])(list.length) ? list.length : NaN;
});
/* harmony default export */ __webpack_exports__["a"] = (length);

/***/ }),
/* 315 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _isNumber;
function _isNumber(x) {
  return Object.prototype.toString.call(x) === '[object Number]';
}

/***/ }),
/* 316 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sum__ = __webpack_require__(317);



/**
 * Returns the mean of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.median
 * @example
 *
 *      R.mean([2, 7, 9]); //=> 6
 *      R.mean([]); //=> NaN
 */
var mean = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function mean(list) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__sum__["a" /* default */])(list) / list.length;
});
/* harmony default export */ __webpack_exports__["a"] = (mean);

/***/ }),
/* 317 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduce__ = __webpack_require__(47);



/**
 * Adds together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The sum of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.sum([2,4,6,8,100,1]); //=> 121
 */
var sum = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__add__["a" /* default */], 0);
/* harmony default export */ __webpack_exports__["a"] = (sum);

/***/ }),
/* 318 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_has__ = __webpack_require__(18);




/**
 * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an
 * additional function that will be applied to a given argument set and used to
 * create the cache key under which the results of the function to be memoized
 * will be stored. Care must be taken when implementing key generation to avoid
 * clashes that may overwrite previous entries erroneously.
 *
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (*... -> String) -> (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to generate the cache key.
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @see R.memoize
 * @example
 *
 *      let count = 0;
 *      const factorial = R.memoizeWith(R.identity, n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */
var memoizeWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function memoizeWith(mFn, fn) {
  var cache = {};
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(fn.length, function () {
    var key = mFn.apply(this, arguments);
    if (!Object(__WEBPACK_IMPORTED_MODULE_2__internal_has__["a" /* default */])(key, cache)) {
      cache[key] = fn.apply(this, arguments);
    }
    return cache[key];
  });
});
/* harmony default export */ __webpack_exports__["a"] = (memoizeWith);

/***/ }),
/* 319 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Multiplies two numbers. Equivalent to `a * b` but curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a * b`.
 * @see R.divide
 * @example
 *
 *      var double = R.multiply(2);
 *      var triple = R.multiply(3);
 *      double(3);       //=>  6
 *      triple(4);       //=> 12
 *      R.multiply(2, 5);  //=> 10
 */
var multiply = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function multiply(a, b) {
  return a * b;
});
/* harmony default export */ __webpack_exports__["a"] = (multiply);

/***/ }),
/* 320 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


// `Identity` is a functor that holds a single value, where `map` simply
// transforms the held value with the provided function.
var Identity = function (x) {
  return { value: x, map: function (f) {
      return Identity(f(x));
    } };
};

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the result of applying the given function to
 * the focused value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> (a -> a) -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
 */
var over = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function over(lens, f, x) {
  // The value returned by the getter function is first transformed with `f`,
  // then set as the value of an `Identity`. This is then mapped over with the
  // setter function of the lens.
  return lens(function (y) {
    return Identity(f(y));
  })(x).value;
});
/* harmony default export */ __webpack_exports__["a"] = (over);

/***/ }),
/* 321 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _createPartialApplicator;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curry2__ = __webpack_require__(0);



function _createPartialApplicator(concat) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function (fn, args) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__arity__["a" /* default */])(Math.max(0, fn.length - args.length), function () {
      return fn.apply(this, concat(args, arguments));
    });
  });
}

/***/ }),
/* 322 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Similar to `pick` except that this one includes a `key: undefined` pair for
 * properties that don't exist.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.pick
 * @example
 *
 *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
 */
var pickAll = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function pickAll(names, obj) {
  var result = {};
  var idx = 0;
  var len = names.length;
  while (idx < len) {
    var name = names[idx];
    result[name] = obj[name];
    idx += 1;
  }
  return result;
});
/* harmony default export */ __webpack_exports__["a"] = (pickAll);

/***/ }),
/* 323 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Returns a new list with the given element at the front, followed by the
 * contents of the list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The item to add to the head of the output list.
 * @param {Array} list The array to add to the tail of the output list.
 * @return {Array} A new array.
 * @see R.append
 * @example
 *
 *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
 */
var prepend = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function prepend(el, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */])([el], list);
});
/* harmony default export */ __webpack_exports__["a"] = (prepend);

/***/ }),
/* 324 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);



/**
 * Accepts a function `fn` and a list of transformer functions and returns a
 * new curried function. When the new function is invoked, it calls the
 * function `fn` with parameters consisting of the result of calling each
 * supplied handler on successive arguments to the new function.
 *
 * If more arguments are passed to the returned function than transformer
 * functions, those arguments are passed directly to `fn` as additional
 * parameters. If you expect additional arguments that don't need to be
 * transformed, although you can ignore them, it's best to pass an identity
 * function so that the new function reports the correct arity.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} fn The function to wrap.
 * @param {Array} transformers A list of transformer functions
 * @return {Function} The wrapped function.
 * @see R.converge
 * @example
 *
 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
 * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
 */
var useWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function useWith(fn, transformers) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(transformers.length, function () {
    var args = [];
    var idx = 0;
    while (idx < transformers.length) {
      args.push(transformers[idx].call(this, arguments[idx]));
      idx += 1;
    }
    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
  });
});
/* harmony default export */ __webpack_exports__["a"] = (useWith);

/***/ }),
/* 325 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * Similar to [`reduce`](#reduce), except moves through the input list from the
 * right to the left.
 *
 * The iterator function receives two values: *(value, acc)*, while the arguments'
 * order of `reduce`'s iterator function is *(acc, value)*.
 *
 * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduceRight` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> b) -> b -> [a] -> b
 * @param {Function} fn The iterator function. Receives two values, the current element from the array
 *        and the accumulator.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.addIndex
 * @example
 *
 *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
 *      //    -               -2
 *      //   / \              / \
 *      //  1   -            1   3
 *      //     / \              / \
 *      //    2   -     ==>    2  -1
 *      //       / \              / \
 *      //      3   -            3   4
 *      //         / \              / \
 *      //        4   0            4   0
 *
 * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
 */
var reduceRight = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function reduceRight(fn, acc, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    acc = fn(list[idx], acc);
    idx -= 1;
  }
  return acc;
});
/* harmony default export */ __webpack_exports__["a"] = (reduceRight);

/***/ }),
/* 326 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Calls an input function `n` times, returning an array containing the results
 * of those function calls.
 *
 * `fn` is passed one argument: The current value of `n`, which begins at `0`
 * and is gradually incremented to `n - 1`.
 *
 * @func
 * @memberOf R
 * @since v0.2.3
 * @category List
 * @sig (Number -> a) -> Number -> [a]
 * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
 * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
 * @return {Array} An array containing the return values of all calls to `fn`.
 * @see R.repeat
 * @example
 *
 *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
 * @symb R.times(f, 0) = []
 * @symb R.times(f, 1) = [f(0)]
 * @symb R.times(f, 2) = [f(0), f(1)]
 */
var times = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function times(fn, n) {
  var len = Number(n);
  var idx = 0;
  var list;

  if (len < 0 || isNaN(len)) {
    throw new RangeError('n must be a non-negative number');
  }
  list = new Array(len);
  while (idx < len) {
    list[idx] = fn(idx);
    idx += 1;
  }
  return list;
});
/* harmony default export */ __webpack_exports__["a"] = (times);

/***/ }),
/* 327 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ap__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__map__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__prepend__ = __webpack_require__(323);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__reduceRight__ = __webpack_require__(325);






/**
 * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
 * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
 * Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
 * @param {Function} of
 * @param {*} traversable
 * @return {*}
 * @see R.traverse
 * @example
 *
 *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
 *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
 *
 *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
 *      R.sequence(R.of, Nothing());       //=> [Nothing()]
 */
var sequence = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function sequence(of, traversable) {
  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : Object(__WEBPACK_IMPORTED_MODULE_4__reduceRight__["a" /* default */])(function (x, acc) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__ap__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__map__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_3__prepend__["a" /* default */], x), acc);
  }, of([]), traversable);
});
/* harmony default export */ __webpack_exports__["a"] = (sequence);

/***/ }),
/* 328 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_containsWith__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied predicate to
 * two list elements. Prefers the first item if two items compare equal based
 * on the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      var strEq = R.eqBy(String);
 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
 */
var uniqWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function uniqWith(pred, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var item;
  while (idx < len) {
    item = list[idx];
    if (!Object(__WEBPACK_IMPORTED_MODULE_0__internal_containsWith__["a" /* default */])(pred, item, result)) {
      result[result.length] = item;
    }
    idx += 1;
  }
  return result;
});
/* harmony default export */ __webpack_exports__["a"] = (uniqWith);

/***/ }),
/* 329 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);



/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec. Each of the spec's own properties must be a predicate function.
 * Each predicate is applied to the value of the corresponding property of the
 * test object. `where` returns true if all the predicates return true, false
 * otherwise.
 *
 * `where` is well suited to declaratively expressing constraints for other
 * functions such as [`filter`](#filter) and [`find`](#find).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Object
 * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propSatisfies, R.whereEq
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.where({
 *        a: R.equals('foo'),
 *        b: R.complement(R.equals('bar')),
 *        x: R.gt(R.__, 10),
 *        y: R.lt(R.__, 20)
 *      });
 *
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
 *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
 */
var where = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function where(spec, testObj) {
  for (var prop in spec) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(prop, spec) && !spec[prop](testObj[prop])) {
      return false;
    }
  }
  return true;
});
/* harmony default export */ __webpack_exports__["a"] = (where);

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),
/* 331 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(30);
var settle = __webpack_require__(845);
var buildURL = __webpack_require__(847);
var parseHeaders = __webpack_require__(848);
var isURLSameOrigin = __webpack_require__(849);
var createError = __webpack_require__(333);
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(850);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (!window.XMLHttpRequest &&
        process.env.NODE_ENV !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(851);

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(331)))

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(846);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {


;(function (name, root, factory) {
  if (true) {
    module.exports = factory()
  }
  /* istanbul ignore next */
  else if (typeof define === 'function' && define.amd) {
    define(factory)
  }
  else {
    root[name] = factory()
  }
}('slugify', this, function () {
  var charMap = {
    // latin
    'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE',
    'Ç': 'C', 'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I',
    'Î': 'I', 'Ï': 'I', 'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O',
    'Õ': 'O', 'Ö': 'O', 'Ő': 'O', 'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U',
    'Ü': 'U', 'Ű': 'U', 'Ý': 'Y', 'Þ': 'TH', 'ß': 'ss', 'à': 'a', 'á': 'a',
    'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c', 'è': 'e',
    'é': 'e', 'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i',
    'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o',
    'ő': 'o', 'ø': 'o', 'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u', 'ű': 'u',
    'ý': 'y', 'þ': 'th', 'ÿ': 'y', 'ẞ': 'SS',
    // greek
    'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z', 'η': 'h', 'θ': '8',
    'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm', 'ν': 'n', 'ξ': '3', 'ο': 'o', 'π': 'p',
    'ρ': 'r', 'σ': 's', 'τ': 't', 'υ': 'y', 'φ': 'f', 'χ': 'x', 'ψ': 'ps', 'ω': 'w',
    'ά': 'a', 'έ': 'e', 'ί': 'i', 'ό': 'o', 'ύ': 'y', 'ή': 'h', 'ώ': 'w', 'ς': 's',
    'ϊ': 'i', 'ΰ': 'y', 'ϋ': 'y', 'ΐ': 'i',
    'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z', 'Η': 'H', 'Θ': '8',
    'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M', 'Ν': 'N', 'Ξ': '3', 'Ο': 'O', 'Π': 'P',
    'Ρ': 'R', 'Σ': 'S', 'Τ': 'T', 'Υ': 'Y', 'Φ': 'F', 'Χ': 'X', 'Ψ': 'PS', 'Ω': 'W',
    'Ά': 'A', 'Έ': 'E', 'Ί': 'I', 'Ό': 'O', 'Ύ': 'Y', 'Ή': 'H', 'Ώ': 'W', 'Ϊ': 'I',
    'Ϋ': 'Y',
    // turkish
    'ş': 's', 'Ş': 'S', 'ı': 'i', 'İ': 'I', 'ç': 'c', 'Ç': 'C', 'ü': 'u', 'Ü': 'U',
    'ö': 'o', 'Ö': 'O', 'ğ': 'g', 'Ğ': 'G',
    // russian
    'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo', 'ж': 'zh',
    'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o',
    'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c',
    'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': 'u', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu',
    'я': 'ya',
    'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo', 'Ж': 'Zh',
    'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M', 'Н': 'N', 'О': 'O',
    'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U', 'Ф': 'F', 'Х': 'H', 'Ц': 'C',
    'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sh', 'Ъ': 'U', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu',
    'Я': 'Ya',
    // ukranian
    'Є': 'Ye', 'І': 'I', 'Ї': 'Yi', 'Ґ': 'G', 'є': 'ye', 'і': 'i', 'ї': 'yi', 'ґ': 'g',
    // czech
    'č': 'c', 'ď': 'd', 'ě': 'e', 'ň': 'n', 'ř': 'r', 'š': 's', 'ť': 't', 'ů': 'u',
    'ž': 'z', 'Č': 'C', 'Ď': 'D', 'Ě': 'E', 'Ň': 'N', 'Ř': 'R', 'Š': 'S', 'Ť': 'T',
    'Ů': 'U', 'Ž': 'Z',
    // polish
    'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's', 'ź': 'z',
    'ż': 'z', 'Ą': 'A', 'Ć': 'C', 'Ę': 'e', 'Ł': 'L', 'Ń': 'N', 'Ś': 'S',
    'Ź': 'Z', 'Ż': 'Z',
    // latvian
    'ā': 'a', 'č': 'c', 'ē': 'e', 'ģ': 'g', 'ī': 'i', 'ķ': 'k', 'ļ': 'l', 'ņ': 'n',
    'š': 's', 'ū': 'u', 'ž': 'z', 'Ā': 'A', 'Č': 'C', 'Ē': 'E', 'Ģ': 'G', 'Ī': 'i',
    'Ķ': 'k', 'Ļ': 'L', 'Ņ': 'N', 'Š': 'S', 'Ū': 'u', 'Ž': 'Z',
    // serbian latin
    'đ': 'dj', 'ǌ': 'nj', 'ǉ': 'lj', 'Đ': 'DJ', 'ǋ': 'NJ', 'ǈ': 'LJ',
    // serbian cyrillic
    'ђ': 'dj', 'ј': 'j', 'љ': 'lj', 'њ': 'nj', 'ћ': 'c', 'џ': 'dz', 'Ђ': 'DJ', 'Ј': 'J',
    'Љ': 'LJ', 'Њ': 'NJ', 'Ћ': 'C', 'Џ': 'DZ',
    // currency
    '€': 'euro', '₢': 'cruzeiro', '₣': 'french franc', '£': 'pound',
    '₤': 'lira', '₥': 'mill', '₦': 'naira', '₧': 'peseta', '₨': 'rupee',
    '₩': 'won', '₪': 'new shequel', '₫': 'dong', '₭': 'kip', '₮': 'tugrik',
    '₯': 'drachma', '₰': 'penny', '₱': 'peso', '₲': 'guarani', '₳': 'austral',
    '₴': 'hryvnia', '₵': 'cedi', '¢': 'cent', '¥': 'yen', '元': 'yuan',
    '円': 'yen', '﷼': 'rial', '₠': 'ecu', '¤': 'currency', '฿': 'baht',
    '$': 'dollar', '₽': 'russian ruble',
    // symbols
    '©': '(c)', 'œ': 'oe', 'Œ': 'OE', '∑': 'sum', '®': '(r)', '†': '+',
    '“': '"', '”': '"', '‘': "'", '’': "'", '∂': 'd', 'ƒ': 'f', '™': 'tm',
    '℠': 'sm', '…': '...', '˚': 'o', 'º': 'o', 'ª': 'a', '•': '*',
    '∆': 'delta', '∞': 'infinity', '♥': 'love', '&': 'and', '|': 'or',
    '<': 'less', '>': 'greater'
  }

  function replace (string, options) {
    options = (typeof options === 'string')
      ? {replacement: options}
      : options || {}

    string = string.split('')
      .reduce(function (result, ch) {
        if (charMap[ch]) {
          ch = charMap[ch]
        }
        // allowed
        ch = ch.replace(options.remove || /[^\w\s$*_+~.()'"!\-:@]/g, '')
        result += ch
        return result
      }, '')
      // trim leading/trailing spaces
      .replace(/^\s+|\s+$/g, '')
      // convert spaces
      .replace(/[-\s]+/g, options.replacement || '-')
      // remove trailing separator
      .replace('#{replacement}$', '')

    return options.lower ? string.toLowerCase() : string
  }

  replace.extend = function (customMap) {
    for (var key in customMap) {
      charMap[key] = customMap[key]
    }
  }

  return replace
}))


/***/ }),
/* 337 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_schedule__ = __webpack_require__(37);


/* harmony default export */ __webpack_exports__["a"] = (function(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule.state > __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["d" /* STARTING */] && schedule.state < __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["b" /* ENDING */];
    schedule.state = __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["a" /* ENDED */];
    schedule.timer.stop();
    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
});


/***/ }),
/* 338 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_timer__ = __webpack_require__(197);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_timer__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__src_timer__["c"]; });
/* unused harmony reexport timerFlush */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_timeout__ = __webpack_require__(864);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__src_timeout__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_interval__ = __webpack_require__(865);
/* unused harmony reexport interval */







/***/ }),
/* 339 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deg2rad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return rad2deg; });
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;


/***/ }),
/* 340 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export rgbBasis */
/* unused harmony export rgbBasisClosed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__basis__ = __webpack_require__(202);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__basisClosed__ = __webpack_require__(341);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__color__ = __webpack_require__(91);





/* harmony default export */ __webpack_exports__["a"] = ((function rgbGamma(y) {
  var color = Object(__WEBPACK_IMPORTED_MODULE_3__color__["b" /* gamma */])(y);

  function rgb(start, end) {
    var r = color((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(start)).r, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = Object(__WEBPACK_IMPORTED_MODULE_3__color__["a" /* default */])(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1));

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(__WEBPACK_IMPORTED_MODULE_1__basis__["b" /* default */]);
var rgbBasisClosed = rgbSpline(__WEBPACK_IMPORTED_MODULE_2__basisClosed__["a" /* default */]);


/***/ }),
/* 341 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__basis__ = __webpack_require__(202);


/* harmony default export */ __webpack_exports__["a"] = (function(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return Object(__WEBPACK_IMPORTED_MODULE_0__basis__["a" /* basis */])((t - i / n) * n, v0, v1, v2, v3);
  };
});


/***/ }),
/* 342 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 343 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(199);


/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(nb),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
});


/***/ }),
/* 344 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var d = new Date;
  return a = +a, b -= a, function(t) {
    return d.setTime(a + b * t), d;
  };
});


/***/ }),
/* 345 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(199);


/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
});


/***/ }),
/* 346 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(126);


var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
});


/***/ }),
/* 347 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(198);



/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var c;
  return (typeof b === "number" ? __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["a" /* interpolateNumber */]
      : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateRgb */]
      : (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateRgb */])
      : __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["c" /* interpolateString */])(a, b);
});


/***/ }),
/* 348 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return sliderEl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return outputYearEl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return playButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return loadPlayButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return sliderInit; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_ramda__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_slugify__ = __webpack_require__(336);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_slugify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_slugify__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__listeners__ = __webpack_require__(908);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__events__ = __webpack_require__(349);
var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }








// dom-elements
var sliderEl = document.querySelector('#inputYear');
var outputYearEl = document.querySelector('#outputYear');
var playButton = document.querySelector('.togglePlay');

var loadPlayButton = function loadPlayButton() {
    // Empty playButton's children
    while (playButton.firstChild) {
        playButton.removeChild(playButton.firstChild);
    }
    // Append play-icon
    var html = window.sliderPlaying ? '<i class="fas fa-pause"></i>' : '<i class="fas fa-play"></i>';
    new DOMParser().parseFromString(html, 'text/html').body.childNodes.forEach(function (node) {
        return playButton.appendChild(node);
    });
};

/**
 * Initializes slider years to correspond selected country data
 */
var sliderInit = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var slugOptions, dataResponse, data, years, cursorYear;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        if (sliderEl) {
                            _context.next = 2;
                            break;
                        }

                        return _context.abrupt('return');

                    case 2:
                        slugOptions = { lower: true, remove: /[$*_+~.,()'"!\-:@]/g };
                        _context.next = 5;
                        return __WEBPACK_IMPORTED_MODULE_0_axios___default.a.get('/data/' + __WEBPACK_IMPORTED_MODULE_2_slugify___default()(window.country, slugOptions) + '.json');

                    case 5:
                        dataResponse = _context.sent;


                        if (dataResponse.status === 200) {
                            data = dataResponse.data;
                            years = __WEBPACK_IMPORTED_MODULE_1_ramda__["b" /* keys */](data);
                            cursorYear = years[0];


                            years.some(function (year) {
                                var cursor = __WEBPACK_IMPORTED_MODULE_1_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_1_ramda__["h" /* propSatisfies */](function (c) {
                                    return c !== 'Various/Unknown';
                                }, 'country'))(data[year]);
                                if (cursor) {
                                    cursorYear = year;
                                    return true;
                                }
                            });

                            window.year = sliderEl.value = outputYearEl.value = cursorYear ? cursorYear : years[0];
                            sliderEl.setAttribute('min', years[0]);
                            sliderEl.setAttribute('max', years[years.length - 1]);
                            sliderEl.value = cursorYear;
                            window.dispatchEvent(__WEBPACK_IMPORTED_MODULE_4__events__["c" /* yearChanged */]);
                        }

                        loadPlayButton();

                    case 8:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, _this);
    }));

    return function sliderInit() {
        return _ref.apply(this, arguments);
    };
}();

/* harmony default export */ __webpack_exports__["a"] = (_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    _context2.next = 2;
                    return sliderInit();

                case 2:
                    Object(__WEBPACK_IMPORTED_MODULE_3__listeners__["a" /* default */])();

                case 3:
                case 'end':
                    return _context2.stop();
            }
        }
    }, _callee2, _this);
})));

/***/ }),
/* 349 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return yearChanged; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return sliderPlayStarted; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return sliderPlayStopped; });
/***
 * In this file is defined every custom event related to this
 * particular component.
 */

var createEvent = function createEvent(name) {
  var event = document.createEvent('Event');
  event.initEvent(name, true, true);
  return event;
};

var yearChanged = createEvent('yearChanged');
var sliderPlayStarted = createEvent('sliderPlayStarted');
var sliderPlayStopped = createEvent('sliderPlayStopped');

/***/ }),
/* 350 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return listWars; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__listeners__ = __webpack_require__(909);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json__ = __webpack_require__(910);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__data_SODAT_json__);



/**
 * Lists wars (randomly) to the event box based on the current year and countries where the refugees are coming from
 * TODO: Bug checking. Do we want to display wars that don't concern countryList countries?
 */
var listWars = function listWars() {
    var year = window.year;
    var country = window.country;
    var countryList = window.map.fromCountryList;
    var warCount = 5;
    var warsUl = document.getElementById('wars');
    var indexList = [];

    countryList.push(country);

    if (warsUl.childElementCount != 0) {
        while (warsUl.firstChild) {
            warsUl.removeChild(warsUl.firstChild);
        }
    }

    for (var i in __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a) {
        if (__WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].start == year) {
            //if (wars[i].start < year && year < wars[i].stop) {

            if (typeof __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location !== null && __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location.length > 1) {
                for (var j in __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location) {
                    for (var k in countryList) {
                        if (__WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location[j] == countryList[k]) {
                            addWarToBox(i);
                        }
                    }
                }
            } else if (typeof __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location !== null) {
                for (var _j in countryList) {
                    if (__WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[i].location == countryList[_j]) {
                        addWarToBox(i);
                    }
                }
            } else {
                addWarToBox(i);
            }
        }
    }

    function addWarToBox(warIndex) {
        //Check if the event box is full
        var warsUl = document.getElementById('wars');
        if (warsUl.childElementCount >= warCount) return;

        //Check for doubles
        for (var _i in indexList) {
            if (indexList[_i] == warIndex) {
                return;
            }
        }

        indexList.push(warIndex);

        var html = '\n            <li id="event-box">\n                <h4 class="war-name">\n                    <a href="' + __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[warIndex].link + '">' + __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[warIndex].name + '</a>\n                </h4>\n                <p class="start-year">\n                    Start: ' + __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[warIndex].start + '\n                </p>\n                <p class="end-year">\n                    End: ' + __WEBPACK_IMPORTED_MODULE_1__data_SODAT_json___default.a[warIndex].stop + '\n                </p>\n            </li>';

        new DOMParser().parseFromString(html, 'text/html').body.childNodes.forEach(function (node) {
            return warsUl.appendChild(node);
        });

        /* 
            var eventBox = document.createElement('li');
            eventBox.id = 'event-box';
            warsUl.appendChild(eventBox);
             var warName = document.createElement('h4');
            warName.classList.add('war-name');
            var warLink = document.createElement('a');
            warLink.href = wars[warIndex].link;
            var warTitle = document.createTextNode(wars[warIndex].name);
            warLink.appendChild(warTitle);
            warName.appendChild(warLink);
             var startYear = document.createElement('p');
            startYear.classList.add('start-year');
            startYear.appendChild(document.createTextNode('Start: ' + wars[warIndex].start));
             var endYear = document.createElement('p');
            endYear.classList.add('end-year');
            endYear.appendChild(document.createTextNode('End: ' + wars[warIndex].stop));
             eventBox.appendChild(warName);
            eventBox.appendChild(startYear);
            eventBox.appendChild(endYear);
        */
    }
};

/* harmony default export */ __webpack_exports__["a"] = (function () {
    listWars();
    Object(__WEBPACK_IMPORTED_MODULE_0__listeners__["a" /* default */])();
});

/***/ }),
/* 351 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return printCountryData; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__listeners__ = __webpack_require__(911);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__data_GDPData_json__ = __webpack_require__(912);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__data_GDPData_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__data_GDPData_json__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__data_GDPCapita_Json__ = __webpack_require__(913);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__data_GDPCapita_Json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__data_GDPCapita_Json__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__data_LEData_json__ = __webpack_require__(914);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__data_LEData_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__data_LEData_json__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__data_PopulationData_json__ = __webpack_require__(915);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__data_PopulationData_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__data_PopulationData_json__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_ramda__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_axios__ = __webpack_require__(194);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_axios__);








function numberInUnits(a, exponent, fixedPoint) {

    return (Number(a) / Math.pow(10, exponent)).toFixed(fixedPoint);
}

var printCountryData = function printCountryData() {

    //console.log("We made it!");

    var country = window.country;
    //var test = "Finland";
    var year = window.year;
    var countryInfo = document.getElementById('country-info');
    countryInfo.getElementsByClassName('side-title')[0].innerHTML = country;

    var yearGDP = __WEBPACK_IMPORTED_MODULE_5_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_5_ramda__["g" /* propEq */]('Country Name', window.country), __WEBPACK_IMPORTED_MODULE_1__data_GDPData_json___default.a)[year];
    var yearCapita = __WEBPACK_IMPORTED_MODULE_5_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_5_ramda__["g" /* propEq */]('Country Name', window.country), __WEBPACK_IMPORTED_MODULE_2__data_GDPCapita_Json___default.a)[year];
    var yearLE = __WEBPACK_IMPORTED_MODULE_5_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_5_ramda__["g" /* propEq */]('Country Name', window.country), __WEBPACK_IMPORTED_MODULE_3__data_LEData_json___default.a)[year];
    var yearPopulation = __WEBPACK_IMPORTED_MODULE_5_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_5_ramda__["g" /* propEq */]('Country Name', window.country), __WEBPACK_IMPORTED_MODULE_4__data_PopulationData_json___default.a)[year];

    //console.log('GDP: ' + numberInUnits(parseFloat(yearGDP.replace(',', '.')), 9, 2) + ' billion; Country: ' + window.country );
    //console.log("Capita: " + numberInUnits(parseFloat(yearCapita.replace(',', '.')), 3, 2) + " k; Country: " + window.country );
    //console.log("Life Expectancy: " + numberInUnits(parseFloat(yearLE.replace(',', '.')), 0, 1) + " years; Country: " + window.country );
    //console.log("Population: " + numberInUnits(parseFloat(yearPopulation), 6, 2) + " million; Country: " + window.country );

    var gdpEl = document.getElementById('gdp');
    var gdpCapitaEl = document.getElementById('gdp-capita');
    var lifeExpectancyEl = document.getElementById('life-expentancy');
    var populationEl = document.getElementById('population');
    gdpEl.innerHTML = 'GDP: ' + numberInUnits(parseFloat(yearGDP.replace(',', '.')), 9, 2) + ' bil.';
    gdpCapitaEl.innerHTML = 'GDP (capita): ' + numberInUnits(parseFloat(yearCapita.replace(',', '.')), 3, 2) + 'k';
    lifeExpectancyEl.innerHTML = 'Life expectancy: ' + numberInUnits(parseFloat(yearLE.replace(',', '.')), 0, 1) + ' years';
    populationEl.innerHTML = 'Population: ' + numberInUnits(parseFloat(yearPopulation), 6, 3) + ' mil.';

    //let gdptest = Object.keys(population).map((key) => {
    //  const countryCodeObj = {'Country Name': key};
    //  const row = {...countryCodeObj, ...population[key]};
    //  return row;
    //});
    //console.log(JSON.stringify(gdptest));


    //console.log("GDP: " + gdp[year] + " from " + gdp[country]);
    //console.log("Capita: " + gdpcapita[country][year]);
    //console.log("Life Expectancy: " + le[country][year]);
    //console.log("Population: " + population[country][year]);
};

/* harmony default export */ __webpack_exports__["a"] = (function () {
    Object(__WEBPACK_IMPORTED_MODULE_0__listeners__["a" /* default */])();
});

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(353);
module.exports = __webpack_require__(555);


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(354);

__webpack_require__(551);

__webpack_require__(552);

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(203)))

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(355);
__webpack_require__(357);
__webpack_require__(358);
__webpack_require__(359);
__webpack_require__(360);
__webpack_require__(361);
__webpack_require__(362);
__webpack_require__(363);
__webpack_require__(364);
__webpack_require__(365);
__webpack_require__(366);
__webpack_require__(367);
__webpack_require__(368);
__webpack_require__(369);
__webpack_require__(370);
__webpack_require__(371);
__webpack_require__(373);
__webpack_require__(374);
__webpack_require__(375);
__webpack_require__(376);
__webpack_require__(377);
__webpack_require__(378);
__webpack_require__(379);
__webpack_require__(380);
__webpack_require__(381);
__webpack_require__(382);
__webpack_require__(383);
__webpack_require__(384);
__webpack_require__(385);
__webpack_require__(386);
__webpack_require__(387);
__webpack_require__(388);
__webpack_require__(389);
__webpack_require__(390);
__webpack_require__(391);
__webpack_require__(392);
__webpack_require__(393);
__webpack_require__(394);
__webpack_require__(395);
__webpack_require__(396);
__webpack_require__(397);
__webpack_require__(398);
__webpack_require__(399);
__webpack_require__(400);
__webpack_require__(401);
__webpack_require__(402);
__webpack_require__(403);
__webpack_require__(404);
__webpack_require__(405);
__webpack_require__(406);
__webpack_require__(407);
__webpack_require__(408);
__webpack_require__(409);
__webpack_require__(410);
__webpack_require__(411);
__webpack_require__(412);
__webpack_require__(413);
__webpack_require__(414);
__webpack_require__(415);
__webpack_require__(416);
__webpack_require__(417);
__webpack_require__(418);
__webpack_require__(419);
__webpack_require__(420);
__webpack_require__(421);
__webpack_require__(422);
__webpack_require__(423);
__webpack_require__(424);
__webpack_require__(425);
__webpack_require__(426);
__webpack_require__(427);
__webpack_require__(428);
__webpack_require__(429);
__webpack_require__(430);
__webpack_require__(431);
__webpack_require__(432);
__webpack_require__(433);
__webpack_require__(435);
__webpack_require__(436);
__webpack_require__(438);
__webpack_require__(439);
__webpack_require__(440);
__webpack_require__(441);
__webpack_require__(442);
__webpack_require__(443);
__webpack_require__(444);
__webpack_require__(446);
__webpack_require__(447);
__webpack_require__(448);
__webpack_require__(449);
__webpack_require__(450);
__webpack_require__(451);
__webpack_require__(452);
__webpack_require__(453);
__webpack_require__(454);
__webpack_require__(455);
__webpack_require__(456);
__webpack_require__(457);
__webpack_require__(458);
__webpack_require__(149);
__webpack_require__(459);
__webpack_require__(460);
__webpack_require__(222);
__webpack_require__(461);
__webpack_require__(462);
__webpack_require__(463);
__webpack_require__(464);
__webpack_require__(465);
__webpack_require__(225);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(466);
__webpack_require__(467);
__webpack_require__(468);
__webpack_require__(469);
__webpack_require__(470);
__webpack_require__(471);
__webpack_require__(472);
__webpack_require__(473);
__webpack_require__(474);
__webpack_require__(475);
__webpack_require__(476);
__webpack_require__(477);
__webpack_require__(478);
__webpack_require__(479);
__webpack_require__(480);
__webpack_require__(481);
__webpack_require__(482);
__webpack_require__(483);
__webpack_require__(484);
__webpack_require__(485);
__webpack_require__(486);
__webpack_require__(487);
__webpack_require__(488);
__webpack_require__(489);
__webpack_require__(490);
__webpack_require__(491);
__webpack_require__(492);
__webpack_require__(493);
__webpack_require__(494);
__webpack_require__(495);
__webpack_require__(496);
__webpack_require__(497);
__webpack_require__(498);
__webpack_require__(499);
__webpack_require__(500);
__webpack_require__(501);
__webpack_require__(502);
__webpack_require__(503);
__webpack_require__(504);
__webpack_require__(505);
__webpack_require__(506);
__webpack_require__(507);
__webpack_require__(508);
__webpack_require__(509);
__webpack_require__(510);
__webpack_require__(511);
__webpack_require__(512);
__webpack_require__(513);
__webpack_require__(514);
__webpack_require__(515);
__webpack_require__(516);
__webpack_require__(517);
__webpack_require__(518);
__webpack_require__(519);
__webpack_require__(520);
__webpack_require__(521);
__webpack_require__(522);
__webpack_require__(523);
__webpack_require__(524);
__webpack_require__(525);
__webpack_require__(526);
__webpack_require__(527);
__webpack_require__(528);
__webpack_require__(529);
__webpack_require__(530);
__webpack_require__(531);
__webpack_require__(532);
__webpack_require__(533);
__webpack_require__(534);
__webpack_require__(535);
__webpack_require__(536);
__webpack_require__(537);
__webpack_require__(538);
__webpack_require__(539);
__webpack_require__(540);
__webpack_require__(541);
__webpack_require__(542);
__webpack_require__(543);
__webpack_require__(544);
__webpack_require__(545);
__webpack_require__(546);
__webpack_require__(547);
__webpack_require__(548);
__webpack_require__(549);
__webpack_require__(550);
module.exports = __webpack_require__(38);


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(6);
var has = __webpack_require__(19);
var DESCRIPTORS = __webpack_require__(10);
var $export = __webpack_require__(1);
var redefine = __webpack_require__(21);
var META = __webpack_require__(50).KEY;
var $fails = __webpack_require__(7);
var shared = __webpack_require__(92);
var setToStringTag = __webpack_require__(69);
var uid = __webpack_require__(57);
var wks = __webpack_require__(9);
var wksExt = __webpack_require__(205);
var wksDefine = __webpack_require__(129);
var enumKeys = __webpack_require__(356);
var isArray = __webpack_require__(95);
var anObject = __webpack_require__(5);
var toIObject = __webpack_require__(24);
var toPrimitive = __webpack_require__(39);
var createDesc = __webpack_require__(56);
var _create = __webpack_require__(61);
var gOPNExt = __webpack_require__(208);
var $GOPD = __webpack_require__(25);
var $DP = __webpack_require__(11);
var $keys = __webpack_require__(59);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(62).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(80).f = $propertyIsEnumerable;
  __webpack_require__(94).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(58)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    replacer = args[1];
    if (typeof replacer == 'function') $replacer = replacer;
    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
      if ($replacer) value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(20)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(59);
var gOPS = __webpack_require__(94);
var pIE = __webpack_require__(80);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(61) });


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(10), 'Object', { defineProperty: __webpack_require__(11).f });


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(10), 'Object', { defineProperties: __webpack_require__(207) });


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(24);
var $getOwnPropertyDescriptor = __webpack_require__(25).f;

__webpack_require__(42)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(15);
var $getPrototypeOf = __webpack_require__(26);

__webpack_require__(42)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(15);
var $keys = __webpack_require__(59);

__webpack_require__(42)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(42)('getOwnPropertyNames', function () {
  return __webpack_require__(208).f;
});


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(8);
var meta = __webpack_require__(50).onFreeze;

__webpack_require__(42)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(8);
var meta = __webpack_require__(50).onFreeze;

__webpack_require__(42)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(8);
var meta = __webpack_require__(50).onFreeze;

__webpack_require__(42)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(8);

__webpack_require__(42)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(8);

__webpack_require__(42)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(8);

__webpack_require__(42)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(1);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(209) });


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(1);
$export($export.S, 'Object', { is: __webpack_require__(372) });


/***/ }),
/* 372 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(1);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(133).set });


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(81);
var test = {};
test[__webpack_require__(9)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(21)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(1);

$export($export.P, 'Function', { bind: __webpack_require__(210) });


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(11).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(10) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(8);
var getPrototypeOf = __webpack_require__(26);
var HAS_INSTANCE = __webpack_require__(9)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(11).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseInt = __webpack_require__(212);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseFloat = __webpack_require__(213);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(6);
var has = __webpack_require__(19);
var cof = __webpack_require__(32);
var inheritIfRequired = __webpack_require__(135);
var toPrimitive = __webpack_require__(39);
var fails = __webpack_require__(7);
var gOPN = __webpack_require__(62).f;
var gOPD = __webpack_require__(25).f;
var dP = __webpack_require__(11).f;
var $trim = __webpack_require__(70).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(61)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(10) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(21)(global, NUMBER, $Number);
}


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toInteger = __webpack_require__(41);
var aNumberValue = __webpack_require__(214);
var repeat = __webpack_require__(136);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(7)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $fails = __webpack_require__(7);
var aNumberValue = __webpack_require__(214);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(1);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(1);
var _isFinite = __webpack_require__(6).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(1);

$export($export.S, 'Number', { isInteger: __webpack_require__(215) });


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(1);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(1);
var isInteger = __webpack_require__(215);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(1);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(1);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseFloat = __webpack_require__(213);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $parseInt = __webpack_require__(212);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(1);
var log1p = __webpack_require__(216);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(1);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(1);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(1);
var sign = __webpack_require__(137);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(1);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(1);
var $expm1 = __webpack_require__(138);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', { fround: __webpack_require__(217) });


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(1);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(1);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(7)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', { log1p: __webpack_require__(216) });


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', { sign: __webpack_require__(137) });


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(1);
var expm1 = __webpack_require__(138);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(7)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(1);
var expm1 = __webpack_require__(138);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var toAbsoluteIndex = __webpack_require__(60);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var toIObject = __webpack_require__(24);
var toLength = __webpack_require__(12);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(70)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(139)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(140)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $at = __webpack_require__(139)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(1);
var toLength = __webpack_require__(12);
var context = __webpack_require__(142);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(143)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(1);
var context = __webpack_require__(142);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(143)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(136)
});


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(1);
var toLength = __webpack_require__(12);
var context = __webpack_require__(142);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(143)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(22)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(22)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(22)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(22)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(22)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(22)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(22)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(22)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(22)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(22)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(22)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(22)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(22)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(1);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(39);

$export($export.P + $export.F * __webpack_require__(7)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(1);
var toISOString = __webpack_require__(434);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(7);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(21)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(9)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(20)(proto, TO_PRIMITIVE, __webpack_require__(437));


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(5);
var toPrimitive = __webpack_require__(39);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(1);

$export($export.S, 'Array', { isArray: __webpack_require__(95) });


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(31);
var $export = __webpack_require__(1);
var toObject = __webpack_require__(15);
var call = __webpack_require__(218);
var isArrayIter = __webpack_require__(144);
var toLength = __webpack_require__(12);
var createProperty = __webpack_require__(145);
var getIterFn = __webpack_require__(146);

$export($export.S + $export.F * !__webpack_require__(97)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var createProperty = __webpack_require__(145);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(7)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(1);
var toIObject = __webpack_require__(24);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(79) != Object || !__webpack_require__(33)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var html = __webpack_require__(132);
var cof = __webpack_require__(32);
var toAbsoluteIndex = __webpack_require__(60);
var toLength = __webpack_require__(12);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(7)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var aFunction = __webpack_require__(17);
var toObject = __webpack_require__(15);
var fails = __webpack_require__(7);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(33)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $forEach = __webpack_require__(43)(0);
var STRICT = __webpack_require__(33)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(8);
var isArray = __webpack_require__(95);
var SPECIES = __webpack_require__(9)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $map = __webpack_require__(43)(1);

$export($export.P + $export.F * !__webpack_require__(33)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $filter = __webpack_require__(43)(2);

$export($export.P + $export.F * !__webpack_require__(33)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $some = __webpack_require__(43)(3);

$export($export.P + $export.F * !__webpack_require__(33)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $every = __webpack_require__(43)(4);

$export($export.P + $export.F * !__webpack_require__(33)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $reduce = __webpack_require__(219);

$export($export.P + $export.F * !__webpack_require__(33)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $reduce = __webpack_require__(219);

$export($export.P + $export.F * !__webpack_require__(33)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $indexOf = __webpack_require__(93)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(33)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toIObject = __webpack_require__(24);
var toInteger = __webpack_require__(41);
var toLength = __webpack_require__(12);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(33)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(1);

$export($export.P, 'Array', { copyWithin: __webpack_require__(220) });

__webpack_require__(51)('copyWithin');


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(1);

$export($export.P, 'Array', { fill: __webpack_require__(148) });

__webpack_require__(51)('fill');


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(1);
var $find = __webpack_require__(43)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(51)(KEY);


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(1);
var $find = __webpack_require__(43)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(51)(KEY);


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(63)('Array');


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);
var inheritIfRequired = __webpack_require__(135);
var dP = __webpack_require__(11).f;
var gOPN = __webpack_require__(62).f;
var isRegExp = __webpack_require__(96);
var $flags = __webpack_require__(98);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(10) && (!CORRECT_NEW || __webpack_require__(7)(function () {
  re2[__webpack_require__(9)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(21)(global, 'RegExp', $RegExp);
}

__webpack_require__(63)('RegExp');


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(222);
var anObject = __webpack_require__(5);
var $flags = __webpack_require__(98);
var DESCRIPTORS = __webpack_require__(10);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(21)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(7)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(99)('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(99)('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(99)('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(99)('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = __webpack_require__(96);
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(58);
var global = __webpack_require__(6);
var ctx = __webpack_require__(31);
var classof = __webpack_require__(81);
var $export = __webpack_require__(1);
var isObject = __webpack_require__(8);
var aFunction = __webpack_require__(17);
var anInstance = __webpack_require__(64);
var forOf = __webpack_require__(65);
var speciesConstructor = __webpack_require__(100);
var task = __webpack_require__(150).set;
var microtask = __webpack_require__(151)();
var newPromiseCapabilityModule = __webpack_require__(152);
var perform = __webpack_require__(223);
var promiseResolve = __webpack_require__(224);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(9)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) domain.exit();
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  if (promise._h == 1) return false;
  var chain = promise._a || promise._c;
  var i = 0;
  var reaction;
  while (chain.length > i) {
    reaction = chain[i++];
    if (reaction.fail || !isUnhandled(reaction.promise)) return false;
  } return true;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(66)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(69)($Promise, PROMISE);
__webpack_require__(63)(PROMISE);
Wrapper = __webpack_require__(38)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(97)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(229);
var validate = __webpack_require__(72);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(101)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var $typed = __webpack_require__(102);
var buffer = __webpack_require__(153);
var anObject = __webpack_require__(5);
var toAbsoluteIndex = __webpack_require__(60);
var toLength = __webpack_require__(12);
var isObject = __webpack_require__(8);
var ArrayBuffer = __webpack_require__(6).ArrayBuffer;
var speciesConstructor = __webpack_require__(100);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(7)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var final = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < final) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(63)(ARRAY_BUFFER);


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
$export($export.G + $export.W + $export.F * !__webpack_require__(102).ABV, {
  DataView: __webpack_require__(153).DataView
});


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(48)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(1);
var aFunction = __webpack_require__(17);
var anObject = __webpack_require__(5);
var rApply = (__webpack_require__(6).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(7)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(1);
var create = __webpack_require__(61);
var aFunction = __webpack_require__(17);
var anObject = __webpack_require__(5);
var isObject = __webpack_require__(8);
var fails = __webpack_require__(7);
var bind = __webpack_require__(210);
var rConstruct = (__webpack_require__(6).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(11);
var $export = __webpack_require__(1);
var anObject = __webpack_require__(5);
var toPrimitive = __webpack_require__(39);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(7)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(1);
var gOPD = __webpack_require__(25).f;
var anObject = __webpack_require__(5);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(1);
var anObject = __webpack_require__(5);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(141)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(25);
var getPrototypeOf = __webpack_require__(26);
var has = __webpack_require__(19);
var $export = __webpack_require__(1);
var isObject = __webpack_require__(8);
var anObject = __webpack_require__(5);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(25);
var $export = __webpack_require__(1);
var anObject = __webpack_require__(5);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(1);
var getProto = __webpack_require__(26);
var anObject = __webpack_require__(5);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(1);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(1);
var anObject = __webpack_require__(5);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(1);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(231) });


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(1);
var anObject = __webpack_require__(5);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(11);
var gOPD = __webpack_require__(25);
var getPrototypeOf = __webpack_require__(26);
var has = __webpack_require__(19);
var $export = __webpack_require__(1);
var createDesc = __webpack_require__(56);
var anObject = __webpack_require__(5);
var isObject = __webpack_require__(8);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(1);
var setProto = __webpack_require__(133);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(1);
var $includes = __webpack_require__(93)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(51)('includes');


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(1);
var flattenIntoArray = __webpack_require__(232);
var toObject = __webpack_require__(15);
var toLength = __webpack_require__(12);
var aFunction = __webpack_require__(17);
var arraySpeciesCreate = __webpack_require__(147);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(51)('flatMap');


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(1);
var flattenIntoArray = __webpack_require__(232);
var toObject = __webpack_require__(15);
var toLength = __webpack_require__(12);
var toInteger = __webpack_require__(41);
var arraySpeciesCreate = __webpack_require__(147);

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(51)('flatten');


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(1);
var $at = __webpack_require__(139)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(1);
var $pad = __webpack_require__(233);

$export($export.P, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(1);
var $pad = __webpack_require__(233);

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(70)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(70)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(1);
var defined = __webpack_require__(40);
var toLength = __webpack_require__(12);
var isRegExp = __webpack_require__(96);
var getFlags = __webpack_require__(98);
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(141)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(129)('asyncIterator');


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(129)('observable');


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(1);
var ownKeys = __webpack_require__(231);
var toIObject = __webpack_require__(24);
var gOPD = __webpack_require__(25);
var createProperty = __webpack_require__(145);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(1);
var $values = __webpack_require__(234)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(1);
var $entries = __webpack_require__(234)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(15);
var aFunction = __webpack_require__(17);
var $defineProperty = __webpack_require__(11);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(10) && $export($export.P + __webpack_require__(103), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(15);
var aFunction = __webpack_require__(17);
var $defineProperty = __webpack_require__(11);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(10) && $export($export.P + __webpack_require__(103), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(39);
var getPrototypeOf = __webpack_require__(26);
var getOwnPropertyDescriptor = __webpack_require__(25).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(10) && $export($export.P + __webpack_require__(103), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(1);
var toObject = __webpack_require__(15);
var toPrimitive = __webpack_require__(39);
var getPrototypeOf = __webpack_require__(26);
var getOwnPropertyDescriptor = __webpack_require__(25).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(10) && $export($export.P + __webpack_require__(103), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(1);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(235)('Map') });


/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(1);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(235)('Set') });


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(104)('Map');


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(104)('Set');


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(104)('WeakMap');


/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(104)('WeakSet');


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(105)('Map');


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(105)('Set');


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(105)('WeakMap');


/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(105)('WeakSet');


/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(1);

$export($export.G, { global: __webpack_require__(6) });


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(1);

$export($export.S, 'System', { global: __webpack_require__(6) });


/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(1);
var cof = __webpack_require__(32);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);
var scale = __webpack_require__(237);
var fround = __webpack_require__(217);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(1);

$export($export.S, 'Math', { scale: __webpack_require__(237) });


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(1);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(1);

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(1);
var core = __webpack_require__(38);
var global = __webpack_require__(6);
var speciesConstructor = __webpack_require__(100);
var promiseResolve = __webpack_require__(224);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(1);
var newPromiseCapability = __webpack_require__(152);
var perform = __webpack_require__(223);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var getPrototypeOf = __webpack_require__(26);
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(227);
var from = __webpack_require__(236);
var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var getPrototypeOf = __webpack_require__(26);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var getPrototypeOf = __webpack_require__(26);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(49);
var anObject = __webpack_require__(5);
var aFunction = __webpack_require__(17);
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(1);
var microtask = __webpack_require__(151)();
var process = __webpack_require__(6).process;
var isNode = __webpack_require__(32)(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(1);
var global = __webpack_require__(6);
var core = __webpack_require__(38);
var microtask = __webpack_require__(151)();
var OBSERVABLE = __webpack_require__(9)('observable');
var aFunction = __webpack_require__(17);
var anObject = __webpack_require__(5);
var anInstance = __webpack_require__(64);
var redefineAll = __webpack_require__(66);
var hide = __webpack_require__(20);
var forOf = __webpack_require__(65);
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(63)('Observable');


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(6);
var $export = __webpack_require__(1);
var navigator = global.navigator;
var slice = [].slice;
var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(1);
var $task = __webpack_require__(150);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(149);
var getKeys = __webpack_require__(59);
var redefine = __webpack_require__(21);
var global = __webpack_require__(6);
var hide = __webpack_require__(20);
var Iterators = __webpack_require__(71);
var wks = __webpack_require__(9);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(203)))

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(553);
module.exports = __webpack_require__(38).RegExp.escape;


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(1);
var $re = __webpack_require__(554)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 554 */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ }),
/* 555 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components__ = __webpack_require__(556);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__globals__ = __webpack_require__(916);
var init = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        // Run global variables' initialization function
                        Object(__WEBPACK_IMPORTED_MODULE_1__globals__["a" /* default */])();
                        // Boot our components
                        _context.next = 3;
                        return __WEBPACK_IMPORTED_MODULE_0__components__["c" /* MapComponent */]();

                    case 3:
                        _context.next = 5;
                        return __WEBPACK_IMPORTED_MODULE_0__components__["d" /* SliderComponent */]();

                    case 5:
                        _context.next = 7;
                        return __WEBPACK_IMPORTED_MODULE_0__components__["b" /* EventBox */]();

                    case 7:
                        _context.next = 9;
                        return __WEBPACK_IMPORTED_MODULE_0__components__["a" /* CountryInfo */]();

                    case 9:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function init() {
        return _ref.apply(this, arguments);
    };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }




document.addEventListener('DOMContentLoaded', init, false);

/***/ }),
/* 556 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__map__ = __webpack_require__(557);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__map__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__year_slider__ = __webpack_require__(348);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_1__year_slider__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__event_box__ = __webpack_require__(350);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__event_box__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__country_info__ = __webpack_require__(351);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_3__country_info__["a"]; });
/**
 * In this file every component is registered with desired name
 */






/***/ }),
/* 557 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export allCoordinates */
/* unused harmony export fromCountryList */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_geo__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_topojson_client__ = __webpack_require__(601);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__listeners__ = __webpack_require__(608);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__maps_world_json__ = __webpack_require__(907);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__maps_world_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__maps_world_json__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__map_settings__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_map__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__events__ = __webpack_require__(196);
var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

//import { scaleLinear } from 'd3-scale';


//import * as R from 'ramda';
//import gdpData from '../../data/GDPData.json';




//import { moveItemAlongPath } from './util/animation';



// Note that select is a dom-method!

var groupCountries = __WEBPACK_IMPORTED_MODULE_4__map_settings__["d" /* svg */].append('g');
var groupCentroids = __WEBPACK_IMPORTED_MODULE_4__map_settings__["d" /* svg */].append('g');
var allCoordinates = [];
var fromCountryList = [];

var drawMap = function drawMap(countries, traffic) {
    // load map data to array
    window.map.geoData = __WEBPACK_IMPORTED_MODULE_1_topojson_client__["a" /* feature */](countries, countries.objects.ne_110m_admin_0_countries).features;
    // append centroids for each country
    window.map.geoData.map(function (d) {
        d.centroid = Object(__WEBPACK_IMPORTED_MODULE_4__map_settings__["c" /* projection */])(Object(__WEBPACK_IMPORTED_MODULE_0_d3_geo__["a" /* geoCentroid */])(d));
    });

    // draw countries
    groupCountries.attr('class', 'countries').selectAll('path.country').data(window.map.geoData).enter().append('path').attr('id', function (d) {
        return d.properties.NAME;
    }).attr('country-code', function (d) {
        return d.properties.ADM0_A3;
    }).attr('d', __WEBPACK_IMPORTED_MODULE_4__map_settings__["b" /* path */]).exit();

    // draw centroids of countries
    //groupCentroids.attr('class', 'centroids')
    //    .selectAll('path.centroid')
    //    .data(window.map.geoData)
    //    .enter()
    //    .append('circle')
    //    .classed('centroid', true)
    //    .attr('cx', d => d.centroid[0])
    //    .attr('cy', d => d.centroid[1])
    //    .attr('r', '2')
    //    .exit();

    // Save current year's traffic coordinates to a global variable
    Object(__WEBPACK_IMPORTED_MODULE_5__util_map__["b" /* processCoordinates */])(traffic);

    //todo: animation intensity should depend on traffic amount.
    //let i = 0;
    //setInterval(_ => {
    //  if (i > window.map.allCoordinates.length - 1) i = 0;
    //  moveItemAlongPath(window.map.allCoordinates[i], svg);
    //  i++;
    //  }, 300);
};

/* harmony default export */ __webpack_exports__["a"] = (_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var trafficPromise, countriesEl, savedCountry;
    return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return Object(__WEBPACK_IMPORTED_MODULE_5__util_map__["a" /* getRefugeeData */])();

                case 3:
                    trafficPromise = _context.sent;

                    drawMap(__WEBPACK_IMPORTED_MODULE_3__maps_world_json___default.a, trafficPromise);
                    _context.next = 10;
                    break;

                case 7:
                    _context.prev = 7;
                    _context.t0 = _context['catch'](0);

                    console.error(_context.t0);

                case 10:
                    Object(__WEBPACK_IMPORTED_MODULE_2__listeners__["a" /* default */])();

                    // Init target-country class from window.country
                    countriesEl = document.querySelector('.countries');

                    countriesEl.childNodes.forEach(function (el) {
                        if (el.id === window.country) el.classList.add('target-country');
                    });

                    // Init selected country from localStorage if set
                    savedCountry = localStorage.getItem('country');

                    if (savedCountry) {
                        window.country = savedCountry;
                        window.dispatchEvent(__WEBPACK_IMPORTED_MODULE_6__events__["b" /* countryChanged */]);
                    }

                case 15:
                case 'end':
                    return _context.stop();
            }
        }
    }, _callee, _this, [[0, 7]]);
})));

/***/ }),
/* 558 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__area__ = __webpack_require__(238);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cartesian__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__stream__ = __webpack_require__(67);






var lambda0, phi0, lambda1, phi1, // bounds
    lambda2, // previous lambda-coordinate
    lambda00, phi00, // first point
    p0, // previous 3D point
    deltaSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    ranges,
    range;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].polygonStart();
  },
  polygonEnd: function() {
    __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (__WEBPACK_IMPORTED_MODULE_1__area__["a" /* areaRingSum */] < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > __WEBPACK_IMPORTED_MODULE_3__math__["i" /* epsilon */]) phi1 = 90;
    else if (deltaSum < -__WEBPACK_IMPORTED_MODULE_3__math__["i" /* epsilon */]) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["a" /* cartesian */])([lambda * __WEBPACK_IMPORTED_MODULE_3__math__["r" /* radians */], phi * __WEBPACK_IMPORTED_MODULE_3__math__["r" /* radians */]]);
  if (p0) {
    var normal = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["c" /* cartesianCross */])(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["c" /* cartesianCross */])(equatorial, normal);
    Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["e" /* cartesianNormalizeInPlace */])(inflection);
    inflection = Object(__WEBPACK_IMPORTED_MODULE_2__cartesian__["g" /* spherical */])(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * __WEBPACK_IMPORTED_MODULE_3__math__["h" /* degrees */] * sign,
        phii,
        antimeridian = Object(__WEBPACK_IMPORTED_MODULE_3__math__["a" /* abs */])(delta) > 180;
    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * __WEBPACK_IMPORTED_MODULE_3__math__["h" /* degrees */];
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * __WEBPACK_IMPORTED_MODULE_3__math__["h" /* degrees */];
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(Object(__WEBPACK_IMPORTED_MODULE_3__math__["a" /* abs */])(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }
  __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);
  __WEBPACK_IMPORTED_MODULE_1__area__["b" /* areaStream */].lineEnd();
  if (Object(__WEBPACK_IMPORTED_MODULE_3__math__["a" /* abs */])(deltaSum) > __WEBPACK_IMPORTED_MODULE_3__math__["i" /* epsilon */]) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

/* unused harmony default export */ var _unused_webpack_default_export = (function(feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  Object(__WEBPACK_IMPORTED_MODULE_4__stream__["a" /* default */])(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;

  return lambda0 === Infinity || phi0 === Infinity
      ? [[NaN, NaN], [NaN, NaN]]
      : [[lambda0, phi0], [lambda1, phi1]];
});


/***/ }),
/* 559 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__noop__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__stream__ = __webpack_require__(67);




var W0, W1,
    X0, Y0, Z0,
    X1, Y1, Z1,
    X2, Y2, Z2,
    lambda00, phi00, // first point
    x0, y0, z0; // previous point

var centroidStream = {
  sphere: __WEBPACK_IMPORTED_MODULE_1__noop__["a" /* default */],
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  centroidPointCartesian(cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda), cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda), Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  x0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda);
  y0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda);
  z0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi),
      x = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda),
      y = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda),
      z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi),
      w = Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  centroidStream.point = centroidRingPoint;
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi);
  x0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda);
  y0 = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda);
  z0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */], phi *= __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */];
  var cosPhi = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi),
      x = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(lambda),
      y = cosPhi * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(lambda),
      z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(cx * cx + cy * cy + cz * cz),
      w = Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(m), // line weight = angle
      v = m && -w / m; // area weight multiplier
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

/* harmony default export */ __webpack_exports__["a"] = (function(object) {
  W0 = W1 =
  X0 = Y0 = Z0 =
  X1 = Y1 = Z1 =
  X2 = Y2 = Z2 = 0;
  Object(__WEBPACK_IMPORTED_MODULE_2__stream__["a" /* default */])(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < __WEBPACK_IMPORTED_MODULE_0__math__["j" /* epsilon2 */]) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < __WEBPACK_IMPORTED_MODULE_0__math__["j" /* epsilon2 */]) return [NaN, NaN];
  }

  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(y, x) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */], Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(z / Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(m)) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]];
});


/***/ }),
/* 560 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 561 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pairs__ = __webpack_require__(249);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = __WEBPACK_IMPORTED_MODULE_0__pairs__["a" /* pair */];

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
});


/***/ }),
/* 562 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
});


/***/ }),
/* 563 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(253);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bisect__ = __webpack_require__(247);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(564);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__extent__ = __webpack_require__(252);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__identity__ = __webpack_require__(565);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__range__ = __webpack_require__(254);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ticks__ = __webpack_require__(255);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__threshold_sturges__ = __webpack_require__(256);









/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var value = __WEBPACK_IMPORTED_MODULE_4__identity__["a" /* default */],
      domain = __WEBPACK_IMPORTED_MODULE_3__extent__["a" /* default */],
      threshold = __WEBPACK_IMPORTED_MODULE_7__threshold_sturges__["a" /* default */];

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = Object(__WEBPACK_IMPORTED_MODULE_6__ticks__["a" /* tickStep */])(x0, x1, tz);
      tz = Object(__WEBPACK_IMPORTED_MODULE_5__range__["a" /* default */])(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[Object(__WEBPACK_IMPORTED_MODULE_1__bisect__["a" /* default */])(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__array__["b" /* slice */].call(_)) : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(_), histogram) : threshold;
  };

  return histogram;
});


/***/ }),
/* 564 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 565 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 566 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(253);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ascending__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__number__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__quantile__ = __webpack_require__(156);





/* unused harmony default export */ var _unused_webpack_default_export = (function(values, min, max) {
  values = __WEBPACK_IMPORTED_MODULE_0__array__["a" /* map */].call(values, __WEBPACK_IMPORTED_MODULE_2__number__["a" /* default */]).sort(__WEBPACK_IMPORTED_MODULE_1__ascending__["a" /* default */]);
  return Math.ceil((max - min) / (2 * (Object(__WEBPACK_IMPORTED_MODULE_3__quantile__["a" /* default */])(values, 0.75) - Object(__WEBPACK_IMPORTED_MODULE_3__quantile__["a" /* default */])(values, 0.25)) * Math.pow(values.length, -1 / 3)));
});


/***/ }),
/* 567 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deviation__ = __webpack_require__(250);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, min, max) {
  return Math.ceil((max - min) / (3.5 * Object(__WEBPACK_IMPORTED_MODULE_0__deviation__["a" /* default */])(values) * Math.pow(values.length, -1 / 3)));
});


/***/ }),
/* 568 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
});


/***/ }),
/* 569 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(83);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
});


/***/ }),
/* 570 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__number__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__quantile__ = __webpack_require__(156);




/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_1__number__["a" /* default */])(values[i]))) {
        numbers.push(value);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_1__number__["a" /* default */])(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return Object(__WEBPACK_IMPORTED_MODULE_2__quantile__["a" /* default */])(numbers.sort(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */]), 0.5);
});


/***/ }),
/* 571 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
});


/***/ }),
/* 572 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
});


/***/ }),
/* 573 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(74);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = __WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */];

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
});


/***/ }),
/* 574 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
});


/***/ }),
/* 575 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  }

  else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
});


/***/ }),
/* 576 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transpose__ = __webpack_require__(258);


/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__transpose__["a" /* default */])(arguments);
});


/***/ }),
/* 577 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__rectangle__ = __webpack_require__(107);


/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = Object(__WEBPACK_IMPORTED_MODULE_0__rectangle__["a" /* default */])(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
});


/***/ }),
/* 578 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
});


/***/ }),
/* 579 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polygonContains__ = __webpack_require__(246);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__distance__ = __webpack_require__(260);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(4);




var containsObjectType = {
  Feature: function(object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function(object, point) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
    return false;
  }
};

var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
    return false;
  },
  LineString: function(object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsLine(coordinates[i], point)) return true;
    return false;
  },
  Polygon: function(object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
    return false;
  },
  GeometryCollection: function(object, point) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
      ? containsGeometryType[geometry.type](geometry, point)
      : false;
}

function containsPoint(coordinates, point) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ab = Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(coordinates[0], coordinates[1]),
      ao = Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(coordinates[0], point),
      ob = Object(__WEBPACK_IMPORTED_MODULE_1__distance__["a" /* default */])(point, coordinates[1]);
  return ao + ob <= ab + __WEBPACK_IMPORTED_MODULE_2__math__["i" /* epsilon */];
}

function containsPolygon(coordinates, point) {
  return !!Object(__WEBPACK_IMPORTED_MODULE_0__polygonContains__["a" /* default */])(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */], point[1] * __WEBPACK_IMPORTED_MODULE_2__math__["r" /* radians */]];
}

/* unused harmony default export */ var _unused_webpack_default_export = (function(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type)
      ? containsObjectType[object.type]
      : containsGeometry)(object, point);
});


/***/ }),
/* 580 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* unused harmony export graticule10 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);



function graticuleX(y0, y1, dy) {
  var y = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(y0, y1 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */], dy).concat(y1);
  return function(x) { return y.map(function(y) { return [x, y]; }); };
}

function graticuleY(x0, x1, dx) {
  var x = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(x0, x1 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */], dx).concat(x1);
  return function(y) { return x.map(function(x) { return [x, y]; }); };
}

function graticule() {
  var x1, x0, X1, X0,
      y1, y0, Y1, Y0,
      dx = 10, dy = dx, DX = 90, DY = 360,
      x, y, X, Y,
      precision = 2.5;

  function graticule() {
    return {type: "MultiLineString", coordinates: lines()};
  }

  function lines() {
    return Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(X0 / DX) * DX, X1, DX).map(X)
        .concat(Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(Y0 / DY) * DY, Y1, DY).map(Y))
        .concat(Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(x0 / dx) * dx, x1, dx).filter(function(x) { return Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(x % DX) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]; }).map(x))
        .concat(Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* range */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["f" /* ceil */])(y0 / dy) * dy, y1, dy).filter(function(y) { return Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(y % DY) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]; }).map(y));
  }

  graticule.lines = function() {
    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
  };

  graticule.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X0).concat(
        Y(Y1).slice(1),
        X(X1).reverse().slice(1),
        Y(Y0).reverse().slice(1))
      ]
    };
  };

  graticule.extent = function(_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function(_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function(_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function(_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule
      .extentMajor([[-180, -90 + __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]], [180, 90 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]]])
      .extentMinor([[-180, -80 - __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]], [180, 80 + __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */]]]);
}

function graticule10() {
  return graticule()();
}


/***/ }),
/* 581 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);


/* unused harmony default export */ var _unused_webpack_default_export = (function(a, b) {
  var x0 = a[0] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      y0 = a[1] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      x1 = b[0] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      y1 = b[1] * __WEBPACK_IMPORTED_MODULE_0__math__["r" /* radians */],
      cy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y0),
      sy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0),
      cy1 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y1),
      sy1 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y1),
      kx0 = cy0 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x0),
      ky0 = cy0 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x0),
      kx1 = cy1 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x1),
      ky1 = cy1 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x1),
      d = 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["m" /* haversin */])(y1 - y0) + cy0 * cy1 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["m" /* haversin */])(x1 - x0))),
      k = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(d);

  var interpolate = d ? function(t) {
    var B = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(t *= d) / k,
        A = Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(y, x) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */],
      Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(z, Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + y * y)) * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]
    ];
  } : function() {
    return [x0 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */], y0 * __WEBPACK_IMPORTED_MODULE_0__math__["h" /* degrees */]];
  };

  interpolate.distance = d;

  return interpolate;
});


/***/ }),
/* 582 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__identity__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__stream__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__area__ = __webpack_require__(583);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__bounds__ = __webpack_require__(262);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__centroid__ = __webpack_require__(584);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__context__ = __webpack_require__(585);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__measure__ = __webpack_require__(586);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__string__ = __webpack_require__(587);









/* harmony default export */ __webpack_exports__["a"] = (function(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_2__area__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_2__area__["a" /* default */].result();
  };

  path.measure = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_6__measure__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_6__measure__["a" /* default */].result();
  };

  path.bounds = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_3__bounds__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_3__bounds__["a" /* default */].result();
  };

  path.centroid = function(object) {
    Object(__WEBPACK_IMPORTED_MODULE_1__stream__["a" /* default */])(object, projectionStream(__WEBPACK_IMPORTED_MODULE_4__centroid__["a" /* default */]));
    return __WEBPACK_IMPORTED_MODULE_4__centroid__["a" /* default */].result();
  };

  path.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, __WEBPACK_IMPORTED_MODULE_0__identity__["a" /* default */]) : (projection = _).stream, path) : projection;
  };

  path.context = function(_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new __WEBPACK_IMPORTED_MODULE_7__string__["a" /* default */]) : new __WEBPACK_IMPORTED_MODULE_5__context__["a" /* default */](context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
});


/***/ }),
/* 583 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(52);




var areaSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    areaRingSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    x00,
    y00,
    x0,
    y0;

var areaStream = {
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineEnd: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  polygonStart: function() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
    areaSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(areaRingSum));
    areaRingSum.reset();
  },
  result: function() {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

/* harmony default export */ __webpack_exports__["a"] = (areaStream);


/***/ }),
/* 584 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);


// TODO Enforce positive area for exterior, negative area for interior?

var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;

var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]
        : Z1 ? [X1 / Z1, Y1 / Z1]
        : Z0 ? [X0 / Z0, Y0 / Z0]
        : [NaN, NaN];
    X0 = Y0 = Z0 =
    X1 = Y1 = Z1 =
    X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0, dy = y - y0, z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(dx * dx + dy * dy);

  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;

  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

/* harmony default export */ __webpack_exports__["a"] = (centroidStream);


/***/ }),
/* 585 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = PathContext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__noop__ = __webpack_require__(52);



function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, __WEBPACK_IMPORTED_MODULE_0__math__["w" /* tau */]);
        break;
      }
    }
  },
  result: __WEBPACK_IMPORTED_MODULE_1__noop__["a" /* default */]
};


/***/ }),
/* 586 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__adder__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__noop__ = __webpack_require__(52);




var lengthSum = Object(__WEBPACK_IMPORTED_MODULE_0__adder__["a" /* default */])(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;

var lengthStream = {
  point: __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */],
  lineStart: function() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function() {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = __WEBPACK_IMPORTED_MODULE_2__noop__["a" /* default */];
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add(Object(__WEBPACK_IMPORTED_MODULE_1__math__["u" /* sqrt */])(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

/* harmony default export */ __webpack_exports__["a"] = (lengthStream);


/***/ }),
/* 587 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = PathString;
function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null) this._circle = circle(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
      + "z";
}


/***/ }),
/* 588 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cartesian__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transform__ = __webpack_require__(108);




var maxDepth = 16, // maximum depth of subdivision
    cosMinDistance = Object(__WEBPACK_IMPORTED_MODULE_1__math__["g" /* cos */])(30 * __WEBPACK_IMPORTED_MODULE_1__math__["r" /* radians */]); // cos(minimum angular distance)

/* harmony default export */ __webpack_exports__["a"] = (function(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
});

function resampleNone(project) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__transform__["a" /* transformer */])({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = Object(__WEBPACK_IMPORTED_MODULE_1__math__["u" /* sqrt */])(a * a + b * b + c * c),
          phi2 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["c" /* asin */])(c /= m),
          lambda2 = Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(c) - 1) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */] || Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(lambda0 - lambda1) < __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */] ? (lambda0 + lambda1) / 2 : Object(__WEBPACK_IMPORTED_MODULE_1__math__["e" /* atan2 */])(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
          || Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
        lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = Object(__WEBPACK_IMPORTED_MODULE_0__cartesian__["a" /* cartesian */])([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}


/***/ }),
/* 589 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = cylindricalEqualAreaRaw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);


function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(phi) / cosPhi0];
  }

  forward.invert = function(x, y) {
    return [x / cosPhi0, Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(y * cosPhi0)];
  };

  return forward;
}


/***/ }),
/* 590 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__albers__ = __webpack_require__(263);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__conicEqualArea__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fit__ = __webpack_require__(160);





// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var cache,
      cacheStream,
      lower48 = Object(__WEBPACK_IMPORTED_MODULE_1__albers__["a" /* default */])(), lower48Point,
      alaska = Object(__WEBPACK_IMPORTED_MODULE_2__conicEqualArea__["a" /* default */])().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
      hawaii = Object(__WEBPACK_IMPORTED_MODULE_2__conicEqualArea__["a" /* default */])().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
      point, pointStream = {point: function(x, y) { point = [x, y]; }};

  function albersUsa(coordinates) {
    var x = coordinates[0], y = coordinates[1];
    return point = null,
        (lower48Point.point(x, y), point)
        || (alaskaPoint.point(x, y), point)
        || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function(coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
        : lower48).invert(coordinates);
  };

  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function(_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function(_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function(_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(), x = +_[0], y = +_[1];

    lower48Point = lower48
        .translate(_)
        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
        .stream(pointStream);

    alaskaPoint = alaska
        .translate([x - 0.307 * k, y + 0.201 * k])
        .clipExtent([[x - 0.425 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.120 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]], [x - 0.214 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.234 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]]])
        .stream(pointStream);

    hawaiiPoint = hawaii
        .translate([x - 0.205 * k, y + 0.212 * k])
        .clipExtent([[x - 0.214 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.166 * k + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]], [x - 0.115 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */], y + 0.234 * k - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]]])
        .stream(pointStream);

    return reset();
  };

  albersUsa.fitExtent = function(extent, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["a" /* fitExtent */])(albersUsa, extent, object);
  };

  albersUsa.fitSize = function(size, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["c" /* fitSize */])(albersUsa, size, object);
  };

  albersUsa.fitWidth = function(width, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["d" /* fitWidth */])(albersUsa, width, object);
  };

  albersUsa.fitHeight = function(height, object) {
    return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["b" /* fitHeight */])(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
});


/***/ }),
/* 591 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export azimuthalEqualAreaRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(44);




var azimuthalEqualAreaRaw = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["b" /* azimuthalRaw */])(function(cxcy) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(function(z) {
  return 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */])(z / 2);
});

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(azimuthalEqualAreaRaw)
      .scale(124.75)
      .clipAngle(180 - 1e-3);
});


/***/ }),
/* 592 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export azimuthalEquidistantRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(44);




var azimuthalEquidistantRaw = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["b" /* azimuthalRaw */])(function(c) {
  return (c = Object(__WEBPACK_IMPORTED_MODULE_0__math__["b" /* acos */])(c)) && c / Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(c);
});

azimuthalEquidistantRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(function(z) {
  return z;
});

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(azimuthalEquidistantRaw)
      .scale(79.4188)
      .clipAngle(180 - 1e-3);
});


/***/ }),
/* 593 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export conicConformalRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__conic__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mercator__ = __webpack_require__(161);




function tany(y) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__math__["v" /* tan */])((__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y0),
      n = y0 === y1 ? Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0) : Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(cy0 / Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y1)) / Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(tany(y1) / tany(y0)),
      f = cy0 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["p" /* pow */])(tany(y0), n) / n;

  if (!n) return __WEBPACK_IMPORTED_MODULE_2__mercator__["b" /* mercatorRaw */];

  function project(x, y) {
    if (f > 0) { if (y < -__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) y = -__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]; }
    else { if (y > __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) y = __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] - __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]; }
    var r = f / Object(__WEBPACK_IMPORTED_MODULE_0__math__["p" /* pow */])(tany(y), n);
    return [r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(n * x), f - r * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(n * x)];
  }

  project.invert = function(x, y) {
    var fy = f - y, r = Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(n) * Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + fy * fy);
    return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x, Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(fy)) / n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(fy), 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["p" /* pow */])(f / r, 1 / n)) - __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */]];
  };

  return project;
}

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_1__conic__["a" /* conicProjection */])(conicConformalRaw)
      .scale(109.5)
      .parallels([30, 30]);
});


/***/ }),
/* 594 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export conicEquidistantRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__conic__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__equirectangular__ = __webpack_require__(264);




function conicEquidistantRaw(y0, y1) {
  var cy0 = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y0),
      n = y0 === y1 ? Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y0) : (cy0 - Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if (Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(n) < __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]) return __WEBPACK_IMPORTED_MODULE_2__equirectangular__["a" /* equirectangularRaw */];

  function project(x, y) {
    var gy = g - y, nx = n * x;
    return [gy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(nx), g - gy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(nx)];
  }

  project.invert = function(x, y) {
    var gy = g - y;
    return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["e" /* atan2 */])(x, Object(__WEBPACK_IMPORTED_MODULE_0__math__["a" /* abs */])(gy)) / n * Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(gy), g - Object(__WEBPACK_IMPORTED_MODULE_0__math__["s" /* sign */])(n) * Object(__WEBPACK_IMPORTED_MODULE_0__math__["u" /* sqrt */])(x * x + gy * gy)];
  };

  return project;
}

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_1__conic__["a" /* conicProjection */])(conicEquidistantRaw)
      .scale(131.154)
      .center([0, 13.9389]);
});


/***/ }),
/* 595 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export gnomonicRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(44);




function gnomonicRaw(x, y) {
  var cy = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y), k = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x) * cy;
  return [cy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x) / k, Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y) / k];
}

gnomonicRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */]);

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(gnomonicRaw)
      .scale(144.049)
      .clipAngle(60);
});


/***/ }),
/* 596 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clip_rectangle__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__identity__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transform__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fit__ = __webpack_require__(160);





function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */] : Object(__WEBPACK_IMPORTED_MODULE_2__transform__["a" /* transformer */])({
    point: function(x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */], // scale, translate and reflect
      x0 = null, y0, x1, y1, // clip extent
      postclip = __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */],
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    },
    postclip: function(_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    },
    clipExtent: function(_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */]) : Object(__WEBPACK_IMPORTED_MODULE_0__clip_rectangle__["a" /* default */])(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function(_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function(_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function(extent, object) {
      return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["a" /* fitExtent */])(projection, extent, object);
    },
    fitSize: function(size, object) {
      return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["c" /* fitSize */])(projection, size, object);
    },
    fitWidth: function(width, object) {
      return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["d" /* fitWidth */])(projection, width, object);
    },
    fitHeight: function(height, object) {
      return Object(__WEBPACK_IMPORTED_MODULE_3__fit__["b" /* fitHeight */])(projection, height, object);
    }
  };
});


/***/ }),
/* 597 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export naturalEarth1Raw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math__ = __webpack_require__(4);



function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
  ];
}

naturalEarth1Raw.invert = function(x, y) {
  var phi = y, i = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while (Object(__WEBPACK_IMPORTED_MODULE_1__math__["a" /* abs */])(delta) > __WEBPACK_IMPORTED_MODULE_1__math__["i" /* epsilon */] && --i > 0);
  return [
    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
    phi
  ];
};

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */])(naturalEarth1Raw)
      .scale(175.295);
});


/***/ }),
/* 598 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export orthographicRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(44);




function orthographicRaw(x, y) {
  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y) * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x), Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y)];
}

orthographicRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(__WEBPACK_IMPORTED_MODULE_0__math__["c" /* asin */]);

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(orthographicRaw)
      .scale(249.5)
      .clipAngle(90 + __WEBPACK_IMPORTED_MODULE_0__math__["i" /* epsilon */]);
});


/***/ }),
/* 599 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export stereographicRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__azimuthal__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index__ = __webpack_require__(44);




function stereographicRaw(x, y) {
  var cy = Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(y), k = 1 + Object(__WEBPACK_IMPORTED_MODULE_0__math__["g" /* cos */])(x) * cy;
  return [cy * Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(x) / k, Object(__WEBPACK_IMPORTED_MODULE_0__math__["t" /* sin */])(y) / k];
}

stereographicRaw.invert = Object(__WEBPACK_IMPORTED_MODULE_1__azimuthal__["a" /* azimuthalInvert */])(function(z) {
  return 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(z);
});

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_2__index__["a" /* default */])(stereographicRaw)
      .scale(250)
      .clipAngle(142);
});


/***/ }),
/* 600 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export transverseMercatorRaw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mercator__ = __webpack_require__(161);



function transverseMercatorRaw(lambda, phi) {
  return [Object(__WEBPACK_IMPORTED_MODULE_0__math__["n" /* log */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["v" /* tan */])((__WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */] + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * Object(__WEBPACK_IMPORTED_MODULE_0__math__["d" /* atan */])(Object(__WEBPACK_IMPORTED_MODULE_0__math__["k" /* exp */])(x)) - __WEBPACK_IMPORTED_MODULE_0__math__["l" /* halfPi */]];
};

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var m = Object(__WEBPACK_IMPORTED_MODULE_1__mercator__["a" /* mercatorProjection */])(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function(_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function(_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90])
      .scale(159.155);
});


/***/ }),
/* 601 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_bbox__ = __webpack_require__(265);
/* unused harmony reexport bbox */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_feature__ = __webpack_require__(163);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__src_feature__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_mesh__ = __webpack_require__(603);
/* unused harmony reexport mesh */
/* unused harmony reexport meshArcs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_merge__ = __webpack_require__(604);
/* unused harmony reexport merge */
/* unused harmony reexport mergeArcs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_neighbors__ = __webpack_require__(605);
/* unused harmony reexport neighbors */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_quantize__ = __webpack_require__(607);
/* unused harmony reexport quantize */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_transform__ = __webpack_require__(162);
/* unused harmony reexport transform */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_untransform__ = __webpack_require__(268);
/* unused harmony reexport untransform */










/***/ }),
/* 602 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(array, n) {
  var t, j = array.length, i = j - n;
  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
});


/***/ }),
/* 603 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export meshArcs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__feature__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__stitch__ = __webpack_require__(267);



/* unused harmony default export */ var _unused_webpack_default_export = (function(topology) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__feature__["b" /* object */])(topology, meshArcs.apply(this, arguments));
});

function meshArcs(topology, object, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object, filter);
  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
  return {type: "MultiLineString", arcs: Object(__WEBPACK_IMPORTED_MODULE_1__stitch__["a" /* default */])(topology, arcs)};
}

function extractArcs(topology, object, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection": o.geometries.forEach(geometry); break;
      case "LineString": extract1(o.arcs); break;
      case "MultiLineString": case "Polygon": extract2(o.arcs); break;
      case "MultiPolygon": extract3(o.arcs); break;
    }
  }

  geometry(object);

  geomsByArc.forEach(filter == null
      ? function(geoms) { arcs.push(geoms[0].i); }
      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });

  return arcs;
}


/***/ }),
/* 604 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export mergeArcs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__feature__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__stitch__ = __webpack_require__(267);



function planarRingArea(ring) {
  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
  return Math.abs(area); // Note: doubled area!
}

/* unused harmony default export */ var _unused_webpack_default_export = (function(topology) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__feature__["b" /* object */])(topology, mergeArcs.apply(this, arguments));
});

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];

  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(geometry); break;
      case "Polygon": extract(o.arcs); break;
      case "MultiPolygon": o.arcs.forEach(extract); break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function(ring) {
      ring.forEach(function(arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea(Object(__WEBPACK_IMPORTED_MODULE_0__feature__["b" /* object */])(topology, {type: "Polygon", arcs: [ring]}).coordinates[0]);
  }

  polygons.forEach(function(polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);
      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function(ring) {
          ring.forEach(function(arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });

  polygons.forEach(function(polygon) {
    delete polygon._;
  });

  return {
    type: "MultiPolygon",
    arcs: groups.map(function(polygons) {
      var arcs = [], n;

      // Extract the exterior (unique) arcs.
      polygons.forEach(function(polygon) {
        polygon.forEach(function(ring) {
          ring.forEach(function(arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      });

      // Stitch the arcs into one or more rings.
      arcs = Object(__WEBPACK_IMPORTED_MODULE_1__stitch__["a" /* default */])(topology, arcs);

      // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.
      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    })
  };
}


/***/ }),
/* 605 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bisect__ = __webpack_require__(606);


/* unused harmony default export */ var _unused_webpack_default_export = (function(objects) {
  var indexesByArc = {}, // arc index -> array of object indexes
      neighbors = objects.map(function() { return []; });

  function line(arcs, i) {
    arcs.forEach(function(a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);
      else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function(arc) { line(arc, i); });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
  };

  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j], ik = indexes[k], n;
        if ((n = neighbors[ij])[i = Object(__WEBPACK_IMPORTED_MODULE_0__bisect__["a" /* default */])(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = Object(__WEBPACK_IMPORTED_MODULE_0__bisect__["a" /* default */])(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
});


/***/ }),
/* 606 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, x) {
  var lo = 0, hi = a.length;
  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;
    else hi = mid;
  }
  return lo;
});


/***/ }),
/* 607 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bbox__ = __webpack_require__(265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__untransform__ = __webpack_require__(268);



/* unused harmony default export */ var _unused_webpack_default_export = (function(topology, transform) {
  if (topology.transform) throw new Error("already quantized");

  if (!transform || !transform.scale) {
    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
    box = topology.bbox || Object(__WEBPACK_IMPORTED_MODULE_0__bbox__["a" /* default */])(topology);
    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;
    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};
  } else {
    box = topology.bbox;
  }

  var t = Object(__WEBPACK_IMPORTED_MODULE_1__untransform__["a" /* default */])(transform), box, key, inputs = topology.objects, outputs = {};

  function quantizePoint(point) {
    return t(point);
  }

  function quantizeGeometry(input) {
    var output;
    switch (input.type) {
      case "GeometryCollection": output = {type: "GeometryCollection", geometries: input.geometries.map(quantizeGeometry)}; break;
      case "Point": output = {type: "Point", coordinates: quantizePoint(input.coordinates)}; break;
      case "MultiPoint": output = {type: "MultiPoint", coordinates: input.coordinates.map(quantizePoint)}; break;
      default: return input;
    }
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function quantizeArc(input) {
    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic
    output[0] = t(input[0], 0);
    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points
    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points
    output.length = j;
    return output;
  }

  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);

  return {
    type: "Topology",
    bbox: box,
    transform: transform,
    objects: outputs,
    arcs: topology.arcs.map(quantizeArc)
  };
});


/***/ }),
/* 608 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__map_settings__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ramda__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_d3_geo__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__util_map__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__events__ = __webpack_require__(196);
var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/**
 * Component-related event-listeners are grouped in this file.
 * This improves project maintainability.
 */





//import { allCoordinates, fromCountryList } from '../index';

// import jsonFinland from '../../data/finland.json';


/* harmony default export */ __webpack_exports__["a"] = (function () {
    /**
     * When year changes, traffic needs to be redrawn. This also means that there's
     * xhr req for traffic data on every "yearChanged" event, but it shouldn't be
     * an issue because browser will cache it anyway.
     */
    window.addEventListener('yearChanged', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var dataPromise;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return Object(__WEBPACK_IMPORTED_MODULE_4__util_map__["a" /* getRefugeeData */])();

                    case 3:
                        dataPromise = _context.sent;

                        Object(__WEBPACK_IMPORTED_MODULE_4__util_map__["b" /* processCoordinates */])(dataPromise);
                        _context.next = 10;
                        break;

                    case 7:
                        _context.prev = 7;
                        _context.t0 = _context['catch'](0);

                        console.error('Couln\'t fetch refugee data on year change: ', _context.t0);

                    case 10:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, _this, [[0, 7]]);
    })), false);

    /**
     * Country clicked
     */
    var countriesEl = document.querySelector('.countries');
    // Selects a country from the map.
    countriesEl.addEventListener('click', function (e) {
        window.country = e.target.id;
        window.dispatchEvent(__WEBPACK_IMPORTED_MODULE_5__events__["b" /* countryChanged */]);
    });

    /**
     * Save country to localStorage when changed
     */
    window.addEventListener('countryChanged', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var countryObj, dataPromise;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        localStorage.setItem('country', window.country);

                        countriesEl.childNodes.forEach(function (el) {
                            el.classList.remove('target-country');
                        });

                        // Country name migth sometimes be a bad id because of spaces and special characters
                        // so use country-code as backup
                        try {
                            document.querySelector('#' + window.country).classList.add('target-country');
                        } catch (e) {
                            countryObj = __WEBPACK_IMPORTED_MODULE_2_ramda__["a" /* find */](__WEBPACK_IMPORTED_MODULE_2_ramda__["f" /* pathEq */](['properties', 'NAME'], window.country))(window.map.geoData);

                            document.querySelector('g.countries path[country-code=\'' + countryObj.properties.ADM0_A3 + '\']').classList.add('target-country');
                        }

                        // reprocess coordinates
                        _context2.prev = 3;
                        _context2.next = 6;
                        return Object(__WEBPACK_IMPORTED_MODULE_4__util_map__["a" /* getRefugeeData */])();

                    case 6:
                        dataPromise = _context2.sent;

                        Object(__WEBPACK_IMPORTED_MODULE_4__util_map__["b" /* processCoordinates */])(dataPromise);
                        _context2.next = 13;
                        break;

                    case 10:
                        _context2.prev = 10;
                        _context2.t0 = _context2['catch'](3);

                        console.error('Couln\'t fetch refugee data on country change: ', _context2.t0);

                    case 13:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, _this, [[3, 10]]);
    })));

    /**
     * Some responsivity for map
     */
    window.addEventListener('resize', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var node, newWidth, newHeight, dataPromise;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        node = __WEBPACK_IMPORTED_MODULE_0__map_settings__["d" /* svg */].node();
                        newWidth = Math.min(node.parentElement.offsetWidth, __WEBPACK_IMPORTED_MODULE_0__map_settings__["a" /* config */].width);
                        newHeight = Math.min(node.parentElement.offsetHeight, __WEBPACK_IMPORTED_MODULE_0__map_settings__["a" /* config */].height);


                        node.setAttribute('width', newWidth);
                        node.setAttribute('height', newHeight);
                        // change projection to match new width and height
                        __WEBPACK_IMPORTED_MODULE_0__map_settings__["c" /* projection */].scale([newWidth / __WEBPACK_IMPORTED_MODULE_0__map_settings__["a" /* config */].scalars.scale]).translate([newWidth / __WEBPACK_IMPORTED_MODULE_0__map_settings__["a" /* config */].scalars.width, newHeight / __WEBPACK_IMPORTED_MODULE_0__map_settings__["a" /* config */].scalars.height]);
                        // change all paths
                        Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["d" /* selectAll */])('path').attr('d', __WEBPACK_IMPORTED_MODULE_0__map_settings__["b" /* path */]);
                        // remap centroids with new projection
                        window.map.geoData.map(function (d) {
                            d.centroid = Object(__WEBPACK_IMPORTED_MODULE_0__map_settings__["c" /* projection */])(Object(__WEBPACK_IMPORTED_MODULE_3_d3_geo__["a" /* geoCentroid */])(d));
                        });
                        // this is only needed if we want to show centroids on map
                        Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["d" /* selectAll */])('circle').attr('cx', function (d) {
                            return d.centroid[0];
                        }).attr('cy', function (d) {
                            return d.centroid[1];
                        });

                        _context3.prev = 9;
                        _context3.next = 12;
                        return Object(__WEBPACK_IMPORTED_MODULE_4__util_map__["a" /* getRefugeeData */])();

                    case 12:
                        dataPromise = _context3.sent;

                        Object(__WEBPACK_IMPORTED_MODULE_4__util_map__["b" /* processCoordinates */])(dataPromise);
                        _context3.next = 19;
                        break;

                    case 16:
                        _context3.prev = 16;
                        _context3.t0 = _context3['catch'](9);

                        console.error('Couln\'t fetch refugee data on year change: ', _context3.t0);

                    case 19:
                    case 'end':
                        return _context3.stop();
                }
            }
        }, _callee3, _this, [[9, 16]]);
    })));
});

/***/ }),
/* 609 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
var nextId = 0;

function local() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};


/***/ }),
/* 610 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(170);



/* unused harmony default export */ var _unused_webpack_default_export = (function(node) {
  var event = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])();
  if (event.changedTouches) event = event.changedTouches[0];
  return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, event);
});


/***/ }),
/* 611 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(34);


/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return typeof selector === "string"
      ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[document.querySelector(selector)]], [document.documentElement])
      : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[selector]], __WEBPACK_IMPORTED_MODULE_0__selection_index__["c" /* root */]);
});


/***/ }),
/* 612 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(171);



/* harmony default export */ __webpack_exports__["a"] = (function(select) {
  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
});


/***/ }),
/* 613 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectorAll__ = __webpack_require__(270);



/* harmony default export */ __webpack_exports__["a"] = (function(select) {
  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selectorAll__["a" /* default */])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, parents);
});


/***/ }),
/* 614 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__matcher__ = __webpack_require__(269);



/* harmony default export */ __webpack_exports__["a"] = (function(match) {
  if (typeof match !== "function") match = Object(__WEBPACK_IMPORTED_MODULE_1__matcher__["a" /* default */])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
});


/***/ }),
/* 615 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__enter__ = __webpack_require__(271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(616);




var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

/* harmony default export */ __webpack_exports__["a"] = (function(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
});


/***/ }),
/* 616 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 617 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(272);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(34);



/* harmony default export */ __webpack_exports__["a"] = (function() {
  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._exit || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
});


/***/ }),
/* 618 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(34);


/* harmony default export */ __webpack_exports__["a"] = (function(selection) {

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](merges, this._parents);
});


/***/ }),
/* 619 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
});


/***/ }),
/* 620 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(34);


/* harmony default export */ __webpack_exports__["a"] = (function(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](sortgroups, this._parents).order();
});

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),
/* 621 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
});


/***/ }),
/* 622 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
});


/***/ }),
/* 623 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
});


/***/ }),
/* 624 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
});


/***/ }),
/* 625 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  return !this.node();
});


/***/ }),
/* 626 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
});


/***/ }),
/* 627 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(166);


function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
});


/***/ }),
/* 628 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
});


/***/ }),
/* 629 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
});


/***/ }),
/* 630 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
});


/***/ }),
/* 631 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
});


/***/ }),
/* 632 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return this.each(raise);
});


/***/ }),
/* 633 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return this.each(lower);
});


/***/ }),
/* 634 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(165);


/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
});


/***/ }),
/* 635 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(171);



function constantNull() {
  return null;
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, before) {
  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name),
      select = before == null ? constantNull : typeof before === "function" ? before : Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
});


/***/ }),
/* 636 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return this.each(remove);
});


/***/ }),
/* 637 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
});


/***/ }),
/* 638 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(172);


function dispatchEvent(node, type, params) {
  var window = Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
});


/***/ }),
/* 639 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(34);


/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return typeof selector === "string"
      ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([document.querySelectorAll(selector)], [document.documentElement])
      : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([selector == null ? [] : selector], __WEBPACK_IMPORTED_MODULE_0__selection_index__["c" /* root */]);
});


/***/ }),
/* 640 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(170);



/* unused harmony default export */ var _unused_webpack_default_export = (function(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touch);
    }
  }

  return null;
});


/***/ }),
/* 641 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(170);



/* unused harmony default export */ var _unused_webpack_default_export = (function(node, touches) {
  if (touches == null) touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touches[i]);
  }

  return points;
});


/***/ }),
/* 642 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__always__ = __webpack_require__(75);


/**
 * A function that always returns `false`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.T
 * @example
 *
 *      R.F(); //=> false
 */
var F = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__always__["a" /* default */])(false);
/* unused harmony default export */ var _unused_webpack_default_export = (F);

/***/ }),
/* 643 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__always__ = __webpack_require__(75);


/**
 * A function that always returns `true`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.F
 * @example
 *
 *      R.T(); //=> true
 */
var T = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__always__["a" /* default */])(true);
/* unused harmony default export */ var _unused_webpack_default_export = (T);

/***/ }),
/* 644 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * A special placeholder value used to specify "gaps" within curried functions,
 * allowing partial application of any combination of arguments, regardless of
 * their positions.
 *
 * If `g` is a curried ternary function and `_` is `R.__`, the following are
 * equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2, _)(1, 3)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @constant
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @example
 *
 *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
 *      greet('Alice'); //=> 'Hello, Alice!'
 */
/* unused harmony default export */ var _unused_webpack_default_export = ({ '@@functional/placeholder': true });

/***/ }),
/* 645 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__curryN__ = __webpack_require__(16);




/**
 * Creates a new list iteration function from an existing one by adding two new
 * parameters to its callback function: the current index, and the entire list.
 *
 * This would turn, for instance, [`R.map`](#map) function into one that
 * more closely resembles `Array.prototype.map`. Note that this will only work
 * for functions in which the iteration callback function is the first
 * parameter, and where the list is the last parameter. (This latter might be
 * unimportant if the list parameter is not used.)
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Function
 * @category List
 * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
 * @param {Function} fn A list iteration function that does not pass index or list to its callback
 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
 * @example
 *
 *      var mapIndexed = R.addIndex(R.map);
 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
 */
var addIndex = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry1__["a" /* default */])(function addIndex(fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__curryN__["a" /* default */])(fn.length, function () {
    var idx = 0;
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = function () {
      var result = origFn.apply(this, Object(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */])(arguments, [idx, list]));
      idx += 1;
      return result;
    };
    return fn.apply(this, args);
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (addIndex);

/***/ }),
/* 646 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xall__ = __webpack_require__(647);




/**
 * Returns `true` if all elements of the list match the predicate, `false` if
 * there are any that don't.
 *
 * Dispatches to the `all` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
 *         otherwise.
 * @see R.any, R.none, R.transduce
 * @example
 *
 *      var equals3 = R.equals(3);
 *      R.all(equals3)([3, 3, 3, 3]); //=> true
 *      R.all(equals3)([3, 3, 1, 3]); //=> false
 */
var all = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['all'], __WEBPACK_IMPORTED_MODULE_2__internal_xall__["a" /* default */], function all(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (!fn(list[idx])) {
      return false;
    }
    idx += 1;
  }
  return true;
}));
/* unused harmony default export */ var _unused_webpack_default_export = (all);

/***/ }),
/* 647 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduced__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XAll = /*#__PURE__*/function () {
  function XAll(f, xf) {
    this.xf = xf;
    this.f = f;
    this.all = true;
  }
  XAll.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XAll.prototype['@@transducer/result'] = function (result) {
    if (this.all) {
      result = this.xf['@@transducer/step'](result, true);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAll.prototype['@@transducer/step'] = function (result, input) {
    if (!this.f(input)) {
      this.all = false;
      result = Object(__WEBPACK_IMPORTED_MODULE_1__reduced__["a" /* default */])(this.xf['@@transducer/step'](result, false));
    }
    return result;
  };

  return XAll;
}();

var _xall = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xall(f, xf) {
  return new XAll(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xall);

/***/ }),
/* 648 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__max__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pluck__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__reduce__ = __webpack_require__(47);






/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if every one of the provided predicates is satisfied
 * by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.anyPass
 * @example
 *
 *      var isQueen = R.propEq('rank', 'Q');
 *      var isSpade = R.propEq('suit', '♠︎');
 *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
 *
 *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
 *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
 */
var allPass = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function allPass(preds) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_4__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_2__max__["a" /* default */], 0, Object(__WEBPACK_IMPORTED_MODULE_3__pluck__["a" /* default */])('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }
      idx += 1;
    }
    return true;
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (allPass);

/***/ }),
/* 649 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XMap = /*#__PURE__*/function () {
  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XMap.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XMap.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].result;
  XMap.prototype['@@transducer/step'] = function (result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return XMap;
}();

var _xmap = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xmap(f, xf) {
  return new XMap(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xmap);

/***/ }),
/* 650 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__max__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pluck__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__reduce__ = __webpack_require__(47);






/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if at least one of the provided predicates is
 * satisfied by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.allPass
 * @example
 *
 *      var isClub = R.propEq('suit', '♣');
 *      var isSpade = R.propEq('suit', '♠');
 *      var isBlackCard = R.anyPass([isClub, isSpade]);
 *
 *      isBlackCard({rank: '10', suit: '♣'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
 */
var anyPass = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function anyPass(preds) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_4__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_2__max__["a" /* default */], 0, Object(__WEBPACK_IMPORTED_MODULE_3__pluck__["a" /* default */])('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }
      idx += 1;
    }
    return false;
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (anyPass);

/***/ }),
/* 651 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_aperture__ = __webpack_require__(652);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_xaperture__ = __webpack_require__(653);





/**
 * Returns a new list, composed of n-tuples of consecutive elements. If `n` is
 * greater than the length of the list, an empty list is returned.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @param {Number} n The size of the tuples to create
 * @param {Array} list The list to split into `n`-length tuples
 * @return {Array} The resulting list of `n`-length tuples
 * @see R.transduce
 * @example
 *
 *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
 *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
 *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
 */
var aperture = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_3__internal_xaperture__["a" /* default */], __WEBPACK_IMPORTED_MODULE_0__internal_aperture__["a" /* default */]));
/* unused harmony default export */ var _unused_webpack_default_export = (aperture);

/***/ }),
/* 652 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _aperture;
function _aperture(n, list) {
  var idx = 0;
  var limit = list.length - (n - 1);
  var acc = new Array(limit >= 0 ? limit : 0);
  while (idx < limit) {
    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
    idx += 1;
  }
  return acc;
}

/***/ }),
/* 653 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XAperture = /*#__PURE__*/function () {
  function XAperture(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XAperture.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XAperture.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XAperture.prototype['@@transducer/step'] = function (result, input) {
    this.store(input);
    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
  };
  XAperture.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };
  XAperture.prototype.getCopy = function () {
    return Object(__WEBPACK_IMPORTED_MODULE_0__concat__["a" /* default */])(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
  };

  return XAperture;
}();

var _xaperture = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__curry2__["a" /* default */])(function _xaperture(n, xf) {
  return new XAperture(n, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xaperture);

/***/ }),
/* 654 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Returns a new list containing the contents of the given list, followed by
 * the given element.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The element to add to the end of the new list.
 * @param {Array} list The list of elements to add a new item to.
 *        list.
 * @return {Array} A new list containing the elements of the old list followed by `el`.
 * @see R.prepend
 * @example
 *
 *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
 *      R.append('tests', []); //=> ['tests']
 *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
 */
var append = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function append(el, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */])(list, [el]);
});
/* unused harmony default export */ var _unused_webpack_default_export = (append);

/***/ }),
/* 655 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__apply__ = __webpack_require__(281);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__map__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__max__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pluck__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__reduce__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__values__ = __webpack_require__(282);









/**
 * Given a spec object recursively mapping properties to functions, creates a
 * function producing an object of the same structure, by mapping each property
 * to the result of calling its associated function with the supplied arguments.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
 * @param {Object} spec an object recursively mapping properties to functions for
 *        producing the values for these properties.
 * @return {Function} A function that returns an object of the same structure
 * as `spec', with each property set to the value returned by calling its
 * associated function with the supplied arguments.
 * @see R.converge, R.juxt
 * @example
 *
 *      var getMetrics = R.applySpec({
 *        sum: R.add,
 *        nested: { mul: R.multiply }
 *      });
 *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
 * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
 */
var applySpec = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function applySpec(spec) {
  spec = Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* default */])(function (v) {
    return typeof v == 'function' ? v : applySpec(v);
  }, spec);
  return Object(__WEBPACK_IMPORTED_MODULE_2__curryN__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_6__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_4__max__["a" /* default */], 0, Object(__WEBPACK_IMPORTED_MODULE_5__pluck__["a" /* default */])('length', Object(__WEBPACK_IMPORTED_MODULE_7__values__["a" /* default */])(spec))), function () {
    var args = arguments;
    return Object(__WEBPACK_IMPORTED_MODULE_3__map__["a" /* default */])(function (f) {
      return Object(__WEBPACK_IMPORTED_MODULE_1__apply__["a" /* default */])(f, args);
    }, spec);
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (applySpec);

/***/ }),
/* 656 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
* Takes a value and applies a function to it.
*
* This function is also known as the `thrush` combinator.
*
* @func
* @memberOf R
 * @since v0.25.0
* @category Function
* @sig a -> (a -> b) -> b
* @param {*} x The value
* @param {Function} f The function to apply
* @return {*} The result of applying `f` to `x`
* @example
*
*      var t42 = R.applyTo(42);
*      t42(R.identity); //=> 42
*      t42(R.add(1)); //=> 43
*/
var applyTo = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function applyTo(x, f) {
  return f(x);
});
/* unused harmony default export */ var _unused_webpack_default_export = (applyTo);

/***/ }),
/* 657 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Makes an ascending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
 * @see R.descend
 * @example
 *
 *      var byAge = R.ascend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByYoungestFirst = R.sort(byAge, people);
 */
var ascend = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function ascend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa < bb ? -1 : aa > bb ? 1 : 0;
});
/* unused harmony default export */ var _unused_webpack_default_export = (ascend);

/***/ }),
/* 658 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__nAry__ = __webpack_require__(116);



/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 2 parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> c) -> (a, b -> c)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 2.
 * @see R.nAry, R.unary
 * @example
 *
 *      var takesThreeArgs = function(a, b, c) {
 *        return [a, b, c];
 *      };
 *      takesThreeArgs.length; //=> 3
 *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
 *
 *      var takesTwoArgs = R.binary(takesThreeArgs);
 *      takesTwoArgs.length; //=> 2
 *      // Only 2 arguments are passed to the wrapped function
 *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
 * @symb R.binary(f)(a, b, c) = f(a, b)
 */
var binary = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function binary(fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__nAry__["a" /* default */])(2, fn);
});
/* unused harmony default export */ var _unused_webpack_default_export = (binary);

/***/ }),
/* 659 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isFunction__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__and__ = __webpack_require__(278);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lift__ = __webpack_require__(118);





/**
 * A function which calls the two provided functions and returns the `&&`
 * of the results.
 * It returns the result of the first function if it is false-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * false-y value.
 *
 * In addition to functions, `R.both` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f A predicate
 * @param {Function} g Another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
 * @see R.and
 * @example
 *
 *      var gt10 = R.gt(R.__, 10)
 *      var lt20 = R.lt(R.__, 20)
 *      var f = R.both(gt10, lt20);
 *      f(15); //=> true
 *      f(30); //=> false
 */
var both = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function both(f, g) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_isFunction__["a" /* default */])(f) ? function _both() {
    return f.apply(this, arguments) && g.apply(this, arguments);
  } : Object(__WEBPACK_IMPORTED_MODULE_3__lift__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_2__and__["a" /* default */])(f, g);
});
/* unused harmony default export */ var _unused_webpack_default_export = (both);

/***/ }),
/* 660 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry__ = __webpack_require__(177);


/**
 * Returns the result of calling its first argument with the remaining
 * arguments. This is occasionally useful as a converging function for
 * [`R.converge`](#converge): the first branch can produce a function while the
 * remaining branches produce values to be passed to that function as its
 * arguments.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig (*... -> a),*... -> a
 * @param {Function} fn The function to apply to the remaining arguments.
 * @param {...*} args Any number of positional arguments.
 * @return {*}
 * @see R.apply
 * @example
 *
 *      R.call(R.add, 1, 2); //=> 3
 *
 *      var indentN = R.pipe(R.repeat(' '),
 *                           R.join(''),
 *                           R.replace(/^(?!$)/gm));
 *
 *      var format = R.converge(R.call, [
 *                                  R.pipe(R.prop('indent'), indentN),
 *                                  R.prop('value')
 *                              ]);
 *
 *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
 * @symb R.call(f, a, b) = f(a, b)
 */
var call = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry__["a" /* default */])(function call(fn) {
  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
});
/* unused harmony default export */ var _unused_webpack_default_export = (call);

/***/ }),
/* 661 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__flatCat__ = __webpack_require__(662);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__map__ = __webpack_require__(23);




var _xchain = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xchain(f, xf) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__map__["a" /* default */])(f, Object(__WEBPACK_IMPORTED_MODULE_1__flatCat__["a" /* default */])(xf));
});
/* harmony default export */ __webpack_exports__["a"] = (_xchain);

/***/ }),
/* 662 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__forceReduced__ = __webpack_require__(663);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__isArrayLike__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__xfBase__ = __webpack_require__(14);





var preservingReduced = function (xf) {
  return {
    '@@transducer/init': __WEBPACK_IMPORTED_MODULE_3__xfBase__["a" /* default */].init,
    '@@transducer/result': function (result) {
      return xf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      var ret = xf['@@transducer/step'](result, input);
      return ret['@@transducer/reduced'] ? Object(__WEBPACK_IMPORTED_MODULE_0__forceReduced__["a" /* default */])(ret) : ret;
    }
  };
};

var _flatCat = function _xcat(xf) {
  var rxf = preservingReduced(xf);
  return {
    '@@transducer/init': __WEBPACK_IMPORTED_MODULE_3__xfBase__["a" /* default */].init,
    '@@transducer/result': function (result) {
      return rxf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      return !Object(__WEBPACK_IMPORTED_MODULE_1__isArrayLike__["a" /* default */])(input) ? Object(__WEBPACK_IMPORTED_MODULE_2__reduce__["a" /* default */])(rxf, result, [input]) : Object(__WEBPACK_IMPORTED_MODULE_2__reduce__["a" /* default */])(rxf, result, input);
    }
  };
};

/* harmony default export */ __webpack_exports__["a"] = (_flatCat);

/***/ }),
/* 663 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _forceReduced;
function _forceReduced(x) {
  return {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}

/***/ }),
/* 664 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Restricts a number to be within a range.
 *
 * Also works for other ordered types such as Strings and Dates.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Relation
 * @sig Ord a => a -> a -> a -> a
 * @param {Number} minimum The lower limit of the clamp (inclusive)
 * @param {Number} maximum The upper limit of the clamp (inclusive)
 * @param {Number} value Value to be clamped
 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
 * @example
 *
 *      R.clamp(1, 10, -5) // => 1
 *      R.clamp(1, 10, 15) // => 10
 *      R.clamp(1, 10, 4)  // => 4
 */
var clamp = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function clamp(min, max, value) {
  if (min > max) {
    throw new Error('min must not be greater than max in clamp(min, max, value)');
  }
  return value < min ? min : value > max ? max : value;
});
/* unused harmony default export */ var _unused_webpack_default_export = (clamp);

/***/ }),
/* 665 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_clone__ = __webpack_require__(287);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry1__ = __webpack_require__(2);



/**
 * Creates a deep copy of the value which may contain (nested) `Array`s and
 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
 * assigned by reference rather than copied
 *
 * Dispatches to a `clone` method if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {*} -> {*}
 * @param {*} value The object or array to clone
 * @return {*} A deeply cloned copy of `val`
 * @example
 *
 *      var objects = [{}, {}, {}];
 *      var objectsClone = R.clone(objects);
 *      objects === objectsClone; //=> false
 *      objects[0] === objectsClone[0]; //=> false
 */
var clone = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry1__["a" /* default */])(function clone(value) {
  return value != null && typeof value.clone === 'function' ? value.clone() : Object(__WEBPACK_IMPORTED_MODULE_0__internal_clone__["a" /* default */])(value, [], [], true);
});
/* unused harmony default export */ var _unused_webpack_default_export = (clone);

/***/ }),
/* 666 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Makes a comparator function out of a function that reports whether the first
 * element is less than the second.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)
 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
 * is less than the second, `false` otherwise
 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
 * @example
 *
 *      var byAge = R.comparator((a, b) => a.age < b.age);
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByIncreasingAge = R.sort(byAge, people);
 */
var comparator = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function comparator(pred) {
  return function (a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});
/* unused harmony default export */ var _unused_webpack_default_export = (comparator);

/***/ }),
/* 667 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lift__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__not__ = __webpack_require__(289);



/**
 * Takes a function `f` and returns a function `g` such that if called with the same arguments
 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
 *
 * `R.complement` may be applied to any functor
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> *) -> (*... -> Boolean)
 * @param {Function} f
 * @return {Function}
 * @see R.not
 * @example
 *
 *      var isNotNil = R.complement(R.isNil);
 *      isNil(null); //=> true
 *      isNotNil(null); //=> false
 *      isNil(7); //=> false
 *      isNotNil(7); //=> true
 */
var complement = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__lift__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__not__["a" /* default */]);
/* unused harmony default export */ var _unused_webpack_default_export = (complement);

/***/ }),
/* 668 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _pipe;
function _pipe(f, g) {
  return function () {
    return g.call(this, f.apply(this, arguments));
  };
}

/***/ }),
/* 669 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pipeP__ = __webpack_require__(292);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reverse__ = __webpack_require__(119);



/**
 * Performs right-to-left composition of one or more Promise-returning
 * functions. The rightmost function may have any arity; the remaining
 * functions must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
 * @param {...Function} functions The functions to compose
 * @return {Function}
 * @see R.pipeP
 * @example
 *
 *      var db = {
 *        users: {
 *          JOE: {
 *            name: 'Joe',
 *            followers: ['STEVE', 'SUZY']
 *          }
 *        }
 *      }
 *
 *      // We'll pretend to do a db lookup which returns a promise
 *      var lookupUser = (userId) => Promise.resolve(db.users[userId])
 *      var lookupFollowers = (user) => Promise.resolve(user.followers)
 *      lookupUser('JOE').then(lookupFollowers)
 *
 *      //  followersForUser :: String -> Promise [UserId]
 *      var followersForUser = R.composeP(lookupFollowers, lookupUser);
 *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
 *      // Followers: ["STEVE","SUZY"]
 */
function composeP() {
  if (arguments.length === 0) {
    throw new Error('composeP requires at least one argument');
  }
  return __WEBPACK_IMPORTED_MODULE_0__pipeP__["a" /* default */].apply(this, Object(__WEBPACK_IMPORTED_MODULE_1__reverse__["a" /* default */])(arguments));
}

/***/ }),
/* 670 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _pipeP;
function _pipeP(f, g) {
  return function () {
    var ctx = this;
    return f.apply(ctx, arguments).then(function (x) {
      return g.call(ctx, x);
    });
  };
}

/***/ }),
/* 671 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _toString;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__contains__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__map__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__quote__ = __webpack_require__(675);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__toISOString__ = __webpack_require__(676);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__keys__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__reject__ = __webpack_require__(121);







function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return Object(__WEBPACK_IMPORTED_MODULE_0__contains__["a" /* default */])(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  //  mapPairs :: (Object, [String]) -> [String]
  var mapPairs = function (obj, keys) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__map__["a" /* default */])(function (k) {
      return Object(__WEBPACK_IMPORTED_MODULE_2__quote__["a" /* default */])(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + Object(__WEBPACK_IMPORTED_MODULE_1__map__["a" /* default */])(recur, x).join(', ') + '))';
    case '[object Array]':
      return '[' + Object(__WEBPACK_IMPORTED_MODULE_1__map__["a" /* default */])(recur, x).concat(mapPairs(x, Object(__WEBPACK_IMPORTED_MODULE_5__reject__["a" /* default */])(function (k) {
        return (/^\d+$/.test(k)
        );
      }, Object(__WEBPACK_IMPORTED_MODULE_4__keys__["a" /* default */])(x)))).join(', ') + ']';
    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : Object(__WEBPACK_IMPORTED_MODULE_2__quote__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_3__toISOString__["a" /* default */])(x))) + ')';
    case '[object Null]':
      return 'null';
    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : Object(__WEBPACK_IMPORTED_MODULE_2__quote__["a" /* default */])(x);
    case '[object Undefined]':
      return 'undefined';
    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();
        if (repr !== '[object Object]') {
          return repr;
        }
      }
      return '{' + mapPairs(x, Object(__WEBPACK_IMPORTED_MODULE_4__keys__["a" /* default */])(x)).join(', ') + '}';
  }
}

/***/ }),
/* 672 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arrayFromIterator__ = __webpack_require__(673);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__containsWith__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__functionName__ = __webpack_require__(674);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__has__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__identical__ = __webpack_require__(294);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__keys__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__type__ = __webpack_require__(179);








/**
 * private _uniqContentEquals function.
 * That function is checking equality of 2 iterator contents with 2 assumptions
 * - iterators lengths are the same
 * - iterators values are unique
 *
 * false-positive result will be returned for comparision of, e.g.
 * - [1,2,3] and [1,2,3,4]
 * - [1,1,1] and [1,2,3]
 * */

function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = Object(__WEBPACK_IMPORTED_MODULE_0__arrayFromIterator__["a" /* default */])(aIterator);
  var b = Object(__WEBPACK_IMPORTED_MODULE_0__arrayFromIterator__["a" /* default */])(bIterator);

  function eq(_a, _b) {
    return _equals(_a, _b, stackA.slice(), stackB.slice());
  }

  // if *a* array contains any element that is not included in *b*
  return !Object(__WEBPACK_IMPORTED_MODULE_1__containsWith__["a" /* default */])(function (b, aItem) {
    return !Object(__WEBPACK_IMPORTED_MODULE_1__containsWith__["a" /* default */])(eq, aItem, b);
  }, b, a);
}

function _equals(a, b, stackA, stackB) {
  if (Object(__WEBPACK_IMPORTED_MODULE_4__identical__["a" /* default */])(a, b)) {
    return true;
  }

  var typeA = Object(__WEBPACK_IMPORTED_MODULE_6__type__["a" /* default */])(a);

  if (typeA !== Object(__WEBPACK_IMPORTED_MODULE_6__type__["a" /* default */])(b)) {
    return false;
  }

  if (a == null || b == null) {
    return false;
  }

  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
  }

  switch (typeA) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' && Object(__WEBPACK_IMPORTED_MODULE_2__functionName__["a" /* default */])(a.constructor) === 'Promise') {
        return a === b;
      }
      break;
    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && Object(__WEBPACK_IMPORTED_MODULE_4__identical__["a" /* default */])(a.valueOf(), b.valueOf()))) {
        return false;
      }
      break;
    case 'Date':
      if (!Object(__WEBPACK_IMPORTED_MODULE_4__identical__["a" /* default */])(a.valueOf(), b.valueOf())) {
        return false;
      }
      break;
    case 'Error':
      return a.name === b.name && a.message === b.message;
    case 'RegExp':
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }
      break;
  }

  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }
    idx -= 1;
  }

  switch (typeA) {
    case 'Map':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
    case 'Set':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
    case 'Arguments':
    case 'Array':
    case 'Object':
    case 'Boolean':
    case 'Number':
    case 'String':
    case 'Date':
    case 'Error':
    case 'RegExp':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'ArrayBuffer':
      break;
    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = Object(__WEBPACK_IMPORTED_MODULE_5__keys__["a" /* default */])(a);
  if (keysA.length !== Object(__WEBPACK_IMPORTED_MODULE_5__keys__["a" /* default */])(b).length) {
    return false;
  }

  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b]);

  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(Object(__WEBPACK_IMPORTED_MODULE_3__has__["a" /* default */])(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }
    idx -= 1;
  }
  return true;
}

/***/ }),
/* 673 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _arrayFromIterator;
function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
}

/***/ }),
/* 674 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _functionName;
function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
}

/***/ }),
/* 675 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _quote;
function _quote(s) {
  var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
  .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');

  return '"' + escaped.replace(/"/g, '\\"') + '"';
}

/***/ }),
/* 676 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */
var pad = function pad(n) {
  return (n < 10 ? '0' : '') + n;
};

var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
  return d.toISOString();
} : function _toISOString(d) {
  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
};

/* harmony default export */ __webpack_exports__["a"] = (_toISOString);

/***/ }),
/* 677 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XFilter = /*#__PURE__*/function () {
  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFilter.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XFilter.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].result;
  XFilter.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return XFilter;
}();

var _xfilter = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xfilter(f, xf) {
  return new XFilter(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xfilter);

/***/ }),
/* 678 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__map__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__max__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__reduce__ = __webpack_require__(47);






/**
 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
 * to `fn` are applied to each of the predicates in turn until one returns a
 * "truthy" value, at which point `fn` returns the result of applying its
 * arguments to the corresponding transformer. If none of the predicates
 * matches, `fn` returns undefined.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Logic
 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
 * @param {Array} pairs A list of [predicate, transformer]
 * @return {Function}
 * @example
 *
 *      var fn = R.cond([
 *        [R.equals(0),   R.always('water freezes at 0°C')],
 *        [R.equals(100), R.always('water boils at 100°C')],
 *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
 *      ]);
 *      fn(0); //=> 'water freezes at 0°C'
 *      fn(50); //=> 'nothing special happens at 50°C'
 *      fn(100); //=> 'water boils at 100°C'
 */
var cond = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry1__["a" /* default */])(function cond(pairs) {
  var arity = Object(__WEBPACK_IMPORTED_MODULE_4__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_3__max__["a" /* default */], 0, Object(__WEBPACK_IMPORTED_MODULE_2__map__["a" /* default */])(function (pair) {
    return pair[0].length;
  }, pairs));
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(arity, function () {
    var idx = 0;
    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }
      idx += 1;
    }
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (cond);

/***/ }),
/* 679 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constructN__ = __webpack_require__(296);



/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> {*}) -> (* -> {*})
 * @param {Function} fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @see R.invoker
 * @example
 *
 *      // Constructor function
 *      function Animal(kind) {
 *        this.kind = kind;
 *      };
 *      Animal.prototype.sighting = function() {
 *        return "It's a " + this.kind + "!";
 *      }
 *
 *      var AnimalConstructor = R.construct(Animal)
 *
 *      // Notice we no longer need the 'new' keyword:
 *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
 *
 *      var animalTypes = ["Lion", "Tiger", "Bear"];
 *      var animalSighting = R.invoker(0, 'sighting');
 *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
 *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
 */
var construct = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function construct(Fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__constructN__["a" /* default */])(Fn.length, Fn);
});
/* unused harmony default export */ var _unused_webpack_default_export = (construct);

/***/ }),
/* 680 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_contains__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
 * terms, to at least one element of the given list; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.any
 * @example
 *
 *      R.contains(3, [1, 2, 3]); //=> true
 *      R.contains(4, [1, 2, 3]); //=> false
 *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.contains([42], [[42]]); //=> true
 */
var contains = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__internal_contains__["a" /* default */]);
/* unused harmony default export */ var _unused_webpack_default_export = (contains);

/***/ }),
/* 681 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__reduceBy__ = __webpack_require__(122);


/**
 * Counts the elements of a list according to how many match each value of a
 * key generated by the supplied function. Returns an object mapping the keys
 * produced by `fn` to the number of occurrences in the list. Note that all
 * keys are coerced to strings because of how JavaScript objects work.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> String) -> [a] -> {*}
 * @param {Function} fn The function used to map values to keys.
 * @param {Array} list The list to count elements from.
 * @return {Object} An object mapping keys to number of occurrences in the list.
 * @example
 *
 *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
 *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
 *
 *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];
 *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
 */
var countBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__reduceBy__["a" /* default */])(function (acc, elem) {
  return acc + 1;
}, 0);
/* unused harmony default export */ var _unused_webpack_default_export = (countBy);

/***/ }),
/* 682 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curryN__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__has__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XReduceBy = /*#__PURE__*/function () {
  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
    this.valueFn = valueFn;
    this.valueAcc = valueAcc;
    this.keyFn = keyFn;
    this.xf = xf;
    this.inputs = {};
  }
  XReduceBy.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XReduceBy.prototype['@@transducer/result'] = function (result) {
    var key;
    for (key in this.inputs) {
      if (Object(__WEBPACK_IMPORTED_MODULE_1__has__["a" /* default */])(key, this.inputs)) {
        result = this.xf['@@transducer/step'](result, this.inputs[key]);
        if (result['@@transducer/reduced']) {
          result = result['@@transducer/value'];
          break;
        }
      }
    }
    this.inputs = null;
    return this.xf['@@transducer/result'](result);
  };
  XReduceBy.prototype['@@transducer/step'] = function (result, input) {
    var key = this.keyFn(input);
    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
    return result;
  };

  return XReduceBy;
}();

var _xreduceBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curryN__["a" /* default */])(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
  return new XReduceBy(valueFn, valueAcc, keyFn, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xreduceBy);

/***/ }),
/* 683 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add__ = __webpack_require__(111);


/**
 * Decrements its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n - 1
 * @see R.inc
 * @example
 *
 *      R.dec(42); //=> 41
 */
var dec = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__add__["a" /* default */])(-1);
/* unused harmony default export */ var _unused_webpack_default_export = (dec);

/***/ }),
/* 684 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Makes a descending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
 * @see R.ascend
 * @example
 *
 *      var byAge = R.descend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByOldestFirst = R.sort(byAge, people);
 */
var descend = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function descend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa > bb ? -1 : aa < bb ? 1 : 0;
});
/* unused harmony default export */ var _unused_webpack_default_export = (descend);

/***/ }),
/* 685 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isInteger__ = __webpack_require__(176);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__assoc__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__dissoc__ = __webpack_require__(301);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__remove__ = __webpack_require__(302);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__update__ = __webpack_require__(186);







/**
 * Makes a shallow clone of an object, omitting the property at the given path.
 * Note that this copies and flattens prototype properties onto the new object
 * as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.11.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {k: v} -> {k: v}
 * @param {Array} path The path to the value to omit
 * @param {Object} obj The object to clone
 * @return {Object} A new object without the property at path
 * @see R.assocPath
 * @example
 *
 *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
 */
var dissocPath = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;
    case 1:
      return Object(__WEBPACK_IMPORTED_MODULE_1__internal_isInteger__["a" /* default */])(path[0]) ? Object(__WEBPACK_IMPORTED_MODULE_4__remove__["a" /* default */])(path[0], 1, obj) : Object(__WEBPACK_IMPORTED_MODULE_3__dissoc__["a" /* default */])(path[0], obj);
    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);
      if (obj[head] == null) {
        return obj;
      } else if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_isInteger__["a" /* default */])(path[0])) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__update__["a" /* default */])(head, dissocPath(tail, obj[head]), obj);
      } else {
        return Object(__WEBPACK_IMPORTED_MODULE_2__assoc__["a" /* default */])(head, dissocPath(tail, obj[head]), obj);
      }
  }
});
/* unused harmony default export */ var _unused_webpack_default_export = (dissocPath);

/***/ }),
/* 686 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Divides two numbers. Equivalent to `a / b`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a / b`.
 * @see R.multiply
 * @example
 *
 *      R.divide(71, 100); //=> 0.71
 *
 *      var half = R.divide(R.__, 2);
 *      half(42); //=> 21
 *
 *      var reciprocal = R.divide(1);
 *      reciprocal(4);   //=> 0.25
 */
var divide = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function divide(a, b) {
  return a / b;
});
/* unused harmony default export */ var _unused_webpack_default_export = (divide);

/***/ }),
/* 687 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XDrop = /*#__PURE__*/function () {
  function XDrop(n, xf) {
    this.xf = xf;
    this.n = n;
  }
  XDrop.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XDrop.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].result;
  XDrop.prototype['@@transducer/step'] = function (result, input) {
    if (this.n > 0) {
      this.n -= 1;
      return result;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return XDrop;
}();

var _xdrop = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xdrop(n, xf) {
  return new XDrop(n, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xdrop);

/***/ }),
/* 688 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_dropLast__ = __webpack_require__(689);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_xdropLast__ = __webpack_require__(691);





/**
 * Returns a list containing all but the last `n` elements of the given `list`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements of `list` to skip.
 * @param {Array} list The list of elements to consider.
 * @return {Array} A copy of the list with only the first `list.length - n` elements
 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
 * @example
 *
 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(3, 'ramda');               //=> 'ra'
 */
var dropLast = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_3__internal_xdropLast__["a" /* default */], __WEBPACK_IMPORTED_MODULE_2__internal_dropLast__["a" /* default */]));
/* unused harmony default export */ var _unused_webpack_default_export = (dropLast);

/***/ }),
/* 689 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = dropLast;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__take__ = __webpack_require__(187);


function dropLast(n, xs) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__take__["a" /* default */])(n < xs.length ? xs.length - n : 0, xs);
}

/***/ }),
/* 690 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduced__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XTake = /*#__PURE__*/function () {
  function XTake(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }
  XTake.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XTake.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].result;
  XTake.prototype['@@transducer/step'] = function (result, input) {
    this.i += 1;
    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
    return this.n >= 0 && this.i >= this.n ? Object(__WEBPACK_IMPORTED_MODULE_1__reduced__["a" /* default */])(ret) : ret;
  };

  return XTake;
}();

var _xtake = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xtake(n, xf) {
  return new XTake(n, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xtake);

/***/ }),
/* 691 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XDropLast = /*#__PURE__*/function () {
  function XDropLast(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XDropLast.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XDropLast.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.full) {
      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
    }
    this.store(input);
    return result;
  };
  XDropLast.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };

  return XDropLast;
}();

var _xdropLast = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xdropLast(n, xf) {
  return new XDropLast(n, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xdropLast);

/***/ }),
/* 692 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_dropLastWhile__ = __webpack_require__(693);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_xdropLastWhile__ = __webpack_require__(694);





/**
 * Returns a new list excluding all the tailing elements of a given list which
 * satisfy the supplied predicate function. It passes each value from the right
 * to the supplied predicate function, skipping elements until the predicate
 * function returns a `falsy` value. The predicate function is applied to one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} predicate The function to be called on each element
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
 * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
 * @example
 *
 *      var lteThree = x => x <= 3;
 *
 *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
 *
 *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'
 */
var dropLastWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_3__internal_xdropLastWhile__["a" /* default */], __WEBPACK_IMPORTED_MODULE_2__internal_dropLastWhile__["a" /* default */]));
/* unused harmony default export */ var _unused_webpack_default_export = (dropLastWhile);

/***/ }),
/* 693 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = dropLastWhile;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__slice__ = __webpack_require__(36);


function dropLastWhile(pred, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && pred(xs[idx])) {
    idx -= 1;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_0__slice__["a" /* default */])(0, idx + 1, xs);
}

/***/ }),
/* 694 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XDropLastWhile = /*#__PURE__*/function () {
  function XDropLastWhile(fn, xf) {
    this.f = fn;
    this.retained = [];
    this.xf = xf;
  }
  XDropLastWhile.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XDropLastWhile.prototype['@@transducer/result'] = function (result) {
    this.retained = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.retain(result, input) : this.flush(result, input);
  };
  XDropLastWhile.prototype.flush = function (result, input) {
    result = Object(__WEBPACK_IMPORTED_MODULE_1__reduce__["a" /* default */])(this.xf['@@transducer/step'], result, this.retained);
    this.retained = [];
    return this.xf['@@transducer/step'](result, input);
  };
  XDropLastWhile.prototype.retain = function (result, input) {
    this.retained.push(input);
    return result;
  };

  return XDropLastWhile;
}();

var _xdropLastWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xdropLastWhile(fn, xf) {
  return new XDropLastWhile(fn, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xdropLastWhile);

/***/ }),
/* 695 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xdropRepeatsWith__ = __webpack_require__(304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__dropRepeatsWith__ = __webpack_require__(305);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__equals__ = __webpack_require__(29);






/**
 * Returns a new list without any consecutively repeating elements.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
 */
var dropRepeats = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__internal_xdropRepeatsWith__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_4__equals__["a" /* default */]), /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_3__dropRepeatsWith__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_4__equals__["a" /* default */])));
/* unused harmony default export */ var _unused_webpack_default_export = (dropRepeats);

/***/ }),
/* 696 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xdropWhile__ = __webpack_require__(697);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__slice__ = __webpack_require__(36);





/**
 * Returns a new list excluding the leading elements of a given list which
 * satisfy the supplied predicate function. It passes each value to the supplied
 * predicate function, skipping elements while the predicate function returns
 * `true`. The predicate function is applied to one argument: *(value)*.
 *
 * Dispatches to the `dropWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.takeWhile, R.transduce, R.addIndex
 * @example
 *
 *      var lteTwo = x => x <= 2;
 *
 *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
 *
 *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'
 */
var dropWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['dropWhile'], __WEBPACK_IMPORTED_MODULE_2__internal_xdropWhile__["a" /* default */], function dropWhile(pred, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && pred(xs[idx])) {
    idx += 1;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_3__slice__["a" /* default */])(idx, Infinity, xs);
}));
/* unused harmony default export */ var _unused_webpack_default_export = (dropWhile);

/***/ }),
/* 697 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XDropWhile = /*#__PURE__*/function () {
  function XDropWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XDropWhile.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XDropWhile.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].result;
  XDropWhile.prototype['@@transducer/step'] = function (result, input) {
    if (this.f) {
      if (this.f(input)) {
        return result;
      }
      this.f = null;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return XDropWhile;
}();

var _xdropWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xdropWhile(f, xf) {
  return new XDropWhile(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xdropWhile);

/***/ }),
/* 698 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isFunction__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lift__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__or__ = __webpack_require__(307);





/**
 * A function wrapping calls to the two functions in an `||` operation,
 * returning the result of the first function if it is truth-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * truth-y value.
 *
 * In addition to functions, `R.either` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f a predicate
 * @param {Function} g another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
 * @see R.or
 * @example
 *
 *      var gt10 = x => x > 10;
 *      var even = x => x % 2 === 0;
 *      var f = R.either(gt10, even);
 *      f(101); //=> true
 *      f(8); //=> true
 */
var either = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function either(f, g) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_isFunction__["a" /* default */])(f) ? function _either() {
    return f.apply(this, arguments) || g.apply(this, arguments);
  } : Object(__WEBPACK_IMPORTED_MODULE_2__lift__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_3__or__["a" /* default */])(f, g);
});
/* unused harmony default export */ var _unused_webpack_default_export = (either);

/***/ }),
/* 699 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__equals__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__takeLast__ = __webpack_require__(309);




/**
 * Checks if a list ends with the provided values
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> Boolean
 * @sig String -> Boolean
 * @param {*} suffix
 * @param {*} list
 * @return {Boolean}
 * @example
 *
 *      R.endsWith('c', 'abc')                //=> true
 *      R.endsWith('b', 'abc')                //=> false
 *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true
 *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false
 */
var endsWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function (suffix, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__equals__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__takeLast__["a" /* default */])(suffix.length, list), suffix);
});
/* unused harmony default export */ var _unused_webpack_default_export = (endsWith);

/***/ }),
/* 700 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__equals__ = __webpack_require__(29);



/**
 * Takes a function and two values in its domain and returns `true` if the
 * values map to the same value in the codomain; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Relation
 * @sig (a -> b) -> a -> a -> Boolean
 * @param {Function} f
 * @param {*} x
 * @param {*} y
 * @return {Boolean}
 * @example
 *
 *      R.eqBy(Math.abs, 5, -5); //=> true
 */
var eqBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function eqBy(f, x, y) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__equals__["a" /* default */])(f(x), f(y));
});
/* unused harmony default export */ var _unused_webpack_default_export = (eqBy);

/***/ }),
/* 701 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__equals__ = __webpack_require__(29);



/**
 * Reports whether two objects have the same value, in [`R.equals`](#equals)
 * terms, for the specified property. Useful as a curried predicate.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig k -> {k: v} -> {k: v} -> Boolean
 * @param {String} prop The name of the property to compare
 * @param {Object} obj1
 * @param {Object} obj2
 * @return {Boolean}
 *
 * @example
 *
 *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
 *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
 *      R.eqProps('a', o1, o2); //=> false
 *      R.eqProps('c', o1, o2); //=> true
 */
var eqProps = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function eqProps(prop, obj1, obj2) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__equals__["a" /* default */])(obj1[prop], obj2[prop]);
});
/* unused harmony default export */ var _unused_webpack_default_export = (eqProps);

/***/ }),
/* 702 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Creates a new object by recursively evolving a shallow copy of `object`,
 * according to the `transformation` functions. All non-primitive properties
 * are copied by reference.
 *
 * A `transformation` function will not be invoked if its corresponding key
 * does not exist in the evolved object.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {k: (v -> v)} -> {k: v} -> {k: v}
 * @param {Object} transformations The object specifying transformation functions to apply
 *        to the object.
 * @param {Object} object The object to be transformed.
 * @return {Object} The transformed object.
 * @example
 *
 *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
 *      var transformations = {
 *        firstName: R.trim,
 *        lastName: R.trim, // Will not get invoked.
 *        data: {elapsed: R.add(1), remaining: R.add(-1)}
 *      };
 *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
 */
var evolve = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function evolve(transformations, object) {
  var result = {};
  var transformation, key, type;
  for (key in object) {
    transformation = transformations[key];
    type = typeof transformation;
    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (evolve);

/***/ }),
/* 703 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xfind__ = __webpack_require__(704);




/**
 * Returns the first element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Dispatches to the `find` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 *        desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
 *      R.find(R.propEq('a', 4))(xs); //=> undefined
 */
var find = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['find'], __WEBPACK_IMPORTED_MODULE_2__internal_xfind__["a" /* default */], function find(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx += 1;
  }
}));
/* harmony default export */ __webpack_exports__["a"] = (find);

/***/ }),
/* 704 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduced__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XFind = /*#__PURE__*/function () {
  function XFind(f, xf) {
    this.xf = xf;
    this.f = f;
    this.found = false;
  }
  XFind.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XFind.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, void 0);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFind.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.found = true;
      result = Object(__WEBPACK_IMPORTED_MODULE_1__reduced__["a" /* default */])(this.xf['@@transducer/step'](result, input));
    }
    return result;
  };

  return XFind;
}();

var _xfind = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xfind(f, xf) {
  return new XFind(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xfind);

/***/ }),
/* 705 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xfindIndex__ = __webpack_require__(706);




/**
 * Returns the index of the first element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
 */
var findIndex = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_2__internal_xfindIndex__["a" /* default */], function findIndex(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}));
/* unused harmony default export */ var _unused_webpack_default_export = (findIndex);

/***/ }),
/* 706 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduced__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XFindIndex = /*#__PURE__*/function () {
  function XFindIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.found = false;
  }
  XFindIndex.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XFindIndex.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, -1);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFindIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.found = true;
      result = Object(__WEBPACK_IMPORTED_MODULE_1__reduced__["a" /* default */])(this.xf['@@transducer/step'](result, this.idx));
    }
    return result;
  };

  return XFindIndex;
}();

var _xfindIndex = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xfindIndex(f, xf) {
  return new XFindIndex(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xfindIndex);

/***/ }),
/* 707 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xfindLast__ = __webpack_require__(708);




/**
 * Returns the last element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
 *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
 */
var findLast = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_2__internal_xfindLast__["a" /* default */], function findLast(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx -= 1;
  }
}));
/* unused harmony default export */ var _unused_webpack_default_export = (findLast);

/***/ }),
/* 708 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XFindLast = /*#__PURE__*/function () {
  function XFindLast(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFindLast.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XFindLast.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
  };
  XFindLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.last = input;
    }
    return result;
  };

  return XFindLast;
}();

var _xfindLast = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xfindLast(f, xf) {
  return new XFindLast(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xfindLast);

/***/ }),
/* 709 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xfindLastIndex__ = __webpack_require__(710);




/**
 * Returns the index of the last element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
 *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
 */
var findLastIndex = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_2__internal_xfindLastIndex__["a" /* default */], function findLastIndex(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return idx;
    }
    idx -= 1;
  }
  return -1;
}));
/* unused harmony default export */ var _unused_webpack_default_export = (findLastIndex);

/***/ }),
/* 710 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XFindLastIndex = /*#__PURE__*/function () {
  function XFindLastIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.lastIdx = -1;
  }
  XFindLastIndex.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XFindLastIndex.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
  };
  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.lastIdx = this.idx;
    }
    return result;
  };

  return XFindLastIndex;
}();

var _xfindLastIndex = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xfindLastIndex(f, xf) {
  return new XFindLastIndex(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xfindLastIndex);

/***/ }),
/* 711 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_makeFlat__ = __webpack_require__(286);



/**
 * Returns a new list by pulling every item out of it (and all its sub-arrays)
 * and putting them in a new array, depth-first.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b]
 * @param {Array} list The array to consider.
 * @return {Array} The flattened list.
 * @see R.unnest
 * @example
 *
 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 */
var flatten = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_makeFlat__["a" /* default */])(true));
/* unused harmony default export */ var _unused_webpack_default_export = (flatten);

/***/ }),
/* 712 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Iterate over an input `list`, calling a provided function `fn` for each
 * element in the list.
 *
 * `fn` receives one argument: *(value)*.
 *
 * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.forEach` method. For more
 * details on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
 *
 * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
 * the original array. In some libraries this function is named `each`.
 *
 * Dispatches to the `forEach` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> *) -> [a] -> [a]
 * @param {Function} fn The function to invoke. Receives one argument, `value`.
 * @param {Array} list The list to iterate over.
 * @return {Array} The original list.
 * @see R.addIndex
 * @example
 *
 *      var printXPlusFive = x => console.log(x + 5);
 *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
 *      // logs 6
 *      // logs 7
 *      // logs 8
 * @symb R.forEach(f, [a, b, c]) = [a, b, c]
 */
var forEach = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__["a" /* default */])('forEach', function forEach(fn, list) {
  var len = list.length;
  var idx = 0;
  while (idx < len) {
    fn(list[idx]);
    idx += 1;
  }
  return list;
}));
/* unused harmony default export */ var _unused_webpack_default_export = (forEach);

/***/ }),
/* 713 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__keys__ = __webpack_require__(46);



/**
 * Iterate over an input `object`, calling a provided function `fn` for each
 * key and value in the object.
 *
 * `fn` receives three argument: *(value, key, obj)*.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Object
 * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
 * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
 * @param {Object} obj The object to iterate over.
 * @return {Object} The original object.
 * @example
 *
 *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);
 *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
 *      // logs x:1
 *      // logs y:2
 * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
 */
var forEachObjIndexed = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function forEachObjIndexed(fn, obj) {
  var keyList = Object(__WEBPACK_IMPORTED_MODULE_1__keys__["a" /* default */])(obj);
  var idx = 0;
  while (idx < keyList.length) {
    var key = keyList[idx];
    fn(obj[key], key, obj);
    idx += 1;
  }
  return obj;
});
/* unused harmony default export */ var _unused_webpack_default_export = (forEachObjIndexed);

/***/ }),
/* 714 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Creates a new object from a list key-value pairs. If a key appears in
 * multiple pairs, the rightmost pair is included in the object.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [[k,v]] -> {k: v}
 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
 * @return {Object} The object made by pairing up `keys` and `values`.
 * @see R.toPairs, R.pair
 * @example
 *
 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
 */
var fromPairs = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function fromPairs(pairs) {
  var result = {};
  var idx = 0;
  while (idx < pairs.length) {
    result[pairs[idx][0]] = pairs[idx][1];
    idx += 1;
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (fromPairs);

/***/ }),
/* 715 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reduceBy__ = __webpack_require__(122);




/**
 * Splits a list into sub-lists stored in an object, based on the result of
 * calling a String-returning function on each element, and grouping the
 * results according to values returned.
 *
 * Dispatches to the `groupBy` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> String) -> [a] -> {String: [a]}
 * @param {Function} fn Function :: a -> String
 * @param {Array} list The array to group
 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
 *         that produced that key when passed to `fn`.
 * @see R.transduce
 * @example
 *
 *      var byGrade = R.groupBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Abby', score: 84},
 *                      {name: 'Eddy', score: 58},
 *                      // ...
 *                      {name: 'Jack', score: 69}];
 *      byGrade(students);
 *      // {
 *      //   'A': [{name: 'Dianne', score: 99}],
 *      //   'B': [{name: 'Abby', score: 84}]
 *      //   // ...,
 *      //   'F': [{name: 'Eddy', score: 58}]
 *      // }
 */
var groupBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__["a" /* default */])('groupBy', /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__reduceBy__["a" /* default */])(function (acc, item) {
  if (acc == null) {
    acc = [];
  }
  acc.push(item);
  return acc;
}, null)));
/* unused harmony default export */ var _unused_webpack_default_export = (groupBy);

/***/ }),
/* 716 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Takes a list and returns a list of lists where each sublist's elements are
 * all satisfied pairwise comparison according to the provided function.
 * Only adjacent elements are passed to the comparison function.
 *
 * @func
 * @memberOf R
 * @since v0.21.0
 * @category List
 * @sig ((a, a) → Boolean) → [a] → [[a]]
 * @param {Function} fn Function for determining whether two given (adjacent)
 *        elements should be in the same group
 * @param {Array} list The array to group. Also accepts a string, which will be
 *        treated as a list of characters.
 * @return {List} A list that contains sublists of elements,
 *         whose concatenations are equal to the original list.
 * @example
 *
 * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
 *
 * R.groupWith(R.eqBy(isVowel), 'aestiou')
 * //=> ['ae', 'st', 'iou']
 */
var groupWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function (fn, list) {
  var res = [];
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    var nextidx = idx + 1;
    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
      nextidx += 1;
    }
    res.push(list.slice(idx, nextidx));
    idx = nextidx;
  }
  return res;
});
/* unused harmony default export */ var _unused_webpack_default_export = (groupWith);

/***/ }),
/* 717 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns `true` if the first argument is greater than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.lt
 * @example
 *
 *      R.gt(2, 1); //=> true
 *      R.gt(2, 2); //=> false
 *      R.gt(2, 3); //=> false
 *      R.gt('a', 'z'); //=> false
 *      R.gt('z', 'a'); //=> true
 */
var gt = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function gt(a, b) {
  return a > b;
});
/* unused harmony default export */ var _unused_webpack_default_export = (gt);

/***/ }),
/* 718 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns `true` if the first argument is greater than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.lte
 * @example
 *
 *      R.gte(2, 1); //=> true
 *      R.gte(2, 2); //=> true
 *      R.gte(2, 3); //=> false
 *      R.gte('a', 'z'); //=> false
 *      R.gte('z', 'a'); //=> true
 */
var gte = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function gte(a, b) {
  return a >= b;
});
/* unused harmony default export */ var _unused_webpack_default_export = (gte);

/***/ }),
/* 719 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);



/**
 * Returns whether or not an object has an own property with the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      var hasName = R.has('name');
 *      hasName({name: 'alice'});   //=> true
 *      hasName({name: 'bob'});     //=> true
 *      hasName({});                //=> false
 *
 *      var point = {x: 0, y: 0};
 *      var pointHas = R.has(R.__, point);
 *      pointHas('x');  //=> true
 *      pointHas('y');  //=> true
 *      pointHas('z');  //=> false
 */
var has = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */]);
/* unused harmony default export */ var _unused_webpack_default_export = (has);

/***/ }),
/* 720 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns whether or not an object or its prototype chain has a property with
 * the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      function Rectangle(width, height) {
 *        this.width = width;
 *        this.height = height;
 *      }
 *      Rectangle.prototype.area = function() {
 *        return this.width * this.height;
 *      };
 *
 *      var square = new Rectangle(2, 2);
 *      R.hasIn('width', square);  //=> true
 *      R.hasIn('area', square);  //=> true
 */
var hasIn = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function hasIn(prop, obj) {
  return prop in obj;
});
/* unused harmony default export */ var _unused_webpack_default_export = (hasIn);

/***/ }),
/* 721 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__nth__ = __webpack_require__(89);


/**
 * Returns the first element of the given list or string. In some libraries
 * this function is named `first`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {Array|String} list
 * @return {*}
 * @see R.tail, R.init, R.last
 * @example
 *
 *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
 *      R.head([]); //=> undefined
 *
 *      R.head('abc'); //=> 'a'
 *      R.head(''); //=> ''
 */
var head = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__nth__["a" /* default */])(0);
/* unused harmony default export */ var _unused_webpack_default_export = (head);

/***/ }),
/* 722 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);



/**
 * Creates a function that will process either the `onTrue` or the `onFalse`
 * function depending upon the result of the `condition` predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
 * @param {Function} condition A predicate function
 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
 * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
 *                    function depending upon the result of the `condition` predicate.
 * @see R.unless, R.when
 * @example
 *
 *      var incCount = R.ifElse(
 *        R.has('count'),
 *        R.over(R.lensProp('count'), R.inc),
 *        R.assoc('count', 1)
 *      );
 *      incCount({});           //=> { count: 1 }
 *      incCount({ count: 1 }); //=> { count: 2 }
 */
var ifElse = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function ifElse(condition, onTrue, onFalse) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (ifElse);

/***/ }),
/* 723 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add__ = __webpack_require__(111);


/**
 * Increments its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n + 1
 * @see R.dec
 * @example
 *
 *      R.inc(42); //=> 43
 */
var inc = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__add__["a" /* default */])(1);
/* unused harmony default export */ var _unused_webpack_default_export = (inc);

/***/ }),
/* 724 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__reduceBy__ = __webpack_require__(122);


/**
 * Given a function that generates a key, turns a list of objects into an
 * object indexing the objects by the given key. Note that if multiple
 * objects generate the same value for the indexing key only the last value
 * will be included in the generated object.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
 * @param {Function} fn Function :: a -> String
 * @param {Array} array The array of objects to index
 * @return {Object} An object indexing each array element by the given property.
 * @example
 *
 *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
 *      R.indexBy(R.prop('id'), list);
 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
 */
var indexBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__reduceBy__["a" /* default */])(function (acc, elem) {
  return elem;
}, null);
/* unused harmony default export */ var _unused_webpack_default_export = (indexBy);

/***/ }),
/* 725 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_indexOf__ = __webpack_require__(293);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_isArray__ = __webpack_require__(53);




/**
 * Returns the position of the first occurrence of an item in an array, or -1
 * if the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.lastIndexOf
 * @example
 *
 *      R.indexOf(3, [1,2,3,4]); //=> 2
 *      R.indexOf(10, [1,2,3,4]); //=> -1
 */
var indexOf = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function indexOf(target, xs) {
  return typeof xs.indexOf === 'function' && !Object(__WEBPACK_IMPORTED_MODULE_2__internal_isArray__["a" /* default */])(xs) ? xs.indexOf(target) : Object(__WEBPACK_IMPORTED_MODULE_1__internal_indexOf__["a" /* default */])(xs, target, 0);
});
/* unused harmony default export */ var _unused_webpack_default_export = (indexOf);

/***/ }),
/* 726 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__slice__ = __webpack_require__(36);


/**
 * Returns all but the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.last, R.head, R.tail
 * @example
 *
 *      R.init([1, 2, 3]);  //=> [1, 2]
 *      R.init([1, 2]);     //=> [1]
 *      R.init([1]);        //=> []
 *      R.init([]);         //=> []
 *
 *      R.init('abc');  //=> 'ab'
 *      R.init('ab');   //=> 'a'
 *      R.init('a');    //=> ''
 *      R.init('');     //=> ''
 */
var init = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__slice__["a" /* default */])(0, -1);
/* unused harmony default export */ var _unused_webpack_default_export = (init);

/***/ }),
/* 727 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_containsWith__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_filter__ = __webpack_require__(184);




/**
 * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list
 * `xs'` comprising each of the elements of `xs` which is equal to one or more
 * elements of `ys` according to `pred`.
 *
 * `pred` must be a binary function expecting an element from each list.
 *
 * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should
 * not be significant, but since `xs'` is ordered the implementation guarantees
 * that its values are in the same order as they appear in `xs`. Duplicates are
 * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Relation
 * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]
 * @param {Function} pred
 * @param {Array} xs
 * @param {Array} ys
 * @return {Array}
 * @see R.intersection
 * @example
 *
 *      R.innerJoin(
 *        (record, id) => record.id === id,
 *        [{id: 824, name: 'Richie Furay'},
 *         {id: 956, name: 'Dewey Martin'},
 *         {id: 313, name: 'Bruce Palmer'},
 *         {id: 456, name: 'Stephen Stills'},
 *         {id: 177, name: 'Neil Young'}],
 *        [177, 456, 999]
 *      );
 *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
 */
var innerJoin = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry3__["a" /* default */])(function innerJoin(pred, xs, ys) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__internal_filter__["a" /* default */])(function (x) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__internal_containsWith__["a" /* default */])(pred, x, ys);
  }, xs);
});
/* unused harmony default export */ var _unused_webpack_default_export = (innerJoin);

/***/ }),
/* 728 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Inserts the supplied element into the list, at the specified `index`. _Note that

 * this is not destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} index The position to insert the element
 * @param {*} elt The element to insert into the Array
 * @param {Array} list The list to insert into
 * @return {Array} A new Array with `elt` inserted at `index`.
 * @example
 *
 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
 */
var insert = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function insert(idx, elt, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  var result = Array.prototype.slice.call(list, 0);
  result.splice(idx, 0, elt);
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (insert);

/***/ }),
/* 729 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Inserts the sub-list into the list, at the specified `index`. _Note that this is not
 * destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig Number -> [a] -> [a] -> [a]
 * @param {Number} index The position to insert the sub-list
 * @param {Array} elts The sub-list to insert into the Array
 * @param {Array} list The list to insert the sub-list into
 * @return {Array} A new Array with `elts` inserted starting at `index`.
 * @example
 *
 *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
 */
var insertAll = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function insertAll(idx, elts, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
});
/* unused harmony default export */ var _unused_webpack_default_export = (insertAll);

/***/ }),
/* 730 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_contains__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_filter__ = __webpack_require__(184);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__flip__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__uniq__ = __webpack_require__(190);






/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The list of elements found in both `list1` and `list2`.
 * @see R.innerJoin
 * @example
 *
 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
 */
var intersection = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function intersection(list1, list2) {
  var lookupList, filteredList;
  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_4__uniq__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__internal_filter__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_3__flip__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__internal_contains__["a" /* default */])(lookupList), filteredList));
});
/* unused harmony default export */ var _unused_webpack_default_export = (intersection);

/***/ }),
/* 731 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__contains__ = __webpack_require__(78);


var _Set = /*#__PURE__*/function () {
  function _Set() {
    /* globals Set */
    this._nativeSet = typeof Set === 'function' ? new Set() : null;
    this._items = {};
  }

  // until we figure out why jsdoc chokes on this
  // @param item The item to add to the Set
  // @returns {boolean} true if the item did not exist prior, otherwise false
  //
  _Set.prototype.add = function (item) {
    return !hasOrAdd(item, true, this);
  };

  //
  // @param item The item to check for existence in the Set
  // @returns {boolean} true if the item exists in the Set, otherwise false
  //
  _Set.prototype.has = function (item) {
    return hasOrAdd(item, false, this);
  };

  //
  // Combines the logic for checking whether an item is a member of the set and
  // for adding a new item to the set.
  //
  // @param item       The item to check or add to the Set instance.
  // @param shouldAdd  If true, the item will be added to the set if it doesn't
  //                   already exist.
  // @param set        The set instance to check or add to.
  // @return {boolean} true if the item already existed, otherwise false.
  //
  return _Set;
}();

function hasOrAdd(item, shouldAdd, set) {
  var type = typeof item;
  var prevSize, newSize;
  switch (type) {
    case 'string':
    case 'number':
      // distinguish between +0 and -0
      if (item === 0 && 1 / item === -Infinity) {
        if (set._items['-0']) {
          return true;
        } else {
          if (shouldAdd) {
            set._items['-0'] = true;
          }
          return false;
        }
      }
      // these types can all utilise the native Set
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = {};
            set._items[type][item] = true;
          }
          return false;
        } else if (item in set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][item] = true;
          }
          return false;
        }
      }

    case 'boolean':
      // set._items['boolean'] holds a two element array
      // representing [ falseExists, trueExists ]
      if (type in set._items) {
        var bIdx = item ? 1 : 0;
        if (set._items[type][bIdx]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][bIdx] = true;
          }
          return false;
        }
      } else {
        if (shouldAdd) {
          set._items[type] = item ? [false, true] : [true, false];
        }
        return false;
      }

    case 'function':
      // compare functions for reference equality
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }
          return false;
        }
        if (!Object(__WEBPACK_IMPORTED_MODULE_0__contains__["a" /* default */])(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }
          return false;
        }
        return true;
      }

    case 'undefined':
      if (set._items[type]) {
        return true;
      } else {
        if (shouldAdd) {
          set._items[type] = true;
        }
        return false;
      }

    case 'object':
      if (item === null) {
        if (!set._items['null']) {
          if (shouldAdd) {
            set._items['null'] = true;
          }
          return false;
        }
        return true;
      }
    /* falls through */
    default:
      // reduce the search size of heterogeneous sets by creating buckets
      // for each type.
      type = Object.prototype.toString.call(item);
      if (!(type in set._items)) {
        if (shouldAdd) {
          set._items[type] = [item];
        }
        return false;
      }
      // scan through all previously applied items
      if (!Object(__WEBPACK_IMPORTED_MODULE_0__contains__["a" /* default */])(item, set._items[type])) {
        if (shouldAdd) {
          set._items[type].push(item);
        }
        return false;
      }
      return true;
  }
}

// A simple Set type that honours R.equals semantics
/* harmony default export */ __webpack_exports__["a"] = (_Set);

/***/ }),
/* 732 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Creates a new list with the separator interposed between elements.
 *
 * Dispatches to the `intersperse` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} separator The element to add to the list.
 * @param {Array} list The list to be interposed.
 * @return {Array} The new list.
 * @example
 *
 *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']
 */
var intersperse = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_checkForMethod__["a" /* default */])('intersperse', function intersperse(separator, list) {
  var out = [];
  var idx = 0;
  var length = list.length;
  while (idx < length) {
    if (idx === length - 1) {
      out.push(list[idx]);
    } else {
      out.push(list[idx], separator);
    }
    idx += 1;
  }
  return out;
}));
/* unused harmony default export */ var _unused_webpack_default_export = (intersperse);

/***/ }),
/* 733 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_clone__ = __webpack_require__(287);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_isTransformer__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal_stepCat__ = __webpack_require__(734);






/**
 * Transforms the items of the list with the transducer and appends the
 * transformed items to the accumulator using an appropriate iterator function
 * based on the accumulator type.
 *
 * The accumulator can be an array, string, object or a transformer. Iterated
 * items will be appended to arrays and concatenated to strings. Objects will
 * be merged directly or 2-item arrays will be merged as key, value pairs.
 *
 * The accumulator can also be a transformer object that provides a 2-arity
 * reducing iterator function, step, 0-arity initial value function, init, and
 * 1-arity result extraction function result. The step function is used as the
 * iterator function in reduce. The result function is used to convert the
 * final accumulator into the return type and in most cases is R.identity. The
 * init function is used to provide the initial accumulator.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the
 * transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig a -> (b -> b) -> [c] -> a
 * @param {*} acc The initial accumulator value.
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.into([], transducer, numbers); //=> [2, 3]
 *
 *      var intoArray = R.into([]);
 *      intoArray(transducer, numbers); //=> [2, 3]
 */
var into = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry3__["a" /* default */])(function into(acc, xf, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__internal_isTransformer__["a" /* default */])(acc) ? Object(__WEBPACK_IMPORTED_MODULE_3__internal_reduce__["a" /* default */])(xf(acc), acc['@@transducer/init'](), list) : Object(__WEBPACK_IMPORTED_MODULE_3__internal_reduce__["a" /* default */])(xf(Object(__WEBPACK_IMPORTED_MODULE_4__internal_stepCat__["a" /* default */])(acc)), Object(__WEBPACK_IMPORTED_MODULE_0__internal_clone__["a" /* default */])(acc, [], [], false), list);
});
/* unused harmony default export */ var _unused_webpack_default_export = (into);

/***/ }),
/* 734 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _stepCat;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assign__ = __webpack_require__(191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__identity__ = __webpack_require__(189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__isArrayLike__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__isTransformer__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__objOf__ = __webpack_require__(311);






var _stepCatArray = {
  '@@transducer/init': Array,
  '@@transducer/step': function (xs, x) {
    xs.push(x);
    return xs;
  },
  '@@transducer/result': __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */]
};
var _stepCatString = {
  '@@transducer/init': String,
  '@@transducer/step': function (a, b) {
    return a + b;
  },
  '@@transducer/result': __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */]
};
var _stepCatObject = {
  '@@transducer/init': Object,
  '@@transducer/step': function (result, input) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__assign__["a" /* default */])(result, Object(__WEBPACK_IMPORTED_MODULE_2__isArrayLike__["a" /* default */])(input) ? Object(__WEBPACK_IMPORTED_MODULE_4__objOf__["a" /* default */])(input[0], input[1]) : input);
  },
  '@@transducer/result': __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */]
};

function _stepCat(obj) {
  if (Object(__WEBPACK_IMPORTED_MODULE_3__isTransformer__["a" /* default */])(obj)) {
    return obj;
  }
  if (Object(__WEBPACK_IMPORTED_MODULE_2__isArrayLike__["a" /* default */])(obj)) {
    return _stepCatArray;
  }
  if (typeof obj === 'string') {
    return _stepCatString;
  }
  if (typeof obj === 'object') {
    return _stepCatObject;
  }
  throw new Error('Cannot create transformer for ' + obj);
}

/***/ }),
/* 735 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _objectAssign;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__has__ = __webpack_require__(18);


// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
function _objectAssign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  var idx = 1;
  var length = arguments.length;
  while (idx < length) {
    var source = arguments[idx];
    if (source != null) {
      for (var nextKey in source) {
        if (Object(__WEBPACK_IMPORTED_MODULE_0__has__["a" /* default */])(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }
    idx += 1;
  }
  return output;
}

/***/ }),
/* 736 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__keys__ = __webpack_require__(46);




/**
 * Same as [`R.invertObj`](#invertObj), however this accounts for objects with
 * duplicate values by putting the values into an array.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: [ s, ... ]}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object with keys in an array.
 * @see R.invertObj
 * @example
 *
 *      var raceResultsByFirstName = {
 *        first: 'alice',
 *        second: 'jake',
 *        third: 'alice',
 *      };
 *      R.invert(raceResultsByFirstName);
 *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
 */
var invert = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function invert(obj) {
  var props = Object(__WEBPACK_IMPORTED_MODULE_2__keys__["a" /* default */])(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    var val = obj[key];
    var list = Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(val, out) ? out[val] : out[val] = [];
    list[list.length] = key;
    idx += 1;
  }
  return out;
});
/* unused harmony default export */ var _unused_webpack_default_export = (invert);

/***/ }),
/* 737 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__keys__ = __webpack_require__(46);



/**
 * Returns a new object with the keys of the given object as values, and the
 * values of the given object, which are coerced to strings, as keys. Note
 * that the last key found is preferred when handling the same value.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: s}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object
 * @see R.invert
 * @example
 *
 *      var raceResults = {
 *        first: 'alice',
 *        second: 'jake'
 *      };
 *      R.invertObj(raceResults);
 *      //=> { 'alice': 'first', 'jake':'second' }
 *
 *      // Alternatively:
 *      var raceResults = ['alice', 'jake'];
 *      R.invertObj(raceResults);
 *      //=> { 'alice': '0', 'jake':'1' }
 */
var invertObj = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function invertObj(obj) {
  var props = Object(__WEBPACK_IMPORTED_MODULE_1__keys__["a" /* default */])(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    out[obj[key]] = key;
    idx += 1;
  }
  return out;
});
/* unused harmony default export */ var _unused_webpack_default_export = (invertObj);

/***/ }),
/* 738 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__empty__ = __webpack_require__(308);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__equals__ = __webpack_require__(29);




/**
 * Returns `true` if the given value is its type's empty value; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> Boolean
 * @param {*} x
 * @return {Boolean}
 * @see R.empty
 * @example
 *
 *      R.isEmpty([1, 2, 3]);   //=> false
 *      R.isEmpty([]);          //=> true
 *      R.isEmpty('');          //=> true
 *      R.isEmpty(null);        //=> false
 *      R.isEmpty({});          //=> true
 *      R.isEmpty({length: 0}); //=> false
 */
var isEmpty = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function isEmpty(x) {
  return x != null && Object(__WEBPACK_IMPORTED_MODULE_2__equals__["a" /* default */])(x, Object(__WEBPACK_IMPORTED_MODULE_1__empty__["a" /* default */])(x));
});
/* unused harmony default export */ var _unused_webpack_default_export = (isEmpty);

/***/ }),
/* 739 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__invoker__ = __webpack_require__(90);


/**
 * Returns a string made by inserting the `separator` between each element and
 * concatenating all the elements into a single string.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig String -> [a] -> String
 * @param {Number|String} separator The string used to separate the elements.
 * @param {Array} xs The elements to join into a string.
 * @return {String} str The string made by concatenating `xs` with `separator`.
 * @see R.split
 * @example
 *
 *      var spacer = R.join(' ');
 *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
 *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
 */
var join = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__invoker__["a" /* default */])(1, 'join');
/* unused harmony default export */ var _unused_webpack_default_export = (join);

/***/ }),
/* 740 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Returns a list containing the names of all the properties of the supplied
 * object, including prototype properties.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own and prototype properties.
 * @see R.keys, R.valuesIn
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.keysIn(f); //=> ['x', 'y']
 */
var keysIn = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function keysIn(obj) {
  var prop;
  var ks = [];
  for (prop in obj) {
    ks[ks.length] = prop;
  }
  return ks;
});
/* unused harmony default export */ var _unused_webpack_default_export = (keysIn);

/***/ }),
/* 741 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isArray__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__equals__ = __webpack_require__(29);




/**
 * Returns the position of the last occurrence of an item in an array, or -1 if
 * the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.indexOf
 * @example
 *
 *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
 *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
 */
var lastIndexOf = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function lastIndexOf(target, xs) {
  if (typeof xs.lastIndexOf === 'function' && !Object(__WEBPACK_IMPORTED_MODULE_1__internal_isArray__["a" /* default */])(xs)) {
    return xs.lastIndexOf(target);
  } else {
    var idx = xs.length - 1;
    while (idx >= 0) {
      if (Object(__WEBPACK_IMPORTED_MODULE_2__equals__["a" /* default */])(xs[idx], target)) {
        return idx;
      }
      idx -= 1;
    }
    return -1;
  }
});
/* unused harmony default export */ var _unused_webpack_default_export = (lastIndexOf);

/***/ }),
/* 742 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lens__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__nth__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__update__ = __webpack_require__(186);





/**
 * Returns a lens whose focus is the specified index.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Number -> Lens s a
 * @param {Number} n
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
 *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
 *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
 */
var lensIndex = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function lensIndex(n) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__lens__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__nth__["a" /* default */])(n), Object(__WEBPACK_IMPORTED_MODULE_3__update__["a" /* default */])(n));
});
/* unused harmony default export */ var _unused_webpack_default_export = (lensIndex);

/***/ }),
/* 743 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__assocPath__ = __webpack_require__(283);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lens__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__path__ = __webpack_require__(77);





/**
 * Returns a lens whose focus is the specified path.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @typedefn Idx = String | Int
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig [Idx] -> Lens s a
 * @param {Array} path The path to use.
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xHeadYLens = R.lensPath(['x', 0, 'y']);
 *
 *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> 2
 *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
 *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
 */
var lensPath = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function lensPath(p) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__lens__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_3__path__["a" /* default */])(p), Object(__WEBPACK_IMPORTED_MODULE_1__assocPath__["a" /* default */])(p));
});
/* unused harmony default export */ var _unused_webpack_default_export = (lensPath);

/***/ }),
/* 744 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__assoc__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lens__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__prop__ = __webpack_require__(174);





/**
 * Returns a lens whose focus is the specified property.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig String -> Lens s a
 * @param {String} k
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
var lensProp = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function lensProp(k) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__lens__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_3__prop__["a" /* default */])(k), Object(__WEBPACK_IMPORTED_MODULE_1__assoc__["a" /* default */])(k));
});
/* unused harmony default export */ var _unused_webpack_default_export = (lensProp);

/***/ }),
/* 745 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns `true` if the first argument is less than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.gt
 * @example
 *
 *      R.lt(2, 1); //=> false
 *      R.lt(2, 2); //=> false
 *      R.lt(2, 3); //=> true
 *      R.lt('a', 'z'); //=> true
 *      R.lt('z', 'a'); //=> false
 */
var lt = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function lt(a, b) {
  return a < b;
});
/* unused harmony default export */ var _unused_webpack_default_export = (lt);

/***/ }),
/* 746 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns `true` if the first argument is less than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.gte
 * @example
 *
 *      R.lte(2, 1); //=> false
 *      R.lte(2, 2); //=> true
 *      R.lte(2, 3); //=> true
 *      R.lte('a', 'z'); //=> true
 *      R.lte('z', 'a'); //=> false
 */
var lte = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function lte(a, b) {
  return a <= b;
});
/* unused harmony default export */ var _unused_webpack_default_export = (lte);

/***/ }),
/* 747 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * The `mapAccum` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from left to right, and returning a final value of this
 * accumulator together with the new list.
 *
 * The iterator function receives two arguments, *acc* and *value*, and should
 * return a tuple *[acc, value]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccumRight
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var appender = (a, b) => [a + b, a + b];
 *
 *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
 * @symb R.mapAccum(f, a, [b, c, d]) = [
 *   f(f(f(a, b)[0], c)[0], d)[0],
 *   [
 *     f(a, b)[1],
 *     f(f(a, b)[0], c)[1],
 *     f(f(f(a, b)[0], c)[0], d)[1]
 *   ]
 * ]
 */
var mapAccum = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function mapAccum(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var tuple = [acc];
  while (idx < len) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx += 1;
  }
  return [tuple[0], result];
});
/* unused harmony default export */ var _unused_webpack_default_export = (mapAccum);

/***/ }),
/* 748 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * The `mapAccumRight` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from right to left, and returning a final value of this
 * accumulator together with the new list.
 *
 * Similar to [`mapAccum`](#mapAccum), except moves through the input list from
 * the right to the left.
 *
 * The iterator function receives two arguments, *value* and *acc*, and should
 * return a tuple *[value, acc]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccum
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var append = (a, b) => [a + b, a + b];
 *
 *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']
 * @symb R.mapAccumRight(f, a, [b, c, d]) = [
 *   [
 *     f(b, f(c, f(d, a)[0])[0])[1],
 *     f(c, f(d, a)[0])[1],
 *     f(d, a)[1],
 *   ]
 *   f(b, f(c, f(d, a)[0])[0])[0],
 * ]
 */
var mapAccumRight = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function mapAccumRight(fn, acc, list) {
  var idx = list.length - 1;
  var result = [];
  var tuple = [acc];
  while (idx >= 0) {
    tuple = fn(list[idx], tuple[0]);
    result[idx] = tuple[1];
    idx -= 1;
  }
  return [result, tuple[0]];
});
/* unused harmony default export */ var _unused_webpack_default_export = (mapAccumRight);

/***/ }),
/* 749 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__keys__ = __webpack_require__(46);




/**
 * An Object-specific version of [`map`](#map). The function is applied to three
 * arguments: *(value, key, obj)*. If only the value is significant, use
 * [`map`](#map) instead.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig ((*, String, Object) -> *) -> Object -> Object
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @see R.map
 * @example
 *
 *      var values = { x: 1, y: 2, z: 3 };
 *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);
 *
 *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
 */
var mapObjIndexed = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function mapObjIndexed(fn, obj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_reduce__["a" /* default */])(function (acc, key) {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {}, Object(__WEBPACK_IMPORTED_MODULE_2__keys__["a" /* default */])(obj));
});
/* unused harmony default export */ var _unused_webpack_default_export = (mapObjIndexed);

/***/ }),
/* 750 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Tests a regular expression against a String. Note that this function will
 * return an empty array when there are no matches. This differs from
 * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
 * which returns `null` when there are no matches.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig RegExp -> String -> [String | Undefined]
 * @param {RegExp} rx A regular expression.
 * @param {String} str The string to match against
 * @return {Array} The list of matches or empty array.
 * @see R.test
 * @example
 *
 *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
 *      R.match(/a/, 'b'); //=> []
 *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
 */
var match = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function match(rx, str) {
  return str.match(rx) || [];
});
/* unused harmony default export */ var _unused_webpack_default_export = (match);

/***/ }),
/* 751 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isInteger__ = __webpack_require__(176);



/**
 * `mathMod` behaves like the modulo operator should mathematically, unlike the
 * `%` operator (and by extension, [`R.modulo`](#modulo)). So while
 * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer
 * arguments, and returns NaN when the modulus is zero or negative.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} m The dividend.
 * @param {Number} p the modulus.
 * @return {Number} The result of `b mod a`.
 * @see R.modulo
 * @example
 *
 *      R.mathMod(-17, 5);  //=> 3
 *      R.mathMod(17, 5);   //=> 2
 *      R.mathMod(17, -5);  //=> NaN
 *      R.mathMod(17, 0);   //=> NaN
 *      R.mathMod(17.2, 5); //=> NaN
 *      R.mathMod(17, 5.3); //=> NaN
 *
 *      var clock = R.mathMod(R.__, 12);
 *      clock(15); //=> 3
 *      clock(24); //=> 0
 *
 *      var seventeenMod = R.mathMod(17);
 *      seventeenMod(3);  //=> 2
 *      seventeenMod(4);  //=> 1
 *      seventeenMod(10); //=> 7
 */
var mathMod = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function mathMod(m, p) {
  if (!Object(__WEBPACK_IMPORTED_MODULE_1__internal_isInteger__["a" /* default */])(m)) {
    return NaN;
  }
  if (!Object(__WEBPACK_IMPORTED_MODULE_1__internal_isInteger__["a" /* default */])(p) || p < 1) {
    return NaN;
  }
  return (m % p + p) % p;
});
/* unused harmony default export */ var _unused_webpack_default_export = (mathMod);

/***/ }),
/* 752 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Takes a function and two values, and returns whichever value produces the
 * larger result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.max, R.minBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.maxBy(square, -3, 2); //=> -3
 *
 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
 *      R.reduce(R.maxBy(square), 0, []); //=> 0
 */
var maxBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function maxBy(f, a, b) {
  return f(b) > f(a) ? b : a;
});
/* unused harmony default export */ var _unused_webpack_default_export = (maxBy);

/***/ }),
/* 753 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mean__ = __webpack_require__(316);



/**
 * Returns the median of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.mean
 * @example
 *
 *      R.median([2, 9, 7]); //=> 7
 *      R.median([7, 2, 10, 9]); //=> 8
 *      R.median([]); //=> NaN
 */
var median = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function median(list) {
  var len = list.length;
  if (len === 0) {
    return NaN;
  }
  var width = 2 - len % 2;
  var idx = (len - width) / 2;
  return Object(__WEBPACK_IMPORTED_MODULE_1__mean__["a" /* default */])(Array.prototype.slice.call(list, 0).sort(function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }).slice(idx, idx + width));
});
/* unused harmony default export */ var _unused_webpack_default_export = (median);

/***/ }),
/* 754 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__memoizeWith__ = __webpack_require__(318);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__toString__ = __webpack_require__(88);



/**
 * Creates a new function that, when invoked, caches the result of calling `fn`
 * for a given argument set and returns the result. Subsequent calls to the
 * memoized `fn` with the same argument set will not result in an additional
 * call to `fn`; instead, the cached result for that set of arguments will be
 * returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @see R.memoizeWith
 * @deprecated since v0.25.0
 * @example
 *
 *      let count = 0;
 *      const factorial = R.memoize(n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */
var memoize = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__memoizeWith__["a" /* default */])(function () {
  return Object(__WEBPACK_IMPORTED_MODULE_1__toString__["a" /* default */])(arguments);
});
/* unused harmony default export */ var _unused_webpack_default_export = (memoize);

/***/ }),
/* 755 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_assign__ = __webpack_require__(191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);



/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      var resetToDefault = R.merge(R.__, {x: 0});
 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
 * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }
 */
var merge = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function merge(l, r) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_assign__["a" /* default */])({}, l, r);
});
/* unused harmony default export */ var _unused_webpack_default_export = (merge);

/***/ }),
/* 756 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_assign__ = __webpack_require__(191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry1__ = __webpack_require__(2);



/**
 * Merges a list of objects together into one object.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig [{k: v}] -> {k: v}
 * @param {Array} list An array of objects
 * @return {Object} A merged object.
 * @see R.reduce
 * @example
 *
 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
 */
var mergeAll = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry1__["a" /* default */])(function mergeAll(list) {
  return __WEBPACK_IMPORTED_MODULE_0__internal_assign__["a" /* default */].apply(null, [{}].concat(list));
});
/* unused harmony default export */ var _unused_webpack_default_export = (mergeAll);

/***/ }),
/* 757 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mergeDeepWithKey__ = __webpack_require__(125);



/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the first object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                      { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}
 */
var mergeDeepLeft = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function mergeDeepLeft(lObj, rObj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__mergeDeepWithKey__["a" /* default */])(function (k, lVal, rVal) {
    return lVal;
  }, lObj, rObj);
});
/* unused harmony default export */ var _unused_webpack_default_export = (mergeDeepLeft);

/***/ }),
/* 758 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mergeDeepWithKey__ = __webpack_require__(125);



/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                       { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}
 */
var mergeDeepRight = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function mergeDeepRight(lObj, rObj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__mergeDeepWithKey__["a" /* default */])(function (k, lVal, rVal) {
    return rVal;
  }, lObj, rObj);
});
/* unused harmony default export */ var _unused_webpack_default_export = (mergeDeepRight);

/***/ }),
/* 759 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mergeDeepWithKey__ = __webpack_require__(125);



/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to associated values using the
 *   resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepWith(R.concat,
 *                      { a: true, c: { values: [10, 20] }},
 *                      { b: true, c: { values: [15, 35] }});
 *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}
 */
var mergeDeepWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function mergeDeepWith(fn, lObj, rObj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__mergeDeepWithKey__["a" /* default */])(function (k, lVal, rVal) {
    return fn(lVal, rVal);
  }, lObj, rObj);
});
/* unused harmony default export */ var _unused_webpack_default_export = (mergeDeepWith);

/***/ }),
/* 760 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mergeWithKey__ = __webpack_require__(192);



/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the values
 * associated with the key in each object, with the result being used as the
 * value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWith, R.merge, R.mergeWithKey
 * @example
 *
 *      R.mergeWith(R.concat,
 *                  { a: true, values: [10, 20] },
 *                  { b: true, values: [15, 35] });
 *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
 */
var mergeWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function mergeWith(fn, l, r) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__mergeWithKey__["a" /* default */])(function (_, _l, _r) {
    return fn(_l, _r);
  }, l, r);
});
/* unused harmony default export */ var _unused_webpack_default_export = (mergeWith);

/***/ }),
/* 761 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns the smaller of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.minBy, R.max
 * @example
 *
 *      R.min(789, 123); //=> 123
 *      R.min('a', 'b'); //=> 'a'
 */
var min = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function min(a, b) {
  return b < a ? b : a;
});
/* harmony default export */ __webpack_exports__["a"] = (min);

/***/ }),
/* 762 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Takes a function and two values, and returns whichever value produces the
 * smaller result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.min, R.maxBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.minBy(square, -3, 2); //=> 2
 *
 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
 */
var minBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function minBy(f, a, b) {
  return f(b) < f(a) ? b : a;
});
/* unused harmony default export */ var _unused_webpack_default_export = (minBy);

/***/ }),
/* 763 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Divides the first parameter by the second and returns the remainder. Note
 * that this function preserves the JavaScript-style behavior for modulo. For
 * mathematical modulo see [`mathMod`](#mathMod).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The value to the divide.
 * @param {Number} b The pseudo-modulus
 * @return {Number} The result of `b % a`.
 * @see R.mathMod
 * @example
 *
 *      R.modulo(17, 3); //=> 2
 *      // JS behavior:
 *      R.modulo(-17, 3); //=> -2
 *      R.modulo(17, -3); //=> 2
 *
 *      var isOdd = R.modulo(R.__, 2);
 *      isOdd(42); //=> 0
 *      isOdd(21); //=> 1
 */
var modulo = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function modulo(a, b) {
  return a % b;
});
/* unused harmony default export */ var _unused_webpack_default_export = (modulo);

/***/ }),
/* 764 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Negates its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number}
 * @example
 *
 *      R.negate(42); //=> -42
 */
var negate = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function negate(n) {
  return -n;
});
/* unused harmony default export */ var _unused_webpack_default_export = (negate);

/***/ }),
/* 765 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_complement__ = __webpack_require__(295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_xany__ = __webpack_require__(280);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__any__ = __webpack_require__(279);






/**
 * Returns `true` if no elements of the list match the predicate, `false`
 * otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
 * @see R.all, R.any
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *      var isOdd = n => n % 2 === 1;
 *
 *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
 *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false
 */
var none = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_complement__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__internal_dispatchable__["a" /* default */])(['any'], __WEBPACK_IMPORTED_MODULE_3__internal_xany__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__any__["a" /* default */])));
/* unused harmony default export */ var _unused_webpack_default_export = (none);

/***/ }),
/* 766 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__nth__ = __webpack_require__(89);




/**
 * Returns a function which returns its nth argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig Number -> *... -> *
 * @param {Number} n
 * @return {Function}
 * @example
 *
 *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
 *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
 * @symb R.nthArg(-1)(a, b, c) = c
 * @symb R.nthArg(0)(a, b, c) = a
 * @symb R.nthArg(1)(a, b, c) = b
 */
var nthArg = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function nthArg(n) {
  var arity = n < 0 ? 1 : n + 1;
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(arity, function () {
    return Object(__WEBPACK_IMPORTED_MODULE_2__nth__["a" /* default */])(n, arguments);
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (nthArg);

/***/ }),
/* 767 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * `o` is a curried composition function that returns a unary function.
 * Like [`compose`](#compose), `o` performs right-to-left function composition.
 * Unlike [`compose`](#compose), the rightmost function passed to `o` will be
 * invoked with only one argument.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (b -> c) -> (a -> b) -> a -> c
 * @param {Function} f
 * @param {Function} g
 * @return {Function}
 * @see R.compose, R.pipe
 * @example
 *
 *      var classyGreeting = name => "The name's " + name.last + ", " + name.first + " " + name.last
 *      var yellGreeting = R.o(R.toUpper, classyGreeting);
 *      yellGreeting({first: 'James', last: 'Bond'}); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.o(R.multiply(10), R.add(10))(-4) //=> 60
 *
 * @symb R.o(f, g, x) = f(g(x))
 */
var o = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function o(f, g, x) {
  return f(g(x));
});
/* unused harmony default export */ var _unused_webpack_default_export = (o);

/***/ }),
/* 768 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_of__ = __webpack_require__(769);



/**
 * Returns a singleton array containing the value provided.
 *
 * Note this `of` is different from the ES6 `of`; See
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> [a]
 * @param {*} x any value
 * @return {Array} An array wrapping `x`.
 * @example
 *
 *      R.of(null); //=> [null]
 *      R.of([42]); //=> [[42]]
 */
var of = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__internal_of__["a" /* default */]);
/* unused harmony default export */ var _unused_webpack_default_export = (of);

/***/ }),
/* 769 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _of;
function _of(x) {
  return [x];
}

/***/ }),
/* 770 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns a partial copy of an object omitting the keys specified.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [String] -> {String: *} -> {String: *}
 * @param {Array} names an array of String property names to omit from the new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with properties from `names` not on it.
 * @see R.pick
 * @example
 *
 *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
 */
var omit = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function omit(names, obj) {
  var result = {};
  var index = {};
  var idx = 0;
  var len = names.length;

  while (idx < len) {
    index[names[idx]] = 1;
    idx += 1;
  }

  for (var prop in obj) {
    if (!index.hasOwnProperty(prop)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (omit);

/***/ }),
/* 771 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry1__ = __webpack_require__(2);



/**
 * Accepts a function `fn` and returns a function that guards invocation of
 * `fn` such that `fn` can only ever be called once, no matter how many times
 * the returned function is invoked. The first value calculated is returned in
 * subsequent invocations.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a... -> b) -> (a... -> b)
 * @param {Function} fn The function to wrap in a call-only-once wrapper.
 * @return {Function} The wrapped function.
 * @example
 *
 *      var addOneOnce = R.once(x => x + 1);
 *      addOneOnce(10); //=> 11
 *      addOneOnce(addOneOnce(50)); //=> 11
 */
var once = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry1__["a" /* default */])(function once(fn) {
  var called = false;
  var result;
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(fn.length, function () {
    if (called) {
      return result;
    }
    called = true;
    result = fn.apply(this, arguments);
    return result;
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (once);

/***/ }),
/* 772 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category List
 * @sig a -> b -> (a,b)
 * @param {*} fst
 * @param {*} snd
 * @return {Array}
 * @see R.objOf, R.of
 * @example
 *
 *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
 */
var pair = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function pair(fst, snd) {
  return [fst, snd];
});
/* unused harmony default export */ var _unused_webpack_default_export = (pair);

/***/ }),
/* 773 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_createPartialApplicator__ = __webpack_require__(321);



/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided initially followed by the arguments provided to `g`.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partialRight
 * @example
 *
 *      var multiply2 = (a, b) => a * b;
 *      var double = R.partial(multiply2, [2]);
 *      double(2); //=> 4
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var sayHello = R.partial(greet, ['Hello']);
 *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);
 *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
 */
var partial = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_createPartialApplicator__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */]);
/* unused harmony default export */ var _unused_webpack_default_export = (partial);

/***/ }),
/* 774 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_createPartialApplicator__ = __webpack_require__(321);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__flip__ = __webpack_require__(123);




/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided to `g` followed by the arguments provided initially.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partial
 * @example
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
 *
 *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
 */
var partialRight = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_createPartialApplicator__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__flip__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */]));
/* unused harmony default export */ var _unused_webpack_default_export = (partialRight);

/***/ }),
/* 775 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__filter__ = __webpack_require__(183);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__juxt__ = __webpack_require__(313);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__reject__ = __webpack_require__(121);




/**
 * Takes a predicate and a list or other `Filterable` object and returns the
 * pair of filterable objects of the same type of elements which do and do not
 * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
 * @param {Function} pred A predicate to determine which side the element belongs to.
 * @param {Array} filterable the list (or other filterable) to partition.
 * @return {Array} An array, containing first the subset of elements that satisfy the
 *         predicate, and second the subset of elements that do not satisfy.
 * @see R.filter, R.reject
 * @example
 *
 *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
 *
 *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
 *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
 */
var partition = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__juxt__["a" /* default */])([__WEBPACK_IMPORTED_MODULE_0__filter__["a" /* default */], __WEBPACK_IMPORTED_MODULE_2__reject__["a" /* default */]]);
/* unused harmony default export */ var _unused_webpack_default_export = (partition);

/***/ }),
/* 776 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__equals__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__path__ = __webpack_require__(77);




/**
 * Determines whether a nested path on an object has a specific value, in
 * [`R.equals`](#equals) terms. Most likely used to filter a list.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Relation
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> Boolean
 * @param {Array} path The path of the nested property to use
 * @param {*} val The value to compare the nested property with
 * @param {Object} obj The object to check the nested property in
 * @return {Boolean} `true` if the value equals the nested object property,
 *         `false` otherwise.
 * @example
 *
 *      var user1 = { address: { zipCode: 90210 } };
 *      var user2 = { address: { zipCode: 55555 } };
 *      var user3 = { name: 'Bob' };
 *      var users = [ user1, user2, user3 ];
 *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);
 *      R.filter(isFamous, users); //=> [ user1 ]
 */
var pathEq = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function pathEq(_path, val, obj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__equals__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__path__["a" /* default */])(_path, obj), val);
});
/* harmony default export */ __webpack_exports__["a"] = (pathEq);

/***/ }),
/* 777 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__defaultTo__ = __webpack_require__(298);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__path__ = __webpack_require__(77);




/**
 * If the given, non-null object has a value at the given path, returns the
 * value at that path. Otherwise returns the provided default value.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig a -> [Idx] -> {a} -> a
 * @param {*} d The default value.
 * @param {Array} p The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path` of the supplied object or the default value.
 * @example
 *
 *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
 */
var pathOr = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function pathOr(d, p, obj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__defaultTo__["a" /* default */])(d, Object(__WEBPACK_IMPORTED_MODULE_2__path__["a" /* default */])(p, obj));
});
/* unused harmony default export */ var _unused_webpack_default_export = (pathOr);

/***/ }),
/* 778 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__path__ = __webpack_require__(77);



/**
 * Returns `true` if the specified object property at given path satisfies the
 * given predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Logic
 * @typedefn Idx = String | Int
 * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
 * @param {Function} pred
 * @param {Array} propPath
 * @param {*} obj
 * @return {Boolean}
 * @see R.propSatisfies, R.path
 * @example
 *
 *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
 */
var pathSatisfies = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function pathSatisfies(pred, propPath, obj) {
  return propPath.length > 0 && pred(Object(__WEBPACK_IMPORTED_MODULE_1__path__["a" /* default */])(propPath, obj));
});
/* unused harmony default export */ var _unused_webpack_default_export = (pathSatisfies);

/***/ }),
/* 779 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns a partial copy of an object containing only the keys specified. If
 * the key does not exist, the property is ignored.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.omit, R.props
 * @example
 *
 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
 */
var pick = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function pick(names, obj) {
  var result = {};
  var idx = 0;
  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }
    idx += 1;
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (pick);

/***/ }),
/* 780 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns a partial copy of an object containing only the keys that satisfy
 * the supplied predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}
 * @param {Function} pred A predicate to determine whether or not a key
 *        should be included on the output object.
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties that satisfy `pred`
 *         on it.
 * @see R.pick, R.filter
 * @example
 *
 *      var isUpperCase = (val, key) => key.toUpperCase() === key;
 *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
 */
var pickBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function pickBy(test, obj) {
  var result = {};
  for (var prop in obj) {
    if (test(obj[prop], prop, obj)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (pickBy);

/***/ }),
/* 781 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__composeK__ = __webpack_require__(291);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reverse__ = __webpack_require__(119);



/**
 * Returns the left-to-right Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
 * @param {...Function}
 * @return {Function}
 * @see R.composeK
 * @example
 *
 *      //  parseJson :: String -> Maybe *
 *      //  get :: String -> Object -> Maybe *
 *
 *      //  getStateCode :: Maybe String -> Maybe String
 *      var getStateCode = R.pipeK(
 *        parseJson,
 *        get('user'),
 *        get('address'),
 *        get('state'),
 *        R.compose(Maybe.of, R.toUpper)
 *      );
 *
 *      getStateCode('{"user":{"address":{"state":"ny"}}}');
 *      //=> Just('NY')
 *      getStateCode('[Invalid JSON]');
 *      //=> Nothing()
 * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
 */
function pipeK() {
  if (arguments.length === 0) {
    throw new Error('pipeK requires at least one argument');
  }
  return __WEBPACK_IMPORTED_MODULE_0__composeK__["a" /* default */].apply(this, Object(__WEBPACK_IMPORTED_MODULE_1__reverse__["a" /* default */])(arguments));
}

/***/ }),
/* 782 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__multiply__ = __webpack_require__(319);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduce__ = __webpack_require__(47);



/**
 * Multiplies together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The product of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.product([2,4,6,8,100,1]); //=> 38400
 */
var product = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__reduce__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__multiply__["a" /* default */], 1);
/* unused harmony default export */ var _unused_webpack_default_export = (product);

/***/ }),
/* 783 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_map__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__identity__ = __webpack_require__(188);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__pickAll__ = __webpack_require__(322);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__useWith__ = __webpack_require__(324);





/**
 * Reasonable analog to SQL `select` statement.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @category Relation
 * @sig [k] -> [{k: v}] -> [{k: v}]
 * @param {Array} props The property names to project
 * @param {Array} objs The objects to query
 * @return {Array} An array of objects with just the `props` properties.
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
 *      var kids = [abby, fred];
 *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
 */
var project = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_3__useWith__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__internal_map__["a" /* default */], [__WEBPACK_IMPORTED_MODULE_2__pickAll__["a" /* default */], __WEBPACK_IMPORTED_MODULE_1__identity__["a" /* default */]]); // passing `identity` gives correct arity
/* unused harmony default export */ var _unused_webpack_default_export = (project);

/***/ }),
/* 784 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__equals__ = __webpack_require__(29);



/**
 * Returns `true` if the specified object property is equal, in
 * [`R.equals`](#equals) terms, to the given value; `false` otherwise.
 * You can test multiple properties with [`R.where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig String -> a -> Object -> Boolean
 * @param {String} name
 * @param {*} val
 * @param {*} obj
 * @return {Boolean}
 * @see R.whereEq, R.propSatisfies, R.equals
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
 *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
 *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
 *      var kids = [abby, fred, rusty, alois];
 *      var hasBrownHair = R.propEq('hair', 'brown');
 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
 */
var propEq = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function propEq(name, val, obj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__equals__["a" /* default */])(val, obj[name]);
});
/* harmony default export */ __webpack_exports__["a"] = (propEq);

/***/ }),
/* 785 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__is__ = __webpack_require__(312);



/**
 * Returns `true` if the specified object property is of the given type;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Type
 * @sig Type -> String -> Object -> Boolean
 * @param {Function} type
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.is, R.propSatisfies
 * @example
 *
 *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
 *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
 *      R.propIs(Number, 'x', {});            //=> false
 */
var propIs = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function propIs(type, name, obj) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__is__["a" /* default */])(type, obj[name]);
});
/* unused harmony default export */ var _unused_webpack_default_export = (propIs);

/***/ }),
/* 786 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);



/**
 * If the given, non-null object has an own property with the specified name,
 * returns the value of that property. Otherwise returns the provided default
 * value.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Object
 * @sig a -> String -> Object -> a
 * @param {*} val The default value.
 * @param {String} p The name of the property to return.
 * @param {Object} obj The object to query.
 * @return {*} The value of given property of the supplied object or the default value.
 * @example
 *
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var favorite = R.prop('favoriteLibrary');
 *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
 *
 *      favorite(alice);  //=> undefined
 *      favoriteWithDefault(alice);  //=> 'Ramda'
 */
var propOr = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function propOr(val, p, obj) {
  return obj != null && Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(p, obj) ? obj[p] : val;
});
/* unused harmony default export */ var _unused_webpack_default_export = (propOr);

/***/ }),
/* 787 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Returns `true` if the specified object property satisfies the given
 * predicate; `false` otherwise. You can test multiple properties with
 * [`R.where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Logic
 * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
 * @param {Function} pred
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.where, R.propEq, R.propIs
 * @example
 *
 *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
 */
var propSatisfies = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function propSatisfies(pred, name, obj) {
  return pred(obj[name]);
});
/* harmony default export */ __webpack_exports__["a"] = (propSatisfies);

/***/ }),
/* 788 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Acts as multiple `prop`: array of keys in, array of values out. Preserves
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> [v]
 * @param {Array} ps The property names to fetch
 * @param {Object} obj The object to query
 * @return {Array} The corresponding values or partially applied function.
 * @example
 *
 *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
 *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
 *
 *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
 *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
 */
var props = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function props(ps, obj) {
  var len = ps.length;
  var out = [];
  var idx = 0;

  while (idx < len) {
    out[idx] = obj[ps[idx]];
    idx += 1;
  }

  return out;
});
/* unused harmony default export */ var _unused_webpack_default_export = (props);

/***/ }),
/* 789 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_isNumber__ = __webpack_require__(315);



/**
 * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> Number -> [Number]
 * @param {Number} from The first number in the list.
 * @param {Number} to One more than the last number in the list.
 * @return {Array} The list of numbers in tthe set `[a, b)`.
 * @example
 *
 *      R.range(1, 5);    //=> [1, 2, 3, 4]
 *      R.range(50, 53);  //=> [50, 51, 52]
 */
var range = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function range(from, to) {
  if (!(Object(__WEBPACK_IMPORTED_MODULE_1__internal_isNumber__["a" /* default */])(from) && Object(__WEBPACK_IMPORTED_MODULE_1__internal_isNumber__["a" /* default */])(to))) {
    throw new TypeError('Both arguments to range must be numbers');
  }
  var result = [];
  var n = from;
  while (n < to) {
    result.push(n);
    n += 1;
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (range);

/***/ }),
/* 790 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curryN__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_reduced__ = __webpack_require__(54);




/**
 * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating
 * through the list, successively calling the iterator function. `reduceWhile`
 * also takes a predicate that is evaluated before each step. If the predicate
 * returns `false`, it "short-circuits" the iteration and returns the current
 * value of the accumulator.
 *
 * @func
 * @memberOf R
 * @since v0.22.0
 * @category List
 * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} pred The predicate. It is passed the accumulator and the
 *        current element.
 * @param {Function} fn The iterator function. Receives two values, the
 *        accumulator and the current element.
 * @param {*} a The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced
 * @example
 *
 *      var isOdd = (acc, x) => x % 2 === 1;
 *      var xs = [1, 3, 5, 60, 777, 800];
 *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
 *
 *      var ys = [2, 4, 6]
 *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
 */
var reduceWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curryN__["a" /* default */])(4, [], function _reduceWhile(pred, fn, a, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__internal_reduce__["a" /* default */])(function (acc, x) {
    return pred(acc, x) ? fn(acc, x) : Object(__WEBPACK_IMPORTED_MODULE_2__internal_reduced__["a" /* default */])(acc);
  }, a, list);
});
/* unused harmony default export */ var _unused_webpack_default_export = (reduceWhile);

/***/ }),
/* 791 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_reduced__ = __webpack_require__(54);



/**
 * Returns a value wrapped to indicate that it is the final value of the reduce
 * and transduce functions. The returned value should be considered a black
 * box: the internal structure is not guaranteed to be stable.
 *
 * Note: this optimization is unavailable to functions not explicitly listed
 * above. For instance, it is not currently supported by
 * [`reduceRight`](#reduceRight).
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category List
 * @sig a -> *
 * @param {*} x The final value of the reduce.
 * @return {*} The wrapped value.
 * @see R.reduce, R.transduce
 * @example
 *
 *     R.reduce(
 *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),
 *       [],
 *       [1, 2, 3, 4, 5]) // [1, 2, 3]
 */
var reduced = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__internal_reduced__["a" /* default */]);
/* unused harmony default export */ var _unused_webpack_default_export = (reduced);

/***/ }),
/* 792 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__always__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__times__ = __webpack_require__(326);




/**
 * Returns a fixed list of size `n` containing a specified identical value.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig a -> n -> [a]
 * @param {*} value The value to repeat.
 * @param {Number} n The desired size of the output list.
 * @return {Array} A new array containing `n` `value`s.
 * @see R.times
 * @example
 *
 *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
 *
 *      var obj = {};
 *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
 *      repeatedObjs[0] === repeatedObjs[1]; //=> true
 * @symb R.repeat(a, 0) = []
 * @symb R.repeat(a, 1) = [a]
 * @symb R.repeat(a, 2) = [a, a]
 */
var repeat = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function repeat(value, n) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__times__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_1__always__["a" /* default */])(value), n);
});
/* unused harmony default export */ var _unused_webpack_default_export = (repeat);

/***/ }),
/* 793 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Replace a substring or regex match in a string with a replacement.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category String
 * @sig RegExp|String -> String -> String -> String
 * @param {RegExp|String} pattern A regular expression or a substring to match.
 * @param {String} replacement The string to replace the matches with.
 * @param {String} str The String to do the search and replacement in.
 * @return {String} The result.
 * @example
 *
 *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *
 *      // Use the "g" (global) flag to replace all occurrences:
 *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
 */
var replace = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function replace(regex, replacement, str) {
  return str.replace(regex, replacement);
});
/* unused harmony default export */ var _unused_webpack_default_export = (replace);

/***/ }),
/* 794 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Scan is similar to [`reduce`](#reduce), but returns a list of successively
 * reduced values from the left
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> [a]
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {Array} A list of all intermediately reduced values.
 * @see R.reduce
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
 * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
 */
var scan = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function scan(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [acc];
  while (idx < len) {
    acc = fn(acc, list[idx]);
    result[idx + 1] = acc;
    idx += 1;
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (scan);

/***/ }),
/* 795 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__always__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__over__ = __webpack_require__(320);




/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the given value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> a -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
 *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
 */
var set = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function set(lens, v, x) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__over__["a" /* default */])(lens, Object(__WEBPACK_IMPORTED_MODULE_1__always__["a" /* default */])(v), x);
});
/* unused harmony default export */ var _unused_webpack_default_export = (set);

/***/ }),
/* 796 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Returns a copy of the list, sorted according to the comparator function,
 * which should accept two values at a time and return a negative number if the
 * first value is smaller, a positive number if it's larger, and zero if they
 * are equal. Please note that this is a **copy** of the list. It does not
 * modify the original.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, a) -> Number) -> [a] -> [a]
 * @param {Function} comparator A sorting function :: a -> b -> Int
 * @param {Array} list The list to sort
 * @return {Array} a new array with its elements sorted by the comparator function.
 * @example
 *
 *      var diff = function(a, b) { return a - b; };
 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
 */
var sort = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function sort(comparator, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator);
});
/* unused harmony default export */ var _unused_webpack_default_export = (sort);

/***/ }),
/* 797 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Sorts the list according to the supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord b => (a -> b) -> [a] -> [a]
 * @param {Function} fn
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `fn`.
 * @example
 *
 *      var sortByFirstItem = R.sortBy(R.prop(0));
 *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
 *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var bob = {
 *        name: 'Bob',
 *        age: -10
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 314.159
 *      };
 *      var people = [clara, bob, alice];
 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
 */
var sortBy = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function sortBy(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (sortBy);

/***/ }),
/* 798 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Sorts a list according to a list of comparators.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Relation
 * @sig [(a, a) -> Number] -> [a] -> [a]
 * @param {Array} functions A list of comparator functions.
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted according to the comarator functions.
 * @example
 *
 *      var alice = {
 *        name: 'alice',
 *        age: 40
 *      };
 *      var bob = {
 *        name: 'bob',
 *        age: 30
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 40
 *      };
 *      var people = [clara, bob, alice];
 *      var ageNameSort = R.sortWith([
 *        R.descend(R.prop('age')),
 *        R.ascend(R.prop('name'))
 *      ]);
 *      ageNameSort(people); //=> [alice, clara, bob]
 */
var sortWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function sortWith(fns, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var result = 0;
    var i = 0;
    while (result === 0 && i < fns.length) {
      result = fns[i](a, b);
      i += 1;
    }
    return result;
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (sortWith);

/***/ }),
/* 799 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__invoker__ = __webpack_require__(90);


/**
 * Splits a string into an array of strings based on the given
 * separator.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig (String | RegExp) -> String -> [String]
 * @param {String|RegExp} sep The pattern.
 * @param {String} str The string to separate into an array.
 * @return {Array} The array of strings from `str` separated by `str`.
 * @see R.join
 * @example
 *
 *      var pathComponents = R.split('/');
 *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
 *
 *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
 */
var split = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__invoker__["a" /* default */])(1, 'split');
/* unused harmony default export */ var _unused_webpack_default_export = (split);

/***/ }),
/* 800 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__length__ = __webpack_require__(314);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__slice__ = __webpack_require__(36);




/**
 * Splits a given list or string at a given index.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig Number -> [a] -> [[a], [a]]
 * @sig Number -> String -> [String, String]
 * @param {Number} index The index where the array/string is split.
 * @param {Array|String} array The array/string to be split.
 * @return {Array}
 * @example
 *
 *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
 *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
 *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
 */
var splitAt = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function splitAt(index, array) {
  return [Object(__WEBPACK_IMPORTED_MODULE_2__slice__["a" /* default */])(0, index, array), Object(__WEBPACK_IMPORTED_MODULE_2__slice__["a" /* default */])(index, Object(__WEBPACK_IMPORTED_MODULE_1__length__["a" /* default */])(array), array)];
});
/* unused harmony default export */ var _unused_webpack_default_export = (splitAt);

/***/ }),
/* 801 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__slice__ = __webpack_require__(36);



/**
 * Splits a collection into slices of the specified length.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @sig Number -> String -> [String]
 * @param {Number} n
 * @param {Array} list
 * @return {Array}
 * @example
 *
 *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
 *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
 */
var splitEvery = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function splitEvery(n, list) {
  if (n <= 0) {
    throw new Error('First argument to splitEvery must be a positive integer');
  }
  var result = [];
  var idx = 0;
  while (idx < list.length) {
    result.push(Object(__WEBPACK_IMPORTED_MODULE_1__slice__["a" /* default */])(idx, idx += n, list));
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (splitEvery);

/***/ }),
/* 802 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Takes a list and a predicate and returns a pair of lists with the following properties:
 *
 *  - the result of concatenating the two output lists is equivalent to the input list;
 *  - none of the elements of the first output list satisfies the predicate; and
 *  - if the second output list is non-empty, its first element satisfies the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [[a], [a]]
 * @param {Function} pred The predicate that determines where the array is split.
 * @param {Array} list The array to be split.
 * @return {Array}
 * @example
 *
 *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
 */
var splitWhen = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function splitWhen(pred, list) {
  var idx = 0;
  var len = list.length;
  var prefix = [];

  while (idx < len && !pred(list[idx])) {
    prefix.push(list[idx]);
    idx += 1;
  }

  return [prefix, Array.prototype.slice.call(list, idx)];
});
/* unused harmony default export */ var _unused_webpack_default_export = (splitWhen);

/***/ }),
/* 803 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__equals__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__take__ = __webpack_require__(187);




/**
 * Checks if a list starts with the provided values
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> Boolean
 * @sig String -> Boolean
 * @param {*} prefix
 * @param {*} list
 * @return {Boolean}
 * @example
 *
 *      R.startsWith('a', 'abc')                //=> true
 *      R.startsWith('b', 'abc')                //=> false
 *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
 *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
 */
var startsWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function (prefix, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__equals__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__take__["a" /* default */])(prefix.length, list), prefix);
});
/* unused harmony default export */ var _unused_webpack_default_export = (startsWith);

/***/ }),
/* 804 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Subtracts its second argument from its first argument.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a - b`.
 * @see R.add
 * @example
 *
 *      R.subtract(10, 8); //=> 2
 *
 *      var minus5 = R.subtract(R.__, 5);
 *      minus5(17); //=> 12
 *
 *      var complementaryAngle = R.subtract(90);
 *      complementaryAngle(30); //=> 60
 *      complementaryAngle(72); //=> 18
 */
var subtract = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function subtract(a, b) {
  return Number(a) - Number(b);
});
/* unused harmony default export */ var _unused_webpack_default_export = (subtract);

/***/ }),
/* 805 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__concat__ = __webpack_require__(182);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__difference__ = __webpack_require__(299);




/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
 * @example
 *
 *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
 *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
 */
var symmetricDifference = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function symmetricDifference(list1, list2) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__concat__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__difference__["a" /* default */])(list1, list2), Object(__WEBPACK_IMPORTED_MODULE_2__difference__["a" /* default */])(list2, list1));
});
/* unused harmony default export */ var _unused_webpack_default_export = (symmetricDifference);

/***/ }),
/* 806 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__concat__ = __webpack_require__(182);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__differenceWith__ = __webpack_require__(300);




/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both. Duplication is determined according to the value
 * returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifference, R.difference, R.differenceWith
 * @example
 *
 *      var eqA = R.eqBy(R.prop('a'));
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
 *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
 *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
 */
var symmetricDifferenceWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function symmetricDifferenceWith(pred, list1, list2) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__concat__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__differenceWith__["a" /* default */])(pred, list1, list2), Object(__WEBPACK_IMPORTED_MODULE_2__differenceWith__["a" /* default */])(pred, list2, list1));
});
/* unused harmony default export */ var _unused_webpack_default_export = (symmetricDifferenceWith);

/***/ }),
/* 807 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__slice__ = __webpack_require__(36);



/**
 * Returns a new list containing the last `n` elements of a given list, passing
 * each value to the supplied predicate function, and terminating when the
 * predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropLastWhile, R.addIndex
 * @example
 *
 *      var isNotOne = x => x !== 1;
 *
 *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
 *
 *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'
 */
var takeLastWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function takeLastWhile(fn, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && fn(xs[idx])) {
    idx -= 1;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_1__slice__["a" /* default */])(idx + 1, Infinity, xs);
});
/* unused harmony default export */ var _unused_webpack_default_export = (takeLastWhile);

/***/ }),
/* 808 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xtakeWhile__ = __webpack_require__(809);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__slice__ = __webpack_require__(36);





/**
 * Returns a new list containing the first `n` elements of a given list,
 * passing each value to the supplied predicate function, and terminating when
 * the predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * Dispatches to the `takeWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropWhile, R.transduce, R.addIndex
 * @example
 *
 *      var isNotFour = x => x !== 4;
 *
 *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
 *
 *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'
 */
var takeWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])(['takeWhile'], __WEBPACK_IMPORTED_MODULE_2__internal_xtakeWhile__["a" /* default */], function takeWhile(fn, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && fn(xs[idx])) {
    idx += 1;
  }
  return Object(__WEBPACK_IMPORTED_MODULE_3__slice__["a" /* default */])(0, idx, xs);
}));
/* unused harmony default export */ var _unused_webpack_default_export = (takeWhile);

/***/ }),
/* 809 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__reduced__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__xfBase__ = __webpack_require__(14);




var XTakeWhile = /*#__PURE__*/function () {
  function XTakeWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTakeWhile.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].init;
  XTakeWhile.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_2__xfBase__["a" /* default */].result;
  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : Object(__WEBPACK_IMPORTED_MODULE_1__reduced__["a" /* default */])(result);
  };

  return XTakeWhile;
}();

var _xtakeWhile = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xtakeWhile(f, xf) {
  return new XTakeWhile(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xtakeWhile);

/***/ }),
/* 810 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_xtap__ = __webpack_require__(811);




/**
 * Runs the given function with the supplied object, then returns the object.
 *
 * Acts as a transducer if a transformer is given as second parameter.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> *) -> a -> a
 * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
 * @param {*} x
 * @return {*} `x`.
 * @example
 *
 *      var sayX = x => console.log('x is ' + x);
 *      R.tap(sayX, 100); //=> 100
 *      // logs 'x is 100'
 * @symb R.tap(f, a) = a
 */
var tap = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_dispatchable__["a" /* default */])([], __WEBPACK_IMPORTED_MODULE_2__internal_xtap__["a" /* default */], function tap(fn, x) {
  fn(x);
  return x;
}));
/* unused harmony default export */ var _unused_webpack_default_export = (tap);

/***/ }),
/* 811 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__xfBase__ = __webpack_require__(14);



var XTap = /*#__PURE__*/function () {
  function XTap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTap.prototype['@@transducer/init'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].init;
  XTap.prototype['@@transducer/result'] = __WEBPACK_IMPORTED_MODULE_1__xfBase__["a" /* default */].result;
  XTap.prototype['@@transducer/step'] = function (result, input) {
    this.f(input);
    return this.xf['@@transducer/step'](result, input);
  };

  return XTap;
}();

var _xtap = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__curry2__["a" /* default */])(function _xtap(f, xf) {
  return new XTap(f, xf);
});
/* harmony default export */ __webpack_exports__["a"] = (_xtap);

/***/ }),
/* 812 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_cloneRegExp__ = __webpack_require__(288);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_isRegExp__ = __webpack_require__(813);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__toString__ = __webpack_require__(88);





/**
 * Determines whether a given string matches a given regular expression.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category String
 * @sig RegExp -> String -> Boolean
 * @param {RegExp} pattern
 * @param {String} str
 * @return {Boolean}
 * @see R.match
 * @example
 *
 *      R.test(/^x/, 'xyz'); //=> true
 *      R.test(/^y/, 'xyz'); //=> false
 */
var test = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function test(pattern, str) {
  if (!Object(__WEBPACK_IMPORTED_MODULE_2__internal_isRegExp__["a" /* default */])(pattern)) {
    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + Object(__WEBPACK_IMPORTED_MODULE_3__toString__["a" /* default */])(pattern));
  }
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_cloneRegExp__["a" /* default */])(pattern).test(str);
});
/* unused harmony default export */ var _unused_webpack_default_export = (test);

/***/ }),
/* 813 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _isRegExp;
function _isRegExp(x) {
  return Object.prototype.toString.call(x) === '[object RegExp]';
}

/***/ }),
/* 814 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__invoker__ = __webpack_require__(90);


/**
 * The lower case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to lower case.
 * @return {String} The lower case version of `str`.
 * @see R.toUpper
 * @example
 *
 *      R.toLower('XYZ'); //=> 'xyz'
 */
var toLower = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__invoker__["a" /* default */])(0, 'toLowerCase');
/* unused harmony default export */ var _unused_webpack_default_export = (toLower);

/***/ }),
/* 815 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_has__ = __webpack_require__(18);



/**
 * Converts an object into an array of key, value arrays. Only the object's
 * own properties are used.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own properties.
 * @see R.fromPairs
 * @example
 *
 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
 */
var toPairs = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function toPairs(obj) {
  var pairs = [];
  for (var prop in obj) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_has__["a" /* default */])(prop, obj)) {
      pairs[pairs.length] = [prop, obj[prop]];
    }
  }
  return pairs;
});
/* unused harmony default export */ var _unused_webpack_default_export = (toPairs);

/***/ }),
/* 816 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Converts an object into an array of key, value arrays. The object's own
 * properties and prototype properties are used. Note that the order of the
 * output array is not guaranteed to be consistent across different JS
 * platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own
 *         and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
 */
var toPairsIn = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function toPairsIn(obj) {
  var pairs = [];
  for (var prop in obj) {
    pairs[pairs.length] = [prop, obj[prop]];
  }
  return pairs;
});
/* unused harmony default export */ var _unused_webpack_default_export = (toPairsIn);

/***/ }),
/* 817 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__invoker__ = __webpack_require__(90);


/**
 * The upper case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to upper case.
 * @return {String} The upper case version of `str`.
 * @see R.toLower
 * @example
 *
 *      R.toUpper('abc'); //=> 'ABC'
 */
var toUpper = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__invoker__["a" /* default */])(0, 'toUpperCase');
/* unused harmony default export */ var _unused_webpack_default_export = (toUpper);

/***/ }),
/* 818 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_reduce__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_xwrap__ = __webpack_require__(275);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__curryN__ = __webpack_require__(16);




/**
 * Initializes a transducer using supplied iterator function. Returns a single
 * item by iterating through the list, successively calling the transformed
 * iterator function and passing it an accumulator value and the current value
 * from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It will be
 * wrapped as a transformer to initialize the transducer. A transformer can be
 * passed directly in place of an iterator function. In both cases, iteration
 * may be stopped early with the [`R.reduced`](#reduced) function.
 *
 * A transducer is a function that accepts a transformer and returns a
 * transformer and can be composed directly.
 *
 * A transformer is an an object that provides a 2-arity reducing iterator
 * function, step, 0-arity initial value function, init, and 1-arity result
 * extraction function, result. The step function is used as the iterator
 * function in reduce. The result function is used to convert the final
 * accumulator into the return type and in most cases is
 * [`R.identity`](#identity). The init function can be used to provide an
 * initial accumulator, but is ignored by transduce.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array. Wrapped as transformer, if necessary, and used to
 *        initialize the transducer
 * @param {*} acc The initial accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced, R.into
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
 *
 *      var isOdd = (x) => x % 2 === 1;
 *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
 *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
 */
var transduce = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__curryN__["a" /* default */])(4, function transduce(xf, fn, acc, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_reduce__["a" /* default */])(xf(typeof fn === 'function' ? Object(__WEBPACK_IMPORTED_MODULE_1__internal_xwrap__["a" /* default */])(fn) : fn), acc, list);
});
/* unused harmony default export */ var _unused_webpack_default_export = (transduce);

/***/ }),
/* 819 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Transposes the rows and columns of a 2D list.
 * When passed a list of `n` lists of length `x`,
 * returns a list of `x` lists of length `n`.
 *
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [[a]] -> [[a]]
 * @param {Array} list A 2D list
 * @return {Array} A 2D list
 * @example
 *
 *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
 *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 *
 *      // If some of the rows are shorter than the following rows, their elements are skipped:
 *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
 * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
 * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
 * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
 */
var transpose = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function transpose(outerlist) {
  var i = 0;
  var result = [];
  while (i < outerlist.length) {
    var innerlist = outerlist[i];
    var j = 0;
    while (j < innerlist.length) {
      if (typeof result[j] === 'undefined') {
        result[j] = [];
      }
      result[j].push(innerlist[j]);
      j += 1;
    }
    i += 1;
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (transpose);

/***/ }),
/* 820 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__map__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sequence__ = __webpack_require__(327);




/**
 * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
 * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
 * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
 * into an Applicative of Traversable.
 *
 * Dispatches to the `traverse` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
 * @param {Function} of
 * @param {Function} f
 * @param {*} traversable
 * @return {*}
 * @see R.sequence
 * @example
 *
 *      // Returns `Nothing` if the given divisor is `0`
 *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)
 *
 *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])
 *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing
 */
var traverse = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function traverse(of, f, traversable) {
  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : Object(__WEBPACK_IMPORTED_MODULE_2__sequence__["a" /* default */])(of, Object(__WEBPACK_IMPORTED_MODULE_1__map__["a" /* default */])(f, traversable));
});
/* unused harmony default export */ var _unused_webpack_default_export = (traverse);

/***/ }),
/* 821 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
var zeroWidth = '\u200b';
var hasProtoTrim = typeof String.prototype.trim === 'function';
/**
 * Removes (strips) whitespace from both ends of the string.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to trim.
 * @return {String} Trimmed version of `str`.
 * @example
 *
 *      R.trim('   xyz  '); //=> 'xyz'
 *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
 */
var _trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? function trim(str) {
  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
  return str.replace(beginRx, '').replace(endRx, '');
} : function trim(str) {
  return str.trim();
};
var trim = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(_trim);
/* unused harmony default export */ var _unused_webpack_default_export = (trim);

/***/ }),
/* 822 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_arity__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_curry2__ = __webpack_require__(0);




/**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false
 */
var tryCatch = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__internal_curry2__["a" /* default */])(function _tryCatch(tryer, catcher) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__internal_arity__["a" /* default */])(tryer.length, function () {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, Object(__WEBPACK_IMPORTED_MODULE_1__internal_concat__["a" /* default */])([e], arguments));
    }
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (tryCatch);

/***/ }),
/* 823 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Takes a function `fn`, which takes a single array argument, and returns a
 * function which:
 *
 *   - takes any number of positional arguments;
 *   - passes these arguments to `fn` as an array; and
 *   - returns the result.
 *
 * In other words, `R.unapply` derives a variadic function from a function which
 * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Function
 * @sig ([*...] -> a) -> (*... -> a)
 * @param {Function} fn
 * @return {Function}
 * @see R.apply
 * @example
 *
 *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
 * @symb R.unapply(f)(a, b) = f([a, b])
 */
var unapply = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function unapply(fn) {
  return function () {
    return fn(Array.prototype.slice.call(arguments, 0));
  };
});
/* unused harmony default export */ var _unused_webpack_default_export = (unapply);

/***/ }),
/* 824 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__nAry__ = __webpack_require__(116);



/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 1 parameter. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> b) -> (a -> b)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 1.
 * @see R.binary, R.nAry
 * @example
 *
 *      var takesTwoArgs = function(a, b) {
 *        return [a, b];
 *      };
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.unary(takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only 1 argument is passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.unary(f)(a, b, c) = f(a)
 */
var unary = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function unary(fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__nAry__["a" /* default */])(1, fn);
});
/* unused harmony default export */ var _unused_webpack_default_export = (unary);

/***/ }),
/* 825 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__curryN__ = __webpack_require__(16);



/**
 * Returns a function of arity `n` from a (manually) curried function.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Function
 * @sig Number -> (a -> b) -> (a -> c)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to uncurry.
 * @return {Function} A new function.
 * @see R.curry
 * @example
 *
 *      var addFour = a => b => c => d => a + b + c + d;
 *
 *      var uncurriedAddFour = R.uncurryN(4, addFour);
 *      uncurriedAddFour(1, 2, 3, 4); //=> 10
 */
var uncurryN = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function uncurryN(depth, fn) {
  return Object(__WEBPACK_IMPORTED_MODULE_1__curryN__["a" /* default */])(depth, function () {
    var currentDepth = 1;
    var value = fn;
    var idx = 0;
    var endIdx;
    while (currentDepth <= depth && typeof value === 'function') {
      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
      currentDepth += 1;
      idx = endIdx;
    }
    return value;
  });
});
/* unused harmony default export */ var _unused_webpack_default_export = (uncurryN);

/***/ }),
/* 826 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Builds a list from a seed value. Accepts an iterator function, which returns
 * either false to stop iteration or an array of length 2 containing the value
 * to add to the resulting list and the seed to be used in the next call to the
 * iterator function.
 *
 * The iterator function receives one argument: *(seed)*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a -> [b]) -> * -> [b]
 * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
 *        either false to quit iteration or an array of length two to proceed. The element
 *        at index 0 of this array will be added to the resulting array, and the element
 *        at index 1 will be passed to the next call to `fn`.
 * @param {*} seed The seed value.
 * @return {Array} The final list.
 * @example
 *
 *      var f = n => n > 50 ? false : [-n, n + 10];
 *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
 * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
 */
var unfold = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function unfold(fn, seed) {
  var pair = fn(seed);
  var result = [];
  while (pair && pair.length) {
    result[result.length] = pair[0];
    pair = fn(pair[1]);
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (unfold);

/***/ }),
/* 827 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__compose__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__uniq__ = __webpack_require__(190);





/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @example
 *
 *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
 */
var union = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])( /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_2__compose__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_3__uniq__["a" /* default */], __WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */]));
/* unused harmony default export */ var _unused_webpack_default_export = (union);

/***/ }),
/* 828 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_concat__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry3__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__uniqWith__ = __webpack_require__(328);




/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list. Duplication is determined according to the value returned by
 * applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @see R.union
 * @example
 *
 *      var l1 = [{a: 1}, {a: 2}];
 *      var l2 = [{a: 1}, {a: 4}];
 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
 */
var unionWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry3__["a" /* default */])(function unionWith(pred, list1, list2) {
  return Object(__WEBPACK_IMPORTED_MODULE_2__uniqWith__["a" /* default */])(pred, Object(__WEBPACK_IMPORTED_MODULE_0__internal_concat__["a" /* default */])(list1, list2));
});
/* unused harmony default export */ var _unused_webpack_default_export = (unionWith);

/***/ }),
/* 829 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is not satisfied, the function will return the result of
 * calling the `whenFalseFn` function with the same argument. If the predicate
 * is satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred        A predicate function
 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
 *                               to a falsy value.
 * @param {*}        x           An object to test with the `pred` function and
 *                               pass to `whenFalseFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
 * @see R.ifElse, R.when
 * @example
 *
 *      let safeInc = R.unless(R.isNil, R.inc);
 *      safeInc(null); //=> null
 *      safeInc(1); //=> 2
 */
var unless = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function unless(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});
/* unused harmony default export */ var _unused_webpack_default_export = (unless);

/***/ }),
/* 830 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_identity__ = __webpack_require__(189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__chain__ = __webpack_require__(178);



/**
 * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
 * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain c => c (c a) -> c a
 * @param {*} list
 * @return {*}
 * @see R.flatten, R.chain
 * @example
 *
 *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
 *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
 */
var unnest = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__chain__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__internal_identity__["a" /* default */]);
/* unused harmony default export */ var _unused_webpack_default_export = (unnest);

/***/ }),
/* 831 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Takes a predicate, a transformation function, and an initial value,
 * and returns a value of the same type as the initial value.
 * It does so by applying the transformation until the predicate is satisfied,
 * at which point it returns the satisfactory value.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred A predicate function
 * @param {Function} fn The iterator function
 * @param {*} init Initial value
 * @return {*} Final value that satisfies predicate
 * @example
 *
 *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
 */
var until = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function until(pred, fn, init) {
  var val = init;
  while (!pred(val)) {
    val = fn(val);
  }
  return val;
});
/* unused harmony default export */ var _unused_webpack_default_export = (until);

/***/ }),
/* 832 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry1__ = __webpack_require__(2);


/**
 * Returns a list of all the properties, including prototype properties, of the
 * supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own and prototype properties.
 * @see R.values, R.keysIn
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.valuesIn(f); //=> ['X', 'Y']
 */
var valuesIn = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry1__["a" /* default */])(function valuesIn(obj) {
  var prop;
  var vs = [];
  for (prop in obj) {
    vs[vs.length] = obj[prop];
  }
  return vs;
});
/* unused harmony default export */ var _unused_webpack_default_export = (valuesIn);

/***/ }),
/* 833 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


// `Const` is a functor that effectively ignores the function given to `map`.
var Const = function (x) {
  return { value: x, 'fantasy-land/map': function () {
      return this;
    } };
};

/**
 * Returns a "view" of the given data structure, determined by the given lens.
 * The lens's focus determines which portion of the data structure is visible.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> s -> a
 * @param {Lens} lens
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});  //=> 1
 *      R.view(xLens, {x: 4, y: 2});  //=> 4
 */
var view = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function view(lens, x) {
  // Using `Const` effectively ignores the setter function of the `lens`,
  // leaving the value returned by the getter function unmodified.
  return lens(Const)(x).value;
});
/* unused harmony default export */ var _unused_webpack_default_export = (view);

/***/ }),
/* 834 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is satisfied, the function will return the result of calling
 * the `whenTrueFn` function with the same argument. If the predicate is not
 * satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred       A predicate function
 * @param {Function} whenTrueFn A function to invoke when the `condition`
 *                              evaluates to a truthy value.
 * @param {*}        x          An object to test with the `pred` function and
 *                              pass to `whenTrueFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
 * @see R.ifElse, R.unless
 * @example
 *
 *      // truncate :: String -> String
 *      var truncate = R.when(
 *        R.propSatisfies(R.gt(R.__, 10), 'length'),
 *        R.pipe(R.take(10), R.append('…'), R.join(''))
 *      );
 *      truncate('12345');         //=> '12345'
 *      truncate('0123456789ABC'); //=> '0123456789…'
 */
var when = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function when(pred, whenTrueFn, x) {
  return pred(x) ? whenTrueFn(x) : x;
});
/* unused harmony default export */ var _unused_webpack_default_export = (when);

/***/ }),
/* 835 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__equals__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__map__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__where__ = __webpack_require__(329);





/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec, false otherwise. An object satisfies the spec if, for each of the
 * spec's own properties, accessing that property of the object gives the same
 * value (in [`R.equals`](#equals) terms) as accessing that property of the
 * spec.
 *
 * `whereEq` is a specialization of [`where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @sig {String: *} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propEq, R.where
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.whereEq({a: 1, b: 2});
 *
 *      pred({a: 1});              //=> false
 *      pred({a: 1, b: 2});        //=> true
 *      pred({a: 1, b: 2, c: 3});  //=> true
 *      pred({a: 1, b: 1});        //=> false
 */
var whereEq = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function whereEq(spec, testObj) {
  return Object(__WEBPACK_IMPORTED_MODULE_3__where__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__map__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1__equals__["a" /* default */], spec), testObj);
});
/* unused harmony default export */ var _unused_webpack_default_export = (whereEq);

/***/ }),
/* 836 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_contains__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_curry2__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__flip__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__reject__ = __webpack_require__(121);





/**
 * Returns a new list without values in the first argument.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @param {Array} list1 The values to be removed from `list2`.
 * @param {Array} list2 The array to remove values from.
 * @return {Array} The new array without values in `list1`.
 * @see R.transduce, R.difference
 * @example
 *
 *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
 */
var without = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_1__internal_curry2__["a" /* default */])(function (xs, list) {
  return Object(__WEBPACK_IMPORTED_MODULE_3__reject__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_2__flip__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__internal_contains__["a" /* default */])(xs), list);
});
/* unused harmony default export */ var _unused_webpack_default_export = (without);

/***/ }),
/* 837 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Creates a new list out of the two supplied by creating each possible pair
 * from the lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The list made by combining each possible pair from
 *         `as` and `bs` into pairs (`[a, b]`).
 * @example
 *
 *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
 * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
 */
var xprod = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function xprod(a, b) {
  // = xprodWith(prepend); (takes about 3 times as long...)
  var idx = 0;
  var ilen = a.length;
  var j;
  var jlen = b.length;
  var result = [];
  while (idx < ilen) {
    j = 0;
    while (j < jlen) {
      result[result.length] = [a[idx], b[j]];
      j += 1;
    }
    idx += 1;
  }
  return result;
});
/* unused harmony default export */ var _unused_webpack_default_export = (xprod);

/***/ }),
/* 838 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Creates a new list out of the two supplied by pairing up equally-positioned
 * items from both lists. The returned list is truncated to the length of the
 * shorter of the two input lists.
 * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
 * @example
 *
 *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
 */
var zip = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function zip(a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = [a[idx], b[idx]];
    idx += 1;
  }
  return rv;
});
/* unused harmony default export */ var _unused_webpack_default_export = (zip);

/***/ }),
/* 839 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry2__ = __webpack_require__(0);


/**
 * Creates a new object out of a list of keys and a list of values.
 * Key/value pairing is truncated to the length of the shorter of the two lists.
 * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [String] -> [*] -> {String: *}
 * @param {Array} keys The array that will be properties on the output object.
 * @param {Array} values The list of values on the output object.
 * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
 * @example
 *
 *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
 */
var zipObj = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry2__["a" /* default */])(function zipObj(keys, values) {
  var idx = 0;
  var len = Math.min(keys.length, values.length);
  var out = {};
  while (idx < len) {
    out[keys[idx]] = values[idx];
    idx += 1;
  }
  return out;
});
/* unused harmony default export */ var _unused_webpack_default_export = (zipObj);

/***/ }),
/* 840 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_curry3__ = __webpack_require__(3);


/**
 * Creates a new list out of the two supplied by applying the function to each
 * equally-positioned pair in the lists. The returned list is truncated to the
 * length of the shorter of the two input lists.
 *
 * @function
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> c) -> [a] -> [b] -> [c]
 * @param {Function} fn The function used to combine the two elements into one value.
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
 *         using `fn`.
 * @example
 *
 *      var f = (x, y) => {
 *        // ...
 *      };
 *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
 *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
 * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
 */
var zipWith = /*#__PURE__*/Object(__WEBPACK_IMPORTED_MODULE_0__internal_curry3__["a" /* default */])(function zipWith(fn, a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = fn(a[idx], b[idx]);
    idx += 1;
  }
  return rv;
});
/* unused harmony default export */ var _unused_webpack_default_export = (zipWith);

/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);
var bind = __webpack_require__(330);
var Axios = __webpack_require__(843);
var defaults = __webpack_require__(195);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(335);
axios.CancelToken = __webpack_require__(857);
axios.isCancel = __webpack_require__(334);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(858);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),
/* 842 */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),
/* 843 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(195);
var utils = __webpack_require__(30);
var InterceptorManager = __webpack_require__(852);
var dispatchRequest = __webpack_require__(853);

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),
/* 844 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),
/* 845 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(333);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),
/* 847 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),
/* 848 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),
/* 849 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),
/* 850 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),
/* 851 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),
/* 852 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);
var transformData = __webpack_require__(854);
var isCancel = __webpack_require__(334);
var defaults = __webpack_require__(195);
var isAbsoluteURL = __webpack_require__(855);
var combineURLs = __webpack_require__(856);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),
/* 854 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(30);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),
/* 855 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),
/* 857 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(335);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),
/* 858 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),
/* 859 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_selection_index__ = __webpack_require__(860);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_transition_index__ = __webpack_require__(55);
/* unused harmony reexport transition */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_active__ = __webpack_require__(906);
/* unused harmony reexport active */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_interrupt__ = __webpack_require__(337);
/* unused harmony reexport interrupt */






/***/ }),
/* 860 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__interrupt__ = __webpack_require__(861);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transition__ = __webpack_require__(866);




__WEBPACK_IMPORTED_MODULE_0_d3_selection__["e" /* selection */].prototype.interrupt = __WEBPACK_IMPORTED_MODULE_1__interrupt__["a" /* default */];
__WEBPACK_IMPORTED_MODULE_0_d3_selection__["e" /* selection */].prototype.transition = __WEBPACK_IMPORTED_MODULE_2__transition__["a" /* default */];


/***/ }),
/* 861 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interrupt__ = __webpack_require__(337);


/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  return this.each(function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__interrupt__["a" /* default */])(this, name);
  });
});


/***/ }),
/* 862 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_dispatch__ = __webpack_require__(863);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_dispatch__["a"]; });



/***/ }),
/* 863 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var noop = {value: function() {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

/* harmony default export */ __webpack_exports__["a"] = (dispatch);


/***/ }),
/* 864 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(197);


/* harmony default export */ __webpack_exports__["a"] = (function(callback, delay, time) {
  var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */];
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
});


/***/ }),
/* 865 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(197);


/* unused harmony default export */ var _unused_webpack_default_export = (function(callback, delay, time) {
  var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */], total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? Object(__WEBPACK_IMPORTED_MODULE_0__timer__["b" /* now */])() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
});


/***/ }),
/* 866 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_index__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transition_schedule__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3_ease__ = __webpack_require__(895);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_d3_timer__ = __webpack_require__(338);





var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: __WEBPACK_IMPORTED_MODULE_2_d3_ease__["a" /* easeCubicInOut */]
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = Object(__WEBPACK_IMPORTED_MODULE_3_d3_timer__["a" /* now */])(), defaultTiming;
    }
  }
  return timing;
}

/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  var id,
      timing;

  if (name instanceof __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */]) {
    id = name._id, name = name._name;
  } else {
    id = Object(__WEBPACK_IMPORTED_MODULE_0__transition_index__["b" /* newId */])(), (timing = defaultTiming).time = Object(__WEBPACK_IMPORTED_MODULE_3_d3_timer__["a" /* now */])(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        Object(__WEBPACK_IMPORTED_MODULE_1__transition_schedule__["e" /* default */])(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */](groups, this._parents, name, id);
});


/***/ }),
/* 867 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tween__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interpolate__ = __webpack_require__(347);





function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = this.getAttribute(name);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate(value00 = value0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate(value00 = value0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0, value1 = value(this);
    if (value1 == null) return void this.removeAttribute(name);
    value0 = this.getAttribute(name);
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0, value1 = value(this);
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  var fullname = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* namespace */])(name), i = fullname === "transform" ? __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__["e" /* interpolateTransformSvg */] : __WEBPACK_IMPORTED_MODULE_3__interpolate__["a" /* default */];
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, Object(__WEBPACK_IMPORTED_MODULE_2__tween__["b" /* tweenValue */])(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + ""));
});


/***/ }),
/* 868 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = lab;
/* unused harmony export Lab */
/* harmony export (immutable) */ __webpack_exports__["b"] = hcl;
/* unused harmony export Hcl */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(339);




var Kn = 18,
    Xn = 0.950470, // D65 standard referent
    Yn = 1,
    Zn = 1.088830,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) {
    var h = o.h * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */];
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
  var b = rgb2xyz(o.r),
      a = rgb2xyz(o.g),
      l = rgb2xyz(o.b),
      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Lab, lab, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
  brighter: function(k) {
    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    y = Yn * lab2xyz(y);
    x = Xn * lab2xyz(x);
    z = Zn * lab2xyz(z);
    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](
      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function xyz2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2xyz(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  var h = Math.atan2(o.b, o.a) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */];
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hcl, hcl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return labConvert(this).rgb();
  }
}));


/***/ }),
/* 869 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = cubehelix;
/* unused harmony export Cubehelix */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(339);




var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */] - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Cubehelix, cubehelix, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
  brighter: function(k) {
    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */], k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */], k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */],
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));


/***/ }),
/* 870 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(a, b) {
  return a = +a, b -= a, function(t) {
    return Math.round(a + b * t);
  };
});


/***/ }),
/* 871 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return interpolateTransformCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return interpolateTransformSvg; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parse__ = __webpack_require__(872);



function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb)}, {i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb)}, {i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["a" /* parseCss */], "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["b" /* parseSvg */], ", ", ")", ")");


/***/ }),
/* 872 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseCss;
/* harmony export (immutable) */ __webpack_exports__["b"] = parseSvg;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__decompose__ = __webpack_require__(873);


var cssNode,
    cssRoot,
    cssView,
    svgNode;

function parseCss(value) {
  if (value === "none") return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
  value = value.matrix;
  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(value.a, value.b, value.c, value.d, value.e, value.f);
}


/***/ }),
/* 873 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return identity; });
var degrees = 180 / Math.PI;

var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

/* harmony default export */ __webpack_exports__["a"] = (function(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
});


/***/ }),
/* 874 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
/* unused harmony default export */ var _unused_webpack_default_export = (function(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    }
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    }
  }

  i.duration = S * 1000;

  return i;
});


/***/ }),
/* 875 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export hslLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(91);



function hsl(hue) {
  return function(start, end) {
    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(end)).h),
        s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

/* unused harmony default export */ var _unused_webpack_default_export = (hsl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
var hslLong = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);


/***/ }),
/* 876 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(91);



function lab(start, end) {
  var l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(start)).l, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(end)).l),
      a = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.a, end.a),
      b = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.b, end.b),
      opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}


/***/ }),
/* 877 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export hclLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(91);



function hcl(hue) {
  return function(start, end) {
    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(end)).h),
        c = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.c, end.c),
        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

/* unused harmony default export */ var _unused_webpack_default_export = (hcl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
var hclLong = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);


/***/ }),
/* 878 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export cubehelixLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(91);



function cubehelix(hue) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(end)).h),
          s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
          l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
          opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;

    return cubehelix;
  })(1);
}

/* unused harmony default export */ var _unused_webpack_default_export = (cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
var cubehelixLong = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);


/***/ }),
/* 879 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
});


/***/ }),
/* 880 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(27);


function attrTweenNS(fullname, value) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.setAttributeNS(fullname.space, fullname.local, i(t));
    };
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.setAttribute(name, i(t));
    };
  }
  tween._value = value;
  return tween;
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["b" /* namespace */])(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
});


/***/ }),
/* 881 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(37);


function delayFunction(id, value) {
  return function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */])(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */])(this, id).delay = value;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).delay;
});


/***/ }),
/* 882 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(37);


function durationFunction(id, value) {
  return function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).duration = value;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).duration;
});


/***/ }),
/* 883 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(37);


function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).ease = value;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).ease;
});


/***/ }),
/* 884 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(55);



/* harmony default export */ __webpack_exports__["a"] = (function(match) {
  if (typeof match !== "function") match = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["a" /* matcher */])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, this._parents, this._name, this._id);
});


/***/ }),
/* 885 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(55);


/* harmony default export */ __webpack_exports__["a"] = (function(transition) {
  if (transition._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Transition */](merges, this._parents, this._name, this._id);
});


/***/ }),
/* 886 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(37);


function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start(name) ? __WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */] : __WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */];
  return function() {
    var schedule = sit(this, id),
        on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule.on = on1;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
});


/***/ }),
/* 887 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return this.on("end.remove", removeFunction(this._id));
});


/***/ }),
/* 888 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__schedule__ = __webpack_require__(37);




/* harmony default export */ __webpack_exports__["a"] = (function(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["f" /* selector */])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["e" /* default */])(subgroup[i], name, id, i, subgroup, Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["f" /* get */])(node, id));
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, this._parents, name, id);
});


/***/ }),
/* 889 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__schedule__ = __webpack_require__(37);




/* harmony default export */ __webpack_exports__["a"] = (function(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["g" /* selectorAll */])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["f" /* get */])(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["e" /* default */])(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, parents, name, id);
});


/***/ }),
/* 890 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(27);


var Selection = __WEBPACK_IMPORTED_MODULE_0_d3_selection__["e" /* selection */].prototype.constructor;

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return new Selection(this._groups, this._parents);
});


/***/ }),
/* 891 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tween__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interpolate__ = __webpack_require__(347);





function styleRemove(name, interpolate) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["h" /* style */])(this, name),
        value1 = (this.style.removeProperty(name), Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["h" /* style */])(this, name));
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

function styleRemoveEnd(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var value00,
      interpolate0;
  return function() {
    var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["h" /* style */])(this, name);
    return value0 === value1 ? null
        : value0 === value00 ? interpolate0
        : interpolate0 = interpolate(value00 = value0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var value00,
      value10,
      interpolate0;
  return function() {
    var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["h" /* style */])(this, name),
        value1 = value(this);
    if (value1 == null) value1 = (this.style.removeProperty(name), Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["h" /* style */])(this, name));
    return value0 === value1 ? null
        : value0 === value00 && value1 === value10 ? interpolate0
        : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value, priority) {
  var i = (name += "") === "transform" ? __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__["d" /* interpolateTransformCss */] : __WEBPACK_IMPORTED_MODULE_3__interpolate__["a" /* default */];
  return value == null ? this
          .styleTween(name, styleRemove(name, i))
          .on("end.style." + name, styleRemoveEnd(name))
      : this.styleTween(name, typeof value === "function"
          ? styleFunction(name, i, Object(__WEBPACK_IMPORTED_MODULE_2__tween__["b" /* tweenValue */])(this, "style." + name, value))
          : styleConstant(name, i, value + ""), priority);
});


/***/ }),
/* 892 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function styleTween(name, value, priority) {
  function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function(t) {
      node.style.setProperty(name, i(t), priority);
    };
  }
  tween._value = value;
  return tween;
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
});


/***/ }),
/* 893 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tween__ = __webpack_require__(127);


function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction(Object(__WEBPACK_IMPORTED_MODULE_0__tween__["b" /* tweenValue */])(this, "text", value))
      : textConstant(value == null ? "" : value + ""));
});


/***/ }),
/* 894 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__schedule__ = __webpack_require__(37);



/* harmony default export */ __webpack_exports__["a"] = (function() {
  var name = this._name,
      id0 = this._id,
      id1 = Object(__WEBPACK_IMPORTED_MODULE_0__index__["b" /* newId */])();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = Object(__WEBPACK_IMPORTED_MODULE_1__schedule__["f" /* get */])(node, id0);
        Object(__WEBPACK_IMPORTED_MODULE_1__schedule__["e" /* default */])(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Transition */](groups, this._parents, name, id1);
});


/***/ }),
/* 895 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_linear__ = __webpack_require__(896);
/* unused harmony reexport easeLinear */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_quad__ = __webpack_require__(897);
/* unused harmony reexport easeQuad */
/* unused harmony reexport easeQuadIn */
/* unused harmony reexport easeQuadOut */
/* unused harmony reexport easeQuadInOut */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_cubic__ = __webpack_require__(898);
/* unused harmony reexport easeCubic */
/* unused harmony reexport easeCubicIn */
/* unused harmony reexport easeCubicOut */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_poly__ = __webpack_require__(899);
/* unused harmony reexport easePoly */
/* unused harmony reexport easePolyIn */
/* unused harmony reexport easePolyOut */
/* unused harmony reexport easePolyInOut */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_sin__ = __webpack_require__(900);
/* unused harmony reexport easeSin */
/* unused harmony reexport easeSinIn */
/* unused harmony reexport easeSinOut */
/* unused harmony reexport easeSinInOut */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_exp__ = __webpack_require__(901);
/* unused harmony reexport easeExp */
/* unused harmony reexport easeExpIn */
/* unused harmony reexport easeExpOut */
/* unused harmony reexport easeExpInOut */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_circle__ = __webpack_require__(902);
/* unused harmony reexport easeCircle */
/* unused harmony reexport easeCircleIn */
/* unused harmony reexport easeCircleOut */
/* unused harmony reexport easeCircleInOut */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_bounce__ = __webpack_require__(903);
/* unused harmony reexport easeBounce */
/* unused harmony reexport easeBounceIn */
/* unused harmony reexport easeBounceOut */
/* unused harmony reexport easeBounceInOut */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_back__ = __webpack_require__(904);
/* unused harmony reexport easeBack */
/* unused harmony reexport easeBackIn */
/* unused harmony reexport easeBackOut */
/* unused harmony reexport easeBackInOut */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_elastic__ = __webpack_require__(905);
/* unused harmony reexport easeElastic */
/* unused harmony reexport easeElasticIn */
/* unused harmony reexport easeElasticOut */
/* unused harmony reexport easeElasticInOut */





















/***/ }),
/* 896 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export linear */
function linear(t) {
  return +t;
}


/***/ }),
/* 897 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export quadIn */
/* unused harmony export quadOut */
/* unused harmony export quadInOut */
function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}


/***/ }),
/* 898 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export cubicIn */
/* unused harmony export cubicOut */
/* harmony export (immutable) */ __webpack_exports__["a"] = cubicInOut;
function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}


/***/ }),
/* 899 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export polyIn */
/* unused harmony export polyOut */
/* unused harmony export polyInOut */
var exponent = 3;

var polyIn = (function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;

  return polyIn;
})(exponent);

var polyOut = (function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;

  return polyOut;
})(exponent);

var polyInOut = (function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;

  return polyInOut;
})(exponent);


/***/ }),
/* 900 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export sinIn */
/* unused harmony export sinOut */
/* unused harmony export sinInOut */
var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}


/***/ }),
/* 901 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export expIn */
/* unused harmony export expOut */
/* unused harmony export expInOut */
function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}


/***/ }),
/* 902 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export circleIn */
/* unused harmony export circleOut */
/* unused harmony export circleInOut */
function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}


/***/ }),
/* 903 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export bounceIn */
/* unused harmony export bounceOut */
/* unused harmony export bounceInOut */
var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}


/***/ }),
/* 904 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export backIn */
/* unused harmony export backOut */
/* unused harmony export backInOut */
var overshoot = 1.70158;

var backIn = (function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;

  return backIn;
})(overshoot);

var backOut = (function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;

  return backOut;
})(overshoot);

var backInOut = (function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;

  return backInOut;
})(overshoot);


/***/ }),
/* 905 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export elasticIn */
/* unused harmony export elasticOut */
/* unused harmony export elasticInOut */
var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
  elasticIn.period = function(p) { return custom(a, p); };

  return elasticIn;
})(amplitude, period);

var elasticOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticOut.period = function(p) { return custom(a, p); };

  return elasticOut;
})(amplitude, period);

var elasticInOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticInOut.period = function(p) { return custom(a, p); };

  return elasticInOut;
})(amplitude, period);


/***/ }),
/* 906 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_index__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transition_schedule__ = __webpack_require__(37);



var root = [null];

/* unused harmony default export */ var _unused_webpack_default_export = (function(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).state > __WEBPACK_IMPORTED_MODULE_1__transition_schedule__["c" /* SCHEDULED */] && schedule.name === name) {
        return new __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */]([[node]], root, name, +i);
      }
    }
  }

  return null;
});


/***/ }),
/* 907 */
/***/ (function(module, exports) {

module.exports = {"type":"Topology","objects":{"ne_110m_admin_0_countries":{"type":"GeometryCollection","geometries":[{"type":"Polygon","arcs":[[0,1,2,3,4,5]],"bbox":[60.52843,29.318572,75.158028,38.486282],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Afghanistan","SOV_A3":"AFG","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Afghanistan","ADM0_A3":"AFG","GEOU_DIF":0,"GEOUNIT":"Afghanistan","GU_A3":"AFG","SU_DIF":0,"SUBUNIT":"Afghanistan","SU_A3":"AFG","BRK_DIFF":0,"NAME":"Afghanistan","NAME_LONG":"Afghanistan","BRK_A3":"AFG","BRK_NAME":"Afghanistan","BRK_GROUP":null,"ABBREV":"Afg.","POSTAL":"AF","FORMAL_EN":"Islamic State of Afghanistan","FORMAL_FR":null,"NAME_CIAWF":"Afghanistan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Afghanistan","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":6,"MAPCOLOR9":8,"MAPCOLOR13":7,"POP_EST":34124811,"POP_RANK":15,"GDP_MD_EST":64080,"POP_YEAR":2017,"LASTCENSUS":1979,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"AF","ISO_A2":"AF","ISO_A3":"AFG","ISO_A3_EH":"AFG","ISO_N3":"004","UN_A3":"004","WB_A2":"AF","WB_A3":"AFG","WOE_ID":23424739,"WOE_ID_EH":23424739,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"AFG","ADM0_A3_US":"AFG","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"South Asia","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"MultiPolygon","arcs":[[[6,7,8,9]],[[10,11,12]]],"bbox":[11.640096,-17.930636,24.079905,-4.438023],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Angola","SOV_A3":"AGO","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Angola","ADM0_A3":"AGO","GEOU_DIF":0,"GEOUNIT":"Angola","GU_A3":"AGO","SU_DIF":0,"SUBUNIT":"Angola","SU_A3":"AGO","BRK_DIFF":0,"NAME":"Angola","NAME_LONG":"Angola","BRK_A3":"AGO","BRK_NAME":"Angola","BRK_GROUP":null,"ABBREV":"Ang.","POSTAL":"AO","FORMAL_EN":"People's Republic of Angola","FORMAL_FR":null,"NAME_CIAWF":"Angola","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Angola","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":6,"MAPCOLOR13":1,"POP_EST":29310273,"POP_RANK":15,"GDP_MD_EST":189000,"POP_YEAR":2017,"LASTCENSUS":1970,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"AO","ISO_A2":"AO","ISO_A3":"AGO","ISO_A3_EH":"AGO","ISO_N3":"024","UN_A3":"024","WB_A2":"AO","WB_A3":"AGO","WOE_ID":23424745,"WOE_ID_EH":23424745,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"AGO","ADM0_A3_US":"AGO","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[13,14,15,16,17]],"bbox":[19.304486,39.624998,21.02004,42.688247],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Albania","SOV_A3":"ALB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Albania","ADM0_A3":"ALB","GEOU_DIF":0,"GEOUNIT":"Albania","GU_A3":"ALB","SU_DIF":0,"SUBUNIT":"Albania","SU_A3":"ALB","BRK_DIFF":0,"NAME":"Albania","NAME_LONG":"Albania","BRK_A3":"ALB","BRK_NAME":"Albania","BRK_GROUP":null,"ABBREV":"Alb.","POSTAL":"AL","FORMAL_EN":"Republic of Albania","FORMAL_FR":null,"NAME_CIAWF":"Albania","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Albania","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":6,"POP_EST":3047987,"POP_RANK":12,"GDP_MD_EST":33900,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"AL","ISO_A2":"AL","ISO_A3":"ALB","ISO_A3_EH":"ALB","ISO_N3":"008","UN_A3":"008","WB_A2":"AL","WB_A3":"ALB","WOE_ID":23424742,"WOE_ID_EH":23424742,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ALB","ADM0_A3_US":"ALB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[18,19,20,21,22]],"bbox":[51.579519,22.496948,56.396847,26.055464],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"United Arab Emirates","SOV_A3":"ARE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"United Arab Emirates","ADM0_A3":"ARE","GEOU_DIF":0,"GEOUNIT":"United Arab Emirates","GU_A3":"ARE","SU_DIF":0,"SUBUNIT":"United Arab Emirates","SU_A3":"ARE","BRK_DIFF":0,"NAME":"United Arab Emirates","NAME_LONG":"United Arab Emirates","BRK_A3":"ARE","BRK_NAME":"United Arab Emirates","BRK_GROUP":null,"ABBREV":"U.A.E.","POSTAL":"AE","FORMAL_EN":"United Arab Emirates","FORMAL_FR":null,"NAME_CIAWF":"United Arab Emirates","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"United Arab Emirates","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":3,"POP_EST":6072475,"POP_RANK":13,"GDP_MD_EST":667200,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"AE","ISO_A2":"AE","ISO_A3":"ARE","ISO_A3_EH":"ARE","ISO_N3":"784","UN_A3":"784","WB_A2":"AE","WB_A3":"ARE","WOE_ID":23424738,"WOE_ID_EH":23424738,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ARE","ADM0_A3_US":"ARE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":20,"LONG_LEN":20,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[23,24]],[[25,26,27,28,29,30]]],"bbox":[-73.415436,-55.25,-53.628349,-21.83231],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Argentina","SOV_A3":"ARG","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Argentina","ADM0_A3":"ARG","GEOU_DIF":0,"GEOUNIT":"Argentina","GU_A3":"ARG","SU_DIF":0,"SUBUNIT":"Argentina","SU_A3":"ARG","BRK_DIFF":0,"NAME":"Argentina","NAME_LONG":"Argentina","BRK_A3":"ARG","BRK_NAME":"Argentina","BRK_GROUP":null,"ABBREV":"Arg.","POSTAL":"AR","FORMAL_EN":"Argentine Republic","FORMAL_FR":null,"NAME_CIAWF":"Argentina","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Argentina","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":13,"POP_EST":44293293,"POP_RANK":15,"GDP_MD_EST":879400,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"AR","ISO_A2":"AR","ISO_A3":"ARG","ISO_A3_EH":"ARG","ISO_N3":"032","UN_A3":"032","WB_A2":"AR","WB_A3":"ARG","WOE_ID":23424747,"WOE_ID_EH":23424747,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ARG","ADM0_A3_US":"ARG","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[31,32,33,34,35]],"bbox":[43.582746,38.741201,46.50572,41.248129],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Armenia","SOV_A3":"ARM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Armenia","ADM0_A3":"ARM","GEOU_DIF":0,"GEOUNIT":"Armenia","GU_A3":"ARM","SU_DIF":0,"SUBUNIT":"Armenia","SU_A3":"ARM","BRK_DIFF":0,"NAME":"Armenia","NAME_LONG":"Armenia","BRK_A3":"ARM","BRK_NAME":"Armenia","BRK_GROUP":null,"ABBREV":"Arm.","POSTAL":"ARM","FORMAL_EN":"Republic of Armenia","FORMAL_FR":null,"NAME_CIAWF":"Armenia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Armenia","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":1,"MAPCOLOR9":2,"MAPCOLOR13":10,"POP_EST":3045191,"POP_RANK":12,"GDP_MD_EST":26300,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"AM","ISO_A2":"AM","ISO_A3":"ARM","ISO_A3_EH":"ARM","ISO_N3":"051","UN_A3":"051","WB_A2":"AM","WB_A3":"ARM","WOE_ID":23424743,"WOE_ID_EH":23424743,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ARM","ADM0_A3_US":"ARM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[44]],"bbox":[68.72,-49.775,70.56,-48.625],"properties":{"scalerank":3,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"France","SOV_A3":"FR1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Dependency","ADMIN":"French Southern and Antarctic Lands","ADM0_A3":"ATF","GEOU_DIF":0,"GEOUNIT":"French Southern and Antarctic Lands","GU_A3":"ATF","SU_DIF":0,"SUBUNIT":"French Southern and Antarctic Lands","SU_A3":"ATF","BRK_DIFF":0,"NAME":"Fr. S. Antarctic Lands","NAME_LONG":"French Southern and Antarctic Lands","BRK_A3":"ATF","BRK_NAME":"Fr. S. and Antarctic Lands","BRK_GROUP":null,"ABBREV":"Fr. S.A.L.","POSTAL":"TF","FORMAL_EN":"Territory of the French Southern and Antarctic Lands","FORMAL_FR":null,"NAME_CIAWF":null,"NOTE_ADM0":"Fr.","NOTE_BRK":null,"NAME_SORT":"French Southern and Antarctic Lands","NAME_ALT":null,"MAPCOLOR7":7,"MAPCOLOR8":5,"MAPCOLOR9":9,"MAPCOLOR13":11,"POP_EST":140,"POP_RANK":1,"GDP_MD_EST":16,"POP_YEAR":2017,"LASTCENSUS":-99,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"FS","ISO_A2":"TF","ISO_A3":"ATF","ISO_A3_EH":"ATF","ISO_N3":"260","UN_A3":"-099","WB_A2":"-99","WB_A3":"-99","WOE_ID":28289406,"WOE_ID_EH":28289406,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ATF","ADM0_A3_US":"ATF","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Seven seas (open ocean)","REGION_UN":"Seven seas (open ocean)","SUBREGION":"Seven seas (open ocean)","REGION_WB":"Sub-Saharan Africa","NAME_LEN":22,"LONG_LEN":35,"ABBREV_LEN":10,"TINY":2,"HOMEPART":-99,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[45]],[[46]]],"bbox":[113.338953,-43.634597,153.569469,-10.668186],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Australia","SOV_A3":"AU1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"Australia","ADM0_A3":"AUS","GEOU_DIF":0,"GEOUNIT":"Australia","GU_A3":"AUS","SU_DIF":0,"SUBUNIT":"Australia","SU_A3":"AUS","BRK_DIFF":0,"NAME":"Australia","NAME_LONG":"Australia","BRK_A3":"AUS","BRK_NAME":"Australia","BRK_GROUP":null,"ABBREV":"Auz.","POSTAL":"AU","FORMAL_EN":"Commonwealth of Australia","FORMAL_FR":null,"NAME_CIAWF":"Australia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Australia","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":7,"POP_EST":23232413,"POP_RANK":15,"GDP_MD_EST":1189000,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"AS","ISO_A2":"AU","ISO_A3":"AUS","ISO_A3_EH":"AUS","ISO_N3":"036","UN_A3":"036","WB_A2":"AU","WB_A3":"AUS","WOE_ID":-90,"WOE_ID_EH":23424748,"WOE_NOTE":"Includes Ashmore and Cartier Islands (23424749) and Coral Sea Islands (23424790).","ADM0_A3_IS":"AUS","ADM0_A3_US":"AUS","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Oceania","REGION_UN":"Oceania","SUBREGION":"Australia and New Zealand","REGION_WB":"East Asia & Pacific","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":5.7}},{"type":"Polygon","arcs":[[47,48,49,50,51,52,53]],"bbox":[9.47997,46.431817,16.979667,49.039074],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Austria","SOV_A3":"AUT","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Austria","ADM0_A3":"AUT","GEOU_DIF":0,"GEOUNIT":"Austria","GU_A3":"AUT","SU_DIF":0,"SUBUNIT":"Austria","SU_A3":"AUT","BRK_DIFF":0,"NAME":"Austria","NAME_LONG":"Austria","BRK_A3":"AUT","BRK_NAME":"Austria","BRK_GROUP":null,"ABBREV":"Aust.","POSTAL":"A","FORMAL_EN":"Republic of Austria","FORMAL_FR":null,"NAME_CIAWF":"Austria","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Austria","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":4,"POP_EST":8754413,"POP_RANK":13,"GDP_MD_EST":416600,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"AU","ISO_A2":"AT","ISO_A3":"AUT","ISO_A3_EH":"AUT","ISO_N3":"040","UN_A3":"040","WB_A2":"AT","WB_A3":"AUT","WOE_ID":23424750,"WOE_ID_EH":23424750,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"AUT","ADM0_A3_US":"AUT","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Western Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[-33,54,55,56,57]],[[-35,58]]],"bbox":[44.79399,38.270378,50.392821,41.860675],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Azerbaijan","SOV_A3":"AZE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Azerbaijan","ADM0_A3":"AZE","GEOU_DIF":0,"GEOUNIT":"Azerbaijan","GU_A3":"AZE","SU_DIF":0,"SUBUNIT":"Azerbaijan","SU_A3":"AZE","BRK_DIFF":0,"NAME":"Azerbaijan","NAME_LONG":"Azerbaijan","BRK_A3":"AZE","BRK_NAME":"Azerbaijan","BRK_GROUP":null,"ABBREV":"Aze.","POSTAL":"AZ","FORMAL_EN":"Republic of Azerbaijan","FORMAL_FR":null,"NAME_CIAWF":"Azerbaijan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Azerbaijan","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":6,"MAPCOLOR9":5,"MAPCOLOR13":8,"POP_EST":9961396,"POP_RANK":13,"GDP_MD_EST":167900,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"AJ","ISO_A2":"AZ","ISO_A3":"AZE","ISO_A3_EH":"AZE","ISO_N3":"031","UN_A3":"031","WB_A2":"AZ","WB_A3":"AZE","WOE_ID":23424741,"WOE_ID_EH":23424741,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"AZE","ADM0_A3_US":"AZE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[59,60,61]],"bbox":[29.024926,-4.499983,30.75224,-2.348487],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Burundi","SOV_A3":"BDI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Burundi","ADM0_A3":"BDI","GEOU_DIF":0,"GEOUNIT":"Burundi","GU_A3":"BDI","SU_DIF":0,"SUBUNIT":"Burundi","SU_A3":"BDI","BRK_DIFF":0,"NAME":"Burundi","NAME_LONG":"Burundi","BRK_A3":"BDI","BRK_NAME":"Burundi","BRK_GROUP":null,"ABBREV":"Bur.","POSTAL":"BI","FORMAL_EN":"Republic of Burundi","FORMAL_FR":null,"NAME_CIAWF":"Burundi","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Burundi","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":5,"MAPCOLOR13":8,"POP_EST":11466756,"POP_RANK":14,"GDP_MD_EST":7892,"POP_YEAR":2017,"LASTCENSUS":2008,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"BY","ISO_A2":"BI","ISO_A3":"BDI","ISO_A3_EH":"BDI","ISO_N3":"108","UN_A3":"108","WB_A2":"BI","WB_A3":"BDI","WOE_ID":23424774,"WOE_ID_EH":23424774,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BDI","ADM0_A3_US":"BDI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[62,63,64,65,66]],"bbox":[2.513573,49.529484,6.156658,51.475024],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Belgium","SOV_A3":"BEL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Belgium","ADM0_A3":"BEL","GEOU_DIF":0,"GEOUNIT":"Belgium","GU_A3":"BEL","SU_DIF":0,"SUBUNIT":"Belgium","SU_A3":"BEL","BRK_DIFF":0,"NAME":"Belgium","NAME_LONG":"Belgium","BRK_A3":"BEL","BRK_NAME":"Belgium","BRK_GROUP":null,"ABBREV":"Belg.","POSTAL":"B","FORMAL_EN":"Kingdom of Belgium","FORMAL_FR":null,"NAME_CIAWF":"Belgium","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Belgium","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":1,"MAPCOLOR13":8,"POP_EST":11491346,"POP_RANK":14,"GDP_MD_EST":508600,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"BE","ISO_A2":"BE","ISO_A3":"BEL","ISO_A3_EH":"BEL","ISO_N3":"056","UN_A3":"056","WB_A2":"BE","WB_A3":"BEL","WOE_ID":23424757,"WOE_ID_EH":23424757,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BEL","ADM0_A3_US":"BEL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Western Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[67,68,69,70,71]],"bbox":[0.772336,6.142158,3.797112,12.235636],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Benin","SOV_A3":"BEN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Benin","ADM0_A3":"BEN","GEOU_DIF":0,"GEOUNIT":"Benin","GU_A3":"BEN","SU_DIF":0,"SUBUNIT":"Benin","SU_A3":"BEN","BRK_DIFF":0,"NAME":"Benin","NAME_LONG":"Benin","BRK_A3":"BEN","BRK_NAME":"Benin","BRK_GROUP":null,"ABBREV":"Benin","POSTAL":"BJ","FORMAL_EN":"Republic of Benin","FORMAL_FR":null,"NAME_CIAWF":"Benin","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Benin","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":12,"POP_EST":11038805,"POP_RANK":14,"GDP_MD_EST":24310,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"BN","ISO_A2":"BJ","ISO_A3":"BEN","ISO_A3_EH":"BEN","ISO_N3":"204","UN_A3":"204","WB_A2":"BJ","WB_A3":"BEN","WOE_ID":23424764,"WOE_ID_EH":23424764,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BEN","ADM0_A3_US":"BEN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-70,72,73,74,75,76]],"bbox":[-5.470565,9.610835,2.177108,15.116158],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Burkina Faso","SOV_A3":"BFA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Burkina Faso","ADM0_A3":"BFA","GEOU_DIF":0,"GEOUNIT":"Burkina Faso","GU_A3":"BFA","SU_DIF":0,"SUBUNIT":"Burkina Faso","SU_A3":"BFA","BRK_DIFF":0,"NAME":"Burkina Faso","NAME_LONG":"Burkina Faso","BRK_A3":"BFA","BRK_NAME":"Burkina Faso","BRK_GROUP":null,"ABBREV":"B.F.","POSTAL":"BF","FORMAL_EN":"Burkina Faso","FORMAL_FR":null,"NAME_CIAWF":"Burkina Faso","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Burkina Faso","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":1,"MAPCOLOR9":5,"MAPCOLOR13":11,"POP_EST":20107509,"POP_RANK":15,"GDP_MD_EST":32990,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"UV","ISO_A2":"BF","ISO_A3":"BFA","ISO_A3_EH":"BFA","ISO_N3":"854","UN_A3":"854","WB_A2":"BF","WB_A3":"BFA","WOE_ID":23424978,"WOE_ID_EH":23424978,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BFA","ADM0_A3_US":"BFA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":12,"LONG_LEN":12,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[77,78,79]],"bbox":[88.084422,20.670883,92.672721,26.446526],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Bangladesh","SOV_A3":"BGD","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Bangladesh","ADM0_A3":"BGD","GEOU_DIF":0,"GEOUNIT":"Bangladesh","GU_A3":"BGD","SU_DIF":0,"SUBUNIT":"Bangladesh","SU_A3":"BGD","BRK_DIFF":0,"NAME":"Bangladesh","NAME_LONG":"Bangladesh","BRK_A3":"BGD","BRK_NAME":"Bangladesh","BRK_GROUP":null,"ABBREV":"Bang.","POSTAL":"BD","FORMAL_EN":"People's Republic of Bangladesh","FORMAL_FR":null,"NAME_CIAWF":"Bangladesh","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Bangladesh","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":4,"MAPCOLOR9":7,"MAPCOLOR13":7,"POP_EST":157826578,"POP_RANK":17,"GDP_MD_EST":628400,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"BG","ISO_A2":"BD","ISO_A3":"BGD","ISO_A3_EH":"BGD","ISO_N3":"050","UN_A3":"050","WB_A2":"BD","WB_A3":"BGD","WOE_ID":23424759,"WOE_ID_EH":23424759,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BGD","ADM0_A3_US":"BGD","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"South Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[80,81,82,83,84,85]],"bbox":[22.380526,41.234486,28.558081,44.234923],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Bulgaria","SOV_A3":"BGR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Bulgaria","ADM0_A3":"BGR","GEOU_DIF":0,"GEOUNIT":"Bulgaria","GU_A3":"BGR","SU_DIF":0,"SUBUNIT":"Bulgaria","SU_A3":"BGR","BRK_DIFF":0,"NAME":"Bulgaria","NAME_LONG":"Bulgaria","BRK_A3":"BGR","BRK_NAME":"Bulgaria","BRK_GROUP":null,"ABBREV":"Bulg.","POSTAL":"BG","FORMAL_EN":"Republic of Bulgaria","FORMAL_FR":null,"NAME_CIAWF":"Bulgaria","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Bulgaria","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":5,"MAPCOLOR9":1,"MAPCOLOR13":8,"POP_EST":7101510,"POP_RANK":13,"GDP_MD_EST":143100,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"BU","ISO_A2":"BG","ISO_A3":"BGR","ISO_A3_EH":"BGR","ISO_N3":"100","UN_A3":"100","WB_A2":"BG","WB_A3":"BGR","WOE_ID":23424771,"WOE_ID_EH":23424771,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BGR","ADM0_A3_US":"BGR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[86]],[[87]],[[88]]],"bbox":[-78.98,23.71,-77,27.04],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"The Bahamas","SOV_A3":"BHS","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"The Bahamas","ADM0_A3":"BHS","GEOU_DIF":0,"GEOUNIT":"The Bahamas","GU_A3":"BHS","SU_DIF":0,"SUBUNIT":"The Bahamas","SU_A3":"BHS","BRK_DIFF":0,"NAME":"Bahamas","NAME_LONG":"Bahamas","BRK_A3":"BHS","BRK_NAME":"Bahamas","BRK_GROUP":null,"ABBREV":"Bhs.","POSTAL":"BS","FORMAL_EN":"Commonwealth of the Bahamas","FORMAL_FR":null,"NAME_CIAWF":"Bahamas, The","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Bahamas, The","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":1,"MAPCOLOR9":2,"MAPCOLOR13":5,"POP_EST":329988,"POP_RANK":10,"GDP_MD_EST":9066,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"BF","ISO_A2":"BS","ISO_A3":"BHS","ISO_A3_EH":"BHS","ISO_N3":"044","UN_A3":"044","WB_A2":"BS","WB_A3":"BHS","WOE_ID":23424758,"WOE_ID_EH":23424758,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BHS","ADM0_A3_US":"BHS","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Caribbean","REGION_WB":"Latin America & Caribbean","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[89,90,91]],"bbox":[15.750026,42.65,19.59976,45.233777],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Bosnia and Herzegovina","SOV_A3":"BIH","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Bosnia and Herzegovina","ADM0_A3":"BIH","GEOU_DIF":0,"GEOUNIT":"Bosnia and Herzegovina","GU_A3":"BIH","SU_DIF":0,"SUBUNIT":"Bosnia and Herzegovina","SU_A3":"BIH","BRK_DIFF":0,"NAME":"Bosnia and Herz.","NAME_LONG":"Bosnia and Herzegovina","BRK_A3":"BIH","BRK_NAME":"Bosnia and Herz.","BRK_GROUP":null,"ABBREV":"B.H.","POSTAL":"BiH","FORMAL_EN":"Bosnia and Herzegovina","FORMAL_FR":null,"NAME_CIAWF":"Bosnia and Herzegovina","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Bosnia and Herzegovina","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":1,"MAPCOLOR9":1,"MAPCOLOR13":2,"POP_EST":3856181,"POP_RANK":12,"GDP_MD_EST":42530,"POP_YEAR":2017,"LASTCENSUS":1991,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"BK","ISO_A2":"BA","ISO_A3":"BIH","ISO_A3_EH":"BIH","ISO_N3":"070","UN_A3":"070","WB_A2":"BA","WB_A3":"BIH","WOE_ID":23424761,"WOE_ID_EH":23424761,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BIH","ADM0_A3_US":"BIH","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":16,"LONG_LEN":22,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4.5,"MAX_LABEL":9.5}},{"type":"Polygon","arcs":[[92,93,94,95,96]],"bbox":[23.199494,51.319503,32.693643,56.16913],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Belarus","SOV_A3":"BLR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Belarus","ADM0_A3":"BLR","GEOU_DIF":0,"GEOUNIT":"Belarus","GU_A3":"BLR","SU_DIF":0,"SUBUNIT":"Belarus","SU_A3":"BLR","BRK_DIFF":0,"NAME":"Belarus","NAME_LONG":"Belarus","BRK_A3":"BLR","BRK_NAME":"Belarus","BRK_GROUP":null,"ABBREV":"Bela.","POSTAL":"BY","FORMAL_EN":"Republic of Belarus","FORMAL_FR":null,"NAME_CIAWF":"Belarus","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Belarus","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":1,"MAPCOLOR9":5,"MAPCOLOR13":11,"POP_EST":9549747,"POP_RANK":13,"GDP_MD_EST":165400,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"BO","ISO_A2":"BY","ISO_A3":"BLR","ISO_A3_EH":"BLR","ISO_N3":"112","UN_A3":"112","WB_A2":"BY","WB_A3":"BLR","WOE_ID":23424765,"WOE_ID_EH":23424765,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BLR","ADM0_A3_US":"BLR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[97,98,99]],"bbox":[-89.229122,15.886938,-88.106813,18.499982],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Belize","SOV_A3":"BLZ","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Belize","ADM0_A3":"BLZ","GEOU_DIF":0,"GEOUNIT":"Belize","GU_A3":"BLZ","SU_DIF":0,"SUBUNIT":"Belize","SU_A3":"BLZ","BRK_DIFF":0,"NAME":"Belize","NAME_LONG":"Belize","BRK_A3":"BLZ","BRK_NAME":"Belize","BRK_GROUP":null,"ABBREV":"Belize","POSTAL":"BZ","FORMAL_EN":"Belize","FORMAL_FR":null,"NAME_CIAWF":"Belize","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Belize","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":5,"MAPCOLOR13":7,"POP_EST":360346,"POP_RANK":10,"GDP_MD_EST":3088,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"BH","ISO_A2":"BZ","ISO_A3":"BLZ","ISO_A3_EH":"BLZ","ISO_N3":"084","UN_A3":"084","WB_A2":"BZ","WB_A3":"BLZ","WOE_ID":23424760,"WOE_ID_EH":23424760,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BLZ","ADM0_A3_US":"BLZ","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-27,100,101,102,103]],"bbox":[-69.590424,-22.872919,-57.498371,-9.761988],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Bolivia","SOV_A3":"BOL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Bolivia","ADM0_A3":"BOL","GEOU_DIF":0,"GEOUNIT":"Bolivia","GU_A3":"BOL","SU_DIF":0,"SUBUNIT":"Bolivia","SU_A3":"BOL","BRK_DIFF":0,"NAME":"Bolivia","NAME_LONG":"Bolivia","BRK_A3":"BOL","BRK_NAME":"Bolivia","BRK_GROUP":null,"ABBREV":"Bolivia","POSTAL":"BO","FORMAL_EN":"Plurinational State of Bolivia","FORMAL_FR":null,"NAME_CIAWF":"Bolivia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Bolivia","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":5,"MAPCOLOR9":2,"MAPCOLOR13":3,"POP_EST":11138234,"POP_RANK":14,"GDP_MD_EST":78350,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"BL","ISO_A2":"BO","ISO_A3":"BOL","ISO_A3_EH":"BOL","ISO_N3":"068","UN_A3":"068","WB_A2":"BO","WB_A3":"BOL","WOE_ID":23424762,"WOE_ID_EH":23424762,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BOL","ADM0_A3_US":"BOL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":7,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7.5}},{"type":"Polygon","arcs":[[-29,104,-103,105,106,107,108,109,110,111,112]],"bbox":[-73.987235,-33.768378,-34.729993,5.244486],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Brazil","SOV_A3":"BRA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Brazil","ADM0_A3":"BRA","GEOU_DIF":0,"GEOUNIT":"Brazil","GU_A3":"BRA","SU_DIF":0,"SUBUNIT":"Brazil","SU_A3":"BRA","BRK_DIFF":0,"NAME":"Brazil","NAME_LONG":"Brazil","BRK_A3":"BRA","BRK_NAME":"Brazil","BRK_GROUP":null,"ABBREV":"Brazil","POSTAL":"BR","FORMAL_EN":"Federative Republic of Brazil","FORMAL_FR":null,"NAME_CIAWF":"Brazil","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Brazil","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":6,"MAPCOLOR9":5,"MAPCOLOR13":7,"POP_EST":207353391,"POP_RANK":17,"GDP_MD_EST":3081000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"3. Emerging region: BRIC","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"BR","ISO_A2":"BR","ISO_A3":"BRA","ISO_A3_EH":"BRA","ISO_N3":"076","UN_A3":"076","WB_A2":"BR","WB_A3":"BRA","WOE_ID":23424768,"WOE_ID_EH":23424768,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BRA","ADM0_A3_US":"BRA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":5.7}},{"type":"Polygon","arcs":[[113,114]],"bbox":[114.204017,4.007637,115.45071,5.44773],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Brunei","SOV_A3":"BRN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Brunei","ADM0_A3":"BRN","GEOU_DIF":0,"GEOUNIT":"Brunei","GU_A3":"BRN","SU_DIF":0,"SUBUNIT":"Brunei","SU_A3":"BRN","BRK_DIFF":0,"NAME":"Brunei","NAME_LONG":"Brunei Darussalam","BRK_A3":"BRN","BRK_NAME":"Brunei","BRK_GROUP":null,"ABBREV":"Brunei","POSTAL":"BN","FORMAL_EN":"Negara Brunei Darussalam","FORMAL_FR":null,"NAME_CIAWF":"Brunei","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Brunei","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":6,"MAPCOLOR9":6,"MAPCOLOR13":12,"POP_EST":443593,"POP_RANK":10,"GDP_MD_EST":33730,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"BX","ISO_A2":"BN","ISO_A3":"BRN","ISO_A3_EH":"BRN","ISO_N3":"096","UN_A3":"096","WB_A2":"BN","WB_A3":"BRN","WOE_ID":23424773,"WOE_ID_EH":23424773,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BRN","ADM0_A3_US":"BRN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":6,"LONG_LEN":17,"ABBREV_LEN":6,"TINY":2,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[115,116]],"bbox":[88.814248,26.719403,92.103712,28.296439],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Bhutan","SOV_A3":"BTN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Bhutan","ADM0_A3":"BTN","GEOU_DIF":0,"GEOUNIT":"Bhutan","GU_A3":"BTN","SU_DIF":0,"SUBUNIT":"Bhutan","SU_A3":"BTN","BRK_DIFF":0,"NAME":"Bhutan","NAME_LONG":"Bhutan","BRK_A3":"BTN","BRK_NAME":"Bhutan","BRK_GROUP":null,"ABBREV":"Bhutan","POSTAL":"BT","FORMAL_EN":"Kingdom of Bhutan","FORMAL_FR":null,"NAME_CIAWF":"Bhutan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Bhutan","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":6,"MAPCOLOR9":1,"MAPCOLOR13":8,"POP_EST":758288,"POP_RANK":11,"GDP_MD_EST":6432,"POP_YEAR":2017,"LASTCENSUS":2005,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"BT","ISO_A2":"BT","ISO_A3":"BTN","ISO_A3_EH":"BTN","ISO_N3":"064","UN_A3":"064","WB_A2":"BT","WB_A3":"BTN","WOE_ID":23424770,"WOE_ID_EH":23424770,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BTN","ADM0_A3_US":"BTN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"South Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[117,118,119,120]],"bbox":[19.895458,-26.828543,29.432188,-17.661816],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Botswana","SOV_A3":"BWA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Botswana","ADM0_A3":"BWA","GEOU_DIF":0,"GEOUNIT":"Botswana","GU_A3":"BWA","SU_DIF":0,"SUBUNIT":"Botswana","SU_A3":"BWA","BRK_DIFF":0,"NAME":"Botswana","NAME_LONG":"Botswana","BRK_A3":"BWA","BRK_NAME":"Botswana","BRK_GROUP":null,"ABBREV":"Bwa.","POSTAL":"BW","FORMAL_EN":"Republic of Botswana","FORMAL_FR":null,"NAME_CIAWF":"Botswana","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Botswana","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":5,"MAPCOLOR9":7,"MAPCOLOR13":3,"POP_EST":2214858,"POP_RANK":12,"GDP_MD_EST":35900,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"BC","ISO_A2":"BW","ISO_A3":"BWA","ISO_A3_EH":"BWA","ISO_N3":"072","UN_A3":"072","WB_A2":"BW","WB_A3":"BWA","WOE_ID":23424755,"WOE_ID_EH":23424755,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"BWA","ADM0_A3_US":"BWA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Southern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[121,122,123,124,125,126]],"bbox":[14.459407,2.26764,27.374226,11.142395],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Central African Republic","SOV_A3":"CAF","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Central African Republic","ADM0_A3":"CAF","GEOU_DIF":0,"GEOUNIT":"Central African Republic","GU_A3":"CAF","SU_DIF":0,"SUBUNIT":"Central African Republic","SU_A3":"CAF","BRK_DIFF":0,"NAME":"Central African Rep.","NAME_LONG":"Central African Republic","BRK_A3":"CAF","BRK_NAME":"Central African Rep.","BRK_GROUP":null,"ABBREV":"C.A.R.","POSTAL":"CF","FORMAL_EN":"Central African Republic","FORMAL_FR":null,"NAME_CIAWF":"Central African Republic","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Central African Republic","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":6,"MAPCOLOR9":6,"MAPCOLOR13":9,"POP_EST":5625118,"POP_RANK":13,"GDP_MD_EST":3206,"POP_YEAR":2017,"LASTCENSUS":2003,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"CT","ISO_A2":"CF","ISO_A3":"CAF","ISO_A3_EH":"CAF","ISO_N3":"140","UN_A3":"140","WB_A2":"CF","WB_A3":"CAF","WOE_ID":23424792,"WOE_ID_EH":23424792,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CAF","ADM0_A3_US":"CAF","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":20,"LONG_LEN":24,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[127]],[[128]],[[129]],[[130]],[[131]],[[132]],[[133]],[[134]],[[135]],[[136]],[[137,138,139,140]],[[141]],[[142]],[[143]],[[144]],[[145]],[[146]],[[147]],[[148]],[[149]],[[150]],[[151]],[[152]],[[153]],[[154]],[[155]],[[156]],[[157]],[[158]],[[159]]],"bbox":[-140.99778,41.675105,-52.648099,83.23324],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Canada","SOV_A3":"CAN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Canada","ADM0_A3":"CAN","GEOU_DIF":0,"GEOUNIT":"Canada","GU_A3":"CAN","SU_DIF":0,"SUBUNIT":"Canada","SU_A3":"CAN","BRK_DIFF":0,"NAME":"Canada","NAME_LONG":"Canada","BRK_A3":"CAN","BRK_NAME":"Canada","BRK_GROUP":null,"ABBREV":"Can.","POSTAL":"CA","FORMAL_EN":"Canada","FORMAL_FR":null,"NAME_CIAWF":"Canada","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Canada","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":6,"MAPCOLOR9":2,"MAPCOLOR13":2,"POP_EST":35623680,"POP_RANK":15,"GDP_MD_EST":1674000,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"1. Developed region: G7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"CA","ISO_A2":"CA","ISO_A3":"CAN","ISO_A3_EH":"CAN","ISO_N3":"124","UN_A3":"124","WB_A2":"CA","WB_A3":"CAN","WOE_ID":23424775,"WOE_ID_EH":23424775,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CAN","ADM0_A3_US":"CAN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Northern America","REGION_WB":"North America","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":5.7}},{"type":"Polygon","arcs":[[-51,160,161,162]],"bbox":[6.022609,45.776948,10.442701,47.830828],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Switzerland","SOV_A3":"CHE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Switzerland","ADM0_A3":"CHE","GEOU_DIF":0,"GEOUNIT":"Switzerland","GU_A3":"CHE","SU_DIF":0,"SUBUNIT":"Switzerland","SU_A3":"CHE","BRK_DIFF":0,"NAME":"Switzerland","NAME_LONG":"Switzerland","BRK_A3":"CHE","BRK_NAME":"Switzerland","BRK_GROUP":null,"ABBREV":"Switz.","POSTAL":"CH","FORMAL_EN":"Swiss Confederation","FORMAL_FR":null,"NAME_CIAWF":"Switzerland","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Switzerland","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":2,"MAPCOLOR9":7,"MAPCOLOR13":3,"POP_EST":8236303,"POP_RANK":13,"GDP_MD_EST":496300,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"SZ","ISO_A2":"CH","ISO_A3":"CHE","ISO_A3_EH":"CHE","ISO_N3":"756","UN_A3":"756","WB_A2":"CH","WB_A3":"CHE","WOE_ID":23424957,"WOE_ID_EH":23424957,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CHE","ADM0_A3_US":"CHE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Western Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[-24,163]],[[-26,164,165,-101]]],"bbox":[-75.644395,-55.61183,-66.95992,-17.580012],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Chile","SOV_A3":"CHL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Chile","ADM0_A3":"CHL","GEOU_DIF":0,"GEOUNIT":"Chile","GU_A3":"CHL","SU_DIF":0,"SUBUNIT":"Chile","SU_A3":"CHL","BRK_DIFF":0,"NAME":"Chile","NAME_LONG":"Chile","BRK_A3":"CHL","BRK_NAME":"Chile","BRK_GROUP":null,"ABBREV":"Chile","POSTAL":"CL","FORMAL_EN":"Republic of Chile","FORMAL_FR":null,"NAME_CIAWF":"Chile","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Chile","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":1,"MAPCOLOR9":5,"MAPCOLOR13":9,"POP_EST":17789267,"POP_RANK":14,"GDP_MD_EST":436100,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"CI","ISO_A2":"CL","ISO_A3":"CHL","ISO_A3_EH":"CHL","ISO_N3":"152","UN_A3":"152","WB_A2":"CL","WB_A3":"CHL","WOE_ID":23424782,"WOE_ID_EH":23424782,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CHL","ADM0_A3_US":"CHL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"MultiPolygon","arcs":[[[-4,166,167,168,169,170,171,172,173,174,175,176,177,-117,178,179,180,181]],[[182]]],"bbox":[73.675379,18.197701,135.026311,53.4588],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"China","SOV_A3":"CH1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"China","ADM0_A3":"CHN","GEOU_DIF":0,"GEOUNIT":"China","GU_A3":"CHN","SU_DIF":0,"SUBUNIT":"China","SU_A3":"CHN","BRK_DIFF":0,"NAME":"China","NAME_LONG":"China","BRK_A3":"CHN","BRK_NAME":"China","BRK_GROUP":null,"ABBREV":"China","POSTAL":"CN","FORMAL_EN":"People's Republic of China","FORMAL_FR":null,"NAME_CIAWF":"China","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"China","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":4,"MAPCOLOR9":4,"MAPCOLOR13":3,"POP_EST":1379302771,"POP_RANK":18,"GDP_MD_EST":21140000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"3. Emerging region: BRIC","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"CH","ISO_A2":"CN","ISO_A3":"CHN","ISO_A3_EH":"CHN","ISO_N3":"156","UN_A3":"156","WB_A2":"CN","WB_A3":"CHN","WOE_ID":23424781,"WOE_ID_EH":23424781,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CHN","ADM0_A3_US":"CHN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":5.7}},{"type":"Polygon","arcs":[[-75,183,184,185,186,187]],"bbox":[-8.60288,4.338288,-2.56219,10.524061],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Ivory Coast","SOV_A3":"CIV","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Ivory Coast","ADM0_A3":"CIV","GEOU_DIF":0,"GEOUNIT":"Ivory Coast","GU_A3":"CIV","SU_DIF":0,"SUBUNIT":"Ivory Coast","SU_A3":"CIV","BRK_DIFF":0,"NAME":"Cote d'Ivoire","NAME_LONG":"Côte d'Ivoire","BRK_A3":"CIV","BRK_NAME":"Côte d'Ivoire","BRK_GROUP":null,"ABBREV":"I.C.","POSTAL":"CI","FORMAL_EN":"Republic of Ivory Coast","FORMAL_FR":"Republic of Cote D'Ivoire","NAME_CIAWF":"Cote D'ivoire","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Côte d'Ivoire","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":6,"MAPCOLOR9":3,"MAPCOLOR13":3,"POP_EST":24184810,"POP_RANK":15,"GDP_MD_EST":87120,"POP_YEAR":2017,"LASTCENSUS":1998,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"IV","ISO_A2":"CI","ISO_A3":"CIV","ISO_A3_EH":"CIV","ISO_N3":"384","UN_A3":"384","WB_A2":"CI","WB_A3":"CIV","WOE_ID":23424854,"WOE_ID_EH":23424854,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CIV","ADM0_A3_US":"CIV","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":13,"LONG_LEN":13,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-127,188,189,190,191,192,193,194]],"bbox":[8.488816,1.727673,16.012852,12.859396],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Cameroon","SOV_A3":"CMR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Cameroon","ADM0_A3":"CMR","GEOU_DIF":0,"GEOUNIT":"Cameroon","GU_A3":"CMR","SU_DIF":0,"SUBUNIT":"Cameroon","SU_A3":"CMR","BRK_DIFF":0,"NAME":"Cameroon","NAME_LONG":"Cameroon","BRK_A3":"CMR","BRK_NAME":"Cameroon","BRK_GROUP":null,"ABBREV":"Cam.","POSTAL":"CM","FORMAL_EN":"Republic of Cameroon","FORMAL_FR":null,"NAME_CIAWF":"Cameroon","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Cameroon","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":3,"POP_EST":24994885,"POP_RANK":15,"GDP_MD_EST":77240,"POP_YEAR":2017,"LASTCENSUS":2005,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"CM","ISO_A2":"CM","ISO_A3":"CMR","ISO_A3_EH":"CMR","ISO_N3":"120","UN_A3":"120","WB_A2":"CM","WB_A3":"CMR","WOE_ID":23424785,"WOE_ID_EH":23424785,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CMR","ADM0_A3_US":"CMR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-9,195,-13,196,-125,197,198,199,-60,200,201]],"bbox":[12.182337,-13.257227,31.174149,5.256088],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Democratic Republic of the Congo","SOV_A3":"COD","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Democratic Republic of the Congo","ADM0_A3":"COD","GEOU_DIF":0,"GEOUNIT":"Democratic Republic of the Congo","GU_A3":"COD","SU_DIF":0,"SUBUNIT":"Democratic Republic of the Congo","SU_A3":"COD","BRK_DIFF":0,"NAME":"Dem. Rep. Congo","NAME_LONG":"Democratic Republic of the Congo","BRK_A3":"COD","BRK_NAME":"Democratic Republic of the Congo","BRK_GROUP":null,"ABBREV":"D.R.C.","POSTAL":"DRC","FORMAL_EN":"Democratic Republic of the Congo","FORMAL_FR":null,"NAME_CIAWF":"Congo, Democratic Republic of the","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Congo, Dem. Rep.","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":4,"MAPCOLOR9":4,"MAPCOLOR13":7,"POP_EST":83301151,"POP_RANK":16,"GDP_MD_EST":66010,"POP_YEAR":2017,"LASTCENSUS":1984,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"CG","ISO_A2":"CD","ISO_A3":"COD","ISO_A3_EH":"COD","ISO_N3":"180","UN_A3":"180","WB_A2":"ZR","WB_A3":"ZAR","WOE_ID":23424780,"WOE_ID_EH":23424780,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"COD","ADM0_A3_US":"COD","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":15,"LONG_LEN":32,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-12,202,203,-189,-126,-197]],"bbox":[11.093773,-5.037987,18.453065,3.728197],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Republic of the Congo","SOV_A3":"COG","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Republic of the Congo","ADM0_A3":"COG","GEOU_DIF":0,"GEOUNIT":"Republic of the Congo","GU_A3":"COG","SU_DIF":0,"SUBUNIT":"Republic of the Congo","SU_A3":"COG","BRK_DIFF":0,"NAME":"Congo","NAME_LONG":"Republic of the Congo","BRK_A3":"COG","BRK_NAME":"Republic of the Congo","BRK_GROUP":null,"ABBREV":"Rep. Congo","POSTAL":"CG","FORMAL_EN":"Republic of the Congo","FORMAL_FR":null,"NAME_CIAWF":"Congo, Republic of the","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Congo, Rep.","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":10,"POP_EST":4954674,"POP_RANK":12,"GDP_MD_EST":30270,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"CF","ISO_A2":"CG","ISO_A3":"COG","ISO_A3_EH":"COG","ISO_N3":"178","UN_A3":"178","WB_A2":"CG","WB_A3":"COG","WOE_ID":23424779,"WOE_ID_EH":23424779,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"COG","ADM0_A3_US":"COG","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":5,"LONG_LEN":21,"ABBREV_LEN":10,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-107,204,205,206,207,208,209]],"bbox":[-78.990935,-4.298187,-66.876326,12.437303],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Colombia","SOV_A3":"COL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Colombia","ADM0_A3":"COL","GEOU_DIF":0,"GEOUNIT":"Colombia","GU_A3":"COL","SU_DIF":0,"SUBUNIT":"Colombia","SU_A3":"COL","BRK_DIFF":0,"NAME":"Colombia","NAME_LONG":"Colombia","BRK_A3":"COL","BRK_NAME":"Colombia","BRK_GROUP":null,"ABBREV":"Col.","POSTAL":"CO","FORMAL_EN":"Republic of Colombia","FORMAL_FR":null,"NAME_CIAWF":"Colombia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Colombia","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":1,"POP_EST":47698524,"POP_RANK":15,"GDP_MD_EST":688000,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"CO","ISO_A2":"CO","ISO_A3":"COL","ISO_A3_EH":"COL","ISO_N3":"170","UN_A3":"170","WB_A2":"CO","WB_A3":"COL","WOE_ID":23424787,"WOE_ID_EH":23424787,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"COL","ADM0_A3_US":"COL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[210,211,212,213]],"bbox":[-85.941725,8.225028,-82.546196,11.217119],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Costa Rica","SOV_A3":"CRI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Costa Rica","ADM0_A3":"CRI","GEOU_DIF":0,"GEOUNIT":"Costa Rica","GU_A3":"CRI","SU_DIF":0,"SUBUNIT":"Costa Rica","SU_A3":"CRI","BRK_DIFF":0,"NAME":"Costa Rica","NAME_LONG":"Costa Rica","BRK_A3":"CRI","BRK_NAME":"Costa Rica","BRK_GROUP":null,"ABBREV":"C.R.","POSTAL":"CR","FORMAL_EN":"Republic of Costa Rica","FORMAL_FR":null,"NAME_CIAWF":"Costa Rica","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Costa Rica","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":4,"MAPCOLOR13":2,"POP_EST":4930258,"POP_RANK":12,"GDP_MD_EST":79260,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"CS","ISO_A2":"CR","ISO_A3":"CRI","ISO_A3_EH":"CRI","ISO_N3":"188","UN_A3":"188","WB_A2":"CR","WB_A3":"CRI","WOE_ID":23424791,"WOE_ID_EH":23424791,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CRI","ADM0_A3_US":"CRI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[214]],"bbox":[-84.974911,19.855481,-74.178025,23.188611],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Cuba","SOV_A3":"CUB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Cuba","ADM0_A3":"CUB","GEOU_DIF":0,"GEOUNIT":"Cuba","GU_A3":"CUB","SU_DIF":0,"SUBUNIT":"Cuba","SU_A3":"CUB","BRK_DIFF":0,"NAME":"Cuba","NAME_LONG":"Cuba","BRK_A3":"CUB","BRK_NAME":"Cuba","BRK_GROUP":null,"ABBREV":"Cuba","POSTAL":"CU","FORMAL_EN":"Republic of Cuba","FORMAL_FR":null,"NAME_CIAWF":"Cuba","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Cuba","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":5,"MAPCOLOR9":3,"MAPCOLOR13":4,"POP_EST":11147407,"POP_RANK":14,"GDP_MD_EST":132900,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"CU","ISO_A2":"CU","ISO_A3":"CUB","ISO_A3_EH":"CUB","ISO_N3":"192","UN_A3":"192","WB_A2":"CU","WB_A3":"CUB","WOE_ID":23424793,"WOE_ID_EH":23424793,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CUB","ADM0_A3_US":"CUB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Caribbean","REGION_WB":"Latin America & Caribbean","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[215,216]],"bbox":[32.73178,35.000345,34.576474,35.671596],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Northern Cyprus","SOV_A3":"CYN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Northern Cyprus","ADM0_A3":"CYN","GEOU_DIF":0,"GEOUNIT":"Northern Cyprus","GU_A3":"CYN","SU_DIF":0,"SUBUNIT":"Northern Cyprus","SU_A3":"CYN","BRK_DIFF":1,"NAME":"N. Cyprus","NAME_LONG":"Northern Cyprus","BRK_A3":"B20","BRK_NAME":"N. Cyprus","BRK_GROUP":null,"ABBREV":"N. Cy.","POSTAL":"CN","FORMAL_EN":"Turkish Republic of Northern Cyprus","FORMAL_FR":null,"NAME_CIAWF":null,"NOTE_ADM0":"Self admin.","NOTE_BRK":"Self admin.; Claimed by Cyprus","NAME_SORT":"Cyprus, Northern","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":1,"MAPCOLOR9":4,"MAPCOLOR13":8,"POP_EST":265100,"POP_RANK":10,"GDP_MD_EST":3600,"POP_YEAR":2013,"LASTCENSUS":-99,"GDP_YEAR":2013,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"-99","ISO_A2":"-99","ISO_A3":"-99","ISO_A3_EH":"-99","ISO_N3":"-99","UN_A3":"-099","WB_A2":"-99","WB_A3":"-99","WOE_ID":-90,"WOE_ID_EH":23424995,"WOE_NOTE":"WOE lists as subunit of united Cyprus","ADM0_A3_IS":"CYP","ADM0_A3_US":"CYP","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":9,"LONG_LEN":15,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":6,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-217,217]],"bbox":[32.256667,34.571869,34.004881,35.173125],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Cyprus","SOV_A3":"CYP","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Cyprus","ADM0_A3":"CYP","GEOU_DIF":0,"GEOUNIT":"Cyprus","GU_A3":"CYP","SU_DIF":0,"SUBUNIT":"Cyprus","SU_A3":"CYP","BRK_DIFF":0,"NAME":"Cyprus","NAME_LONG":"Cyprus","BRK_A3":"CYP","BRK_NAME":"Cyprus","BRK_GROUP":null,"ABBREV":"Cyp.","POSTAL":"CY","FORMAL_EN":"Republic of Cyprus","FORMAL_FR":null,"NAME_CIAWF":"Cyprus","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Cyprus","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":2,"MAPCOLOR9":3,"MAPCOLOR13":7,"POP_EST":1221549,"POP_RANK":12,"GDP_MD_EST":29260,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"CY","ISO_A2":"CY","ISO_A3":"CYP","ISO_A3_EH":"CYP","ISO_N3":"196","UN_A3":"196","WB_A2":"CY","WB_A3":"CYP","WOE_ID":-90,"WOE_ID_EH":23424994,"WOE_NOTE":"WOE lists as subunit of united Cyprus","ADM0_A3_IS":"CYP","ADM0_A3_US":"CYP","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4.5,"MAX_LABEL":9.5}},{"type":"Polygon","arcs":[[-53,218,219,220]],"bbox":[12.240111,48.555305,18.853144,51.117268],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Czechia","SOV_A3":"CZE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Czechia","ADM0_A3":"CZE","GEOU_DIF":0,"GEOUNIT":"Czechia","GU_A3":"CZE","SU_DIF":0,"SUBUNIT":"Czechia","SU_A3":"CZE","BRK_DIFF":0,"NAME":"Czechia","NAME_LONG":"Czech Republic","BRK_A3":"CZE","BRK_NAME":"Czechia","BRK_GROUP":null,"ABBREV":"Cz.","POSTAL":"CZ","FORMAL_EN":"Czech Republic","FORMAL_FR":"la République tchèque","NAME_CIAWF":"Czechia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Czechia","NAME_ALT":"Česko","MAPCOLOR7":1,"MAPCOLOR8":1,"MAPCOLOR9":2,"MAPCOLOR13":6,"POP_EST":10674723,"POP_RANK":14,"GDP_MD_EST":350900,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"EZ","ISO_A2":"CZ","ISO_A3":"CZE","ISO_A3_EH":"CZE","ISO_N3":"203","UN_A3":"203","WB_A2":"CZ","WB_A3":"CZE","WOE_ID":23424810,"WOE_ID_EH":23424810,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"CZE","ADM0_A3_US":"CZE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":14,"ABBREV_LEN":3,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-52,-163,221,222,-63,223,224,225,226,227,-219]],"bbox":[5.988658,47.302488,15.016996,54.983104],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Germany","SOV_A3":"DEU","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Germany","ADM0_A3":"DEU","GEOU_DIF":0,"GEOUNIT":"Germany","GU_A3":"DEU","SU_DIF":0,"SUBUNIT":"Germany","SU_A3":"DEU","BRK_DIFF":0,"NAME":"Germany","NAME_LONG":"Germany","BRK_A3":"DEU","BRK_NAME":"Germany","BRK_GROUP":null,"ABBREV":"Ger.","POSTAL":"D","FORMAL_EN":"Federal Republic of Germany","FORMAL_FR":null,"NAME_CIAWF":"Germany","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Germany","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":5,"MAPCOLOR9":5,"MAPCOLOR13":1,"POP_EST":80594017,"POP_RANK":16,"GDP_MD_EST":3979000,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"1. Developed region: G7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"GM","ISO_A2":"DE","ISO_A3":"DEU","ISO_A3_EH":"DEU","ISO_N3":"276","UN_A3":"276","WB_A2":"DE","WB_A3":"DEU","WOE_ID":23424829,"WOE_ID_EH":23424829,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"DEU","ADM0_A3_US":"DEU","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Western Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[228,229,230,231]],"bbox":[41.66176,10.926879,43.317852,12.699639],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Djibouti","SOV_A3":"DJI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Djibouti","ADM0_A3":"DJI","GEOU_DIF":0,"GEOUNIT":"Djibouti","GU_A3":"DJI","SU_DIF":0,"SUBUNIT":"Djibouti","SU_A3":"DJI","BRK_DIFF":0,"NAME":"Djibouti","NAME_LONG":"Djibouti","BRK_A3":"DJI","BRK_NAME":"Djibouti","BRK_GROUP":null,"ABBREV":"Dji.","POSTAL":"DJ","FORMAL_EN":"Republic of Djibouti","FORMAL_FR":null,"NAME_CIAWF":"Djibouti","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Djibouti","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":2,"MAPCOLOR9":4,"MAPCOLOR13":8,"POP_EST":865267,"POP_RANK":11,"GDP_MD_EST":3345,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"DJ","ISO_A2":"DJ","ISO_A3":"DJI","ISO_A3_EH":"DJI","ISO_N3":"262","UN_A3":"262","WB_A2":"DJ","WB_A3":"DJI","WOE_ID":23424797,"WOE_ID_EH":23424797,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"DJI","ADM0_A3_US":"DJI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Middle East & North Africa","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[-226,232]],[[233]]],"bbox":[8.089977,54.800015,12.690006,57.730017],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Denmark","SOV_A3":"DN1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"Denmark","ADM0_A3":"DNK","GEOU_DIF":0,"GEOUNIT":"Denmark","GU_A3":"DNK","SU_DIF":0,"SUBUNIT":"Denmark","SU_A3":"DNK","BRK_DIFF":0,"NAME":"Denmark","NAME_LONG":"Denmark","BRK_A3":"DNK","BRK_NAME":"Denmark","BRK_GROUP":null,"ABBREV":"Den.","POSTAL":"DK","FORMAL_EN":"Kingdom of Denmark","FORMAL_FR":null,"NAME_CIAWF":"Denmark","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Denmark","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":12,"POP_EST":5605948,"POP_RANK":13,"GDP_MD_EST":264800,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"DA","ISO_A2":"DK","ISO_A3":"DNK","ISO_A3_EH":"DNK","ISO_N3":"208","UN_A3":"208","WB_A2":"DK","WB_A3":"DNK","WOE_ID":23424796,"WOE_ID_EH":23424796,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"DNK","ADM0_A3_US":"DNK","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[234,235]],"bbox":[-71.945112,17.598564,-68.317943,19.884911],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Dominican Republic","SOV_A3":"DOM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Dominican Republic","ADM0_A3":"DOM","GEOU_DIF":0,"GEOUNIT":"Dominican Republic","GU_A3":"DOM","SU_DIF":0,"SUBUNIT":"Dominican Republic","SU_A3":"DOM","BRK_DIFF":0,"NAME":"Dominican Rep.","NAME_LONG":"Dominican Republic","BRK_A3":"DOM","BRK_NAME":"Dominican Rep.","BRK_GROUP":null,"ABBREV":"Dom. Rep.","POSTAL":"DO","FORMAL_EN":"Dominican Republic","FORMAL_FR":null,"NAME_CIAWF":"Dominican Republic","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Dominican Republic","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":2,"MAPCOLOR9":5,"MAPCOLOR13":7,"POP_EST":10734247,"POP_RANK":14,"GDP_MD_EST":161900,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"DR","ISO_A2":"DO","ISO_A3":"DOM","ISO_A3_EH":"DOM","ISO_N3":"214","UN_A3":"214","WB_A2":"DO","WB_A3":"DOM","WOE_ID":23424800,"WOE_ID_EH":23424800,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"DOM","ADM0_A3_US":"DOM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Caribbean","REGION_WB":"Latin America & Caribbean","NAME_LEN":14,"LONG_LEN":18,"ABBREV_LEN":9,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4.5,"MAX_LABEL":9.5}},{"type":"Polygon","arcs":[[236,237,238,239,240,241,242,243]],"bbox":[-8.6844,19.057364,11.999506,37.118381],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Algeria","SOV_A3":"DZA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Algeria","ADM0_A3":"DZA","GEOU_DIF":0,"GEOUNIT":"Algeria","GU_A3":"DZA","SU_DIF":0,"SUBUNIT":"Algeria","SU_A3":"DZA","BRK_DIFF":0,"NAME":"Algeria","NAME_LONG":"Algeria","BRK_A3":"DZA","BRK_NAME":"Algeria","BRK_GROUP":null,"ABBREV":"Alg.","POSTAL":"DZ","FORMAL_EN":"People's Democratic Republic of Algeria","FORMAL_FR":null,"NAME_CIAWF":"Algeria","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Algeria","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":1,"MAPCOLOR9":6,"MAPCOLOR13":3,"POP_EST":40969443,"POP_RANK":15,"GDP_MD_EST":609400,"POP_YEAR":2017,"LASTCENSUS":2008,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"AG","ISO_A2":"DZ","ISO_A3":"DZA","ISO_A3_EH":"DZA","ISO_N3":"012","UN_A3":"012","WB_A2":"DZ","WB_A3":"DZA","WOE_ID":23424740,"WOE_ID_EH":23424740,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"DZA","ADM0_A3_US":"DZA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Northern Africa","REGION_WB":"Middle East & North Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-206,244,245]],"bbox":[-80.967765,-4.959129,-75.233723,1.380924],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Ecuador","SOV_A3":"ECU","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Ecuador","ADM0_A3":"ECU","GEOU_DIF":0,"GEOUNIT":"Ecuador","GU_A3":"ECU","SU_DIF":0,"SUBUNIT":"Ecuador","SU_A3":"ECU","BRK_DIFF":0,"NAME":"Ecuador","NAME_LONG":"Ecuador","BRK_A3":"ECU","BRK_NAME":"Ecuador","BRK_GROUP":null,"ABBREV":"Ecu.","POSTAL":"EC","FORMAL_EN":"Republic of Ecuador","FORMAL_FR":null,"NAME_CIAWF":"Ecuador","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Ecuador","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":5,"MAPCOLOR9":2,"MAPCOLOR13":12,"POP_EST":16290913,"POP_RANK":14,"GDP_MD_EST":182400,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"EC","ISO_A2":"EC","ISO_A3":"ECU","ISO_A3_EH":"ECU","ISO_N3":"218","UN_A3":"218","WB_A2":"EC","WB_A3":"ECU","WOE_ID":23424801,"WOE_ID_EH":23424801,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ECU","ADM0_A3_US":"ECU","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[246,247,248,249,250]],"bbox":[24.70007,22,36.86623,31.58568],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Egypt","SOV_A3":"EGY","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Egypt","ADM0_A3":"EGY","GEOU_DIF":0,"GEOUNIT":"Egypt","GU_A3":"EGY","SU_DIF":0,"SUBUNIT":"Egypt","SU_A3":"EGY","BRK_DIFF":0,"NAME":"Egypt","NAME_LONG":"Egypt","BRK_A3":"EGY","BRK_NAME":"Egypt","BRK_GROUP":null,"ABBREV":"Egypt","POSTAL":"EG","FORMAL_EN":"Arab Republic of Egypt","FORMAL_FR":null,"NAME_CIAWF":"Egypt","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Egypt, Arab Rep.","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":6,"MAPCOLOR9":7,"MAPCOLOR13":2,"POP_EST":97041072,"POP_RANK":16,"GDP_MD_EST":1105000,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"EG","ISO_A2":"EG","ISO_A3":"EGY","ISO_A3_EH":"EGY","ISO_N3":"818","UN_A3":"818","WB_A2":"EG","WB_A3":"EGY","WOE_ID":23424802,"WOE_ID_EH":23424802,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"EGY","ADM0_A3_US":"EGY","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Northern Africa","REGION_WB":"Middle East & North Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-232,251,252,253]],"bbox":[36.32322,12.455416,43.081226,17.998307],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Eritrea","SOV_A3":"ERI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Eritrea","ADM0_A3":"ERI","GEOU_DIF":0,"GEOUNIT":"Eritrea","GU_A3":"ERI","SU_DIF":0,"SUBUNIT":"Eritrea","SU_A3":"ERI","BRK_DIFF":0,"NAME":"Eritrea","NAME_LONG":"Eritrea","BRK_A3":"ERI","BRK_NAME":"Eritrea","BRK_GROUP":null,"ABBREV":"Erit.","POSTAL":"ER","FORMAL_EN":"State of Eritrea","FORMAL_FR":null,"NAME_CIAWF":"Eritrea","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Eritrea","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":1,"MAPCOLOR9":2,"MAPCOLOR13":12,"POP_EST":5918919,"POP_RANK":13,"GDP_MD_EST":9169,"POP_YEAR":2017,"LASTCENSUS":1984,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"ER","ISO_A2":"ER","ISO_A3":"ERI","ISO_A3_EH":"ERI","ISO_N3":"232","UN_A3":"232","WB_A2":"ER","WB_A3":"ERI","WOE_ID":23424806,"WOE_ID_EH":23424806,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ERI","ADM0_A3_US":"ERI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[254,255,256,257]],"bbox":[-9.392884,35.94685,3.039484,43.748338],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Spain","SOV_A3":"ESP","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Spain","ADM0_A3":"ESP","GEOU_DIF":0,"GEOUNIT":"Spain","GU_A3":"ESP","SU_DIF":0,"SUBUNIT":"Spain","SU_A3":"ESP","BRK_DIFF":0,"NAME":"Spain","NAME_LONG":"Spain","BRK_A3":"ESP","BRK_NAME":"Spain","BRK_GROUP":null,"ABBREV":"Sp.","POSTAL":"E","FORMAL_EN":"Kingdom of Spain","FORMAL_FR":null,"NAME_CIAWF":"Spain","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Spain","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":5,"MAPCOLOR9":5,"MAPCOLOR13":5,"POP_EST":48958159,"POP_RANK":15,"GDP_MD_EST":1690000,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"SP","ISO_A2":"ES","ISO_A3":"ESP","ISO_A3_EH":"ESP","ISO_N3":"724","UN_A3":"724","WB_A2":"ES","WB_A3":"ESP","WOE_ID":23424950,"WOE_ID_EH":23424950,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ESP","ADM0_A3_US":"ESP","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":3,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[258,259,260]],"bbox":[23.339795,57.474528,28.131699,59.61109],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Estonia","SOV_A3":"EST","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Estonia","ADM0_A3":"EST","GEOU_DIF":0,"GEOUNIT":"Estonia","GU_A3":"EST","SU_DIF":0,"SUBUNIT":"Estonia","SU_A3":"EST","BRK_DIFF":0,"NAME":"Estonia","NAME_LONG":"Estonia","BRK_A3":"EST","BRK_NAME":"Estonia","BRK_GROUP":null,"ABBREV":"Est.","POSTAL":"EST","FORMAL_EN":"Republic of Estonia","FORMAL_FR":null,"NAME_CIAWF":"Estonia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Estonia","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":1,"MAPCOLOR13":10,"POP_EST":1251581,"POP_RANK":12,"GDP_MD_EST":38700,"POP_YEAR":2017,"LASTCENSUS":2000,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"EN","ISO_A2":"EE","ISO_A3":"EST","ISO_A3_EH":"EST","ISO_N3":"233","UN_A3":"233","WB_A2":"EE","WB_A3":"EST","WOE_ID":23424805,"WOE_ID_EH":23424805,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"EST","ADM0_A3_US":"EST","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-231,261,262,263,264,265,-252]],"bbox":[32.95418,3.42206,47.78942,14.95943],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Ethiopia","SOV_A3":"ETH","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Ethiopia","ADM0_A3":"ETH","GEOU_DIF":0,"GEOUNIT":"Ethiopia","GU_A3":"ETH","SU_DIF":0,"SUBUNIT":"Ethiopia","SU_A3":"ETH","BRK_DIFF":0,"NAME":"Ethiopia","NAME_LONG":"Ethiopia","BRK_A3":"ETH","BRK_NAME":"Ethiopia","BRK_GROUP":null,"ABBREV":"Eth.","POSTAL":"ET","FORMAL_EN":"Federal Democratic Republic of Ethiopia","FORMAL_FR":null,"NAME_CIAWF":"Ethiopia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Ethiopia","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":13,"POP_EST":105350020,"POP_RANK":17,"GDP_MD_EST":174700,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"ET","ISO_A2":"ET","ISO_A3":"ETH","ISO_A3_EH":"ETH","ISO_N3":"231","UN_A3":"231","WB_A2":"ET","WB_A3":"ETH","WOE_ID":23424808,"WOE_ID_EH":23424808,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ETH","ADM0_A3_US":"ETH","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[266,267,268,269]],"bbox":[20.645593,59.846373,31.516092,70.164193],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Finland","SOV_A3":"FI1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"Finland","ADM0_A3":"FIN","GEOU_DIF":0,"GEOUNIT":"Finland","GU_A3":"FIN","SU_DIF":0,"SUBUNIT":"Finland","SU_A3":"FIN","BRK_DIFF":0,"NAME":"Finland","NAME_LONG":"Finland","BRK_A3":"FIN","BRK_NAME":"Finland","BRK_GROUP":null,"ABBREV":"Fin.","POSTAL":"FIN","FORMAL_EN":"Republic of Finland","FORMAL_FR":null,"NAME_CIAWF":"Finland","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Finland","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":1,"MAPCOLOR9":4,"MAPCOLOR13":6,"POP_EST":5491218,"POP_RANK":13,"GDP_MD_EST":224137,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"FI","ISO_A2":"FI","ISO_A3":"FIN","ISO_A3_EH":"FIN","ISO_N3":"246","UN_A3":"246","WB_A2":"FI","WB_A3":"FIN","WOE_ID":23424812,"WOE_ID_EH":23424812,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"FIN","ADM0_A3_US":"FIN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[270]],[[271]],[[272]]],"bbox":[-180,-18.28799,180,-16.020882],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Fiji","SOV_A3":"FJI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Fiji","ADM0_A3":"FJI","GEOU_DIF":0,"GEOUNIT":"Fiji","GU_A3":"FJI","SU_DIF":0,"SUBUNIT":"Fiji","SU_A3":"FJI","BRK_DIFF":0,"NAME":"Fiji","NAME_LONG":"Fiji","BRK_A3":"FJI","BRK_NAME":"Fiji","BRK_GROUP":null,"ABBREV":"Fiji","POSTAL":"FJ","FORMAL_EN":"Republic of Fiji","FORMAL_FR":null,"NAME_CIAWF":"Fiji","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Fiji","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":1,"MAPCOLOR9":2,"MAPCOLOR13":2,"POP_EST":920938,"POP_RANK":11,"GDP_MD_EST":8374,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"FJ","ISO_A2":"FJ","ISO_A3":"FJI","ISO_A3_EH":"FJI","ISO_N3":"242","UN_A3":"242","WB_A2":"FJ","WB_A3":"FJI","WOE_ID":23424813,"WOE_ID_EH":23424813,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"FJI","ADM0_A3_US":"FJI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Oceania","REGION_UN":"Oceania","SUBREGION":"Melanesia","REGION_WB":"East Asia & Pacific","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[273]],"bbox":[-61.2,-52.3,-57.75,-51.1],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"United Kingdom","SOV_A3":"GB1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Dependency","ADMIN":"Falkland Islands","ADM0_A3":"FLK","GEOU_DIF":0,"GEOUNIT":"Falkland Islands","GU_A3":"FLK","SU_DIF":0,"SUBUNIT":"Falkland Islands","SU_A3":"FLK","BRK_DIFF":1,"NAME":"Falkland Is.","NAME_LONG":"Falkland Islands","BRK_A3":"B12","BRK_NAME":"Falkland Is.","BRK_GROUP":null,"ABBREV":"Flk. Is.","POSTAL":"FK","FORMAL_EN":"Falkland Islands","FORMAL_FR":null,"NAME_CIAWF":"Falkland Islands (Islas Malvinas)","NOTE_ADM0":"U.K.","NOTE_BRK":"Admin. by U.K.; Claimed by Argentina","NAME_SORT":"Falkland Islands","NAME_ALT":"Islas Malvinas","MAPCOLOR7":6,"MAPCOLOR8":6,"MAPCOLOR9":6,"MAPCOLOR13":3,"POP_EST":2931,"POP_RANK":4,"GDP_MD_EST":281.8,"POP_YEAR":2014,"LASTCENSUS":-99,"GDP_YEAR":2012,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"FK","ISO_A2":"FK","ISO_A3":"FLK","ISO_A3_EH":"FLK","ISO_N3":"238","UN_A3":"238","WB_A2":"-99","WB_A3":"-99","WOE_ID":23424814,"WOE_ID_EH":23424814,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"FLK","ADM0_A3_US":"FLK","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":12,"LONG_LEN":16,"ABBREV_LEN":8,"TINY":-99,"HOMEPART":-99,"MIN_ZOOM":0,"MIN_LABEL":4.5,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[-65,274,-222,-162,275,276,-256,277]],[[-111,278,279]],[[280]]],"bbox":[-54.524754,2.053389,9.560016,51.148506],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"France","SOV_A3":"FR1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"France","ADM0_A3":"FRA","GEOU_DIF":0,"GEOUNIT":"France","GU_A3":"FRA","SU_DIF":0,"SUBUNIT":"France","SU_A3":"FRA","BRK_DIFF":0,"NAME":"France","NAME_LONG":"France","BRK_A3":"FRA","BRK_NAME":"France","BRK_GROUP":null,"ABBREV":"Fr.","POSTAL":"F","FORMAL_EN":"French Republic","FORMAL_FR":null,"NAME_CIAWF":"France","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"France","NAME_ALT":null,"MAPCOLOR7":7,"MAPCOLOR8":5,"MAPCOLOR9":9,"MAPCOLOR13":11,"POP_EST":67106161,"POP_RANK":16,"GDP_MD_EST":2699000,"POP_YEAR":2017,"LASTCENSUS":-99,"GDP_YEAR":2016,"ECONOMY":"1. Developed region: G7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"FR","ISO_A2":"-99","ISO_A3":"-99","ISO_A3_EH":"-99","ISO_N3":"250","UN_A3":"250","WB_A2":"FR","WB_A3":"FRA","WOE_ID":-90,"WOE_ID_EH":23424819,"WOE_NOTE":"Includes only Metropolitan France (including Corsica)","ADM0_A3_IS":"FRA","ADM0_A3_US":"FRA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Western Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":3,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-190,-204,281,282]],"bbox":[8.797996,-3.978827,14.425456,2.326758],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Gabon","SOV_A3":"GAB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Gabon","ADM0_A3":"GAB","GEOU_DIF":0,"GEOUNIT":"Gabon","GU_A3":"GAB","SU_DIF":0,"SUBUNIT":"Gabon","SU_A3":"GAB","BRK_DIFF":0,"NAME":"Gabon","NAME_LONG":"Gabon","BRK_A3":"GAB","BRK_NAME":"Gabon","BRK_GROUP":null,"ABBREV":"Gabon","POSTAL":"GA","FORMAL_EN":"Gabonese Republic","FORMAL_FR":null,"NAME_CIAWF":"Gabon","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Gabon","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":2,"MAPCOLOR9":5,"MAPCOLOR13":5,"POP_EST":1772255,"POP_RANK":12,"GDP_MD_EST":35980,"POP_YEAR":2017,"LASTCENSUS":2003,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"GB","ISO_A2":"GA","ISO_A3":"GAB","ISO_A3_EH":"GAB","ISO_N3":"266","UN_A3":"266","WB_A2":"GA","WB_A3":"GAB","WOE_ID":23424822,"WOE_ID_EH":23424822,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GAB","ADM0_A3_US":"GAB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":3,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[283,284]],[[285]]],"bbox":[-7.572168,49.96,1.681531,58.635],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"United Kingdom","SOV_A3":"GB1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"United Kingdom","ADM0_A3":"GBR","GEOU_DIF":0,"GEOUNIT":"United Kingdom","GU_A3":"GBR","SU_DIF":0,"SUBUNIT":"United Kingdom","SU_A3":"GBR","BRK_DIFF":0,"NAME":"United Kingdom","NAME_LONG":"United Kingdom","BRK_A3":"GBR","BRK_NAME":"United Kingdom","BRK_GROUP":null,"ABBREV":"U.K.","POSTAL":"GB","FORMAL_EN":"United Kingdom of Great Britain and Northern Ireland","FORMAL_FR":null,"NAME_CIAWF":"United Kingdom","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"United Kingdom","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":6,"MAPCOLOR9":6,"MAPCOLOR13":3,"POP_EST":64769452,"POP_RANK":16,"GDP_MD_EST":2788000,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"1. Developed region: G7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"UK","ISO_A2":"GB","ISO_A3":"GBR","ISO_A3_EH":"GBR","ISO_N3":"826","UN_A3":"826","WB_A2":"GB","WB_A3":"GBR","WOE_ID":-90,"WOE_ID_EH":23424975,"WOE_NOTE":"Eh ID includes Channel Islands and Isle of Man. UK constituent countries of England (24554868), Wales (12578049), Scotland (12578048), and Northern Ireland (20070563).","ADM0_A3_IS":"GBR","ADM0_A3_US":"GBR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":14,"LONG_LEN":14,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-32,286,287,288,-55]],"bbox":[39.955009,41.064445,46.637908,43.553104],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Georgia","SOV_A3":"GEO","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Georgia","ADM0_A3":"GEO","GEOU_DIF":0,"GEOUNIT":"Georgia","GU_A3":"GEO","SU_DIF":0,"SUBUNIT":"Georgia","SU_A3":"GEO","BRK_DIFF":0,"NAME":"Georgia","NAME_LONG":"Georgia","BRK_A3":"GEO","BRK_NAME":"Georgia","BRK_GROUP":null,"ABBREV":"Geo.","POSTAL":"GE","FORMAL_EN":"Georgia","FORMAL_FR":null,"NAME_CIAWF":"Georgia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Georgia","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":2,"POP_EST":4926330,"POP_RANK":12,"GDP_MD_EST":37270,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"GG","ISO_A2":"GE","ISO_A3":"GEO","ISO_A3_EH":"GEO","ISO_N3":"268","UN_A3":"268","WB_A2":"GE","WB_A3":"GEO","WOE_ID":23424823,"WOE_ID_EH":23424823,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GEO","ADM0_A3_US":"GEO","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-74,289,290,-184]],"bbox":[-3.24437,4.710462,1.060122,11.098341],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Ghana","SOV_A3":"GHA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Ghana","ADM0_A3":"GHA","GEOU_DIF":0,"GEOUNIT":"Ghana","GU_A3":"GHA","SU_DIF":0,"SUBUNIT":"Ghana","SU_A3":"GHA","BRK_DIFF":0,"NAME":"Ghana","NAME_LONG":"Ghana","BRK_A3":"GHA","BRK_NAME":"Ghana","BRK_GROUP":null,"ABBREV":"Ghana","POSTAL":"GH","FORMAL_EN":"Republic of Ghana","FORMAL_FR":null,"NAME_CIAWF":"Ghana","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Ghana","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":3,"MAPCOLOR9":1,"MAPCOLOR13":4,"POP_EST":27499924,"POP_RANK":15,"GDP_MD_EST":120800,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"GH","ISO_A2":"GH","ISO_A3":"GHA","ISO_A3_EH":"GHA","ISO_N3":"288","UN_A3":"288","WB_A2":"GH","WB_A3":"GHA","WOE_ID":23424824,"WOE_ID_EH":23424824,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GHA","ADM0_A3_US":"GHA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-187,291,292,293,294,295,296]],"bbox":[-15.130311,7.309037,-7.8321,12.586183],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Guinea","SOV_A3":"GIN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Guinea","ADM0_A3":"GIN","GEOU_DIF":0,"GEOUNIT":"Guinea","GU_A3":"GIN","SU_DIF":0,"SUBUNIT":"Guinea","SU_A3":"GIN","BRK_DIFF":0,"NAME":"Guinea","NAME_LONG":"Guinea","BRK_A3":"GIN","BRK_NAME":"Guinea","BRK_GROUP":null,"ABBREV":"Gin.","POSTAL":"GN","FORMAL_EN":"Republic of Guinea","FORMAL_FR":null,"NAME_CIAWF":"Guinea","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Guinea","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":3,"MAPCOLOR9":7,"MAPCOLOR13":2,"POP_EST":12413867,"POP_RANK":14,"GDP_MD_EST":16080,"POP_YEAR":2017,"LASTCENSUS":1996,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"GV","ISO_A2":"GN","ISO_A3":"GIN","ISO_A3_EH":"GIN","ISO_N3":"324","UN_A3":"324","WB_A2":"GN","WB_A3":"GIN","WOE_ID":23424835,"WOE_ID_EH":23424835,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GIN","ADM0_A3_US":"GIN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[297,298]],"bbox":[-16.841525,13.130284,-13.844963,13.876492],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Gambia","SOV_A3":"GMB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Gambia","ADM0_A3":"GMB","GEOU_DIF":0,"GEOUNIT":"Gambia","GU_A3":"GMB","SU_DIF":0,"SUBUNIT":"Gambia","SU_A3":"GMB","BRK_DIFF":0,"NAME":"Gambia","NAME_LONG":"The Gambia","BRK_A3":"GMB","BRK_NAME":"Gambia","BRK_GROUP":null,"ABBREV":"Gambia","POSTAL":"GM","FORMAL_EN":"Republic of the Gambia","FORMAL_FR":null,"NAME_CIAWF":"Gambia, The","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Gambia, The","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":8,"POP_EST":2051363,"POP_RANK":12,"GDP_MD_EST":3387,"POP_YEAR":2017,"LASTCENSUS":2003,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"GA","ISO_A2":"GM","ISO_A3":"GMB","ISO_A3_EH":"GMB","ISO_N3":"270","UN_A3":"270","WB_A2":"GM","WB_A3":"GMB","WOE_ID":23424821,"WOE_ID_EH":23424821,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GMB","ADM0_A3_US":"GMB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":6,"LONG_LEN":10,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-295,299,300]],"bbox":[-16.677452,11.040412,-13.700476,12.62817],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Guinea-Bissau","SOV_A3":"GNB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Guinea-Bissau","ADM0_A3":"GNB","GEOU_DIF":0,"GEOUNIT":"Guinea-Bissau","GU_A3":"GNB","SU_DIF":0,"SUBUNIT":"Guinea-Bissau","SU_A3":"GNB","BRK_DIFF":0,"NAME":"Guinea-Bissau","NAME_LONG":"Guinea-Bissau","BRK_A3":"GNB","BRK_NAME":"Guinea-Bissau","BRK_GROUP":null,"ABBREV":"GnB.","POSTAL":"GW","FORMAL_EN":"Republic of Guinea-Bissau","FORMAL_FR":null,"NAME_CIAWF":"Guinea-Bissau","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Guinea-Bissau","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":5,"MAPCOLOR9":3,"MAPCOLOR13":4,"POP_EST":1792338,"POP_RANK":12,"GDP_MD_EST":2851,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"PU","ISO_A2":"GW","ISO_A3":"GNB","ISO_A3_EH":"GNB","ISO_N3":"624","UN_A3":"624","WB_A2":"GW","WB_A3":"GNB","WOE_ID":23424929,"WOE_ID_EH":23424929,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GNB","ADM0_A3_US":"GNB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":13,"LONG_LEN":13,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-191,-283,301]],"bbox":[9.305613,1.01012,11.285079,2.283866],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Equatorial Guinea","SOV_A3":"GNQ","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Equatorial Guinea","ADM0_A3":"GNQ","GEOU_DIF":0,"GEOUNIT":"Equatorial Guinea","GU_A3":"GNQ","SU_DIF":0,"SUBUNIT":"Equatorial Guinea","SU_A3":"GNQ","BRK_DIFF":0,"NAME":"Eq. Guinea","NAME_LONG":"Equatorial Guinea","BRK_A3":"GNQ","BRK_NAME":"Eq. Guinea","BRK_GROUP":null,"ABBREV":"Eq. G.","POSTAL":"GQ","FORMAL_EN":"Republic of Equatorial Guinea","FORMAL_FR":null,"NAME_CIAWF":"Equatorial Guinea","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Equatorial Guinea","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":1,"MAPCOLOR9":4,"MAPCOLOR13":8,"POP_EST":778358,"POP_RANK":11,"GDP_MD_EST":31770,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"EK","ISO_A2":"GQ","ISO_A3":"GNQ","ISO_A3_EH":"GNQ","ISO_N3":"226","UN_A3":"226","WB_A2":"GQ","WB_A3":"GNQ","WOE_ID":23424804,"WOE_ID_EH":23424804,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GNQ","ADM0_A3_US":"GNQ","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":10,"LONG_LEN":17,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[-14,302,-84,303,304]],[[305]]],"bbox":[20.150016,34.919988,26.604196,41.826905],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Greece","SOV_A3":"GRC","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Greece","ADM0_A3":"GRC","GEOU_DIF":0,"GEOUNIT":"Greece","GU_A3":"GRC","SU_DIF":0,"SUBUNIT":"Greece","SU_A3":"GRC","BRK_DIFF":0,"NAME":"Greece","NAME_LONG":"Greece","BRK_A3":"GRC","BRK_NAME":"Greece","BRK_GROUP":null,"ABBREV":"Greece","POSTAL":"GR","FORMAL_EN":"Hellenic Republic","FORMAL_FR":null,"NAME_CIAWF":"Greece","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Greece","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":9,"POP_EST":10768477,"POP_RANK":14,"GDP_MD_EST":290500,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"GR","ISO_A2":"GR","ISO_A3":"GRC","ISO_A3_EH":"GRC","ISO_N3":"300","UN_A3":"300","WB_A2":"GR","WB_A3":"GRC","WOE_ID":23424833,"WOE_ID_EH":23424833,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GRC","ADM0_A3_US":"GRC","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[306]],"bbox":[-73.297,60.03676,-12.20855,83.64513],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Denmark","SOV_A3":"DN1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"Greenland","ADM0_A3":"GRL","GEOU_DIF":0,"GEOUNIT":"Greenland","GU_A3":"GRL","SU_DIF":0,"SUBUNIT":"Greenland","SU_A3":"GRL","BRK_DIFF":0,"NAME":"Greenland","NAME_LONG":"Greenland","BRK_A3":"GRL","BRK_NAME":"Greenland","BRK_GROUP":null,"ABBREV":"Grlnd.","POSTAL":"GL","FORMAL_EN":"Greenland","FORMAL_FR":null,"NAME_CIAWF":"Greenland","NOTE_ADM0":"Den.","NOTE_BRK":null,"NAME_SORT":"Greenland","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":12,"POP_EST":57713,"POP_RANK":8,"GDP_MD_EST":2173,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2015,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"GL","ISO_A2":"GL","ISO_A3":"GRL","ISO_A3_EH":"GRL","ISO_N3":"304","UN_A3":"304","WB_A2":"GL","WB_A3":"GRL","WOE_ID":23424828,"WOE_ID_EH":23424828,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GRL","ADM0_A3_US":"GRL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Northern America","REGION_WB":"Europe & Central Asia","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":-99,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-100,307,308,309,310,311]],"bbox":[-92.229249,13.735338,-88.225023,17.819326],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Guatemala","SOV_A3":"GTM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Guatemala","ADM0_A3":"GTM","GEOU_DIF":0,"GEOUNIT":"Guatemala","GU_A3":"GTM","SU_DIF":0,"SUBUNIT":"Guatemala","SU_A3":"GTM","BRK_DIFF":0,"NAME":"Guatemala","NAME_LONG":"Guatemala","BRK_A3":"GTM","BRK_NAME":"Guatemala","BRK_GROUP":null,"ABBREV":"Guat.","POSTAL":"GT","FORMAL_EN":"Republic of Guatemala","FORMAL_FR":null,"NAME_CIAWF":"Guatemala","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Guatemala","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":3,"MAPCOLOR9":3,"MAPCOLOR13":6,"POP_EST":15460732,"POP_RANK":14,"GDP_MD_EST":131800,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"GT","ISO_A2":"GT","ISO_A3":"GTM","ISO_A3_EH":"GTM","ISO_N3":"320","UN_A3":"320","WB_A2":"GT","WB_A3":"GTM","WOE_ID":23424834,"WOE_ID_EH":23424834,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GTM","ADM0_A3_US":"GTM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":5,"TINY":4,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-109,312,313,314]],"bbox":[-61.410303,1.268088,-56.539386,8.367035],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Guyana","SOV_A3":"GUY","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Guyana","ADM0_A3":"GUY","GEOU_DIF":0,"GEOUNIT":"Guyana","GU_A3":"GUY","SU_DIF":0,"SUBUNIT":"Guyana","SU_A3":"GUY","BRK_DIFF":0,"NAME":"Guyana","NAME_LONG":"Guyana","BRK_A3":"GUY","BRK_NAME":"Guyana","BRK_GROUP":null,"ABBREV":"Guy.","POSTAL":"GY","FORMAL_EN":"Co-operative Republic of Guyana","FORMAL_FR":null,"NAME_CIAWF":"Guyana","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Guyana","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":1,"MAPCOLOR9":4,"MAPCOLOR13":8,"POP_EST":737718,"POP_RANK":11,"GDP_MD_EST":6093,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"GY","ISO_A2":"GY","ISO_A3":"GUY","ISO_A3_EH":"GUY","ISO_N3":"328","UN_A3":"328","WB_A2":"GY","WB_A3":"GUY","WOE_ID":23424836,"WOE_ID_EH":23424836,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"GUY","ADM0_A3_US":"GUY","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-309,315,316,317,318]],"bbox":[-89.353326,12.984686,-83.147219,16.005406],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Honduras","SOV_A3":"HND","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Honduras","ADM0_A3":"HND","GEOU_DIF":0,"GEOUNIT":"Honduras","GU_A3":"HND","SU_DIF":0,"SUBUNIT":"Honduras","SU_A3":"HND","BRK_DIFF":0,"NAME":"Honduras","NAME_LONG":"Honduras","BRK_A3":"HND","BRK_NAME":"Honduras","BRK_GROUP":null,"ABBREV":"Hond.","POSTAL":"HN","FORMAL_EN":"Republic of Honduras","FORMAL_FR":null,"NAME_CIAWF":"Honduras","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Honduras","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":5,"MAPCOLOR9":2,"MAPCOLOR13":5,"POP_EST":9038741,"POP_RANK":13,"GDP_MD_EST":43190,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"HO","ISO_A2":"HN","ISO_A3":"HND","ISO_A3_EH":"HND","ISO_N3":"340","UN_A3":"340","WB_A2":"HN","WB_A3":"HND","WOE_ID":23424841,"WOE_ID_EH":23424841,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"HND","ADM0_A3_US":"HND","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4.5,"MAX_LABEL":9.5}},{"type":"Polygon","arcs":[[-91,319,320,321,322,323]],"bbox":[13.656976,42.479991,19.390476,46.503751],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Croatia","SOV_A3":"HRV","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Croatia","ADM0_A3":"HRV","GEOU_DIF":0,"GEOUNIT":"Croatia","GU_A3":"HRV","SU_DIF":0,"SUBUNIT":"Croatia","SU_A3":"HRV","BRK_DIFF":0,"NAME":"Croatia","NAME_LONG":"Croatia","BRK_A3":"HRV","BRK_NAME":"Croatia","BRK_GROUP":null,"ABBREV":"Cro.","POSTAL":"HR","FORMAL_EN":"Republic of Croatia","FORMAL_FR":null,"NAME_CIAWF":"Croatia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Croatia","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":4,"MAPCOLOR9":5,"MAPCOLOR13":1,"POP_EST":4292095,"POP_RANK":12,"GDP_MD_EST":94240,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"HR","ISO_A2":"HR","ISO_A3":"HRV","ISO_A3_EH":"HRV","ISO_N3":"191","UN_A3":"191","WB_A2":"HR","WB_A3":"HRV","WOE_ID":23424843,"WOE_ID_EH":23424843,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"HRV","ADM0_A3_US":"HRV","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-236,324]],"bbox":[-74.458034,18.030993,-71.624873,19.915684],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Haiti","SOV_A3":"HTI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Haiti","ADM0_A3":"HTI","GEOU_DIF":0,"GEOUNIT":"Haiti","GU_A3":"HTI","SU_DIF":0,"SUBUNIT":"Haiti","SU_A3":"HTI","BRK_DIFF":0,"NAME":"Haiti","NAME_LONG":"Haiti","BRK_A3":"HTI","BRK_NAME":"Haiti","BRK_GROUP":null,"ABBREV":"Haiti","POSTAL":"HT","FORMAL_EN":"Republic of Haiti","FORMAL_FR":null,"NAME_CIAWF":"Haiti","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Haiti","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":1,"MAPCOLOR9":7,"MAPCOLOR13":2,"POP_EST":10646714,"POP_RANK":14,"GDP_MD_EST":19340,"POP_YEAR":2017,"LASTCENSUS":2003,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"HA","ISO_A2":"HT","ISO_A3":"HTI","ISO_A3_EH":"HTI","ISO_N3":"332","UN_A3":"332","WB_A2":"HT","WB_A3":"HTI","WOE_ID":23424839,"WOE_ID_EH":23424839,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"HTI","ADM0_A3_US":"HTI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Caribbean","REGION_WB":"Latin America & Caribbean","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-48,325,326,327,328,-323,329]],"bbox":[16.202298,45.759481,22.710531,48.623854],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Hungary","SOV_A3":"HUN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Hungary","ADM0_A3":"HUN","GEOU_DIF":0,"GEOUNIT":"Hungary","GU_A3":"HUN","SU_DIF":0,"SUBUNIT":"Hungary","SU_A3":"HUN","BRK_DIFF":0,"NAME":"Hungary","NAME_LONG":"Hungary","BRK_A3":"HUN","BRK_NAME":"Hungary","BRK_GROUP":null,"ABBREV":"Hun.","POSTAL":"HU","FORMAL_EN":"Republic of Hungary","FORMAL_FR":null,"NAME_CIAWF":"Hungary","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Hungary","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":6,"MAPCOLOR9":1,"MAPCOLOR13":5,"POP_EST":9850845,"POP_RANK":13,"GDP_MD_EST":267600,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"HU","ISO_A2":"HU","ISO_A3":"HUN","ISO_A3_EH":"HUN","ISO_N3":"348","UN_A3":"348","WB_A2":"HU","WB_A3":"HUN","WOE_ID":23424844,"WOE_ID_EH":23424844,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"HUN","ADM0_A3_US":"HUN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[330]],[[331,332]],[[333]],[[334]],[[335]],[[336]],[[337]],[[338]],[[339,340]],[[341]],[[342]],[[343,344]],[[345]]],"bbox":[95.293026,-10.359987,141.033852,5.479821],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Indonesia","SOV_A3":"IDN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Indonesia","ADM0_A3":"IDN","GEOU_DIF":0,"GEOUNIT":"Indonesia","GU_A3":"IDN","SU_DIF":0,"SUBUNIT":"Indonesia","SU_A3":"IDN","BRK_DIFF":0,"NAME":"Indonesia","NAME_LONG":"Indonesia","BRK_A3":"IDN","BRK_NAME":"Indonesia","BRK_GROUP":null,"ABBREV":"Indo.","POSTAL":"INDO","FORMAL_EN":"Republic of Indonesia","FORMAL_FR":null,"NAME_CIAWF":"Indonesia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Indonesia","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":6,"MAPCOLOR9":6,"MAPCOLOR13":11,"POP_EST":260580739,"POP_RANK":17,"GDP_MD_EST":3028000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"4. Emerging region: MIKT","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"ID","ISO_A2":"ID","ISO_A3":"IDN","ISO_A3_EH":"IDN","ISO_N3":"360","UN_A3":"360","WB_A2":"ID","WB_A3":"IDN","WOE_ID":23424846,"WOE_ID_EH":23424846,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"IDN","ADM0_A3_US":"IDN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-80,346,347,-181,348,-179,-116,-178,349]],"bbox":[68.176645,7.965535,97.402561,35.49401],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"India","SOV_A3":"IND","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"India","ADM0_A3":"IND","GEOU_DIF":0,"GEOUNIT":"India","GU_A3":"IND","SU_DIF":0,"SUBUNIT":"India","SU_A3":"IND","BRK_DIFF":0,"NAME":"India","NAME_LONG":"India","BRK_A3":"IND","BRK_NAME":"India","BRK_GROUP":null,"ABBREV":"India","POSTAL":"IND","FORMAL_EN":"Republic of India","FORMAL_FR":null,"NAME_CIAWF":"India","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"India","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":3,"MAPCOLOR9":2,"MAPCOLOR13":2,"POP_EST":1281935911,"POP_RANK":18,"GDP_MD_EST":8721000,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"3. Emerging region: BRIC","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"IN","ISO_A2":"IN","ISO_A3":"IND","ISO_A3_EH":"IND","ISO_N3":"356","UN_A3":"356","WB_A2":"IN","WB_A3":"IND","WOE_ID":23424848,"WOE_ID_EH":23424848,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"IND","ADM0_A3_US":"IND","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"South Asia","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-284,350]],"bbox":[-9.977086,51.669301,-6.032985,55.131622],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Ireland","SOV_A3":"IRL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Ireland","ADM0_A3":"IRL","GEOU_DIF":0,"GEOUNIT":"Ireland","GU_A3":"IRL","SU_DIF":0,"SUBUNIT":"Ireland","SU_A3":"IRL","BRK_DIFF":0,"NAME":"Ireland","NAME_LONG":"Ireland","BRK_A3":"IRL","BRK_NAME":"Ireland","BRK_GROUP":null,"ABBREV":"Ire.","POSTAL":"IRL","FORMAL_EN":"Ireland","FORMAL_FR":null,"NAME_CIAWF":"Ireland","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Ireland","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":3,"MAPCOLOR9":2,"MAPCOLOR13":2,"POP_EST":5011102,"POP_RANK":13,"GDP_MD_EST":322000,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"EI","ISO_A2":"IE","ISO_A3":"IRL","ISO_A3_EH":"IRL","ISO_N3":"372","UN_A3":"372","WB_A2":"IE","WB_A3":"IRL","WOE_ID":23424803,"WOE_ID_EH":23424803,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"IRL","ADM0_A3_US":"IRL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-6,351,352,353,354,-59,-34,-58,355,356]],"bbox":[44.109225,25.078237,63.316632,39.713003],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Iran","SOV_A3":"IRN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Iran","ADM0_A3":"IRN","GEOU_DIF":0,"GEOUNIT":"Iran","GU_A3":"IRN","SU_DIF":0,"SUBUNIT":"Iran","SU_A3":"IRN","BRK_DIFF":0,"NAME":"Iran","NAME_LONG":"Iran","BRK_A3":"IRN","BRK_NAME":"Iran","BRK_GROUP":null,"ABBREV":"Iran","POSTAL":"IRN","FORMAL_EN":"Islamic Republic of Iran","FORMAL_FR":null,"NAME_CIAWF":"Iran","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Iran, Islamic Rep.","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":3,"MAPCOLOR9":4,"MAPCOLOR13":13,"POP_EST":82021564,"POP_RANK":16,"GDP_MD_EST":1459000,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"IR","ISO_A2":"IR","ISO_A3":"IRN","ISO_A3_EH":"IRN","ISO_N3":"364","UN_A3":"364","WB_A2":"IR","WB_A3":"IRN","WOE_ID":23424851,"WOE_ID_EH":23424851,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"IRN","ADM0_A3_US":"IRN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2.5,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-354,357,358,359,360,361,362]],"bbox":[38.792341,29.099025,48.567971,37.385264],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Iraq","SOV_A3":"IRQ","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Iraq","ADM0_A3":"IRQ","GEOU_DIF":0,"GEOUNIT":"Iraq","GU_A3":"IRQ","SU_DIF":0,"SUBUNIT":"Iraq","SU_A3":"IRQ","BRK_DIFF":0,"NAME":"Iraq","NAME_LONG":"Iraq","BRK_A3":"IRQ","BRK_NAME":"Iraq","BRK_GROUP":null,"ABBREV":"Iraq","POSTAL":"IRQ","FORMAL_EN":"Republic of Iraq","FORMAL_FR":null,"NAME_CIAWF":"Iraq","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Iraq","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":3,"MAPCOLOR13":1,"POP_EST":39192111,"POP_RANK":15,"GDP_MD_EST":596700,"POP_YEAR":2017,"LASTCENSUS":1997,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"IZ","ISO_A2":"IQ","ISO_A3":"IRQ","ISO_A3_EH":"IRQ","ISO_N3":"368","UN_A3":"368","WB_A2":"IQ","WB_A3":"IRQ","WOE_ID":23424855,"WOE_ID_EH":23424855,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"IRQ","ADM0_A3_US":"IRQ","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7.5}},{"type":"Polygon","arcs":[[363]],"bbox":[-24.326184,63.496383,-13.609732,66.526792],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Iceland","SOV_A3":"ISL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Iceland","ADM0_A3":"ISL","GEOU_DIF":0,"GEOUNIT":"Iceland","GU_A3":"ISL","SU_DIF":0,"SUBUNIT":"Iceland","SU_A3":"ISL","BRK_DIFF":0,"NAME":"Iceland","NAME_LONG":"Iceland","BRK_A3":"ISL","BRK_NAME":"Iceland","BRK_GROUP":null,"ABBREV":"Iceland","POSTAL":"IS","FORMAL_EN":"Republic of Iceland","FORMAL_FR":null,"NAME_CIAWF":"Iceland","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Iceland","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":4,"MAPCOLOR13":9,"POP_EST":339747,"POP_RANK":10,"GDP_MD_EST":16150,"POP_YEAR":2017,"LASTCENSUS":-99,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"IC","ISO_A2":"IS","ISO_A3":"ISL","ISO_A3_EH":"ISL","ISO_N3":"352","UN_A3":"352","WB_A2":"IS","WB_A3":"ISL","WOE_ID":23424845,"WOE_ID_EH":23424845,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ISL","ADM0_A3_US":"ISL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":7,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-250,364,365,366,367,368,369,370]],"bbox":[34.265433,29.501326,35.836397,33.277426],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Israel","SOV_A3":"IS1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"Israel","ADM0_A3":"ISR","GEOU_DIF":0,"GEOUNIT":"Israel","GU_A3":"ISR","SU_DIF":0,"SUBUNIT":"Israel","SU_A3":"ISR","BRK_DIFF":0,"NAME":"Israel","NAME_LONG":"Israel","BRK_A3":"ISR","BRK_NAME":"Israel","BRK_GROUP":null,"ABBREV":"Isr.","POSTAL":"IS","FORMAL_EN":"State of Israel","FORMAL_FR":null,"NAME_CIAWF":"Israel","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Israel","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":5,"MAPCOLOR13":9,"POP_EST":8299706,"POP_RANK":13,"GDP_MD_EST":297000,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"-99","ISO_A2":"IL","ISO_A3":"ISR","ISO_A3_EH":"ISR","ISO_N3":"376","UN_A3":"376","WB_A2":"IL","WB_A3":"ISR","WOE_ID":23424852,"WOE_ID_EH":23424852,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ISR","ADM0_A3_US":"ISR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[-50,371,372,-276,-161]],[[373]],[[374]]],"bbox":[6.749955,36.619987,18.480247,47.115393],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Italy","SOV_A3":"ITA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Italy","ADM0_A3":"ITA","GEOU_DIF":0,"GEOUNIT":"Italy","GU_A3":"ITA","SU_DIF":0,"SUBUNIT":"Italy","SU_A3":"ITA","BRK_DIFF":0,"NAME":"Italy","NAME_LONG":"Italy","BRK_A3":"ITA","BRK_NAME":"Italy","BRK_GROUP":null,"ABBREV":"Italy","POSTAL":"I","FORMAL_EN":"Italian Republic","FORMAL_FR":null,"NAME_CIAWF":"Italy","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Italy","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":7,"MAPCOLOR9":8,"MAPCOLOR13":7,"POP_EST":62137802,"POP_RANK":16,"GDP_MD_EST":2221000,"POP_YEAR":2017,"LASTCENSUS":2012,"GDP_YEAR":2016,"ECONOMY":"1. Developed region: G7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"IT","ISO_A2":"IT","ISO_A3":"ITA","ISO_A3_EH":"ITA","ISO_N3":"380","UN_A3":"380","WB_A2":"IT","WB_A3":"ITA","WOE_ID":23424853,"WOE_ID_EH":23424853,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ITA","ADM0_A3_US":"ITA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[375]],"bbox":[-78.337719,17.701116,-76.199659,18.524218],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Jamaica","SOV_A3":"JAM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Jamaica","ADM0_A3":"JAM","GEOU_DIF":0,"GEOUNIT":"Jamaica","GU_A3":"JAM","SU_DIF":0,"SUBUNIT":"Jamaica","SU_A3":"JAM","BRK_DIFF":0,"NAME":"Jamaica","NAME_LONG":"Jamaica","BRK_A3":"JAM","BRK_NAME":"Jamaica","BRK_GROUP":null,"ABBREV":"Jam.","POSTAL":"J","FORMAL_EN":"Jamaica","FORMAL_FR":null,"NAME_CIAWF":"Jamaica","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Jamaica","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":2,"MAPCOLOR9":4,"MAPCOLOR13":10,"POP_EST":2990561,"POP_RANK":12,"GDP_MD_EST":25390,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"JM","ISO_A2":"JM","ISO_A3":"JAM","ISO_A3_EH":"JAM","ISO_N3":"388","UN_A3":"388","WB_A2":"JM","WB_A3":"JAM","WOE_ID":23424858,"WOE_ID_EH":23424858,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"JAM","ADM0_A3_US":"JAM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Caribbean","REGION_WB":"Latin America & Caribbean","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-361,376,377,-370,378,-368,379]],"bbox":[34.922603,29.197495,39.195468,33.378686],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Jordan","SOV_A3":"JOR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Jordan","ADM0_A3":"JOR","GEOU_DIF":0,"GEOUNIT":"Jordan","GU_A3":"JOR","SU_DIF":0,"SUBUNIT":"Jordan","SU_A3":"JOR","BRK_DIFF":0,"NAME":"Jordan","NAME_LONG":"Jordan","BRK_A3":"JOR","BRK_NAME":"Jordan","BRK_GROUP":null,"ABBREV":"Jord.","POSTAL":"J","FORMAL_EN":"Hashemite Kingdom of Jordan","FORMAL_FR":null,"NAME_CIAWF":"Jordan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Jordan","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":3,"MAPCOLOR9":4,"MAPCOLOR13":4,"POP_EST":10248069,"POP_RANK":14,"GDP_MD_EST":86190,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"JO","ISO_A2":"JO","ISO_A3":"JOR","ISO_A3_EH":"JOR","ISO_N3":"400","UN_A3":"400","WB_A2":"JO","WB_A3":"JOR","WOE_ID":23424860,"WOE_ID_EH":23424860,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"JOR","ADM0_A3_US":"JOR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[380]],[[381]],[[382]]],"bbox":[129.408463,31.029579,145.543137,45.551483],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Japan","SOV_A3":"JPN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Japan","ADM0_A3":"JPN","GEOU_DIF":0,"GEOUNIT":"Japan","GU_A3":"JPN","SU_DIF":0,"SUBUNIT":"Japan","SU_A3":"JPN","BRK_DIFF":0,"NAME":"Japan","NAME_LONG":"Japan","BRK_A3":"JPN","BRK_NAME":"Japan","BRK_GROUP":null,"ABBREV":"Japan","POSTAL":"J","FORMAL_EN":"Japan","FORMAL_FR":null,"NAME_CIAWF":"Japan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Japan","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":3,"MAPCOLOR9":5,"MAPCOLOR13":4,"POP_EST":126451398,"POP_RANK":17,"GDP_MD_EST":4932000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"1. Developed region: G7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"JA","ISO_A2":"JP","ISO_A3":"JPN","ISO_A3_EH":"JPN","ISO_N3":"392","UN_A3":"392","WB_A2":"JP","WB_A3":"JPN","WOE_ID":23424856,"WOE_ID_EH":23424856,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"JPN","ADM0_A3_US":"JPN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-169,383,384,385,386,387]],"bbox":[46.466446,40.662325,87.35997,55.38525],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Kazakhstan","SOV_A3":"KAZ","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Kazakhstan","ADM0_A3":"KAZ","GEOU_DIF":0,"GEOUNIT":"Kazakhstan","GU_A3":"KAZ","SU_DIF":0,"SUBUNIT":"Kazakhstan","SU_A3":"KAZ","BRK_DIFF":0,"NAME":"Kazakhstan","NAME_LONG":"Kazakhstan","BRK_A3":"KAZ","BRK_NAME":"Kazakhstan","BRK_GROUP":null,"ABBREV":"Kaz.","POSTAL":"KZ","FORMAL_EN":"Republic of Kazakhstan","FORMAL_FR":null,"NAME_CIAWF":"Kazakhstan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Kazakhstan","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":1,"MAPCOLOR9":6,"MAPCOLOR13":1,"POP_EST":18556698,"POP_RANK":14,"GDP_MD_EST":460700,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"KZ","ISO_A2":"KZ","ISO_A3":"KAZ","ISO_A3_EH":"KAZ","ISO_N3":"398","UN_A3":"398","WB_A2":"KZ","WB_A3":"KAZ","WOE_ID":-90,"WOE_ID_EH":23424871,"WOE_NOTE":"Includes Baykonur Cosmodrome as an admin-1","ADM0_A3_IS":"KAZ","ADM0_A3_US":"KAZ","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Central Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-264,388,389,390,391,392]],"bbox":[33.893569,-4.67677,41.855083,5.506],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Kenya","SOV_A3":"KEN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Kenya","ADM0_A3":"KEN","GEOU_DIF":0,"GEOUNIT":"Kenya","GU_A3":"KEN","SU_DIF":0,"SUBUNIT":"Kenya","SU_A3":"KEN","BRK_DIFF":0,"NAME":"Kenya","NAME_LONG":"Kenya","BRK_A3":"KEN","BRK_NAME":"Kenya","BRK_GROUP":null,"ABBREV":"Ken.","POSTAL":"KE","FORMAL_EN":"Republic of Kenya","FORMAL_FR":null,"NAME_CIAWF":"Kenya","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Kenya","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":2,"MAPCOLOR9":7,"MAPCOLOR13":3,"POP_EST":47615739,"POP_RANK":15,"GDP_MD_EST":152700,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"KE","ISO_A2":"KE","ISO_A3":"KEN","ISO_A3_EH":"KEN","ISO_N3":"404","UN_A3":"404","WB_A2":"KE","WB_A3":"KEN","WOE_ID":23424863,"WOE_ID_EH":23424863,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"KEN","ADM0_A3_US":"KEN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-168,393,394,-384]],"bbox":[69.464887,39.279463,80.25999,43.298339],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Kyrgyzstan","SOV_A3":"KGZ","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Kyrgyzstan","ADM0_A3":"KGZ","GEOU_DIF":0,"GEOUNIT":"Kyrgyzstan","GU_A3":"KGZ","SU_DIF":0,"SUBUNIT":"Kyrgyzstan","SU_A3":"KGZ","BRK_DIFF":0,"NAME":"Kyrgyzstan","NAME_LONG":"Kyrgyzstan","BRK_A3":"KGZ","BRK_NAME":"Kyrgyzstan","BRK_GROUP":null,"ABBREV":"Kgz.","POSTAL":"KG","FORMAL_EN":"Kyrgyz Republic","FORMAL_FR":null,"NAME_CIAWF":"Kyrgyzstan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Kyrgyz Republic","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":7,"MAPCOLOR9":7,"MAPCOLOR13":6,"POP_EST":5789122,"POP_RANK":13,"GDP_MD_EST":21010,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"KG","ISO_A2":"KG","ISO_A3":"KGZ","ISO_A3_EH":"KGZ","ISO_N3":"417","UN_A3":"417","WB_A2":"KG","WB_A3":"KGZ","WOE_ID":23424864,"WOE_ID_EH":23424864,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"KGZ","ADM0_A3_US":"KGZ","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Central Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[395,396,397,398]],"bbox":[102.348099,10.486544,107.614548,14.570584],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Cambodia","SOV_A3":"KHM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Cambodia","ADM0_A3":"KHM","GEOU_DIF":0,"GEOUNIT":"Cambodia","GU_A3":"KHM","SU_DIF":0,"SUBUNIT":"Cambodia","SU_A3":"KHM","BRK_DIFF":0,"NAME":"Cambodia","NAME_LONG":"Cambodia","BRK_A3":"KHM","BRK_NAME":"Cambodia","BRK_GROUP":null,"ABBREV":"Camb.","POSTAL":"KH","FORMAL_EN":"Kingdom of Cambodia","FORMAL_FR":null,"NAME_CIAWF":"Cambodia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Cambodia","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":3,"MAPCOLOR9":6,"MAPCOLOR13":5,"POP_EST":16204486,"POP_RANK":14,"GDP_MD_EST":58940,"POP_YEAR":2017,"LASTCENSUS":2008,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"CB","ISO_A2":"KH","ISO_A3":"KHM","ISO_A3_EH":"KHM","ISO_N3":"116","UN_A3":"116","WB_A2":"KH","WB_A3":"KHM","WOE_ID":23424776,"WOE_ID_EH":23424776,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"KHM","ADM0_A3_US":"KHM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[399,400]],"bbox":[126.117398,34.390046,129.468304,38.612243],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"South Korea","SOV_A3":"KOR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"South Korea","ADM0_A3":"KOR","GEOU_DIF":0,"GEOUNIT":"South Korea","GU_A3":"KOR","SU_DIF":0,"SUBUNIT":"South Korea","SU_A3":"KOR","BRK_DIFF":0,"NAME":"South Korea","NAME_LONG":"Republic of Korea","BRK_A3":"KOR","BRK_NAME":"Republic of Korea","BRK_GROUP":null,"ABBREV":"S.K.","POSTAL":"KR","FORMAL_EN":"Republic of Korea","FORMAL_FR":null,"NAME_CIAWF":"Korea, South","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Korea, Rep.","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":1,"MAPCOLOR9":1,"MAPCOLOR13":5,"POP_EST":51181299,"POP_RANK":16,"GDP_MD_EST":1929000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"4. Emerging region: MIKT","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"KS","ISO_A2":"KR","ISO_A3":"KOR","ISO_A3_EH":"KOR","ISO_N3":"410","UN_A3":"410","WB_A2":"KR","WB_A3":"KOR","WOE_ID":23424868,"WOE_ID_EH":23424868,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"KOR","ADM0_A3_US":"KOR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":11,"LONG_LEN":17,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-17,401,402,403]],"bbox":[20.0707,41.84711,21.77505,43.27205],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Kosovo","SOV_A3":"KOS","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Kosovo","ADM0_A3":"KOS","GEOU_DIF":0,"GEOUNIT":"Kosovo","GU_A3":"KOS","SU_DIF":0,"SUBUNIT":"Kosovo","SU_A3":"KOS","BRK_DIFF":0,"NAME":"Kosovo","NAME_LONG":"Kosovo","BRK_A3":"KOS","BRK_NAME":"Kosovo","BRK_GROUP":null,"ABBREV":"Kos.","POSTAL":"KO","FORMAL_EN":"Republic of Kosovo","FORMAL_FR":null,"NAME_CIAWF":"Kosovo","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Kosovo","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":3,"MAPCOLOR13":11,"POP_EST":1895250,"POP_RANK":12,"GDP_MD_EST":18490,"POP_YEAR":2017,"LASTCENSUS":1981,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"KV","ISO_A2":"XK","ISO_A3":"-99","ISO_A3_EH":"-99","ISO_N3":"-99","UN_A3":"-099","WB_A2":"KV","WB_A3":"KSV","WOE_ID":-90,"WOE_ID_EH":29389201,"WOE_NOTE":"Subunit of Serbia in WOE still; should include 29389201, 29389207, 29389218, 29389209 and 29389214.","ADM0_A3_IS":"KOS","ADM0_A3_US":"KOS","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-359,404,405]],"bbox":[46.568713,28.526063,48.416094,30.05907],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Kuwait","SOV_A3":"KWT","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Kuwait","ADM0_A3":"KWT","GEOU_DIF":0,"GEOUNIT":"Kuwait","GU_A3":"KWT","SU_DIF":0,"SUBUNIT":"Kuwait","SU_A3":"KWT","BRK_DIFF":0,"NAME":"Kuwait","NAME_LONG":"Kuwait","BRK_A3":"KWT","BRK_NAME":"Kuwait","BRK_GROUP":null,"ABBREV":"Kwt.","POSTAL":"KW","FORMAL_EN":"State of Kuwait","FORMAL_FR":null,"NAME_CIAWF":"Kuwait","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Kuwait","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":2,"POP_EST":2875422,"POP_RANK":12,"GDP_MD_EST":301100,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"KU","ISO_A2":"KW","ISO_A3":"KWT","ISO_A3_EH":"KWT","ISO_N3":"414","UN_A3":"414","WB_A2":"KW","WB_A3":"KWT","WOE_ID":23424870,"WOE_ID_EH":23424870,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"KWT","ADM0_A3_US":"KWT","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-176,406,-397,407,408]],"bbox":[100.115988,13.881091,107.564525,22.464753],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Laos","SOV_A3":"LAO","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Laos","ADM0_A3":"LAO","GEOU_DIF":0,"GEOUNIT":"Laos","GU_A3":"LAO","SU_DIF":0,"SUBUNIT":"Laos","SU_A3":"LAO","BRK_DIFF":0,"NAME":"Laos","NAME_LONG":"Lao PDR","BRK_A3":"LAO","BRK_NAME":"Laos","BRK_GROUP":null,"ABBREV":"Laos","POSTAL":"LA","FORMAL_EN":"Lao People's Democratic Republic","FORMAL_FR":null,"NAME_CIAWF":"Laos","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Lao PDR","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":1,"MAPCOLOR9":1,"MAPCOLOR13":9,"POP_EST":7126706,"POP_RANK":13,"GDP_MD_EST":40960,"POP_YEAR":2017,"LASTCENSUS":2005,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"LA","ISO_A2":"LA","ISO_A3":"LAO","ISO_A3_EH":"LAO","ISO_N3":"418","UN_A3":"418","WB_A2":"LA","WB_A3":"LAO","WOE_ID":23424872,"WOE_ID_EH":23424872,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LAO","ADM0_A3_US":"LAO","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":4,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-366,409,410]],"bbox":[35.126053,33.08904,36.61175,34.644914],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Lebanon","SOV_A3":"LBN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Lebanon","ADM0_A3":"LBN","GEOU_DIF":0,"GEOUNIT":"Lebanon","GU_A3":"LBN","SU_DIF":0,"SUBUNIT":"Lebanon","SU_A3":"LBN","BRK_DIFF":0,"NAME":"Lebanon","NAME_LONG":"Lebanon","BRK_A3":"LBN","BRK_NAME":"Lebanon","BRK_GROUP":null,"ABBREV":"Leb.","POSTAL":"LB","FORMAL_EN":"Lebanese Republic","FORMAL_FR":null,"NAME_CIAWF":"Lebanon","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Lebanon","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":4,"MAPCOLOR9":4,"MAPCOLOR13":12,"POP_EST":6229794,"POP_RANK":13,"GDP_MD_EST":85160,"POP_YEAR":2017,"LASTCENSUS":1970,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"LE","ISO_A2":"LB","ISO_A3":"LBN","ISO_A3_EH":"LBN","ISO_N3":"422","UN_A3":"422","WB_A2":"LB","WB_A3":"LBN","WOE_ID":23424873,"WOE_ID_EH":23424873,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LBN","ADM0_A3_US":"LBN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":4,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-186,411,412,-292]],"bbox":[-11.438779,4.355755,-7.539715,8.541055],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Liberia","SOV_A3":"LBR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Liberia","ADM0_A3":"LBR","GEOU_DIF":0,"GEOUNIT":"Liberia","GU_A3":"LBR","SU_DIF":0,"SUBUNIT":"Liberia","SU_A3":"LBR","BRK_DIFF":0,"NAME":"Liberia","NAME_LONG":"Liberia","BRK_A3":"LBR","BRK_NAME":"Liberia","BRK_GROUP":null,"ABBREV":"Liberia","POSTAL":"LR","FORMAL_EN":"Republic of Liberia","FORMAL_FR":null,"NAME_CIAWF":"Liberia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Liberia","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":3,"MAPCOLOR9":4,"MAPCOLOR13":9,"POP_EST":4689021,"POP_RANK":12,"GDP_MD_EST":3881,"POP_YEAR":2017,"LASTCENSUS":2008,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"LI","ISO_A2":"LR","ISO_A3":"LBR","ISO_A3_EH":"LBR","ISO_N3":"430","UN_A3":"430","WB_A2":"LR","WB_A3":"LBR","WOE_ID":23424876,"WOE_ID_EH":23424876,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LBR","ADM0_A3_US":"LBR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":7,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-243,413,414,-248,415,416,417]],"bbox":[9.319411,19.58047,25.16482,33.136996],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Libya","SOV_A3":"LBY","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Libya","ADM0_A3":"LBY","GEOU_DIF":0,"GEOUNIT":"Libya","GU_A3":"LBY","SU_DIF":0,"SUBUNIT":"Libya","SU_A3":"LBY","BRK_DIFF":0,"NAME":"Libya","NAME_LONG":"Libya","BRK_A3":"LBY","BRK_NAME":"Libya","BRK_GROUP":null,"ABBREV":"Libya","POSTAL":"LY","FORMAL_EN":"Libya","FORMAL_FR":null,"NAME_CIAWF":"Libya","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Libya","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":11,"POP_EST":6653210,"POP_RANK":13,"GDP_MD_EST":90890,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"LY","ISO_A2":"LY","ISO_A3":"LBY","ISO_A3_EH":"LBY","ISO_N3":"434","UN_A3":"434","WB_A2":"LY","WB_A3":"LBY","WOE_ID":23424882,"WOE_ID_EH":23424882,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LBY","ADM0_A3_US":"LBY","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Northern Africa","REGION_WB":"Middle East & North Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[418]],"bbox":[79.695167,5.96837,81.787959,9.824078],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Sri Lanka","SOV_A3":"LKA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Sri Lanka","ADM0_A3":"LKA","GEOU_DIF":0,"GEOUNIT":"Sri Lanka","GU_A3":"LKA","SU_DIF":0,"SUBUNIT":"Sri Lanka","SU_A3":"LKA","BRK_DIFF":0,"NAME":"Sri Lanka","NAME_LONG":"Sri Lanka","BRK_A3":"LKA","BRK_NAME":"Sri Lanka","BRK_GROUP":null,"ABBREV":"Sri L.","POSTAL":"LK","FORMAL_EN":"Democratic Socialist Republic of Sri Lanka","FORMAL_FR":null,"NAME_CIAWF":"Sri Lanka","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Sri Lanka","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":5,"MAPCOLOR9":4,"MAPCOLOR13":9,"POP_EST":22409381,"POP_RANK":15,"GDP_MD_EST":236700,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"CE","ISO_A2":"LK","ISO_A3":"LKA","ISO_A3_EH":"LKA","ISO_N3":"144","UN_A3":"144","WB_A2":"LK","WB_A3":"LKA","WOE_ID":23424778,"WOE_ID_EH":23424778,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LKA","ADM0_A3_US":"LKA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"South Asia","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[419]],"bbox":[26.999262,-30.645106,29.325166,-28.647502],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Lesotho","SOV_A3":"LSO","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Lesotho","ADM0_A3":"LSO","GEOU_DIF":0,"GEOUNIT":"Lesotho","GU_A3":"LSO","SU_DIF":0,"SUBUNIT":"Lesotho","SU_A3":"LSO","BRK_DIFF":0,"NAME":"Lesotho","NAME_LONG":"Lesotho","BRK_A3":"LSO","BRK_NAME":"Lesotho","BRK_GROUP":null,"ABBREV":"Les.","POSTAL":"LS","FORMAL_EN":"Kingdom of Lesotho","FORMAL_FR":null,"NAME_CIAWF":"Lesotho","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Lesotho","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":5,"MAPCOLOR9":2,"MAPCOLOR13":8,"POP_EST":1958042,"POP_RANK":12,"GDP_MD_EST":6019,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"LT","ISO_A2":"LS","ISO_A3":"LSO","ISO_A3_EH":"LSO","ISO_N3":"426","UN_A3":"426","WB_A2":"LS","WB_A3":"LSO","WOE_ID":23424880,"WOE_ID_EH":23424880,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LSO","ADM0_A3_US":"LSO","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Southern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-93,420,421,422,423]],"bbox":[21.0558,53.905702,26.588279,56.372528],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Lithuania","SOV_A3":"LTU","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Lithuania","ADM0_A3":"LTU","GEOU_DIF":0,"GEOUNIT":"Lithuania","GU_A3":"LTU","SU_DIF":0,"SUBUNIT":"Lithuania","SU_A3":"LTU","BRK_DIFF":0,"NAME":"Lithuania","NAME_LONG":"Lithuania","BRK_A3":"LTU","BRK_NAME":"Lithuania","BRK_GROUP":null,"ABBREV":"Lith.","POSTAL":"LT","FORMAL_EN":"Republic of Lithuania","FORMAL_FR":null,"NAME_CIAWF":"Lithuania","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Lithuania","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":3,"MAPCOLOR9":3,"MAPCOLOR13":9,"POP_EST":2823859,"POP_RANK":12,"GDP_MD_EST":85620,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"LH","ISO_A2":"LT","ISO_A3":"LTU","ISO_A3_EH":"LTU","ISO_N3":"440","UN_A3":"440","WB_A2":"LT","WB_A3":"LTU","WOE_ID":23424875,"WOE_ID_EH":23424875,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LTU","ADM0_A3_US":"LTU","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-64,-223,-275]],"bbox":[5.674052,49.442667,6.242751,50.128052],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Luxembourg","SOV_A3":"LUX","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Luxembourg","ADM0_A3":"LUX","GEOU_DIF":0,"GEOUNIT":"Luxembourg","GU_A3":"LUX","SU_DIF":0,"SUBUNIT":"Luxembourg","SU_A3":"LUX","BRK_DIFF":0,"NAME":"Luxembourg","NAME_LONG":"Luxembourg","BRK_A3":"LUX","BRK_NAME":"Luxembourg","BRK_GROUP":null,"ABBREV":"Lux.","POSTAL":"L","FORMAL_EN":"Grand Duchy of Luxembourg","FORMAL_FR":null,"NAME_CIAWF":"Luxembourg","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Luxembourg","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":7,"MAPCOLOR9":3,"MAPCOLOR13":7,"POP_EST":594130,"POP_RANK":11,"GDP_MD_EST":58740,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"LU","ISO_A2":"LU","ISO_A3":"LUX","ISO_A3_EH":"LUX","ISO_N3":"442","UN_A3":"442","WB_A2":"LU","WB_A3":"LUX","WOE_ID":23424881,"WOE_ID_EH":23424881,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LUX","ADM0_A3_US":"LUX","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Western Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":5,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5.7,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-94,-424,424,-261,425]],"bbox":[21.0558,55.615107,28.176709,57.970157],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Latvia","SOV_A3":"LVA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Latvia","ADM0_A3":"LVA","GEOU_DIF":0,"GEOUNIT":"Latvia","GU_A3":"LVA","SU_DIF":0,"SUBUNIT":"Latvia","SU_A3":"LVA","BRK_DIFF":0,"NAME":"Latvia","NAME_LONG":"Latvia","BRK_A3":"LVA","BRK_NAME":"Latvia","BRK_GROUP":null,"ABBREV":"Lat.","POSTAL":"LV","FORMAL_EN":"Republic of Latvia","FORMAL_FR":null,"NAME_CIAWF":"Latvia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Latvia","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":7,"MAPCOLOR9":6,"MAPCOLOR13":13,"POP_EST":1944643,"POP_RANK":12,"GDP_MD_EST":50650,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"LG","ISO_A2":"LV","ISO_A3":"LVA","ISO_A3_EH":"LVA","ISO_N3":"428","UN_A3":"428","WB_A2":"LV","WB_A3":"LVA","WOE_ID":23424874,"WOE_ID_EH":23424874,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"LVA","ADM0_A3_US":"LVA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-240,426,427]],"bbox":[-17.020428,21.420734,-1.124551,35.759988],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Morocco","SOV_A3":"MAR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Morocco","ADM0_A3":"MAR","GEOU_DIF":0,"GEOUNIT":"Morocco","GU_A3":"MAR","SU_DIF":0,"SUBUNIT":"Morocco","SU_A3":"MAR","BRK_DIFF":0,"NAME":"Morocco","NAME_LONG":"Morocco","BRK_A3":"MAR","BRK_NAME":"Morocco","BRK_GROUP":null,"ABBREV":"Mor.","POSTAL":"MA","FORMAL_EN":"Kingdom of Morocco","FORMAL_FR":null,"NAME_CIAWF":"Morocco","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Morocco","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":3,"MAPCOLOR13":9,"POP_EST":33986655,"POP_RANK":15,"GDP_MD_EST":282800,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"MO","ISO_A2":"MA","ISO_A3":"MAR","ISO_A3_EH":"MAR","ISO_N3":"504","UN_A3":"504","WB_A2":"MA","WB_A3":"MAR","WOE_ID":23424893,"WOE_ID_EH":23424893,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MAR","ADM0_A3_US":"MAR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Northern Africa","REGION_WB":"Middle East & North Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[428,429]],"bbox":[26.619337,45.488283,30.024659,48.467119],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Moldova","SOV_A3":"MDA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Moldova","ADM0_A3":"MDA","GEOU_DIF":0,"GEOUNIT":"Moldova","GU_A3":"MDA","SU_DIF":0,"SUBUNIT":"Moldova","SU_A3":"MDA","BRK_DIFF":0,"NAME":"Moldova","NAME_LONG":"Moldova","BRK_A3":"MDA","BRK_NAME":"Moldova","BRK_GROUP":null,"ABBREV":"Mda.","POSTAL":"MD","FORMAL_EN":"Republic of Moldova","FORMAL_FR":null,"NAME_CIAWF":"Moldova","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Moldova","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":5,"MAPCOLOR9":4,"MAPCOLOR13":12,"POP_EST":3474121,"POP_RANK":12,"GDP_MD_EST":18540,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"MD","ISO_A2":"MD","ISO_A3":"MDA","ISO_A3_EH":"MDA","ISO_N3":"498","UN_A3":"498","WB_A2":"MD","WB_A3":"MDA","WOE_ID":23424885,"WOE_ID_EH":23424885,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MDA","ADM0_A3_US":"MDA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[430]],"bbox":[43.254187,-25.601434,50.476537,-12.040557],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Madagascar","SOV_A3":"MDG","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Madagascar","ADM0_A3":"MDG","GEOU_DIF":0,"GEOUNIT":"Madagascar","GU_A3":"MDG","SU_DIF":0,"SUBUNIT":"Madagascar","SU_A3":"MDG","BRK_DIFF":0,"NAME":"Madagascar","NAME_LONG":"Madagascar","BRK_A3":"MDG","BRK_NAME":"Madagascar","BRK_GROUP":null,"ABBREV":"Mad.","POSTAL":"MG","FORMAL_EN":"Republic of Madagascar","FORMAL_FR":null,"NAME_CIAWF":"Madagascar","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Madagascar","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":5,"MAPCOLOR9":2,"MAPCOLOR13":3,"POP_EST":25054161,"POP_RANK":15,"GDP_MD_EST":36860,"POP_YEAR":2017,"LASTCENSUS":1993,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"MA","ISO_A2":"MG","ISO_A3":"MDG","ISO_A3_EH":"MDG","ISO_N3":"450","UN_A3":"450","WB_A2":"MG","WB_A3":"MDG","WOE_ID":23424883,"WOE_ID_EH":23424883,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MDG","ADM0_A3_US":"MDG","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-98,-312,431,432,433]],"bbox":[-117.12776,14.538829,-86.811982,32.72083],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Mexico","SOV_A3":"MEX","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Mexico","ADM0_A3":"MEX","GEOU_DIF":0,"GEOUNIT":"Mexico","GU_A3":"MEX","SU_DIF":0,"SUBUNIT":"Mexico","SU_A3":"MEX","BRK_DIFF":0,"NAME":"Mexico","NAME_LONG":"Mexico","BRK_A3":"MEX","BRK_NAME":"Mexico","BRK_GROUP":null,"ABBREV":"Mex.","POSTAL":"MX","FORMAL_EN":"United Mexican States","FORMAL_FR":null,"NAME_CIAWF":"Mexico","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Mexico","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":1,"MAPCOLOR9":7,"MAPCOLOR13":3,"POP_EST":124574795,"POP_RANK":17,"GDP_MD_EST":2307000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"4. Emerging region: MIKT","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"MX","ISO_A2":"MX","ISO_A3":"MEX","ISO_A3_EH":"MEX","ISO_N3":"484","UN_A3":"484","WB_A2":"MX","WB_A3":"MEX","WOE_ID":23424900,"WOE_ID_EH":23424900,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MEX","ADM0_A3_US":"MEX","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-18,-404,434,-85,-303]],"bbox":[20.463175,40.842727,22.952377,42.32026],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Macedonia","SOV_A3":"MKD","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Macedonia","ADM0_A3":"MKD","GEOU_DIF":0,"GEOUNIT":"Macedonia","GU_A3":"MKD","SU_DIF":0,"SUBUNIT":"Macedonia","SU_A3":"MKD","BRK_DIFF":0,"NAME":"Macedonia","NAME_LONG":"Macedonia","BRK_A3":"MKD","BRK_NAME":"Macedonia","BRK_GROUP":null,"ABBREV":"Mkd.","POSTAL":"MK","FORMAL_EN":"Former Yugoslav Republic of Macedonia","FORMAL_FR":null,"NAME_CIAWF":"Macedonia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Macedonia, FYR","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":3,"MAPCOLOR9":7,"MAPCOLOR13":3,"POP_EST":2103721,"POP_RANK":12,"GDP_MD_EST":29520,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"MK","ISO_A2":"MK","ISO_A3":"MKD","ISO_A3_EH":"MKD","ISO_N3":"807","UN_A3":"807","WB_A2":"MK","WB_A3":"MKD","WOE_ID":23424890,"WOE_ID_EH":23424890,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MKD","ADM0_A3_US":"MKD","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-76,-188,-297,435,436,-237,437]],"bbox":[-12.17075,10.096361,4.27021,24.974574],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Mali","SOV_A3":"MLI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Mali","ADM0_A3":"MLI","GEOU_DIF":0,"GEOUNIT":"Mali","GU_A3":"MLI","SU_DIF":0,"SUBUNIT":"Mali","SU_A3":"MLI","BRK_DIFF":0,"NAME":"Mali","NAME_LONG":"Mali","BRK_A3":"MLI","BRK_NAME":"Mali","BRK_GROUP":null,"ABBREV":"Mali","POSTAL":"ML","FORMAL_EN":"Republic of Mali","FORMAL_FR":null,"NAME_CIAWF":"Mali","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Mali","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":7,"POP_EST":17885245,"POP_RANK":14,"GDP_MD_EST":38090,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"ML","ISO_A2":"ML","ISO_A3":"MLI","ISO_A3_EH":"MLI","ISO_N3":"466","UN_A3":"466","WB_A2":"ML","WB_A3":"MLI","WOE_ID":23424891,"WOE_ID_EH":23424891,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MLI","ADM0_A3_US":"MLI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-78,-350,-177,-409,438,439]],"bbox":[92.303234,9.93296,101.180005,28.335945],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Myanmar","SOV_A3":"MMR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Myanmar","ADM0_A3":"MMR","GEOU_DIF":0,"GEOUNIT":"Myanmar","GU_A3":"MMR","SU_DIF":0,"SUBUNIT":"Myanmar","SU_A3":"MMR","BRK_DIFF":0,"NAME":"Myanmar","NAME_LONG":"Myanmar","BRK_A3":"MMR","BRK_NAME":"Myanmar","BRK_GROUP":null,"ABBREV":"Myan.","POSTAL":"MM","FORMAL_EN":"Republic of the Union of Myanmar","FORMAL_FR":null,"NAME_CIAWF":"Burma","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Myanmar","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":5,"MAPCOLOR13":13,"POP_EST":55123814,"POP_RANK":16,"GDP_MD_EST":311100,"POP_YEAR":2017,"LASTCENSUS":1983,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"BM","ISO_A2":"MM","ISO_A3":"MMR","ISO_A3_EH":"MMR","ISO_N3":"104","UN_A3":"104","WB_A2":"MM","WB_A3":"MMR","WOE_ID":23424763,"WOE_ID_EH":23424763,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MMR","ADM0_A3_US":"MMR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-16,440,-320,-90,441,-402]],"bbox":[18.450017,41.877551,20.3398,43.52384],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Montenegro","SOV_A3":"MNE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Montenegro","ADM0_A3":"MNE","GEOU_DIF":0,"GEOUNIT":"Montenegro","GU_A3":"MNE","SU_DIF":0,"SUBUNIT":"Montenegro","SU_A3":"MNE","BRK_DIFF":0,"NAME":"Montenegro","NAME_LONG":"Montenegro","BRK_A3":"MNE","BRK_NAME":"Montenegro","BRK_GROUP":null,"ABBREV":"Mont.","POSTAL":"ME","FORMAL_EN":"Montenegro","FORMAL_FR":null,"NAME_CIAWF":"Montenegro","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Montenegro","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":1,"MAPCOLOR9":4,"MAPCOLOR13":5,"POP_EST":642550,"POP_RANK":11,"GDP_MD_EST":10610,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"MJ","ISO_A2":"ME","ISO_A3":"MNE","ISO_A3_EH":"MNE","ISO_N3":"499","UN_A3":"499","WB_A2":"ME","WB_A3":"MNE","WOE_ID":20069817,"WOE_ID_EH":20069817,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MNE","ADM0_A3_US":"MNE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-171,442]],"bbox":[87.751264,41.59741,119.772824,52.047366],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Mongolia","SOV_A3":"MNG","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Mongolia","ADM0_A3":"MNG","GEOU_DIF":0,"GEOUNIT":"Mongolia","GU_A3":"MNG","SU_DIF":0,"SUBUNIT":"Mongolia","SU_A3":"MNG","BRK_DIFF":0,"NAME":"Mongolia","NAME_LONG":"Mongolia","BRK_A3":"MNG","BRK_NAME":"Mongolia","BRK_GROUP":null,"ABBREV":"Mong.","POSTAL":"MN","FORMAL_EN":"Mongolia","FORMAL_FR":null,"NAME_CIAWF":"Mongolia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Mongolia","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":5,"MAPCOLOR9":5,"MAPCOLOR13":6,"POP_EST":3068243,"POP_RANK":12,"GDP_MD_EST":37000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"MG","ISO_A2":"MN","ISO_A3":"MNG","ISO_A3_EH":"MNG","ISO_N3":"496","UN_A3":"496","WB_A2":"MN","WB_A3":"MNG","WOE_ID":23424887,"WOE_ID_EH":23424887,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MNG","ADM0_A3_US":"MNG","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[443,444,445,446,447,448,449,450]],"bbox":[30.179481,-26.742192,40.775475,-10.317096],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Mozambique","SOV_A3":"MOZ","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Mozambique","ADM0_A3":"MOZ","GEOU_DIF":0,"GEOUNIT":"Mozambique","GU_A3":"MOZ","SU_DIF":0,"SUBUNIT":"Mozambique","SU_A3":"MOZ","BRK_DIFF":0,"NAME":"Mozambique","NAME_LONG":"Mozambique","BRK_A3":"MOZ","BRK_NAME":"Mozambique","BRK_GROUP":null,"ABBREV":"Moz.","POSTAL":"MZ","FORMAL_EN":"Republic of Mozambique","FORMAL_FR":null,"NAME_CIAWF":"Mozambique","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Mozambique","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":2,"MAPCOLOR9":1,"MAPCOLOR13":4,"POP_EST":26573706,"POP_RANK":15,"GDP_MD_EST":35010,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"MZ","ISO_A2":"MZ","ISO_A3":"MOZ","ISO_A3_EH":"MOZ","ISO_N3":"508","UN_A3":"508","WB_A2":"MZ","WB_A3":"MOZ","WOE_ID":23424902,"WOE_ID_EH":23424902,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MOZ","ADM0_A3_US":"MOZ","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-238,-437,451,452,453]],"bbox":[-17.063423,14.616834,-4.923337,27.395744],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Mauritania","SOV_A3":"MRT","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Mauritania","ADM0_A3":"MRT","GEOU_DIF":0,"GEOUNIT":"Mauritania","GU_A3":"MRT","SU_DIF":0,"SUBUNIT":"Mauritania","SU_A3":"MRT","BRK_DIFF":0,"NAME":"Mauritania","NAME_LONG":"Mauritania","BRK_A3":"MRT","BRK_NAME":"Mauritania","BRK_GROUP":null,"ABBREV":"Mrt.","POSTAL":"MR","FORMAL_EN":"Islamic Republic of Mauritania","FORMAL_FR":null,"NAME_CIAWF":"Mauritania","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Mauritania","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":3,"MAPCOLOR9":2,"MAPCOLOR13":1,"POP_EST":3758571,"POP_RANK":12,"GDP_MD_EST":16710,"POP_YEAR":2017,"LASTCENSUS":2000,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"MR","ISO_A2":"MR","ISO_A3":"MRT","ISO_A3_EH":"MRT","ISO_N3":"478","UN_A3":"478","WB_A2":"MR","WB_A3":"MRT","WOE_ID":23424896,"WOE_ID_EH":23424896,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MRT","ADM0_A3_US":"MRT","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-451,454,455]],"bbox":[32.688165,-16.8013,35.771905,-9.230599],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Malawi","SOV_A3":"MWI","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Malawi","ADM0_A3":"MWI","GEOU_DIF":0,"GEOUNIT":"Malawi","GU_A3":"MWI","SU_DIF":0,"SUBUNIT":"Malawi","SU_A3":"MWI","BRK_DIFF":0,"NAME":"Malawi","NAME_LONG":"Malawi","BRK_A3":"MWI","BRK_NAME":"Malawi","BRK_GROUP":null,"ABBREV":"Mal.","POSTAL":"MW","FORMAL_EN":"Republic of Malawi","FORMAL_FR":null,"NAME_CIAWF":"Malawi","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Malawi","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":3,"MAPCOLOR9":4,"MAPCOLOR13":5,"POP_EST":19196246,"POP_RANK":14,"GDP_MD_EST":21200,"POP_YEAR":2017,"LASTCENSUS":2008,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"MI","ISO_A2":"MW","ISO_A3":"MWI","ISO_A3_EH":"MWI","ISO_N3":"454","UN_A3":"454","WB_A2":"MW","WB_A3":"MWI","WOE_ID":23424889,"WOE_ID_EH":23424889,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MWI","ADM0_A3_US":"MWI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"MultiPolygon","arcs":[[[-115,456,-344,457]],[[458,459]]],"bbox":[100.085757,0.773131,119.181904,6.928053],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Malaysia","SOV_A3":"MYS","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Malaysia","ADM0_A3":"MYS","GEOU_DIF":0,"GEOUNIT":"Malaysia","GU_A3":"MYS","SU_DIF":0,"SUBUNIT":"Malaysia","SU_A3":"MYS","BRK_DIFF":0,"NAME":"Malaysia","NAME_LONG":"Malaysia","BRK_A3":"MYS","BRK_NAME":"Malaysia","BRK_GROUP":null,"ABBREV":"Malay.","POSTAL":"MY","FORMAL_EN":"Malaysia","FORMAL_FR":null,"NAME_CIAWF":"Malaysia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Malaysia","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":4,"MAPCOLOR9":3,"MAPCOLOR13":6,"POP_EST":31381992,"POP_RANK":15,"GDP_MD_EST":863000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"MY","ISO_A2":"MY","ISO_A3":"MYS","ISO_A3_EH":"MYS","ISO_N3":"458","UN_A3":"458","WB_A2":"MY","WB_A3":"MYS","WOE_ID":23424901,"WOE_ID_EH":23424901,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MYS","ADM0_A3_US":"MYS","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-7,460,-119,461,462]],"bbox":[11.734199,-29.045462,25.084443,-16.941343],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Namibia","SOV_A3":"NAM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Namibia","ADM0_A3":"NAM","GEOU_DIF":0,"GEOUNIT":"Namibia","GU_A3":"NAM","SU_DIF":0,"SUBUNIT":"Namibia","SU_A3":"NAM","BRK_DIFF":0,"NAME":"Namibia","NAME_LONG":"Namibia","BRK_A3":"NAM","BRK_NAME":"Namibia","BRK_GROUP":null,"ABBREV":"Nam.","POSTAL":"NA","FORMAL_EN":"Republic of Namibia","FORMAL_FR":null,"NAME_CIAWF":"Namibia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Namibia","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":1,"MAPCOLOR9":1,"MAPCOLOR13":7,"POP_EST":2484780,"POP_RANK":12,"GDP_MD_EST":25990,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"WA","ISO_A2":"NA","ISO_A3":"NAM","ISO_A3_EH":"NAM","ISO_N3":"516","UN_A3":"516","WB_A2":"NA","WB_A3":"NAM","WOE_ID":23424987,"WOE_ID_EH":23424987,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"NAM","ADM0_A3_US":"NAM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Southern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7.5}},{"type":"Polygon","arcs":[[463]],"bbox":[164.029606,-22.399976,167.120011,-20.105646],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"France","SOV_A3":"FR1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Dependency","ADMIN":"New Caledonia","ADM0_A3":"NCL","GEOU_DIF":0,"GEOUNIT":"New Caledonia","GU_A3":"NCL","SU_DIF":0,"SUBUNIT":"New Caledonia","SU_A3":"NCL","BRK_DIFF":0,"NAME":"New Caledonia","NAME_LONG":"New Caledonia","BRK_A3":"NCL","BRK_NAME":"New Caledonia","BRK_GROUP":null,"ABBREV":"New C.","POSTAL":"NC","FORMAL_EN":"New Caledonia","FORMAL_FR":"Nouvelle-Calédonie","NAME_CIAWF":"New Caledonia","NOTE_ADM0":"Fr.","NOTE_BRK":null,"NAME_SORT":"New Caledonia","NAME_ALT":null,"MAPCOLOR7":7,"MAPCOLOR8":5,"MAPCOLOR9":9,"MAPCOLOR13":11,"POP_EST":279070,"POP_RANK":10,"GDP_MD_EST":10770,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"NC","ISO_A2":"NC","ISO_A3":"NCL","ISO_A3_EH":"NCL","ISO_N3":"540","UN_A3":"540","WB_A2":"NC","WB_A3":"NCL","WOE_ID":23424903,"WOE_ID_EH":23424903,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"NCL","ADM0_A3_US":"NCL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Oceania","REGION_UN":"Oceania","SUBREGION":"Melanesia","REGION_WB":"East Asia & Pacific","NAME_LEN":13,"LONG_LEN":13,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":-99,"MIN_ZOOM":0,"MIN_LABEL":4.6,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-71,-77,-438,-244,-418,464,-194,465]],"bbox":[0.295646,11.660167,15.903247,23.471668],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Niger","SOV_A3":"NER","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Niger","ADM0_A3":"NER","GEOU_DIF":0,"GEOUNIT":"Niger","GU_A3":"NER","SU_DIF":0,"SUBUNIT":"Niger","SU_A3":"NER","BRK_DIFF":0,"NAME":"Niger","NAME_LONG":"Niger","BRK_A3":"NER","BRK_NAME":"Niger","BRK_GROUP":null,"ABBREV":"Niger","POSTAL":"NE","FORMAL_EN":"Republic of Niger","FORMAL_FR":null,"NAME_CIAWF":"Niger","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Niger","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":5,"MAPCOLOR9":3,"MAPCOLOR13":13,"POP_EST":19245344,"POP_RANK":14,"GDP_MD_EST":20150,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"NG","ISO_A2":"NE","ISO_A3":"NER","ISO_A3_EH":"NER","ISO_N3":"562","UN_A3":"562","WB_A2":"NE","WB_A3":"NER","WOE_ID":23424906,"WOE_ID_EH":23424906,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"NER","ADM0_A3_US":"NER","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-72,-466,-193,466]],"bbox":[2.691702,4.240594,14.577178,13.865924],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Nigeria","SOV_A3":"NGA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Nigeria","ADM0_A3":"NGA","GEOU_DIF":0,"GEOUNIT":"Nigeria","GU_A3":"NGA","SU_DIF":0,"SUBUNIT":"Nigeria","SU_A3":"NGA","BRK_DIFF":0,"NAME":"Nigeria","NAME_LONG":"Nigeria","BRK_A3":"NGA","BRK_NAME":"Nigeria","BRK_GROUP":null,"ABBREV":"Nigeria","POSTAL":"NG","FORMAL_EN":"Federal Republic of Nigeria","FORMAL_FR":null,"NAME_CIAWF":"Nigeria","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Nigeria","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":5,"MAPCOLOR13":2,"POP_EST":190632261,"POP_RANK":17,"GDP_MD_EST":1089000,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"NI","ISO_A2":"NG","ISO_A3":"NGA","ISO_A3_EH":"NGA","ISO_N3":"566","UN_A3":"566","WB_A2":"NG","WB_A3":"NGA","WOE_ID":23424908,"WOE_ID_EH":23424908,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"NGA","ADM0_A3_US":"NGA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":7,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-212,467,-317,468]],"bbox":[-87.668493,10.726839,-83.147219,15.016267],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Nicaragua","SOV_A3":"NIC","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Nicaragua","ADM0_A3":"NIC","GEOU_DIF":0,"GEOUNIT":"Nicaragua","GU_A3":"NIC","SU_DIF":0,"SUBUNIT":"Nicaragua","SU_A3":"NIC","BRK_DIFF":0,"NAME":"Nicaragua","NAME_LONG":"Nicaragua","BRK_A3":"NIC","BRK_NAME":"Nicaragua","BRK_GROUP":null,"ABBREV":"Nic.","POSTAL":"NI","FORMAL_EN":"Republic of Nicaragua","FORMAL_FR":null,"NAME_CIAWF":"Nicaragua","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Nicaragua","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":9,"POP_EST":6025951,"POP_RANK":13,"GDP_MD_EST":33550,"POP_YEAR":2017,"LASTCENSUS":2005,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"NU","ISO_A2":"NI","ISO_A3":"NIC","ISO_A3_EH":"NIC","ISO_N3":"558","UN_A3":"558","WB_A2":"NI","WB_A3":"NIC","WOE_ID":23424915,"WOE_ID_EH":23424915,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"NIC","ADM0_A3_US":"NIC","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-67,469,-224]],"bbox":[3.314971,50.803721,7.092053,53.510403],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Netherlands","SOV_A3":"NL1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"Netherlands","ADM0_A3":"NLD","GEOU_DIF":0,"GEOUNIT":"Netherlands","GU_A3":"NLD","SU_DIF":0,"SUBUNIT":"Netherlands","SU_A3":"NLD","BRK_DIFF":0,"NAME":"Netherlands","NAME_LONG":"Netherlands","BRK_A3":"NLD","BRK_NAME":"Netherlands","BRK_GROUP":null,"ABBREV":"Neth.","POSTAL":"NL","FORMAL_EN":"Kingdom of the Netherlands","FORMAL_FR":null,"NAME_CIAWF":"Netherlands","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Netherlands","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":9,"POP_EST":17084719,"POP_RANK":14,"GDP_MD_EST":870800,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"NL","ISO_A2":"NL","ISO_A3":"NLD","ISO_A3_EH":"NLD","ISO_N3":"528","UN_A3":"528","WB_A2":"NL","WB_A3":"NLD","WOE_ID":-90,"WOE_ID_EH":23424909,"WOE_NOTE":"Doesn't include new former units of Netherlands Antilles (24549811, 24549808, and 24549809)","ADM0_A3_IS":"NLD","ADM0_A3_US":"NLD","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Western Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"MultiPolygon","arcs":[[[-268,470,471,472]],[[473]],[[474]],[[475]]],"bbox":[4.992078,58.078884,31.293418,80.657144],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Norway","SOV_A3":"NOR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Norway","ADM0_A3":"NOR","GEOU_DIF":0,"GEOUNIT":"Norway","GU_A3":"NOR","SU_DIF":0,"SUBUNIT":"Norway","SU_A3":"NOR","BRK_DIFF":0,"NAME":"Norway","NAME_LONG":"Norway","BRK_A3":"NOR","BRK_NAME":"Norway","BRK_GROUP":null,"ABBREV":"Nor.","POSTAL":"N","FORMAL_EN":"Kingdom of Norway","FORMAL_FR":null,"NAME_CIAWF":"Norway","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Norway","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":3,"MAPCOLOR9":8,"MAPCOLOR13":12,"POP_EST":5320045,"POP_RANK":13,"GDP_MD_EST":364700,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"-99","ISO_A2":"-99","ISO_A3":"-99","ISO_A3_EH":"-99","ISO_N3":"-99","UN_A3":"-99","WB_A2":"-99","WB_A3":"-99","WOE_ID":-90,"WOE_ID_EH":23424910,"WOE_NOTE":"Does not include Svalbard, Jan Mayen, or Bouvet Islands (28289410).","ADM0_A3_IS":"NOR","ADM0_A3_US":"NOR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-180,-349]],"bbox":[80.088425,26.397898,88.174804,30.422717],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Nepal","SOV_A3":"NPL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Nepal","ADM0_A3":"NPL","GEOU_DIF":0,"GEOUNIT":"Nepal","GU_A3":"NPL","SU_DIF":0,"SUBUNIT":"Nepal","SU_A3":"NPL","BRK_DIFF":0,"NAME":"Nepal","NAME_LONG":"Nepal","BRK_A3":"NPL","BRK_NAME":"Nepal","BRK_GROUP":null,"ABBREV":"Nepal","POSTAL":"NP","FORMAL_EN":"Nepal","FORMAL_FR":null,"NAME_CIAWF":"Nepal","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Nepal","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":3,"MAPCOLOR13":12,"POP_EST":29384297,"POP_RANK":15,"GDP_MD_EST":71520,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"NP","ISO_A2":"NP","ISO_A3":"NPL","ISO_A3_EH":"NPL","ISO_N3":"524","UN_A3":"524","WB_A2":"NP","WB_A3":"NPL","WOE_ID":23424911,"WOE_ID_EH":23424911,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"NPL","ADM0_A3_US":"NPL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"South Asia","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[476]],[[477]]],"bbox":[166.509144,-46.641235,178.517094,-34.450662],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"New Zealand","SOV_A3":"NZ1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"New Zealand","ADM0_A3":"NZL","GEOU_DIF":0,"GEOUNIT":"New Zealand","GU_A3":"NZL","SU_DIF":0,"SUBUNIT":"New Zealand","SU_A3":"NZL","BRK_DIFF":0,"NAME":"New Zealand","NAME_LONG":"New Zealand","BRK_A3":"NZL","BRK_NAME":"New Zealand","BRK_GROUP":null,"ABBREV":"N.Z.","POSTAL":"NZ","FORMAL_EN":"New Zealand","FORMAL_FR":null,"NAME_CIAWF":"New Zealand","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"New Zealand","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":3,"MAPCOLOR9":4,"MAPCOLOR13":4,"POP_EST":4510327,"POP_RANK":12,"GDP_MD_EST":174800,"POP_YEAR":2017,"LASTCENSUS":2006,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"NZ","ISO_A2":"NZ","ISO_A3":"NZL","ISO_A3_EH":"NZL","ISO_N3":"554","UN_A3":"554","WB_A2":"NZ","WB_A3":"NZL","WOE_ID":23424916,"WOE_ID_EH":23424916,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"NZL","ADM0_A3_US":"NZL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Oceania","REGION_UN":"Oceania","SUBREGION":"Australia and New Zealand","REGION_WB":"East Asia & Pacific","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":6.7}},{"type":"MultiPolygon","arcs":[[[-20,478]],[[-22,479,480,481]]],"bbox":[52.00001,16.651051,59.80806,26.395934],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Oman","SOV_A3":"OMN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Oman","ADM0_A3":"OMN","GEOU_DIF":0,"GEOUNIT":"Oman","GU_A3":"OMN","SU_DIF":0,"SUBUNIT":"Oman","SU_A3":"OMN","BRK_DIFF":0,"NAME":"Oman","NAME_LONG":"Oman","BRK_A3":"OMN","BRK_NAME":"Oman","BRK_GROUP":null,"ABBREV":"Oman","POSTAL":"OM","FORMAL_EN":"Sultanate of Oman","FORMAL_FR":null,"NAME_CIAWF":"Oman","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Oman","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":6,"POP_EST":3424386,"POP_RANK":12,"GDP_MD_EST":173100,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"MU","ISO_A2":"OM","ISO_A3":"OMN","ISO_A3_EH":"OMN","ISO_N3":"512","UN_A3":"512","WB_A2":"OM","WB_A3":"OMN","WOE_ID":23424898,"WOE_ID_EH":23424898,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"OMN","ADM0_A3_US":"OMN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-5,-182,-348,482,-352]],"bbox":[60.874248,23.691965,77.837451,37.133031],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Pakistan","SOV_A3":"PAK","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Pakistan","ADM0_A3":"PAK","GEOU_DIF":0,"GEOUNIT":"Pakistan","GU_A3":"PAK","SU_DIF":0,"SUBUNIT":"Pakistan","SU_A3":"PAK","BRK_DIFF":0,"NAME":"Pakistan","NAME_LONG":"Pakistan","BRK_A3":"PAK","BRK_NAME":"Pakistan","BRK_GROUP":null,"ABBREV":"Pak.","POSTAL":"PK","FORMAL_EN":"Islamic Republic of Pakistan","FORMAL_FR":null,"NAME_CIAWF":"Pakistan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Pakistan","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":3,"MAPCOLOR13":11,"POP_EST":204924861,"POP_RANK":17,"GDP_MD_EST":988200,"POP_YEAR":2017,"LASTCENSUS":1998,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"PK","ISO_A2":"PK","ISO_A3":"PAK","ISO_A3_EH":"PAK","ISO_N3":"586","UN_A3":"586","WB_A2":"PK","WB_A3":"PAK","WOE_ID":23424922,"WOE_ID_EH":23424922,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PAK","ADM0_A3_US":"PAK","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Southern Asia","REGION_WB":"South Asia","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-208,483,-214,484]],"bbox":[-82.965783,7.220541,-77.242566,9.61161],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Panama","SOV_A3":"PAN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Panama","ADM0_A3":"PAN","GEOU_DIF":0,"GEOUNIT":"Panama","GU_A3":"PAN","SU_DIF":0,"SUBUNIT":"Panama","SU_A3":"PAN","BRK_DIFF":0,"NAME":"Panama","NAME_LONG":"Panama","BRK_A3":"PAN","BRK_NAME":"Panama","BRK_GROUP":null,"ABBREV":"Pan.","POSTAL":"PA","FORMAL_EN":"Republic of Panama","FORMAL_FR":null,"NAME_CIAWF":"Panama","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Panama","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":4,"MAPCOLOR9":6,"MAPCOLOR13":3,"POP_EST":3753142,"POP_RANK":12,"GDP_MD_EST":93120,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"PM","ISO_A2":"PA","ISO_A3":"PAN","ISO_A3_EH":"PAN","ISO_N3":"591","UN_A3":"591","WB_A2":"PA","WB_A3":"PAN","WOE_ID":23424924,"WOE_ID_EH":23424924,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PAN","ADM0_A3_US":"PAN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-102,-166,485,-245,-205,-106]],"bbox":[-81.410943,-18.347975,-68.66508,-0.057205],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Peru","SOV_A3":"PER","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Peru","ADM0_A3":"PER","GEOU_DIF":0,"GEOUNIT":"Peru","GU_A3":"PER","SU_DIF":0,"SUBUNIT":"Peru","SU_A3":"PER","BRK_DIFF":0,"NAME":"Peru","NAME_LONG":"Peru","BRK_A3":"PER","BRK_NAME":"Peru","BRK_GROUP":null,"ABBREV":"Peru","POSTAL":"PE","FORMAL_EN":"Republic of Peru","FORMAL_FR":null,"NAME_CIAWF":"Peru","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Peru","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":4,"MAPCOLOR9":4,"MAPCOLOR13":11,"POP_EST":31036656,"POP_RANK":15,"GDP_MD_EST":410400,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"PE","ISO_A2":"PE","ISO_A3":"PER","ISO_A3_EH":"PER","ISO_N3":"604","UN_A3":"604","WB_A2":"PE","WB_A3":"PER","WOE_ID":23424919,"WOE_ID_EH":23424919,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PER","ADM0_A3_US":"PER","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"MultiPolygon","arcs":[[[486]],[[487]],[[488]],[[489]],[[490]],[[491]],[[492]]],"bbox":[117.174275,5.581003,126.537424,18.505227],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Philippines","SOV_A3":"PHL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Philippines","ADM0_A3":"PHL","GEOU_DIF":0,"GEOUNIT":"Philippines","GU_A3":"PHL","SU_DIF":0,"SUBUNIT":"Philippines","SU_A3":"PHL","BRK_DIFF":0,"NAME":"Philippines","NAME_LONG":"Philippines","BRK_A3":"PHL","BRK_NAME":"Philippines","BRK_GROUP":null,"ABBREV":"Phil.","POSTAL":"PH","FORMAL_EN":"Republic of the Philippines","FORMAL_FR":null,"NAME_CIAWF":"Philippines","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Philippines","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":8,"POP_EST":104256076,"POP_RANK":17,"GDP_MD_EST":801900,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"RP","ISO_A2":"PH","ISO_A3":"PHL","ISO_A3_EH":"PHL","ISO_N3":"608","UN_A3":"608","WB_A2":"PH","WB_A3":"PHL","WOE_ID":23424934,"WOE_ID_EH":23424934,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PHL","ADM0_A3_US":"PHL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"MultiPolygon","arcs":[[[-340,493]],[[494]],[[495]],[[496]]],"bbox":[141.00021,-10.652476,156.019965,-2.500002],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Papua New Guinea","SOV_A3":"PNG","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Papua New Guinea","ADM0_A3":"PNG","GEOU_DIF":0,"GEOUNIT":"Papua New Guinea","GU_A3":"PNG","SU_DIF":1,"SUBUNIT":"Papua New Guinea","SU_A3":"PN1","BRK_DIFF":0,"NAME":"Papua New Guinea","NAME_LONG":"Papua New Guinea","BRK_A3":"PN1","BRK_NAME":"Papua New Guinea","BRK_GROUP":null,"ABBREV":"P.N.G.","POSTAL":"PG","FORMAL_EN":"Independent State of Papua New Guinea","FORMAL_FR":null,"NAME_CIAWF":"Papua New Guinea","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Papua New Guinea","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":2,"MAPCOLOR9":3,"MAPCOLOR13":1,"POP_EST":6909701,"POP_RANK":13,"GDP_MD_EST":28020,"POP_YEAR":2017,"LASTCENSUS":2000,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"PP","ISO_A2":"PG","ISO_A3":"PNG","ISO_A3_EH":"PNG","ISO_N3":"598","UN_A3":"598","WB_A2":"PG","WB_A3":"PNG","WOE_ID":23424926,"WOE_ID_EH":23424926,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PNG","ADM0_A3_US":"PNG","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Oceania","REGION_UN":"Oceania","SUBREGION":"Melanesia","REGION_WB":"East Asia & Pacific","NAME_LEN":16,"LONG_LEN":16,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2.5,"MAX_LABEL":7.5}},{"type":"Polygon","arcs":[[-97,497,498,-220,-228,499,500,-421]],"bbox":[14.074521,49.027395,24.029986,54.851536],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Poland","SOV_A3":"POL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Poland","ADM0_A3":"POL","GEOU_DIF":0,"GEOUNIT":"Poland","GU_A3":"POL","SU_DIF":0,"SUBUNIT":"Poland","SU_A3":"POL","BRK_DIFF":0,"NAME":"Poland","NAME_LONG":"Poland","BRK_A3":"POL","BRK_NAME":"Poland","BRK_GROUP":null,"ABBREV":"Pol.","POSTAL":"PL","FORMAL_EN":"Republic of Poland","FORMAL_FR":null,"NAME_CIAWF":"Poland","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Poland","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":7,"MAPCOLOR9":1,"MAPCOLOR13":2,"POP_EST":38476269,"POP_RANK":15,"GDP_MD_EST":1052000,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"PL","ISO_A2":"PL","ISO_A3":"POL","ISO_A3_EH":"POL","ISO_N3":"616","UN_A3":"616","WB_A2":"PL","WB_A3":"POL","WOE_ID":23424923,"WOE_ID_EH":23424923,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"POL","ADM0_A3_US":"POL","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[501]],"bbox":[-67.242428,17.946553,-65.591004,18.520601],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"United States of America","SOV_A3":"US1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Dependency","ADMIN":"Puerto Rico","ADM0_A3":"PRI","GEOU_DIF":0,"GEOUNIT":"Puerto Rico","GU_A3":"PRI","SU_DIF":0,"SUBUNIT":"Puerto Rico","SU_A3":"PRI","BRK_DIFF":0,"NAME":"Puerto Rico","NAME_LONG":"Puerto Rico","BRK_A3":"PRI","BRK_NAME":"Puerto Rico","BRK_GROUP":null,"ABBREV":"P.R.","POSTAL":"PR","FORMAL_EN":"Commonwealth of Puerto Rico","FORMAL_FR":null,"NAME_CIAWF":"Puerto Rico","NOTE_ADM0":"Commonwealth of U.S.A.","NOTE_BRK":null,"NAME_SORT":"Puerto Rico","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":5,"MAPCOLOR9":1,"MAPCOLOR13":1,"POP_EST":3351827,"POP_RANK":12,"GDP_MD_EST":131000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"RQ","ISO_A2":"PR","ISO_A3":"PRI","ISO_A3_EH":"PRI","ISO_N3":"630","UN_A3":"630","WB_A2":"PR","WB_A3":"PRI","WOE_ID":23424935,"WOE_ID_EH":23424935,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PRI","ADM0_A3_US":"PRI","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Caribbean","REGION_WB":"Latin America & Caribbean","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":-99,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[-173,502,503,-401,504]],[[505,506]]],"bbox":[124.265625,37.669071,130.780007,42.985387],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"North Korea","SOV_A3":"PRK","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"North Korea","ADM0_A3":"PRK","GEOU_DIF":0,"GEOUNIT":"North Korea","GU_A3":"PRK","SU_DIF":0,"SUBUNIT":"North Korea","SU_A3":"PRK","BRK_DIFF":0,"NAME":"North Korea","NAME_LONG":"Dem. Rep. Korea","BRK_A3":"PRK","BRK_NAME":"Dem. Rep. Korea","BRK_GROUP":null,"ABBREV":"N.K.","POSTAL":"KP","FORMAL_EN":"Democratic People's Republic of Korea","FORMAL_FR":null,"NAME_CIAWF":"Korea, North","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Korea, Dem. Rep.","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":5,"MAPCOLOR9":3,"MAPCOLOR13":9,"POP_EST":25248140,"POP_RANK":15,"GDP_MD_EST":40000,"POP_YEAR":2013,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"KN","ISO_A2":"KP","ISO_A3":"PRK","ISO_A3_EH":"PRK","ISO_N3":"408","UN_A3":"408","WB_A2":"KP","WB_A3":"PRK","WOE_ID":23424865,"WOE_ID_EH":23424865,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PRK","ADM0_A3_US":"PRK","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":11,"LONG_LEN":15,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-258,507]],"bbox":[-9.526571,36.838269,-6.389088,42.280469],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Portugal","SOV_A3":"PRT","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Portugal","ADM0_A3":"PRT","GEOU_DIF":0,"GEOUNIT":"Portugal","GU_A3":"PRT","SU_DIF":1,"SUBUNIT":"Portugal","SU_A3":"PR1","BRK_DIFF":0,"NAME":"Portugal","NAME_LONG":"Portugal","BRK_A3":"PR1","BRK_NAME":"Portugal","BRK_GROUP":null,"ABBREV":"Port.","POSTAL":"P","FORMAL_EN":"Portuguese Republic","FORMAL_FR":null,"NAME_CIAWF":"Portugal","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Portugal","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":7,"MAPCOLOR9":1,"MAPCOLOR13":4,"POP_EST":10839514,"POP_RANK":14,"GDP_MD_EST":297100,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"PO","ISO_A2":"PT","ISO_A3":"PRT","ISO_A3_EH":"PRT","ISO_N3":"620","UN_A3":"620","WB_A2":"PT","WB_A3":"PRT","WOE_ID":23424925,"WOE_ID_EH":23424925,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PRT","ADM0_A3_US":"PRT","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-28,-104,-105]],"bbox":[-62.685057,-27.548499,-54.29296,-19.342747],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Paraguay","SOV_A3":"PRY","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Paraguay","ADM0_A3":"PRY","GEOU_DIF":0,"GEOUNIT":"Paraguay","GU_A3":"PRY","SU_DIF":0,"SUBUNIT":"Paraguay","SU_A3":"PRY","BRK_DIFF":0,"NAME":"Paraguay","NAME_LONG":"Paraguay","BRK_A3":"PRY","BRK_NAME":"Paraguay","BRK_GROUP":null,"ABBREV":"Para.","POSTAL":"PY","FORMAL_EN":"Republic of Paraguay","FORMAL_FR":null,"NAME_CIAWF":"Paraguay","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Paraguay","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":3,"MAPCOLOR9":6,"MAPCOLOR13":2,"POP_EST":6943739,"POP_RANK":13,"GDP_MD_EST":64670,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"PA","ISO_A2":"PY","ISO_A3":"PRY","ISO_A3_EH":"PRY","ISO_N3":"600","UN_A3":"600","WB_A2":"PY","WB_A3":"PRY","WOE_ID":23424917,"WOE_ID_EH":23424917,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PRY","ADM0_A3_US":"PRY","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-369,-379]],"bbox":[34.927408,31.353435,35.545665,32.532511],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Israel","SOV_A3":"IS1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Disputed","ADMIN":"Palestine","ADM0_A3":"PSX","GEOU_DIF":0,"GEOUNIT":"Palestine","GU_A3":"PSX","SU_DIF":0,"SUBUNIT":"Palestine","SU_A3":"PSX","BRK_DIFF":0,"NAME":"Palestine","NAME_LONG":"Palestine","BRK_A3":"PSX","BRK_NAME":"Palestine","BRK_GROUP":null,"ABBREV":"Pal.","POSTAL":"PAL","FORMAL_EN":"West Bank and Gaza","FORMAL_FR":null,"NAME_CIAWF":null,"NOTE_ADM0":"Partial self-admin.","NOTE_BRK":"Partial self-admin.","NAME_SORT":"Palestine (West Bank and Gaza)","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":5,"MAPCOLOR13":8,"POP_EST":4543126,"POP_RANK":12,"GDP_MD_EST":21220.77,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"-99","ISO_A2":"PS","ISO_A3":"PSE","ISO_A3_EH":"PSE","ISO_N3":"275","UN_A3":"275","WB_A2":"GZ","WB_A3":"WBG","WOE_ID":28289408,"WOE_ID_EH":28289408,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"PSE","ADM0_A3_US":"PSX","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":-99,"MIN_ZOOM":7,"MIN_LABEL":4.5,"MAX_LABEL":9.5}},{"type":"Polygon","arcs":[[508,509]],"bbox":[50.743911,24.556331,51.6067,26.114582],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Qatar","SOV_A3":"QAT","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Qatar","ADM0_A3":"QAT","GEOU_DIF":0,"GEOUNIT":"Qatar","GU_A3":"QAT","SU_DIF":0,"SUBUNIT":"Qatar","SU_A3":"QAT","BRK_DIFF":0,"NAME":"Qatar","NAME_LONG":"Qatar","BRK_A3":"QAT","BRK_NAME":"Qatar","BRK_GROUP":null,"ABBREV":"Qatar","POSTAL":"QA","FORMAL_EN":"State of Qatar","FORMAL_FR":null,"NAME_CIAWF":"Qatar","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Qatar","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":6,"MAPCOLOR9":2,"MAPCOLOR13":4,"POP_EST":2314307,"POP_RANK":12,"GDP_MD_EST":334500,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"QA","ISO_A2":"QA","ISO_A3":"QAT","ISO_A3_EH":"QAT","ISO_N3":"634","UN_A3":"634","WB_A2":"QA","WB_A3":"QAT","WOE_ID":23424930,"WOE_ID_EH":23424930,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"QAT","ADM0_A3_US":"QAT","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-81,510,-328,511,-430,512,513]],"bbox":[20.220192,43.688445,29.626543,48.220881],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Romania","SOV_A3":"ROU","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Romania","ADM0_A3":"ROU","GEOU_DIF":0,"GEOUNIT":"Romania","GU_A3":"ROU","SU_DIF":0,"SUBUNIT":"Romania","SU_A3":"ROU","BRK_DIFF":0,"NAME":"Romania","NAME_LONG":"Romania","BRK_A3":"ROU","BRK_NAME":"Romania","BRK_GROUP":null,"ABBREV":"Rom.","POSTAL":"RO","FORMAL_EN":"Romania","FORMAL_FR":null,"NAME_CIAWF":"Romania","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Romania","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":3,"MAPCOLOR13":13,"POP_EST":21529967,"POP_RANK":15,"GDP_MD_EST":441000,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"RO","ISO_A2":"RO","ISO_A3":"ROU","ISO_A3_EH":"ROU","ISO_N3":"642","UN_A3":"642","WB_A2":"RO","WB_A3":"ROM","WOE_ID":23424933,"WOE_ID_EH":23424933,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ROU","ADM0_A3_US":"ROU","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[-56,-289,514,515,-95,-426,-260,516,-269,-473,517,-507,518,-503,-172,-443,-170,-388,519]],[[-422,-501,520]],[[521,522]],[[523]],[[524]],[[525]],[[526]],[[527]],[[528]],[[529]],[[530]],[[531]],[[532]],[[533]]],"bbox":[-180,41.151416,180,81.2504],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Russia","SOV_A3":"RUS","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Russia","ADM0_A3":"RUS","GEOU_DIF":0,"GEOUNIT":"Russia","GU_A3":"RUS","SU_DIF":0,"SUBUNIT":"Russia","SU_A3":"RUS","BRK_DIFF":0,"NAME":"Russia","NAME_LONG":"Russian Federation","BRK_A3":"RUS","BRK_NAME":"Russia","BRK_GROUP":null,"ABBREV":"Rus.","POSTAL":"RUS","FORMAL_EN":"Russian Federation","FORMAL_FR":null,"NAME_CIAWF":"Russia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Russian Federation","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":5,"MAPCOLOR9":7,"MAPCOLOR13":7,"POP_EST":142257519,"POP_RANK":17,"GDP_MD_EST":3745000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"3. Emerging region: BRIC","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"RS","ISO_A2":"RU","ISO_A3":"RUS","ISO_A3_EH":"RUS","ISO_N3":"643","UN_A3":"643","WB_A2":"RU","WB_A3":"RUS","WOE_ID":23424936,"WOE_ID_EH":23424936,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"RUS","ADM0_A3_US":"RUS","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":18,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":5.2}},{"type":"Polygon","arcs":[[-61,-200,534,535]],"bbox":[29.024926,-2.917858,30.816135,-1.134659],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Rwanda","SOV_A3":"RWA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Rwanda","ADM0_A3":"RWA","GEOU_DIF":0,"GEOUNIT":"Rwanda","GU_A3":"RWA","SU_DIF":0,"SUBUNIT":"Rwanda","SU_A3":"RWA","BRK_DIFF":0,"NAME":"Rwanda","NAME_LONG":"Rwanda","BRK_A3":"RWA","BRK_NAME":"Rwanda","BRK_GROUP":null,"ABBREV":"Rwa.","POSTAL":"RW","FORMAL_EN":"Republic of Rwanda","FORMAL_FR":null,"NAME_CIAWF":"Rwanda","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Rwanda","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":2,"MAPCOLOR9":3,"MAPCOLOR13":10,"POP_EST":11901484,"POP_RANK":14,"GDP_MD_EST":21970,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"RW","ISO_A2":"RW","ISO_A3":"RWA","ISO_A3_EH":"RWA","ISO_N3":"646","UN_A3":"646","WB_A2":"RW","WB_A3":"RWA","WOE_ID":23424937,"WOE_ID_EH":23424937,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"RWA","ADM0_A3_US":"RWA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-239,-454,536,-427]],"bbox":[-17.063423,20.999752,-8.665124,27.656426],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":7,"SOVEREIGNT":"Western Sahara","SOV_A3":"SAH","ADM0_DIF":0,"LEVEL":2,"TYPE":"Indeterminate","ADMIN":"Western Sahara","ADM0_A3":"SAH","GEOU_DIF":0,"GEOUNIT":"Western Sahara","GU_A3":"SAH","SU_DIF":0,"SUBUNIT":"Western Sahara","SU_A3":"SAH","BRK_DIFF":1,"NAME":"W. Sahara","NAME_LONG":"Western Sahara","BRK_A3":"B28","BRK_NAME":"W. Sahara","BRK_GROUP":null,"ABBREV":"W. Sah.","POSTAL":"WS","FORMAL_EN":"Sahrawi Arab Democratic Republic","FORMAL_FR":null,"NAME_CIAWF":"Western Sahara","NOTE_ADM0":"Self admin.","NOTE_BRK":"Self admin.; Claimed by Morocco","NAME_SORT":"Western Sahara","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":7,"MAPCOLOR9":4,"MAPCOLOR13":4,"POP_EST":603253,"POP_RANK":11,"GDP_MD_EST":906.5,"POP_YEAR":2017,"LASTCENSUS":-99,"GDP_YEAR":2007,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"WI","ISO_A2":"EH","ISO_A3":"ESH","ISO_A3_EH":"ESH","ISO_N3":"732","UN_A3":"732","WB_A2":"-99","WB_A3":"-99","WOE_ID":23424990,"WOE_ID_EH":23424990,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"MAR","ADM0_A3_US":"SAH","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Northern Africa","REGION_WB":"Middle East & North Africa","NAME_LEN":9,"LONG_LEN":14,"ABBREV_LEN":7,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":4.7,"MIN_LABEL":6,"MAX_LABEL":11}},{"type":"Polygon","arcs":[[-23,-482,537,538,-377,-360,-406,539,-510,540]],"bbox":[34.632336,16.347891,55.666659,32.161009],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Saudi Arabia","SOV_A3":"SAU","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Saudi Arabia","ADM0_A3":"SAU","GEOU_DIF":0,"GEOUNIT":"Saudi Arabia","GU_A3":"SAU","SU_DIF":0,"SUBUNIT":"Saudi Arabia","SU_A3":"SAU","BRK_DIFF":0,"NAME":"Saudi Arabia","NAME_LONG":"Saudi Arabia","BRK_A3":"SAU","BRK_NAME":"Saudi Arabia","BRK_GROUP":null,"ABBREV":"Saud.","POSTAL":"SA","FORMAL_EN":"Kingdom of Saudi Arabia","FORMAL_FR":null,"NAME_CIAWF":"Saudi Arabia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Saudi Arabia","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":1,"MAPCOLOR9":6,"MAPCOLOR13":7,"POP_EST":28571770,"POP_RANK":15,"GDP_MD_EST":1731000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"SA","ISO_A2":"SA","ISO_A3":"SAU","ISO_A3_EH":"SAU","ISO_N3":"682","UN_A3":"682","WB_A2":"SA","WB_A3":"SAU","WOE_ID":23424938,"WOE_ID_EH":23424938,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SAU","ADM0_A3_US":"SAU","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":12,"LONG_LEN":12,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2.7,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-123,541,-416,-247,542,-253,-266,543]],"bbox":[21.93681,8.229188,38.41009,22],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Sudan","SOV_A3":"SDN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Sudan","ADM0_A3":"SDN","GEOU_DIF":0,"GEOUNIT":"Sudan","GU_A3":"SDN","SU_DIF":0,"SUBUNIT":"Sudan","SU_A3":"SDN","BRK_DIFF":0,"NAME":"Sudan","NAME_LONG":"Sudan","BRK_A3":"SDN","BRK_NAME":"Sudan","BRK_GROUP":null,"ABBREV":"Sudan","POSTAL":"SD","FORMAL_EN":"Republic of the Sudan","FORMAL_FR":null,"NAME_CIAWF":"Sudan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Sudan","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":6,"MAPCOLOR9":4,"MAPCOLOR13":1,"POP_EST":37345935,"POP_RANK":15,"GDP_MD_EST":176300,"POP_YEAR":2017,"LASTCENSUS":2008,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"SU","ISO_A2":"SD","ISO_A3":"SDN","ISO_A3_EH":"SDN","ISO_N3":"729","UN_A3":"729","WB_A2":"SD","WB_A3":"SDN","WOE_ID":-90,"WOE_ID_EH":23424952,"WOE_NOTE":"Almost all FLickr photos are in the north.","ADM0_A3_IS":"SDN","ADM0_A3_US":"SDN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Northern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-124,-544,-265,-393,544,-198]],"bbox":[23.88698,3.509172,35.298007,12.248008],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"South Sudan","SOV_A3":"SDS","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"South Sudan","ADM0_A3":"SDS","GEOU_DIF":0,"GEOUNIT":"South Sudan","GU_A3":"SDS","SU_DIF":0,"SUBUNIT":"South Sudan","SU_A3":"SDS","BRK_DIFF":0,"NAME":"S. Sudan","NAME_LONG":"South Sudan","BRK_A3":"SDS","BRK_NAME":"S. Sudan","BRK_GROUP":null,"ABBREV":"S. Sud.","POSTAL":"SS","FORMAL_EN":"Republic of South Sudan","FORMAL_FR":null,"NAME_CIAWF":"South Sudan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"South Sudan","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":3,"MAPCOLOR9":3,"MAPCOLOR13":5,"POP_EST":13026129,"POP_RANK":14,"GDP_MD_EST":20880,"POP_YEAR":2017,"LASTCENSUS":2008,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"-99","ISO_A2":"SS","ISO_A3":"SSD","ISO_A3_EH":"SSD","ISO_N3":"728","UN_A3":"728","WB_A2":"SS","WB_A3":"SSD","WOE_ID":-99,"WOE_ID_EH":-99,"WOE_NOTE":"Includes states of 20069899, 20069897, 20069898, 20069901, 20069909, and 20069908 but maybe more?","ADM0_A3_IS":"SSD","ADM0_A3_US":"SDS","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":8,"LONG_LEN":11,"ABBREV_LEN":7,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-296,-301,545,-299,546,-452,-436]],"bbox":[-17.625043,12.33209,-11.467899,16.598264],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Senegal","SOV_A3":"SEN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Senegal","ADM0_A3":"SEN","GEOU_DIF":0,"GEOUNIT":"Senegal","GU_A3":"SEN","SU_DIF":0,"SUBUNIT":"Senegal","SU_A3":"SEN","BRK_DIFF":0,"NAME":"Senegal","NAME_LONG":"Senegal","BRK_A3":"SEN","BRK_NAME":"Senegal","BRK_GROUP":null,"ABBREV":"Sen.","POSTAL":"SN","FORMAL_EN":"Republic of Senegal","FORMAL_FR":null,"NAME_CIAWF":"Senegal","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Senegal","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":6,"MAPCOLOR9":5,"MAPCOLOR13":5,"POP_EST":14668522,"POP_RANK":14,"GDP_MD_EST":39720,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"SG","ISO_A2":"SN","ISO_A3":"SEN","ISO_A3_EH":"SEN","ISO_N3":"686","UN_A3":"686","WB_A2":"SN","WB_A3":"SEN","WOE_ID":23424943,"WOE_ID_EH":23424943,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SEN","ADM0_A3_US":"SEN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[547]],[[548]],[[549]],[[550]],[[551]]],"bbox":[156.491358,-10.826367,162.398646,-6.599338],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Solomon Islands","SOV_A3":"SLB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Solomon Islands","ADM0_A3":"SLB","GEOU_DIF":0,"GEOUNIT":"Solomon Islands","GU_A3":"SLB","SU_DIF":0,"SUBUNIT":"Solomon Islands","SU_A3":"SLB","BRK_DIFF":0,"NAME":"Solomon Is.","NAME_LONG":"Solomon Islands","BRK_A3":"SLB","BRK_NAME":"Solomon Is.","BRK_GROUP":null,"ABBREV":"S. Is.","POSTAL":"SB","FORMAL_EN":null,"FORMAL_FR":null,"NAME_CIAWF":"Solomon Islands","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Solomon Islands","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":6,"POP_EST":647581,"POP_RANK":11,"GDP_MD_EST":1198,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"BP","ISO_A2":"SB","ISO_A3":"SLB","ISO_A3_EH":"SLB","ISO_N3":"090","UN_A3":"090","WB_A2":"SB","WB_A3":"SLB","WOE_ID":23424766,"WOE_ID_EH":23424766,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SLB","ADM0_A3_US":"SLB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Oceania","REGION_UN":"Oceania","SUBREGION":"Melanesia","REGION_WB":"East Asia & Pacific","NAME_LEN":11,"LONG_LEN":15,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-293,-413,552]],"bbox":[-13.24655,6.785917,-10.230094,10.046984],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Sierra Leone","SOV_A3":"SLE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Sierra Leone","ADM0_A3":"SLE","GEOU_DIF":0,"GEOUNIT":"Sierra Leone","GU_A3":"SLE","SU_DIF":0,"SUBUNIT":"Sierra Leone","SU_A3":"SLE","BRK_DIFF":0,"NAME":"Sierra Leone","NAME_LONG":"Sierra Leone","BRK_A3":"SLE","BRK_NAME":"Sierra Leone","BRK_GROUP":null,"ABBREV":"S.L.","POSTAL":"SL","FORMAL_EN":"Republic of Sierra Leone","FORMAL_FR":null,"NAME_CIAWF":"Sierra Leone","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Sierra Leone","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":1,"MAPCOLOR13":7,"POP_EST":6163195,"POP_RANK":13,"GDP_MD_EST":10640,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"SL","ISO_A2":"SL","ISO_A3":"SLE","ISO_A3_EH":"SLE","ISO_N3":"694","UN_A3":"694","WB_A2":"SL","WB_A3":"SLE","WOE_ID":23424946,"WOE_ID_EH":23424946,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SLE","ADM0_A3_US":"SLE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":12,"LONG_LEN":12,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-310,-319,553]],"bbox":[-90.095555,13.149017,-87.723503,14.424133],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"El Salvador","SOV_A3":"SLV","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"El Salvador","ADM0_A3":"SLV","GEOU_DIF":0,"GEOUNIT":"El Salvador","GU_A3":"SLV","SU_DIF":0,"SUBUNIT":"El Salvador","SU_A3":"SLV","BRK_DIFF":0,"NAME":"El Salvador","NAME_LONG":"El Salvador","BRK_A3":"SLV","BRK_NAME":"El Salvador","BRK_GROUP":null,"ABBREV":"El. S.","POSTAL":"SV","FORMAL_EN":"Republic of El Salvador","FORMAL_FR":null,"NAME_CIAWF":"El Salvador","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"El Salvador","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":6,"MAPCOLOR13":8,"POP_EST":6172011,"POP_RANK":13,"GDP_MD_EST":54790,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"ES","ISO_A2":"SV","ISO_A3":"SLV","ISO_A3_EH":"SLV","ISO_N3":"222","UN_A3":"222","WB_A2":"SV","WB_A3":"SLV","WOE_ID":23424807,"WOE_ID_EH":23424807,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SLV","ADM0_A3_US":"SLV","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Central America","REGION_WB":"Latin America & Caribbean","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-230,554,555,556,-262]],"bbox":[42.55876,7.99688,48.948206,11.46204],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Somaliland","SOV_A3":"SOL","ADM0_DIF":0,"LEVEL":2,"TYPE":"Indeterminate","ADMIN":"Somaliland","ADM0_A3":"SOL","GEOU_DIF":0,"GEOUNIT":"Somaliland","GU_A3":"SOL","SU_DIF":0,"SUBUNIT":"Somaliland","SU_A3":"SOL","BRK_DIFF":1,"NAME":"Somaliland","NAME_LONG":"Somaliland","BRK_A3":"B30","BRK_NAME":"Somaliland","BRK_GROUP":null,"ABBREV":"Solnd.","POSTAL":"SL","FORMAL_EN":"Republic of Somaliland","FORMAL_FR":null,"NAME_CIAWF":null,"NOTE_ADM0":"Self admin.","NOTE_BRK":"Self admin.; Claimed by Somalia","NAME_SORT":"Somaliland","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":6,"MAPCOLOR9":5,"MAPCOLOR13":2,"POP_EST":3500000,"POP_RANK":12,"GDP_MD_EST":12250,"POP_YEAR":2013,"LASTCENSUS":-99,"GDP_YEAR":2013,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"-99","ISO_A2":"-99","ISO_A3":"-99","ISO_A3_EH":"-99","ISO_N3":"-99","UN_A3":"-099","WB_A2":"-99","WB_A3":"-99","WOE_ID":-99,"WOE_ID_EH":-99,"WOE_NOTE":"Includes old states of 2347021, 2347020, 2347017 and portion of 2347016.","ADM0_A3_IS":"SOM","ADM0_A3_US":"SOM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":4,"MIN_LABEL":4.5,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-263,-557,555,557,-389]],"bbox":[40.98105,-1.68325,51.13387,12.02464],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Somalia","SOV_A3":"SOM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Somalia","ADM0_A3":"SOM","GEOU_DIF":0,"GEOUNIT":"Somalia","GU_A3":"SOM","SU_DIF":0,"SUBUNIT":"Somalia","SU_A3":"SOM","BRK_DIFF":0,"NAME":"Somalia","NAME_LONG":"Somalia","BRK_A3":"SOM","BRK_NAME":"Somalia","BRK_GROUP":null,"ABBREV":"Som.","POSTAL":"SO","FORMAL_EN":"Federal Republic of Somalia","FORMAL_FR":null,"NAME_CIAWF":"Somalia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Somalia","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":8,"MAPCOLOR9":6,"MAPCOLOR13":7,"POP_EST":7531386,"POP_RANK":13,"GDP_MD_EST":4719,"POP_YEAR":2017,"LASTCENSUS":1987,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"SO","ISO_A2":"SO","ISO_A3":"SOM","ISO_A3_EH":"SOM","ISO_N3":"706","UN_A3":"706","WB_A2":"SO","WB_A3":"SOM","WOE_ID":-90,"WOE_ID_EH":23424949,"WOE_NOTE":"Includes Somaliland (2347021, 2347020, 2347017 and portion of 2347016)","ADM0_A3_IS":"SOM","ADM0_A3_US":"SOM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-86,-435,-403,-442,-92,-324,-329,-511]],"bbox":[18.829825,42.245224,22.986019,46.17173],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Republic of Serbia","SOV_A3":"SRB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Republic of Serbia","ADM0_A3":"SRB","GEOU_DIF":0,"GEOUNIT":"Republic of Serbia","GU_A3":"SRB","SU_DIF":0,"SUBUNIT":"Republic of Serbia","SU_A3":"SRB","BRK_DIFF":0,"NAME":"Serbia","NAME_LONG":"Serbia","BRK_A3":"SRB","BRK_NAME":"Serbia","BRK_GROUP":null,"ABBREV":"Serb.","POSTAL":"RS","FORMAL_EN":"Republic of Serbia","FORMAL_FR":null,"NAME_CIAWF":"Serbia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Serbia","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":3,"MAPCOLOR9":2,"MAPCOLOR13":10,"POP_EST":7111024,"POP_RANK":13,"GDP_MD_EST":101800,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"RI","ISO_A2":"RS","ISO_A3":"SRB","ISO_A3_EH":"SRB","ISO_N3":"688","UN_A3":"688","WB_A2":"YF","WB_A3":"SRB","WOE_ID":-90,"WOE_ID_EH":20069818,"WOE_NOTE":"Expired WOE also contains Kosovo.","ADM0_A3_IS":"SRB","ADM0_A3_US":"SRB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-110,-315,558,-279]],"bbox":[-58.044694,1.817667,-53.958045,6.025291],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Suriname","SOV_A3":"SUR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Suriname","ADM0_A3":"SUR","GEOU_DIF":0,"GEOUNIT":"Suriname","GU_A3":"SUR","SU_DIF":0,"SUBUNIT":"Suriname","SU_A3":"SUR","BRK_DIFF":0,"NAME":"Suriname","NAME_LONG":"Suriname","BRK_A3":"SUR","BRK_NAME":"Suriname","BRK_GROUP":null,"ABBREV":"Sur.","POSTAL":"SR","FORMAL_EN":"Republic of Suriname","FORMAL_FR":null,"NAME_CIAWF":"Suriname","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Suriname","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":7,"MAPCOLOR13":6,"POP_EST":591919,"POP_RANK":11,"GDP_MD_EST":8547,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"NS","ISO_A2":"SR","ISO_A3":"SUR","ISO_A3_EH":"SUR","ISO_N3":"740","UN_A3":"740","WB_A2":"SR","WB_A3":"SUR","WOE_ID":23424913,"WOE_ID_EH":23424913,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SUR","ADM0_A3_US":"SUR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-54,-221,-499,559,-326]],"bbox":[16.879983,47.758429,22.558138,49.571574],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Slovakia","SOV_A3":"SVK","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Slovakia","ADM0_A3":"SVK","GEOU_DIF":0,"GEOUNIT":"Slovakia","GU_A3":"SVK","SU_DIF":0,"SUBUNIT":"Slovakia","SU_A3":"SVK","BRK_DIFF":0,"NAME":"Slovakia","NAME_LONG":"Slovakia","BRK_A3":"SVK","BRK_NAME":"Slovakia","BRK_GROUP":null,"ABBREV":"Svk.","POSTAL":"SK","FORMAL_EN":"Slovak Republic","FORMAL_FR":null,"NAME_CIAWF":"Slovakia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Slovak Republic","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":4,"MAPCOLOR9":4,"MAPCOLOR13":9,"POP_EST":5445829,"POP_RANK":13,"GDP_MD_EST":168800,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"LO","ISO_A2":"SK","ISO_A3":"SVK","ISO_A3_EH":"SVK","ISO_N3":"703","UN_A3":"703","WB_A2":"SK","WB_A3":"SVK","WOE_ID":23424877,"WOE_ID_EH":23424877,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SVK","ADM0_A3_US":"SVK","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-49,-330,-322,560,-372]],"bbox":[13.69811,45.452316,16.564808,46.852386],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Slovenia","SOV_A3":"SVN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Slovenia","ADM0_A3":"SVN","GEOU_DIF":0,"GEOUNIT":"Slovenia","GU_A3":"SVN","SU_DIF":0,"SUBUNIT":"Slovenia","SU_A3":"SVN","BRK_DIFF":0,"NAME":"Slovenia","NAME_LONG":"Slovenia","BRK_A3":"SVN","BRK_NAME":"Slovenia","BRK_GROUP":null,"ABBREV":"Slo.","POSTAL":"SLO","FORMAL_EN":"Republic of Slovenia","FORMAL_FR":null,"NAME_CIAWF":"Slovenia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Slovenia","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":3,"MAPCOLOR9":2,"MAPCOLOR13":12,"POP_EST":1972126,"POP_RANK":12,"GDP_MD_EST":68350,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"SI","ISO_A2":"SI","ISO_A3":"SVN","ISO_A3_EH":"SVN","ISO_N3":"705","UN_A3":"705","WB_A2":"SI","WB_A3":"SVN","WOE_ID":23424945,"WOE_ID_EH":23424945,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SVN","ADM0_A3_US":"SVN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Southern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-267,561,-471]],"bbox":[11.027369,55.361737,23.903379,69.106247],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Sweden","SOV_A3":"SWE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Sweden","ADM0_A3":"SWE","GEOU_DIF":0,"GEOUNIT":"Sweden","GU_A3":"SWE","SU_DIF":0,"SUBUNIT":"Sweden","SU_A3":"SWE","BRK_DIFF":0,"NAME":"Sweden","NAME_LONG":"Sweden","BRK_A3":"SWE","BRK_NAME":"Sweden","BRK_GROUP":null,"ABBREV":"Swe.","POSTAL":"S","FORMAL_EN":"Kingdom of Sweden","FORMAL_FR":null,"NAME_CIAWF":"Sweden","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Sweden","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":4,"MAPCOLOR9":2,"MAPCOLOR13":4,"POP_EST":9960487,"POP_RANK":13,"GDP_MD_EST":498100,"POP_YEAR":2017,"LASTCENSUS":-99,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":-99,"FIPS_10_":"SW","ISO_A2":"SE","ISO_A3":"SWE","ISO_A3_EH":"SWE","ISO_N3":"752","UN_A3":"752","WB_A2":"SE","WB_A3":"SWE","WOE_ID":23424954,"WOE_ID_EH":23424954,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SWE","ADM0_A3_US":"SWE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Northern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-447,562]],"bbox":[30.676609,-27.285879,32.071665,-25.660191],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Swaziland","SOV_A3":"SWZ","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Swaziland","ADM0_A3":"SWZ","GEOU_DIF":0,"GEOUNIT":"Swaziland","GU_A3":"SWZ","SU_DIF":0,"SUBUNIT":"Swaziland","SU_A3":"SWZ","BRK_DIFF":0,"NAME":"Swaziland","NAME_LONG":"Swaziland","BRK_A3":"SWZ","BRK_NAME":"Swaziland","BRK_GROUP":null,"ABBREV":"Swz.","POSTAL":"SW","FORMAL_EN":"Kingdom of Swaziland","FORMAL_FR":null,"NAME_CIAWF":"Swaziland","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Swaziland","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":6,"MAPCOLOR9":2,"MAPCOLOR13":5,"POP_EST":1467152,"POP_RANK":12,"GDP_MD_EST":11060,"POP_YEAR":2017,"LASTCENSUS":2007,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"WZ","ISO_A2":"SZ","ISO_A3":"SWZ","ISO_A3_EH":"SWZ","ISO_N3":"748","UN_A3":"748","WB_A2":"SZ","WB_A3":"SWZ","WOE_ID":23424993,"WOE_ID_EH":23424993,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SWZ","ADM0_A3_US":"SWZ","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Southern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-362,-380,-367,-411,563,564]],"bbox":[35.700798,32.312938,42.349591,37.229873],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Syria","SOV_A3":"SYR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Syria","ADM0_A3":"SYR","GEOU_DIF":0,"GEOUNIT":"Syria","GU_A3":"SYR","SU_DIF":0,"SUBUNIT":"Syria","SU_A3":"SYR","BRK_DIFF":0,"NAME":"Syria","NAME_LONG":"Syria","BRK_A3":"SYR","BRK_NAME":"Syria","BRK_GROUP":null,"ABBREV":"Syria","POSTAL":"SYR","FORMAL_EN":"Syrian Arab Republic","FORMAL_FR":null,"NAME_CIAWF":"Syria","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Syrian Arab Republic","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":6,"MAPCOLOR9":2,"MAPCOLOR13":6,"POP_EST":18028549,"POP_RANK":14,"GDP_MD_EST":50280,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2015,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"SY","ISO_A2":"SY","ISO_A3":"SYR","ISO_A3_EH":"SYR","ISO_N3":"760","UN_A3":"760","WB_A2":"SY","WB_A3":"SYR","WOE_ID":23424956,"WOE_ID_EH":23424956,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"SYR","ADM0_A3_US":"SYR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-122,-195,-465,-417,-542]],"bbox":[13.540394,7.421925,23.88689,23.40972],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Chad","SOV_A3":"TCD","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Chad","ADM0_A3":"TCD","GEOU_DIF":0,"GEOUNIT":"Chad","GU_A3":"TCD","SU_DIF":0,"SUBUNIT":"Chad","SU_A3":"TCD","BRK_DIFF":0,"NAME":"Chad","NAME_LONG":"Chad","BRK_A3":"TCD","BRK_NAME":"Chad","BRK_GROUP":null,"ABBREV":"Chad","POSTAL":"TD","FORMAL_EN":"Republic of Chad","FORMAL_FR":null,"NAME_CIAWF":"Chad","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Chad","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":1,"MAPCOLOR9":8,"MAPCOLOR13":6,"POP_EST":12075985,"POP_RANK":14,"GDP_MD_EST":30590,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"CD","ISO_A2":"TD","ISO_A3":"TCD","ISO_A3_EH":"TCD","ISO_N3":"148","UN_A3":"148","WB_A2":"TD","WB_A3":"TCD","WOE_ID":23424777,"WOE_ID_EH":23424777,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TCD","ADM0_A3_US":"TCD","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Middle Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-69,565,-290,-73]],"bbox":[-0.049785,5.928837,1.865241,11.018682],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":6,"SOVEREIGNT":"Togo","SOV_A3":"TGO","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Togo","ADM0_A3":"TGO","GEOU_DIF":0,"GEOUNIT":"Togo","GU_A3":"TGO","SU_DIF":0,"SUBUNIT":"Togo","SU_A3":"TGO","BRK_DIFF":0,"NAME":"Togo","NAME_LONG":"Togo","BRK_A3":"TGO","BRK_NAME":"Togo","BRK_GROUP":null,"ABBREV":"Togo","POSTAL":"TG","FORMAL_EN":"Togolese Republic","FORMAL_FR":"République Togolaise","NAME_CIAWF":"Togo","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Togo","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":1,"MAPCOLOR9":3,"MAPCOLOR13":5,"POP_EST":7965055,"POP_RANK":13,"GDP_MD_EST":11610,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"TO","ISO_A2":"TG","ISO_A3":"TGO","ISO_A3_EH":"TGO","ISO_N3":"768","UN_A3":"768","WB_A2":"TG","WB_A3":"TGO","WOE_ID":23424965,"WOE_ID_EH":23424965,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TGO","ADM0_A3_US":"TGO","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Western Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":4,"LONG_LEN":4,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":5,"MAX_LABEL":10}},{"type":"Polygon","arcs":[[-396,566,-460,567,-439,-408]],"bbox":[97.375896,5.691384,105.589039,20.41785],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Thailand","SOV_A3":"THA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Thailand","ADM0_A3":"THA","GEOU_DIF":0,"GEOUNIT":"Thailand","GU_A3":"THA","SU_DIF":0,"SUBUNIT":"Thailand","SU_A3":"THA","BRK_DIFF":0,"NAME":"Thailand","NAME_LONG":"Thailand","BRK_A3":"THA","BRK_NAME":"Thailand","BRK_GROUP":null,"ABBREV":"Thai.","POSTAL":"TH","FORMAL_EN":"Kingdom of Thailand","FORMAL_FR":null,"NAME_CIAWF":"Thailand","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Thailand","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":6,"MAPCOLOR9":8,"MAPCOLOR13":1,"POP_EST":68414135,"POP_RANK":16,"GDP_MD_EST":1161000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"TH","ISO_A2":"TH","ISO_A3":"THA","ISO_A3_EH":"THA","ISO_N3":"764","UN_A3":"764","WB_A2":"TH","WB_A3":"THA","WOE_ID":23424960,"WOE_ID_EH":23424960,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"THA","ADM0_A3_US":"THA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-3,568,-394,-167]],"bbox":[67.44222,36.738171,74.980002,40.960213],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Tajikistan","SOV_A3":"TJK","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Tajikistan","ADM0_A3":"TJK","GEOU_DIF":0,"GEOUNIT":"Tajikistan","GU_A3":"TJK","SU_DIF":0,"SUBUNIT":"Tajikistan","SU_A3":"TJK","BRK_DIFF":0,"NAME":"Tajikistan","NAME_LONG":"Tajikistan","BRK_A3":"TJK","BRK_NAME":"Tajikistan","BRK_GROUP":null,"ABBREV":"Tjk.","POSTAL":"TJ","FORMAL_EN":"Republic of Tajikistan","FORMAL_FR":null,"NAME_CIAWF":"Tajikistan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Tajikistan","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":6,"MAPCOLOR9":2,"MAPCOLOR13":5,"POP_EST":8468555,"POP_RANK":13,"GDP_MD_EST":25810,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"TI","ISO_A2":"TJ","ISO_A3":"TJK","ISO_A3_EH":"TJK","ISO_N3":"762","UN_A3":"762","WB_A2":"TJ","WB_A3":"TJK","WOE_ID":23424961,"WOE_ID_EH":23424961,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TJK","ADM0_A3_US":"TJK","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Central Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-1,-357,569,-386,570]],"bbox":[52.50246,35.270664,66.54615,42.751551],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Turkmenistan","SOV_A3":"TKM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Turkmenistan","ADM0_A3":"TKM","GEOU_DIF":0,"GEOUNIT":"Turkmenistan","GU_A3":"TKM","SU_DIF":0,"SUBUNIT":"Turkmenistan","SU_A3":"TKM","BRK_DIFF":0,"NAME":"Turkmenistan","NAME_LONG":"Turkmenistan","BRK_A3":"TKM","BRK_NAME":"Turkmenistan","BRK_GROUP":null,"ABBREV":"Turkm.","POSTAL":"TM","FORMAL_EN":"Turkmenistan","FORMAL_FR":null,"NAME_CIAWF":"Turkmenistan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Turkmenistan","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":2,"MAPCOLOR9":1,"MAPCOLOR13":9,"POP_EST":5351277,"POP_RANK":13,"GDP_MD_EST":94720,"POP_YEAR":2017,"LASTCENSUS":1995,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"TX","ISO_A2":"TM","ISO_A3":"TKM","ISO_A3_EH":"TKM","ISO_N3":"795","UN_A3":"795","WB_A2":"TM","WB_A3":"TKM","WOE_ID":23424972,"WOE_ID_EH":23424972,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TKM","ADM0_A3_US":"TKM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Central Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":12,"LONG_LEN":12,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-332,571]],"bbox":[124.968682,-9.393173,127.335928,-8.273345],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"East Timor","SOV_A3":"TLS","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"East Timor","ADM0_A3":"TLS","GEOU_DIF":0,"GEOUNIT":"East Timor","GU_A3":"TLS","SU_DIF":0,"SUBUNIT":"East Timor","SU_A3":"TLS","BRK_DIFF":0,"NAME":"Timor-Leste","NAME_LONG":"Timor-Leste","BRK_A3":"TLS","BRK_NAME":"Timor-Leste","BRK_GROUP":null,"ABBREV":"T.L.","POSTAL":"TL","FORMAL_EN":"Democratic Republic of Timor-Leste","FORMAL_FR":null,"NAME_CIAWF":"Timor-Leste","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Timor-Leste","NAME_ALT":"East Timor","MAPCOLOR7":2,"MAPCOLOR8":2,"MAPCOLOR9":4,"MAPCOLOR13":3,"POP_EST":1291358,"POP_RANK":12,"GDP_MD_EST":4975,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"TT","ISO_A2":"TL","ISO_A3":"TLS","ISO_A3_EH":"TLS","ISO_N3":"626","UN_A3":"626","WB_A2":"TP","WB_A3":"TMP","WOE_ID":23424968,"WOE_ID_EH":23424968,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TLS","ADM0_A3_US":"TLS","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":11,"LONG_LEN":11,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[572]],"bbox":[-61.95,10,-60.895,10.89],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":5,"SOVEREIGNT":"Trinidad and Tobago","SOV_A3":"TTO","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Trinidad and Tobago","ADM0_A3":"TTO","GEOU_DIF":0,"GEOUNIT":"Trinidad and Tobago","GU_A3":"TTO","SU_DIF":0,"SUBUNIT":"Trinidad and Tobago","SU_A3":"TTO","BRK_DIFF":0,"NAME":"Trinidad and Tobago","NAME_LONG":"Trinidad and Tobago","BRK_A3":"TTO","BRK_NAME":"Trinidad and Tobago","BRK_GROUP":null,"ABBREV":"Tr.T.","POSTAL":"TT","FORMAL_EN":"Republic of Trinidad and Tobago","FORMAL_FR":null,"NAME_CIAWF":"Trinidad and Tobago","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Trinidad and Tobago","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":6,"MAPCOLOR9":2,"MAPCOLOR13":5,"POP_EST":1218208,"POP_RANK":12,"GDP_MD_EST":43570,"POP_YEAR":2017,"LASTCENSUS":2011,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"TD","ISO_A2":"TT","ISO_A3":"TTO","ISO_A3_EH":"TTO","ISO_N3":"780","UN_A3":"780","WB_A2":"TT","WB_A3":"TTO","WOE_ID":23424958,"WOE_ID_EH":23424958,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TTO","ADM0_A3_US":"TTO","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Caribbean","REGION_WB":"Latin America & Caribbean","NAME_LEN":19,"LONG_LEN":19,"ABBREV_LEN":5,"TINY":2,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4.5,"MAX_LABEL":9.5}},{"type":"Polygon","arcs":[[-242,573,-414]],"bbox":[7.524482,30.307556,11.488787,37.349994],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Tunisia","SOV_A3":"TUN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Tunisia","ADM0_A3":"TUN","GEOU_DIF":0,"GEOUNIT":"Tunisia","GU_A3":"TUN","SU_DIF":0,"SUBUNIT":"Tunisia","SU_A3":"TUN","BRK_DIFF":0,"NAME":"Tunisia","NAME_LONG":"Tunisia","BRK_A3":"TUN","BRK_NAME":"Tunisia","BRK_GROUP":null,"ABBREV":"Tun.","POSTAL":"TN","FORMAL_EN":"Republic of Tunisia","FORMAL_FR":null,"NAME_CIAWF":"Tunisia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Tunisia","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":3,"MAPCOLOR9":3,"MAPCOLOR13":2,"POP_EST":11403800,"POP_RANK":14,"GDP_MD_EST":130800,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"TS","ISO_A2":"TN","ISO_A3":"TUN","ISO_A3_EH":"TUN","ISO_N3":"788","UN_A3":"788","WB_A2":"TN","WB_A3":"TUN","WOE_ID":23424967,"WOE_ID_EH":23424967,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TUN","ADM0_A3_US":"TUN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Northern Africa","REGION_WB":"Middle East & North Africa","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[-36,-355,-363,-565,574,-287]],[[-83,575,-304]]],"bbox":[26.043351,35.821535,44.79399,42.141485],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Turkey","SOV_A3":"TUR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Turkey","ADM0_A3":"TUR","GEOU_DIF":0,"GEOUNIT":"Turkey","GU_A3":"TUR","SU_DIF":0,"SUBUNIT":"Turkey","SU_A3":"TUR","BRK_DIFF":0,"NAME":"Turkey","NAME_LONG":"Turkey","BRK_A3":"TUR","BRK_NAME":"Turkey","BRK_GROUP":null,"ABBREV":"Tur.","POSTAL":"TR","FORMAL_EN":"Republic of Turkey","FORMAL_FR":null,"NAME_CIAWF":"Turkey","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Turkey","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":3,"MAPCOLOR9":8,"MAPCOLOR13":4,"POP_EST":80845215,"POP_RANK":16,"GDP_MD_EST":1670000,"POP_YEAR":2017,"LASTCENSUS":2000,"GDP_YEAR":2016,"ECONOMY":"4. Emerging region: MIKT","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"TU","ISO_A2":"TR","ISO_A3":"TUR","ISO_A3_EH":"TUR","ISO_N3":"792","UN_A3":"792","WB_A2":"TR","WB_A3":"TUR","WOE_ID":23424969,"WOE_ID_EH":23424969,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TUR","ADM0_A3_US":"TUR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[576]],"bbox":[120.106189,21.970571,121.951244,25.295459],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Taiwan","SOV_A3":"TWN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Taiwan","ADM0_A3":"TWN","GEOU_DIF":0,"GEOUNIT":"Taiwan","GU_A3":"TWN","SU_DIF":0,"SUBUNIT":"Taiwan","SU_A3":"TWN","BRK_DIFF":1,"NAME":"Taiwan","NAME_LONG":"Taiwan","BRK_A3":"B77","BRK_NAME":"Taiwan","BRK_GROUP":null,"ABBREV":"Taiwan","POSTAL":"TW","FORMAL_EN":null,"FORMAL_FR":null,"NAME_CIAWF":"Taiwan","NOTE_ADM0":null,"NOTE_BRK":"Self admin.; Claimed by China","NAME_SORT":"Taiwan","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":5,"MAPCOLOR9":7,"MAPCOLOR13":2,"POP_EST":23508428,"POP_RANK":15,"GDP_MD_EST":1127000,"POP_YEAR":2017,"LASTCENSUS":-99,"GDP_YEAR":2016,"ECONOMY":"2. Developed region: nonG7","INCOME_GRP":"2. High income: nonOECD","WIKIPEDIA":-99,"FIPS_10_":"TW","ISO_A2":"TW","ISO_A3":"TWN","ISO_A3_EH":"TWN","ISO_N3":"158","UN_A3":"-099","WB_A2":"-99","WB_A3":"-99","WOE_ID":23424971,"WOE_ID_EH":23424971,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TWN","ADM0_A3_US":"TWN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-62,-536,577,-391,578,-444,-456,579,-201]],"bbox":[29.339998,-11.720938,40.31659,-0.95],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"United Republic of Tanzania","SOV_A3":"TZA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"United Republic of Tanzania","ADM0_A3":"TZA","GEOU_DIF":0,"GEOUNIT":"Tanzania","GU_A3":"TZA","SU_DIF":0,"SUBUNIT":"Tanzania","SU_A3":"TZA","BRK_DIFF":0,"NAME":"Tanzania","NAME_LONG":"Tanzania","BRK_A3":"TZA","BRK_NAME":"Tanzania","BRK_GROUP":null,"ABBREV":"Tanz.","POSTAL":"TZ","FORMAL_EN":"United Republic of Tanzania","FORMAL_FR":null,"NAME_CIAWF":"Tanzania","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Tanzania","NAME_ALT":null,"MAPCOLOR7":3,"MAPCOLOR8":6,"MAPCOLOR9":2,"MAPCOLOR13":2,"POP_EST":53950935,"POP_RANK":16,"GDP_MD_EST":150600,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"TZ","ISO_A2":"TZ","ISO_A3":"TZA","ISO_A3_EH":"TZA","ISO_N3":"834","UN_A3":"834","WB_A2":"TZ","WB_A3":"TZA","WOE_ID":23424973,"WOE_ID_EH":23424973,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"TZA","ADM0_A3_US":"TZA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-199,-545,-392,-578,-535]],"bbox":[29.579466,-1.443322,35.03599,4.249885],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Uganda","SOV_A3":"UGA","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Uganda","ADM0_A3":"UGA","GEOU_DIF":0,"GEOUNIT":"Uganda","GU_A3":"UGA","SU_DIF":0,"SUBUNIT":"Uganda","SU_A3":"UGA","BRK_DIFF":0,"NAME":"Uganda","NAME_LONG":"Uganda","BRK_A3":"UGA","BRK_NAME":"Uganda","BRK_GROUP":null,"ABBREV":"Uga.","POSTAL":"UG","FORMAL_EN":"Republic of Uganda","FORMAL_FR":null,"NAME_CIAWF":"Uganda","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Uganda","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":3,"MAPCOLOR9":6,"MAPCOLOR13":4,"POP_EST":39570125,"POP_RANK":15,"GDP_MD_EST":84930,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"UG","ISO_A2":"UG","ISO_A3":"UGA","ISO_A3_EH":"UGA","ISO_N3":"800","UN_A3":"800","WB_A2":"UG","WB_A3":"UGA","WOE_ID":23424974,"WOE_ID_EH":23424974,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"UGA","ADM0_A3_US":"UGA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-96,-516,580,-522,581,-513,-429,-512,-327,-560,-498]],"bbox":[22.085608,45.293308,40.080789,52.335075],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Ukraine","SOV_A3":"UKR","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Ukraine","ADM0_A3":"UKR","GEOU_DIF":0,"GEOUNIT":"Ukraine","GU_A3":"UKR","SU_DIF":0,"SUBUNIT":"Ukraine","SU_A3":"UKR","BRK_DIFF":0,"NAME":"Ukraine","NAME_LONG":"Ukraine","BRK_A3":"UKR","BRK_NAME":"Ukraine","BRK_GROUP":null,"ABBREV":"Ukr.","POSTAL":"UA","FORMAL_EN":"Ukraine","FORMAL_FR":null,"NAME_CIAWF":"Ukraine","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Ukraine","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":1,"MAPCOLOR9":6,"MAPCOLOR13":3,"POP_EST":44033874,"POP_RANK":15,"GDP_MD_EST":352600,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"UP","ISO_A2":"UA","ISO_A3":"UKR","ISO_A3_EH":"UKR","ISO_N3":"804","UN_A3":"804","WB_A2":"UA","WB_A3":"UKR","WOE_ID":23424976,"WOE_ID_EH":23424976,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"UKR","ADM0_A3_US":"UKR","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Europe","REGION_UN":"Europe","SUBREGION":"Eastern Europe","REGION_WB":"Europe & Central Asia","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7}},{"type":"Polygon","arcs":[[-30,-113,582]],"bbox":[-58.427074,-34.952647,-53.209589,-30.109686],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Uruguay","SOV_A3":"URY","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Uruguay","ADM0_A3":"URY","GEOU_DIF":0,"GEOUNIT":"Uruguay","GU_A3":"URY","SU_DIF":0,"SUBUNIT":"Uruguay","SU_A3":"URY","BRK_DIFF":0,"NAME":"Uruguay","NAME_LONG":"Uruguay","BRK_A3":"URY","BRK_NAME":"Uruguay","BRK_GROUP":null,"ABBREV":"Ury.","POSTAL":"UY","FORMAL_EN":"Oriental Republic of Uruguay","FORMAL_FR":null,"NAME_CIAWF":"Uruguay","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Uruguay","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":2,"MAPCOLOR9":2,"MAPCOLOR13":10,"POP_EST":3360148,"POP_RANK":12,"GDP_MD_EST":73250,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"UY","ISO_A2":"UY","ISO_A3":"URY","ISO_A3_EH":"URY","ISO_N3":"858","UN_A3":"858","WB_A2":"UY","WB_A3":"URY","WOE_ID":23424979,"WOE_ID_EH":23424979,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"URY","ADM0_A3_US":"URY","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"MultiPolygon","arcs":[[[-141,583,-433,584]],[[-139,585,586]],[[587]],[[588]],[[589]],[[590]],[[591]],[[592]],[[593]],[[594]]],"bbox":[-171.791111,18.91619,-66.96466,71.357764],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"United States of America","SOV_A3":"US1","ADM0_DIF":1,"LEVEL":2,"TYPE":"Country","ADMIN":"United States of America","ADM0_A3":"USA","GEOU_DIF":0,"GEOUNIT":"United States of America","GU_A3":"USA","SU_DIF":0,"SUBUNIT":"United States","SU_A3":"USA","BRK_DIFF":0,"NAME":"United States","NAME_LONG":"United States Of America","BRK_A3":"USA","BRK_NAME":"United States","BRK_GROUP":null,"ABBREV":"U.S.A.","POSTAL":"US","FORMAL_EN":"United States of America","FORMAL_FR":null,"NAME_CIAWF":"United States","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"United States of America","NAME_ALT":null,"MAPCOLOR7":4,"MAPCOLOR8":5,"MAPCOLOR9":1,"MAPCOLOR13":1,"POP_EST":326625791,"POP_RANK":17,"GDP_MD_EST":18560000,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"1. Developed region: G7","INCOME_GRP":"1. High income: OECD","WIKIPEDIA":0,"FIPS_10_":"US","ISO_A2":"US","ISO_A3":"USA","ISO_A3_EH":"USA","ISO_N3":"840","UN_A3":"840","WB_A2":"US","WB_A3":"USA","WOE_ID":23424977,"WOE_ID_EH":23424977,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"USA","ADM0_A3_US":"USA","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"North America","REGION_UN":"Americas","SUBREGION":"Northern America","REGION_WB":"North America","NAME_LEN":24,"LONG_LEN":13,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":5.7}},{"type":"Polygon","arcs":[[-2,-571,-385,-395,-569]],"bbox":[55.928917,37.144994,73.055417,45.586804],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Uzbekistan","SOV_A3":"UZB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Uzbekistan","ADM0_A3":"UZB","GEOU_DIF":0,"GEOUNIT":"Uzbekistan","GU_A3":"UZB","SU_DIF":0,"SUBUNIT":"Uzbekistan","SU_A3":"UZB","BRK_DIFF":0,"NAME":"Uzbekistan","NAME_LONG":"Uzbekistan","BRK_A3":"UZB","BRK_NAME":"Uzbekistan","BRK_GROUP":null,"ABBREV":"Uzb.","POSTAL":"UZ","FORMAL_EN":"Republic of Uzbekistan","FORMAL_FR":null,"NAME_CIAWF":"Uzbekistan","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Uzbekistan","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":3,"MAPCOLOR9":5,"MAPCOLOR13":4,"POP_EST":29748859,"POP_RANK":15,"GDP_MD_EST":202300,"POP_YEAR":2017,"LASTCENSUS":1989,"GDP_YEAR":2016,"ECONOMY":"6. Developing region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"UZ","ISO_A2":"UZ","ISO_A3":"UZB","ISO_A3_EH":"UZB","ISO_N3":"860","UN_A3":"860","WB_A2":"UZ","WB_A3":"UZB","WOE_ID":23424980,"WOE_ID_EH":23424980,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"UZB","ADM0_A3_US":"UZB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Central Asia","REGION_WB":"Europe & Central Asia","NAME_LEN":10,"LONG_LEN":10,"ABBREV_LEN":4,"TINY":5,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-108,-210,595,-313]],"bbox":[-73.304952,0.724452,-59.758285,12.162307],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Venezuela","SOV_A3":"VEN","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Venezuela","ADM0_A3":"VEN","GEOU_DIF":0,"GEOUNIT":"Venezuela","GU_A3":"VEN","SU_DIF":0,"SUBUNIT":"Venezuela","SU_A3":"VEN","BRK_DIFF":0,"NAME":"Venezuela","NAME_LONG":"Venezuela","BRK_A3":"VEN","BRK_NAME":"Venezuela","BRK_GROUP":null,"ABBREV":"Ven.","POSTAL":"VE","FORMAL_EN":"Bolivarian Republic of Venezuela","FORMAL_FR":"República Bolivariana de Venezuela","NAME_CIAWF":"Venezuela","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Venezuela, RB","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":3,"MAPCOLOR9":1,"MAPCOLOR13":4,"POP_EST":31304016,"POP_RANK":15,"GDP_MD_EST":468600,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"VE","ISO_A2":"VE","ISO_A3":"VEN","ISO_A3_EH":"VEN","ISO_N3":"862","UN_A3":"862","WB_A2":"VE","WB_A3":"VEN","WOE_ID":23424982,"WOE_ID_EH":23424982,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"VEN","ADM0_A3_US":"VEN","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"South America","REGION_UN":"Americas","SUBREGION":"South America","REGION_WB":"Latin America & Caribbean","NAME_LEN":9,"LONG_LEN":9,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":7.5}},{"type":"Polygon","arcs":[[-175,596,-398,-407]],"bbox":[102.170436,8.59976,109.33527,23.352063],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"Vietnam","SOV_A3":"VNM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Vietnam","ADM0_A3":"VNM","GEOU_DIF":0,"GEOUNIT":"Vietnam","GU_A3":"VNM","SU_DIF":0,"SUBUNIT":"Vietnam","SU_A3":"VNM","BRK_DIFF":0,"NAME":"Vietnam","NAME_LONG":"Vietnam","BRK_A3":"VNM","BRK_NAME":"Vietnam","BRK_GROUP":null,"ABBREV":"Viet.","POSTAL":"VN","FORMAL_EN":"Socialist Republic of Vietnam","FORMAL_FR":null,"NAME_CIAWF":"Vietnam","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Vietnam","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":6,"MAPCOLOR9":5,"MAPCOLOR13":4,"POP_EST":96160163,"POP_RANK":16,"GDP_MD_EST":594900,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"VM","ISO_A2":"VN","ISO_A3":"VNM","ISO_A3_EH":"VNM","ISO_N3":"704","UN_A3":"704","WB_A2":"VN","WB_A3":"VNM","WOE_ID":23424984,"WOE_ID_EH":23424984,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"VNM","ADM0_A3_US":"VNM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"South-Eastern Asia","REGION_WB":"East Asia & Pacific","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":5,"TINY":2,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":2,"MAX_LABEL":7}},{"type":"MultiPolygon","arcs":[[[597]],[[598]]],"bbox":[166.629137,-16.59785,167.844877,-14.626497],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":4,"SOVEREIGNT":"Vanuatu","SOV_A3":"VUT","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Vanuatu","ADM0_A3":"VUT","GEOU_DIF":0,"GEOUNIT":"Vanuatu","GU_A3":"VUT","SU_DIF":0,"SUBUNIT":"Vanuatu","SU_A3":"VUT","BRK_DIFF":0,"NAME":"Vanuatu","NAME_LONG":"Vanuatu","BRK_A3":"VUT","BRK_NAME":"Vanuatu","BRK_GROUP":null,"ABBREV":"Van.","POSTAL":"VU","FORMAL_EN":"Republic of Vanuatu","FORMAL_FR":null,"NAME_CIAWF":"Vanuatu","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Vanuatu","NAME_ALT":null,"MAPCOLOR7":6,"MAPCOLOR8":3,"MAPCOLOR9":7,"MAPCOLOR13":3,"POP_EST":282814,"POP_RANK":10,"GDP_MD_EST":723,"POP_YEAR":2017,"LASTCENSUS":2009,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"NH","ISO_A2":"VU","ISO_A3":"VUT","ISO_A3_EH":"VUT","ISO_N3":"548","UN_A3":"548","WB_A2":"VU","WB_A3":"VUT","WOE_ID":23424907,"WOE_ID_EH":23424907,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"VUT","ADM0_A3_US":"VUT","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Oceania","REGION_UN":"Oceania","SUBREGION":"Melanesia","REGION_WB":"East Asia & Pacific","NAME_LEN":7,"LONG_LEN":7,"ABBREV_LEN":4,"TINY":2,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":4,"MAX_LABEL":9}},{"type":"Polygon","arcs":[[-481,599,-538]],"bbox":[42.604873,12.58595,53.108573,19.000003],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Yemen","SOV_A3":"YEM","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Yemen","ADM0_A3":"YEM","GEOU_DIF":0,"GEOUNIT":"Yemen","GU_A3":"YEM","SU_DIF":0,"SUBUNIT":"Yemen","SU_A3":"YEM","BRK_DIFF":0,"NAME":"Yemen","NAME_LONG":"Yemen","BRK_A3":"YEM","BRK_NAME":"Yemen","BRK_GROUP":null,"ABBREV":"Yem.","POSTAL":"YE","FORMAL_EN":"Republic of Yemen","FORMAL_FR":null,"NAME_CIAWF":"Yemen","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Yemen, Rep.","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":3,"MAPCOLOR9":3,"MAPCOLOR13":11,"POP_EST":28036829,"POP_RANK":15,"GDP_MD_EST":73450,"POP_YEAR":2017,"LASTCENSUS":2004,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"YM","ISO_A2":"YE","ISO_A3":"YEM","ISO_A3_EH":"YEM","ISO_N3":"887","UN_A3":"887","WB_A2":"RY","WB_A3":"YEM","WOE_ID":23425002,"WOE_ID_EH":23425002,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"YEM","ADM0_A3_US":"YEM","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Asia","REGION_UN":"Asia","SUBREGION":"Western Asia","REGION_WB":"Middle East & North Africa","NAME_LEN":5,"LONG_LEN":5,"ABBREV_LEN":4,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-118,600,-448,-563,-446,601,-462],[-420]],"bbox":[16.344977,-34.819166,32.83012,-22.091313],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":2,"SOVEREIGNT":"South Africa","SOV_A3":"ZAF","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"South Africa","ADM0_A3":"ZAF","GEOU_DIF":0,"GEOUNIT":"South Africa","GU_A3":"ZAF","SU_DIF":0,"SUBUNIT":"South Africa","SU_A3":"ZAF","BRK_DIFF":0,"NAME":"South Africa","NAME_LONG":"South Africa","BRK_A3":"ZAF","BRK_NAME":"South Africa","BRK_GROUP":null,"ABBREV":"S.Af.","POSTAL":"ZA","FORMAL_EN":"Republic of South Africa","FORMAL_FR":null,"NAME_CIAWF":"South Africa","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"South Africa","NAME_ALT":null,"MAPCOLOR7":2,"MAPCOLOR8":3,"MAPCOLOR9":4,"MAPCOLOR13":2,"POP_EST":54841552,"POP_RANK":16,"GDP_MD_EST":739100,"POP_YEAR":2017,"LASTCENSUS":2001,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"3. Upper middle income","WIKIPEDIA":-99,"FIPS_10_":"SF","ISO_A2":"ZA","ISO_A3":"ZAF","ISO_A3_EH":"ZAF","ISO_N3":"710","UN_A3":"710","WB_A2":"ZA","WB_A3":"ZAF","WOE_ID":23424942,"WOE_ID_EH":23424942,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ZAF","ADM0_A3_US":"ZAF","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Southern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":12,"LONG_LEN":12,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":1.7,"MAX_LABEL":6.7}},{"type":"Polygon","arcs":[[-10,-202,-580,-455,-450,602,-120,-461]],"bbox":[21.887843,-17.961229,33.485688,-8.238257],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Zambia","SOV_A3":"ZMB","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Zambia","ADM0_A3":"ZMB","GEOU_DIF":0,"GEOUNIT":"Zambia","GU_A3":"ZMB","SU_DIF":0,"SUBUNIT":"Zambia","SU_A3":"ZMB","BRK_DIFF":0,"NAME":"Zambia","NAME_LONG":"Zambia","BRK_A3":"ZMB","BRK_NAME":"Zambia","BRK_GROUP":null,"ABBREV":"Zambia","POSTAL":"ZM","FORMAL_EN":"Republic of Zambia","FORMAL_FR":null,"NAME_CIAWF":"Zambia","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Zambia","NAME_ALT":null,"MAPCOLOR7":5,"MAPCOLOR8":8,"MAPCOLOR9":5,"MAPCOLOR13":13,"POP_EST":15972000,"POP_RANK":14,"GDP_MD_EST":65170,"POP_YEAR":2017,"LASTCENSUS":2010,"GDP_YEAR":2016,"ECONOMY":"7. Least developed region","INCOME_GRP":"4. Lower middle income","WIKIPEDIA":-99,"FIPS_10_":"ZA","ISO_A2":"ZM","ISO_A3":"ZMB","ISO_A3_EH":"ZMB","ISO_N3":"894","UN_A3":"894","WB_A2":"ZM","WB_A3":"ZMB","WOE_ID":23425003,"WOE_ID_EH":23425003,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ZMB","ADM0_A3_US":"ZMB","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":6,"LONG_LEN":6,"ABBREV_LEN":6,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}},{"type":"Polygon","arcs":[[-121,-603,-449,-601]],"bbox":[25.264226,-22.271612,32.849861,-15.507787],"properties":{"scalerank":1,"featurecla":"Admin-0 country","LABELRANK":3,"SOVEREIGNT":"Zimbabwe","SOV_A3":"ZWE","ADM0_DIF":0,"LEVEL":2,"TYPE":"Sovereign country","ADMIN":"Zimbabwe","ADM0_A3":"ZWE","GEOU_DIF":0,"GEOUNIT":"Zimbabwe","GU_A3":"ZWE","SU_DIF":0,"SUBUNIT":"Zimbabwe","SU_A3":"ZWE","BRK_DIFF":0,"NAME":"Zimbabwe","NAME_LONG":"Zimbabwe","BRK_A3":"ZWE","BRK_NAME":"Zimbabwe","BRK_GROUP":null,"ABBREV":"Zimb.","POSTAL":"ZW","FORMAL_EN":"Republic of Zimbabwe","FORMAL_FR":null,"NAME_CIAWF":"Zimbabwe","NOTE_ADM0":null,"NOTE_BRK":null,"NAME_SORT":"Zimbabwe","NAME_ALT":null,"MAPCOLOR7":1,"MAPCOLOR8":5,"MAPCOLOR9":3,"MAPCOLOR13":9,"POP_EST":13805084,"POP_RANK":14,"GDP_MD_EST":28330,"POP_YEAR":2017,"LASTCENSUS":2002,"GDP_YEAR":2016,"ECONOMY":"5. Emerging region: G20","INCOME_GRP":"5. Low income","WIKIPEDIA":-99,"FIPS_10_":"ZI","ISO_A2":"ZW","ISO_A3":"ZWE","ISO_A3_EH":"ZWE","ISO_N3":"716","UN_A3":"716","WB_A2":"ZW","WB_A3":"ZWE","WOE_ID":23425004,"WOE_ID_EH":23425004,"WOE_NOTE":"Exact WOE match as country","ADM0_A3_IS":"ZWE","ADM0_A3_US":"ZWE","ADM0_A3_UN":-99,"ADM0_A3_WB":-99,"CONTINENT":"Africa","REGION_UN":"Africa","SUBREGION":"Eastern Africa","REGION_WB":"Sub-Saharan Africa","NAME_LEN":8,"LONG_LEN":8,"ABBREV_LEN":5,"TINY":-99,"HOMEPART":1,"MIN_ZOOM":0,"MIN_LABEL":3,"MAX_LABEL":8}}],"bbox":[-180,-90,180,83.64513]}},"arcs":[[[61.210817,35.650072],[62.230651,35.270664],[62.984662,35.404041],[63.193538,35.857166],[63.982896,36.007957],[64.546479,36.312073],[64.746105,37.111818],[65.588948,37.305217],[65.745631,37.661164],[66.217385,37.39379],[66.518607,37.362784]],[[66.518607,37.362784],[67.075782,37.356144],[67.83,37.144994]],[[67.83,37.144994],[68.135562,37.023115],[68.859446,37.344336],[69.196273,37.151144],[69.518785,37.608997],[70.116578,37.588223],[70.270574,37.735165],[70.376304,38.138396],[70.806821,38.486282],[71.348131,38.258905],[71.239404,37.953265],[71.541918,37.905774],[71.448693,37.065645],[71.844638,36.738171],[72.193041,36.948288],[72.63689,37.047558],[73.260056,37.495257],[73.948696,37.421566],[74.980002,37.41999]],[[74.980002,37.41999],[75.158028,37.133031]],[[75.158028,37.133031],[74.575893,37.020841],[74.067552,36.836176],[72.920025,36.720007],[71.846292,36.509942],[71.262348,36.074388],[71.498768,35.650563],[71.613076,35.153203],[71.115019,34.733126],[71.156773,34.348911],[70.881803,33.988856],[69.930543,34.02012],[70.323594,33.358533],[69.687147,33.105499],[69.262522,32.501944],[69.317764,31.901412],[68.926677,31.620189],[68.556932,31.71331],[67.792689,31.58293],[67.683394,31.303154],[66.938891,31.304911],[66.381458,30.738899],[66.346473,29.887943],[65.046862,29.472181],[64.350419,29.560031],[64.148002,29.340819],[63.550261,29.468331],[62.549857,29.318572],[60.874248,29.829239]],[[60.874248,29.829239],[61.781222,30.73585],[61.699314,31.379506],[60.941945,31.548075],[60.863655,32.18292],[60.536078,32.981269],[60.9637,33.528832],[60.52843,33.676446],[60.803193,34.404102],[61.210817,35.650072]],[[23.215048,-17.523116],[21.377176,-17.930636],[18.956187,-17.789095],[18.263309,-17.309951],[14.209707,-17.353101],[14.058501,-17.423381],[13.462362,-16.971212],[12.814081,-16.941343],[12.215461,-17.111668],[11.734199,-17.301889]],[[11.734199,-17.301889],[11.640096,-16.673142],[11.778537,-15.793816],[12.123581,-14.878316],[12.175619,-14.449144],[12.500095,-13.5477],[12.738479,-13.137906],[13.312914,-12.48363],[13.633721,-12.038645],[13.738728,-11.297863],[13.686379,-10.731076],[13.387328,-10.373578],[13.120988,-9.766897],[12.87537,-9.166934],[12.929061,-8.959091],[13.236433,-8.562629],[12.93304,-7.596539],[12.728298,-6.927122],[12.227347,-6.294448],[12.322432,-6.100092]],[[12.322432,-6.100092],[12.735171,-5.965682],[13.024869,-5.984389],[13.375597,-5.864241],[16.326528,-5.87747],[16.57318,-6.622645],[16.860191,-7.222298],[17.089996,-7.545689],[17.47297,-8.068551],[18.134222,-7.987678],[18.464176,-7.847014],[19.016752,-7.988246],[19.166613,-7.738184],[19.417502,-7.155429],[20.037723,-7.116361],[20.091622,-6.94309],[20.601823,-6.939318],[20.514748,-7.299606],[21.728111,-7.290872],[21.746456,-7.920085],[21.949131,-8.305901],[21.801801,-8.908707],[21.875182,-9.523708],[22.208753,-9.894796],[22.155268,-11.084801],[22.402798,-10.993075],[22.837345,-11.017622],[23.456791,-10.867863],[23.912215,-10.926826]],[[23.912215,-10.926826],[24.017894,-11.237298],[23.904154,-11.722282],[24.079905,-12.191297],[23.930922,-12.565848],[24.016137,-12.911046],[21.933886,-12.898437],[21.887843,-16.08031],[22.562478,-16.898451],[23.215048,-17.523116]],[[12.182337,-5.789931],[11.914963,-5.037987]],[[11.914963,-5.037987],[12.318608,-4.60623],[12.62076,-4.438023],[12.995517,-4.781103]],[[12.995517,-4.781103],[12.631612,-4.991271],[12.468004,-5.248362],[12.436688,-5.684304],[12.182337,-5.789931]],[[21.02004,40.842727],[20.99999,40.580004],[20.674997,40.435],[20.615,40.110007],[20.150016,39.624998]],[[20.150016,39.624998],[19.98,39.694993],[19.960002,39.915006],[19.406082,40.250773],[19.319059,40.72723],[19.40355,41.409566],[19.540027,41.719986],[19.371769,41.877548],[19.371768,41.877551]],[[19.371768,41.877551],[19.304486,42.195745],[19.738051,42.688247],[19.801613,42.500093],[20.0707,42.58863]],[[20.0707,42.58863],[20.283755,42.32026],[20.52295,42.21787],[20.590247,41.855409]],[[20.590247,41.855409],[20.590247,41.855404],[20.463175,41.515089],[20.605182,41.086226],[21.02004,40.842727]],[[51.579519,24.245497],[51.757441,24.294073],[51.794389,24.019826],[52.577081,24.177439],[53.404007,24.151317],[54.008001,24.121758],[54.693024,24.797892],[55.439025,25.439145],[56.070821,26.055464]],[[56.070821,26.055464],[56.261042,25.714606]],[[56.261042,25.714606],[56.396847,24.924732]],[[56.396847,24.924732],[55.886233,24.920831],[55.804119,24.269604],[55.981214,24.130543],[55.528632,23.933604],[55.525841,23.524869],[55.234489,23.110993],[55.208341,22.70833]],[[55.208341,22.70833],[55.006803,22.496948],[52.000733,23.001154],[51.617708,24.014219],[51.579519,24.245497]],[[-66.95992,-54.89681],[-67.56244,-54.87001],[-68.63335,-54.8695],[-68.63401,-52.63637]],[[-68.63401,-52.63637],[-68.25,-53.1],[-67.75,-53.85],[-66.45,-54.45],[-65.05,-54.7],[-65.5,-55.2],[-66.45,-55.25],[-66.95992,-54.89681]],[[-68.571545,-52.299444],[-69.498362,-52.142761],[-71.914804,-52.009022],[-72.329404,-51.425956],[-72.309974,-50.67701],[-72.975747,-50.74145],[-73.328051,-50.378785],[-73.415436,-49.318436],[-72.648247,-48.878618],[-72.331161,-48.244238],[-72.447355,-47.738533],[-71.917258,-46.884838],[-71.552009,-45.560733],[-71.659316,-44.973689],[-71.222779,-44.784243],[-71.329801,-44.407522],[-71.793623,-44.207172],[-71.464056,-43.787611],[-71.915424,-43.408565],[-72.148898,-42.254888],[-71.746804,-42.051386],[-71.915734,-40.832339],[-71.680761,-39.808164],[-71.413517,-38.916022],[-70.814664,-38.552995],[-71.118625,-37.576827],[-71.121881,-36.658124],[-70.364769,-36.005089],[-70.388049,-35.169688],[-69.817309,-34.193571],[-69.814777,-33.273886],[-70.074399,-33.09121],[-70.535069,-31.36501],[-69.919008,-30.336339],[-70.01355,-29.367923],[-69.65613,-28.459141],[-69.001235,-27.521214],[-68.295542,-26.89934],[-68.5948,-26.506909],[-68.386001,-26.185016],[-68.417653,-24.518555],[-67.328443,-24.025303],[-66.985234,-22.986349],[-67.106674,-22.735925]],[[-67.106674,-22.735925],[-66.273339,-21.83231],[-64.964892,-22.075862],[-64.377021,-22.798091],[-63.986838,-21.993644],[-62.846468,-22.034985],[-62.685057,-22.249029]],[[-62.685057,-22.249029],[-60.846565,-23.880713],[-60.028966,-24.032796],[-58.807128,-24.771459],[-57.777217,-25.16234],[-57.63366,-25.603657],[-58.618174,-27.123719],[-57.60976,-27.395899],[-56.486702,-27.548499],[-55.695846,-27.387837],[-54.788795,-26.621786],[-54.625291,-25.739255]],[[-54.625291,-25.739255],[-54.13005,-25.547639],[-53.628349,-26.124865],[-53.648735,-26.923473],[-54.490725,-27.474757],[-55.162286,-27.881915],[-56.2909,-28.852761],[-57.625133,-30.216295]],[[-57.625133,-30.216295],[-57.874937,-31.016556],[-58.14244,-32.044504],[-58.132648,-33.040567],[-58.349611,-33.263189],[-58.427074,-33.909454]],[[-58.427074,-33.909454],[-58.495442,-34.43149],[-57.22583,-35.288027],[-57.362359,-35.97739],[-56.737487,-36.413126],[-56.788285,-36.901572],[-57.749157,-38.183871],[-59.231857,-38.72022],[-61.237445,-38.928425],[-62.335957,-38.827707],[-62.125763,-39.424105],[-62.330531,-40.172586],[-62.145994,-40.676897],[-62.745803,-41.028761],[-63.770495,-41.166789],[-64.73209,-40.802677],[-65.118035,-41.064315],[-64.978561,-42.058001],[-64.303408,-42.359016],[-63.755948,-42.043687],[-63.458059,-42.563138],[-64.378804,-42.873558],[-65.181804,-43.495381],[-65.328823,-44.501366],[-65.565269,-45.036786],[-66.509966,-45.039628],[-67.293794,-45.551896],[-67.580546,-46.301773],[-66.597066,-47.033925],[-65.641027,-47.236135],[-65.985088,-48.133289],[-67.166179,-48.697337],[-67.816088,-49.869669],[-68.728745,-50.264218],[-69.138539,-50.73251],[-68.815561,-51.771104],[-68.149995,-52.349983],[-68.571545,-52.299444]],[[43.582746,41.092143],[44.97248,41.248129]],[[44.97248,41.248129],[45.179496,40.985354],[45.560351,40.81229],[45.359175,40.561504],[45.891907,40.218476],[45.610012,39.899994],[46.034534,39.628021],[46.483499,39.464155],[46.50572,38.770605]],[[46.50572,38.770605],[46.143623,38.741201]],[[46.143623,38.741201],[45.735379,39.319719],[45.739978,39.473999],[45.298145,39.471751],[45.001987,39.740004],[44.79399,39.713003]],[[44.79399,39.713003],[44.400009,40.005],[43.656436,40.253564],[43.752658,40.740201],[43.582746,41.092143]],[[-59.572095,-80.040179],[-59.865849,-80.549657],[-60.159656,-81.000327],[-62.255393,-80.863178],[-64.488125,-80.921934],[-65.741666,-80.588827],[-65.741666,-80.549657],[-66.290031,-80.255773],[-64.037688,-80.294944],[-61.883246,-80.39287],[-61.138976,-79.981371],[-60.610119,-79.628679],[-59.572095,-80.040179]],[[-159.208184,-79.497059],[-161.127601,-79.634209],[-162.439847,-79.281465],[-163.027408,-78.928774],[-163.066604,-78.869966],[-163.712896,-78.595667],[-163.712896,-78.595667],[-163.105801,-78.223338],[-161.245113,-78.380176],[-160.246208,-78.693645],[-159.482405,-79.046338],[-159.208184,-79.497059]],[[-45.154758,-78.04707],[-43.920828,-78.478103],[-43.48995,-79.08556],[-43.372438,-79.516645],[-43.333267,-80.026123],[-44.880537,-80.339644],[-46.506174,-80.594357],[-48.386421,-80.829485],[-50.482107,-81.025442],[-52.851988,-80.966685],[-54.164259,-80.633528],[-53.987991,-80.222028],[-51.853134,-79.94773],[-50.991326,-79.614623],[-50.364595,-79.183487],[-49.914131,-78.811209],[-49.306959,-78.458569],[-48.660616,-78.047018],[-48.660616,-78.047019],[-48.151396,-78.04707],[-46.662857,-77.831476],[-45.154758,-78.04707]],[[-121.211511,-73.50099],[-119.918851,-73.657725],[-118.724143,-73.481353],[-119.292119,-73.834097],[-120.232217,-74.08881],[-121.62283,-74.010468],[-122.621735,-73.657778],[-122.621735,-73.657777],[-122.406245,-73.324619],[-121.211511,-73.50099]],[[-125.559566,-73.481353],[-124.031882,-73.873268],[-124.619469,-73.834097],[-125.912181,-73.736118],[-127.28313,-73.461769],[-127.28313,-73.461768],[-126.558472,-73.246226],[-125.559566,-73.481353]],[[-98.98155,-71.933334],[-97.884743,-72.070535],[-96.787937,-71.952971],[-96.20035,-72.521205],[-96.983765,-72.442864],[-98.198083,-72.482035],[-99.432013,-72.442864],[-100.783455,-72.50162],[-101.801868,-72.305663],[-102.330725,-71.894164],[-102.330725,-71.894164],[-101.703967,-71.717792],[-100.430919,-71.854993],[-98.98155,-71.933334]],[[-68.451346,-70.955823],[-68.333834,-71.406493],[-68.510128,-71.798407],[-68.784297,-72.170736],[-69.959471,-72.307885],[-71.075889,-72.503842],[-72.388134,-72.484257],[-71.8985,-72.092343],[-73.073622,-72.229492],[-74.19004,-72.366693],[-74.953895,-72.072757],[-75.012625,-71.661258],[-73.915819,-71.269345],[-73.915819,-71.269344],[-73.230331,-71.15178],[-72.074717,-71.190951],[-71.780962,-70.681473],[-71.72218,-70.309196],[-71.741791,-69.505782],[-71.173815,-69.035475],[-70.253252,-68.87874],[-69.724447,-69.251017],[-69.489422,-69.623346],[-69.058518,-70.074016],[-68.725541,-70.505153],[-68.451346,-70.955823]],[[-58.614143,-64.152467],[-59.045073,-64.36801],[-59.789342,-64.211223],[-60.611928,-64.309202],[-61.297416,-64.54433],[-62.0221,-64.799094],[-62.51176,-65.09303],[-62.648858,-65.484942],[-62.590128,-65.857219],[-62.120079,-66.190326],[-62.805567,-66.425505],[-63.74569,-66.503847],[-64.294106,-66.837004],[-64.881693,-67.150474],[-65.508425,-67.58161],[-65.665082,-67.953887],[-65.312545,-68.365335],[-64.783715,-68.678908],[-63.961103,-68.913984],[-63.1973,-69.227556],[-62.785955,-69.619419],[-62.570516,-69.991747],[-62.276736,-70.383661],[-61.806661,-70.716768],[-61.512906,-71.089045],[-61.375809,-72.010074],[-61.081977,-72.382351],[-61.003661,-72.774265],[-60.690269,-73.166179],[-60.827367,-73.695242],[-61.375809,-74.106742],[-61.96337,-74.439848],[-63.295201,-74.576997],[-63.74569,-74.92974],[-64.352836,-75.262847],[-65.860987,-75.635124],[-67.192818,-75.79191],[-68.446282,-76.007452],[-69.797724,-76.222995],[-70.600724,-76.634494],[-72.206776,-76.673665],[-73.969536,-76.634494],[-75.555977,-76.712887],[-77.24037,-76.712887],[-76.926979,-77.104802],[-75.399294,-77.28107],[-74.282876,-77.55542],[-73.656119,-77.908112],[-74.772536,-78.221633],[-76.4961,-78.123654],[-77.925858,-78.378419],[-77.984666,-78.789918],[-78.023785,-79.181833],[-76.848637,-79.514939],[-76.633224,-79.887216],[-75.360097,-80.259545],[-73.244852,-80.416331],[-71.442946,-80.69063],[-70.013163,-81.004151],[-68.191646,-81.317672],[-65.704279,-81.474458],[-63.25603,-81.748757],[-61.552026,-82.042692],[-59.691416,-82.37585],[-58.712121,-82.846106],[-58.222487,-83.218434],[-57.008117,-82.865691],[-55.362894,-82.571755],[-53.619771,-82.258235],[-51.543644,-82.003521],[-49.76135,-81.729171],[-47.273931,-81.709586],[-44.825708,-81.846735],[-42.808363,-82.081915],[-42.16202,-81.65083],[-40.771433,-81.356894],[-38.244818,-81.337309],[-36.26667,-81.121715],[-34.386397,-80.906172],[-32.310296,-80.769023],[-30.097098,-80.592651],[-28.549802,-80.337938],[-29.254901,-79.985195],[-29.685805,-79.632503],[-29.685805,-79.260226],[-31.624808,-79.299397],[-33.681324,-79.456132],[-35.639912,-79.456132],[-35.914107,-79.083855],[-35.77701,-78.339248],[-35.326546,-78.123654],[-33.896763,-77.888526],[-32.212369,-77.65345],[-30.998051,-77.359515],[-29.783732,-77.065579],[-28.882779,-76.673665],[-27.511752,-76.497345],[-26.160336,-76.360144],[-25.474822,-76.281803],[-23.927552,-76.24258],[-22.458598,-76.105431],[-21.224694,-75.909474],[-20.010375,-75.674346],[-18.913543,-75.439218],[-17.522982,-75.125698],[-16.641589,-74.79254],[-15.701491,-74.498604],[-15.40771,-74.106742],[-16.46532,-73.871614],[-16.112784,-73.460114],[-15.446855,-73.146542],[-14.408805,-72.950585],[-13.311973,-72.715457],[-12.293508,-72.401936],[-11.510067,-72.010074],[-11.020433,-71.539767],[-10.295774,-71.265416],[-9.101015,-71.324224],[-8.611381,-71.65733],[-7.416622,-71.696501],[-7.377451,-71.324224],[-6.868232,-70.93231],[-5.790985,-71.030289],[-5.536375,-71.402617],[-4.341667,-71.461373],[-3.048981,-71.285053],[-1.795492,-71.167438],[-0.659489,-71.226246],[-0.228637,-71.637745],[0.868195,-71.304639],[1.886686,-71.128267],[3.022638,-70.991118],[4.139055,-70.853917],[5.157546,-70.618789],[6.273912,-70.462055],[7.13572,-70.246512],[7.742866,-69.893769],[8.48711,-70.148534],[9.525135,-70.011333],[10.249845,-70.48164],[10.817821,-70.834332],[11.953824,-70.638375],[12.404287,-70.246512],[13.422778,-69.972162],[14.734998,-70.030918],[15.126757,-70.403247],[15.949342,-70.030918],[17.026589,-69.913354],[18.201711,-69.874183],[19.259373,-69.893769],[20.375739,-70.011333],[21.452985,-70.07014],[21.923034,-70.403247],[22.569403,-70.697182],[23.666184,-70.520811],[24.841357,-70.48164],[25.977309,-70.48164],[27.093726,-70.462055],[28.09258,-70.324854],[29.150242,-70.20729],[30.031583,-69.93294],[30.971733,-69.75662],[31.990172,-69.658641],[32.754053,-69.384291],[33.302443,-68.835642],[33.870419,-68.502588],[34.908495,-68.659271],[35.300202,-69.012014],[36.16201,-69.247142],[37.200035,-69.168748],[37.905108,-69.52144],[38.649404,-69.776205],[39.667894,-69.541077],[40.020431,-69.109941],[40.921358,-68.933621],[41.959434,-68.600514],[42.938702,-68.463313],[44.113876,-68.267408],[44.897291,-68.051866],[45.719928,-67.816738],[46.503343,-67.601196],[47.44344,-67.718759],[48.344419,-67.366068],[48.990736,-67.091718],[49.930885,-67.111303],[50.753471,-66.876175],[50.949325,-66.523484],[51.791547,-66.249133],[52.614133,-66.053176],[53.613038,-65.89639],[54.53355,-65.818049],[55.414943,-65.876805],[56.355041,-65.974783],[57.158093,-66.249133],[57.255968,-66.680218],[58.137361,-67.013324],[58.744508,-67.287675],[59.939318,-67.405239],[60.605221,-67.679589],[61.427806,-67.953887],[62.387489,-68.012695],[63.19049,-67.816738],[64.052349,-67.405239],[64.992447,-67.620729],[65.971715,-67.738345],[66.911864,-67.855909],[67.891133,-67.934302],[68.890038,-67.934302],[69.712624,-68.972791],[69.673453,-69.227556],[69.555941,-69.678226],[68.596258,-69.93294],[67.81274,-70.305268],[67.949889,-70.697182],[69.066307,-70.677545],[68.929157,-71.069459],[68.419989,-71.441788],[67.949889,-71.853287],[68.71377,-72.166808],[69.869307,-72.264787],[71.024895,-72.088415],[71.573285,-71.696501],[71.906288,-71.324224],[72.454627,-71.010703],[73.08141,-70.716768],[73.33602,-70.364024],[73.864877,-69.874183],[74.491557,-69.776205],[75.62756,-69.737034],[76.626465,-69.619419],[77.644904,-69.462684],[78.134539,-69.07077],[78.428371,-68.698441],[79.113859,-68.326216],[80.093127,-68.071503],[80.93535,-67.875546],[81.483792,-67.542388],[82.051767,-67.366068],[82.776426,-67.209282],[83.775331,-67.30726],[84.676206,-67.209282],[85.655527,-67.091718],[86.752359,-67.150474],[87.477017,-66.876175],[87.986289,-66.209911],[88.358411,-66.484261],[88.828408,-66.954568],[89.67063,-67.150474],[90.630365,-67.228867],[91.5901,-67.111303],[92.608539,-67.189696],[93.548637,-67.209282],[94.17542,-67.111303],[95.017591,-67.170111],[95.781472,-67.385653],[96.682399,-67.248504],[97.759646,-67.248504],[98.68021,-67.111303],[99.718182,-67.248504],[100.384188,-66.915346],[100.893356,-66.58224],[101.578896,-66.30789],[102.832411,-65.563284],[103.478676,-65.700485],[104.242557,-65.974783],[104.90846,-66.327527],[106.181561,-66.934931],[107.160881,-66.954568],[108.081393,-66.954568],[109.15864,-66.837004],[110.235835,-66.699804],[111.058472,-66.425505],[111.74396,-66.13157],[112.860378,-66.092347],[113.604673,-65.876805],[114.388088,-66.072762],[114.897308,-66.386283],[115.602381,-66.699804],[116.699161,-66.660633],[117.384701,-66.915346],[118.57946,-67.170111],[119.832924,-67.268089],[120.871,-67.189696],[121.654415,-66.876175],[122.320369,-66.562654],[123.221296,-66.484261],[124.122274,-66.621462],[125.160247,-66.719389],[126.100396,-66.562654],[127.001427,-66.562654],[127.882768,-66.660633],[128.80328,-66.758611],[129.704259,-66.58224],[130.781454,-66.425505],[131.799945,-66.386283],[132.935896,-66.386283],[133.85646,-66.288304],[134.757387,-66.209963],[135.031582,-65.72007],[135.070753,-65.308571],[135.697485,-65.582869],[135.873805,-66.033591],[136.206705,-66.44509],[136.618049,-66.778197],[137.460271,-66.954568],[138.596223,-66.895761],[139.908442,-66.876175],[140.809421,-66.817367],[142.121692,-66.817367],[143.061842,-66.797782],[144.374061,-66.837004],[145.490427,-66.915346],[146.195552,-67.228867],[145.999699,-67.601196],[146.646067,-67.895131],[147.723263,-68.130259],[148.839629,-68.385024],[150.132314,-68.561292],[151.483705,-68.71813],[152.502247,-68.874813],[153.638199,-68.894502],[154.284567,-68.561292],[155.165857,-68.835642],[155.92979,-69.149215],[156.811132,-69.384291],[158.025528,-69.482269],[159.181013,-69.599833],[159.670699,-69.991747],[160.80665,-70.226875],[161.570479,-70.579618],[162.686897,-70.736353],[163.842434,-70.716768],[164.919681,-70.775524],[166.11444,-70.755938],[167.309095,-70.834332],[168.425616,-70.971481],[169.463589,-71.20666],[170.501665,-71.402617],[171.20679,-71.696501],[171.089227,-72.088415],[170.560422,-72.441159],[170.109958,-72.891829],[169.75737,-73.24452],[169.287321,-73.65602],[167.975101,-73.812806],[167.387489,-74.165498],[166.094803,-74.38104],[165.644391,-74.772954],[164.958851,-75.145283],[164.234193,-75.458804],[163.822797,-75.870303],[163.568239,-76.24258],[163.47026,-76.693302],[163.489897,-77.065579],[164.057873,-77.457442],[164.273363,-77.82977],[164.743464,-78.182514],[166.604126,-78.319611],[166.995781,-78.750748],[165.193876,-78.907483],[163.666217,-79.123025],[161.766385,-79.162248],[160.924162,-79.730482],[160.747894,-80.200737],[160.316964,-80.573066],[159.788211,-80.945395],[161.120016,-81.278501],[161.629287,-81.690001],[162.490992,-82.062278],[163.705336,-82.395435],[165.095949,-82.708956],[166.604126,-83.022477],[168.895665,-83.335998],[169.404782,-83.825891],[172.283934,-84.041433],[172.477049,-84.117914],[173.224083,-84.41371],[175.985672,-84.158997],[178.277212,-84.472518],[180,-84.71338],[180,-90],[-180,-90],[-180,-84.71338],[-179.942499,-84.721443],[-179.058677,-84.139412],[-177.256772,-84.452933],[-177.140807,-84.417941],[-176.084673,-84.099259],[-175.947235,-84.110449],[-175.829882,-84.117914],[-174.382503,-84.534323],[-173.116559,-84.117914],[-172.889106,-84.061019],[-169.951223,-83.884647],[-168.999989,-84.117914],[-168.530199,-84.23739],[-167.022099,-84.570497],[-164.182144,-84.82521],[-161.929775,-85.138731],[-158.07138,-85.37391],[-155.192253,-85.09956],[-150.942099,-85.295517],[-148.533073,-85.609038],[-145.888918,-85.315102],[-143.107718,-85.040752],[-142.892279,-84.570497],[-146.829068,-84.531274],[-150.060732,-84.296146],[-150.902928,-83.904232],[-153.586201,-83.68869],[-153.409907,-83.23802],[-153.037759,-82.82652],[-152.665637,-82.454192],[-152.861517,-82.042692],[-154.526299,-81.768394],[-155.29018,-81.41565],[-156.83745,-81.102129],[-154.408787,-81.160937],[-152.097662,-81.004151],[-150.648293,-81.337309],[-148.865998,-81.043373],[-147.22075,-80.671045],[-146.417749,-80.337938],[-146.770286,-79.926439],[-148.062947,-79.652089],[-149.531901,-79.358205],[-151.588416,-79.299397],[-153.390322,-79.162248],[-155.329376,-79.064269],[-155.975668,-78.69194],[-157.268302,-78.378419],[-158.051768,-78.025676],[-158.365134,-76.889207],[-157.875474,-76.987238],[-156.974573,-77.300759],[-155.329376,-77.202728],[-153.742832,-77.065579],[-152.920247,-77.496664],[-151.33378,-77.398737],[-150.00195,-77.183143],[-148.748486,-76.908845],[-147.612483,-76.575738],[-146.104409,-76.47776],[-146.143528,-76.105431],[-146.496091,-75.733154],[-146.20231,-75.380411],[-144.909624,-75.204039],[-144.322037,-75.537197],[-142.794353,-75.34124],[-141.638764,-75.086475],[-140.209007,-75.06689],[-138.85759,-74.968911],[-137.5062,-74.733783],[-136.428901,-74.518241],[-135.214583,-74.302699],[-134.431194,-74.361455],[-133.745654,-74.439848],[-132.257168,-74.302699],[-130.925311,-74.479019],[-129.554284,-74.459433],[-128.242038,-74.322284],[-126.890622,-74.420263],[-125.402082,-74.518241],[-124.011496,-74.479019],[-122.562152,-74.498604],[-121.073613,-74.518241],[-119.70256,-74.479019],[-118.684145,-74.185083],[-117.469801,-74.028348],[-116.216312,-74.243891],[-115.021552,-74.067519],[-113.944331,-73.714828],[-113.297988,-74.028348],[-112.945452,-74.38104],[-112.299083,-74.714198],[-111.261059,-74.420263],[-110.066325,-74.79254],[-108.714909,-74.910103],[-107.559346,-75.184454],[-106.149148,-75.125698],[-104.876074,-74.949326],[-103.367949,-74.988497],[-102.016507,-75.125698],[-100.645531,-75.302018],[-100.1167,-74.870933],[-100.763043,-74.537826],[-101.252703,-74.185083],[-102.545337,-74.106742],[-103.113313,-73.734413],[-103.328752,-73.362084],[-103.681289,-72.61753],[-102.917485,-72.754679],[-101.60524,-72.813436],[-100.312528,-72.754679],[-99.13738,-72.911414],[-98.118889,-73.20535],[-97.688037,-73.558041],[-96.336595,-73.616849],[-95.043961,-73.4797],[-93.672907,-73.283743],[-92.439003,-73.166179],[-91.420564,-73.401307],[-90.088733,-73.322914],[-89.226951,-72.558722],[-88.423951,-73.009393],[-87.268337,-73.185764],[-86.014822,-73.087786],[-85.192236,-73.4797],[-83.879991,-73.518871],[-82.665646,-73.636434],[-81.470913,-73.851977],[-80.687447,-73.4797],[-80.295791,-73.126956],[-79.296886,-73.518871],[-77.925858,-73.420892],[-76.907367,-73.636434],[-76.221879,-73.969541],[-74.890049,-73.871614],[-73.852024,-73.65602],[-72.833533,-73.401307],[-71.619215,-73.264157],[-70.209042,-73.146542],[-68.935916,-73.009393],[-67.956622,-72.79385],[-67.369061,-72.480329],[-67.134036,-72.049244],[-67.251548,-71.637745],[-67.56494,-71.245831],[-67.917477,-70.853917],[-68.230843,-70.462055],[-68.485452,-70.109311],[-68.544209,-69.717397],[-68.446282,-69.325535],[-67.976233,-68.953206],[-67.5845,-68.541707],[-67.427843,-68.149844],[-67.62367,-67.718759],[-67.741183,-67.326845],[-67.251548,-66.876175],[-66.703184,-66.58224],[-66.056815,-66.209963],[-65.371327,-65.89639],[-64.568276,-65.602506],[-64.176542,-65.171423],[-63.628152,-64.897073],[-63.001394,-64.642308],[-62.041686,-64.583552],[-61.414928,-64.270031],[-60.709855,-64.074074],[-59.887269,-63.95651],[-59.162585,-63.701745],[-58.594557,-63.388224],[-57.811143,-63.27066],[-57.223582,-63.525425],[-57.59573,-63.858532],[-58.614143,-64.152467]],[[68.935,-48.625],[69.58,-48.94],[70.525,-49.065],[70.56,-49.255],[70.28,-49.71],[68.745,-49.775],[68.72,-49.2425],[68.8675,-48.83],[68.935,-48.625]],[[145.397978,-40.792549],[146.364121,-41.137695],[146.908584,-41.000546],[147.689259,-40.808258],[148.289068,-40.875438],[148.359865,-42.062445],[148.017301,-42.407024],[147.914052,-43.211522],[147.564564,-42.937689],[146.870343,-43.634597],[146.663327,-43.580854],[146.048378,-43.549745],[145.43193,-42.693776],[145.29509,-42.03361],[144.718071,-41.162552],[144.743755,-40.703975],[145.397978,-40.792549]],[[143.561811,-13.763656],[143.922099,-14.548311],[144.563714,-14.171176],[144.894908,-14.594458],[145.374724,-14.984976],[145.271991,-15.428205],[145.48526,-16.285672],[145.637033,-16.784918],[145.888904,-16.906926],[146.160309,-17.761655],[146.063674,-18.280073],[146.387478,-18.958274],[147.471082,-19.480723],[148.177602,-19.955939],[148.848414,-20.39121],[148.717465,-20.633469],[149.28942,-21.260511],[149.678337,-22.342512],[150.077382,-22.122784],[150.482939,-22.556142],[150.727265,-22.402405],[150.899554,-23.462237],[151.609175,-24.076256],[152.07354,-24.457887],[152.855197,-25.267501],[153.136162,-26.071173],[153.161949,-26.641319],[153.092909,-27.2603],[153.569469,-28.110067],[153.512108,-28.995077],[153.339095,-29.458202],[153.069241,-30.35024],[153.089602,-30.923642],[152.891578,-31.640446],[152.450002,-32.550003],[151.709117,-33.041342],[151.343972,-33.816023],[151.010555,-34.31036],[150.714139,-35.17346],[150.32822,-35.671879],[150.075212,-36.420206],[149.946124,-37.109052],[149.997284,-37.425261],[149.423882,-37.772681],[148.304622,-37.809061],[147.381733,-38.219217],[146.922123,-38.606532],[146.317922,-39.035757],[145.489652,-38.593768],[144.876976,-38.417448],[145.032212,-37.896188],[144.485682,-38.085324],[143.609974,-38.809465],[142.745427,-38.538268],[142.17833,-38.380034],[141.606582,-38.308514],[140.638579,-38.019333],[139.992158,-37.402936],[139.806588,-36.643603],[139.574148,-36.138362],[139.082808,-35.732754],[138.120748,-35.612296],[138.449462,-35.127261],[138.207564,-34.384723],[137.71917,-35.076825],[136.829406,-35.260535],[137.352371,-34.707339],[137.503886,-34.130268],[137.890116,-33.640479],[137.810328,-32.900007],[136.996837,-33.752771],[136.372069,-34.094766],[135.989043,-34.890118],[135.208213,-34.47867],[135.239218,-33.947953],[134.613417,-33.222778],[134.085904,-32.848072],[134.273903,-32.617234],[132.990777,-32.011224],[132.288081,-31.982647],[131.326331,-31.495803],[129.535794,-31.590423],[128.240938,-31.948489],[127.102867,-32.282267],[126.148714,-32.215966],[125.088623,-32.728751],[124.221648,-32.959487],[124.028947,-33.483847],[123.659667,-33.890179],[122.811036,-33.914467],[122.183064,-34.003402],[121.299191,-33.821036],[120.580268,-33.930177],[119.893695,-33.976065],[119.298899,-34.509366],[119.007341,-34.464149],[118.505718,-34.746819],[118.024972,-35.064733],[117.295507,-35.025459],[116.625109,-35.025097],[115.564347,-34.386428],[115.026809,-34.196517],[115.048616,-33.623425],[115.545123,-33.487258],[115.714674,-33.259572],[115.679379,-32.900369],[115.801645,-32.205062],[115.689611,-31.612437],[115.160909,-30.601594],[114.997043,-30.030725],[115.040038,-29.461095],[114.641974,-28.810231],[114.616498,-28.516399],[114.173579,-28.118077],[114.048884,-27.334765],[113.477498,-26.543134],[113.338953,-26.116545],[113.778358,-26.549025],[113.440962,-25.621278],[113.936901,-25.911235],[114.232852,-26.298446],[114.216161,-25.786281],[113.721255,-24.998939],[113.625344,-24.683971],[113.393523,-24.384764],[113.502044,-23.80635],[113.706993,-23.560215],[113.843418,-23.059987],[113.736552,-22.475475],[114.149756,-21.755881],[114.225307,-22.517488],[114.647762,-21.82952],[115.460167,-21.495173],[115.947373,-21.068688],[116.711615,-20.701682],[117.166316,-20.623599],[117.441545,-20.746899],[118.229559,-20.374208],[118.836085,-20.263311],[118.987807,-20.044203],[119.252494,-19.952942],[119.805225,-19.976506],[120.85622,-19.683708],[121.399856,-19.239756],[121.655138,-18.705318],[122.241665,-18.197649],[122.286624,-17.798603],[122.312772,-17.254967],[123.012574,-16.4052],[123.433789,-17.268558],[123.859345,-17.069035],[123.503242,-16.596506],[123.817073,-16.111316],[124.258287,-16.327944],[124.379726,-15.56706],[124.926153,-15.0751],[125.167275,-14.680396],[125.670087,-14.51007],[125.685796,-14.230656],[126.125149,-14.347341],[126.142823,-14.095987],[126.582589,-13.952791],[127.065867,-13.817968],[127.804633,-14.276906],[128.35969,-14.86917],[128.985543,-14.875991],[129.621473,-14.969784],[129.4096,-14.42067],[129.888641,-13.618703],[130.339466,-13.357376],[130.183506,-13.10752],[130.617795,-12.536392],[131.223495,-12.183649],[131.735091,-12.302453],[132.575298,-12.114041],[132.557212,-11.603012],[131.824698,-11.273782],[132.357224,-11.128519],[133.019561,-11.376411],[133.550846,-11.786515],[134.393068,-12.042365],[134.678632,-11.941183],[135.298491,-12.248606],[135.882693,-11.962267],[136.258381,-12.049342],[136.492475,-11.857209],[136.95162,-12.351959],[136.685125,-12.887223],[136.305407,-13.29123],[135.961758,-13.324509],[136.077617,-13.724278],[135.783836,-14.223989],[135.428664,-14.715432],[135.500184,-14.997741],[136.295175,-15.550265],[137.06536,-15.870762],[137.580471,-16.215082],[138.303217,-16.807604],[138.585164,-16.806622],[139.108543,-17.062679],[139.260575,-17.371601],[140.215245,-17.710805],[140.875463,-17.369069],[141.07111,-16.832047],[141.274095,-16.38887],[141.398222,-15.840532],[141.702183,-15.044921],[141.56338,-14.561333],[141.63552,-14.270395],[141.519869,-13.698078],[141.65092,-12.944688],[141.842691,-12.741548],[141.68699,-12.407614],[141.928629,-11.877466],[142.118488,-11.328042],[142.143706,-11.042737],[142.51526,-10.668186],[142.79731,-11.157355],[142.866763,-11.784707],[143.115947,-11.90563],[143.158632,-12.325656],[143.522124,-12.834358],[143.597158,-13.400422],[143.561811,-13.763656]],[[16.979667,48.123497],[16.903754,47.714866],[16.340584,47.712902],[16.534268,47.496171],[16.202298,46.852386]],[[16.202298,46.852386],[16.011664,46.683611],[15.137092,46.658703],[14.632472,46.431817],[13.806475,46.509306]],[[13.806475,46.509306],[12.376485,46.767559],[12.153088,47.115393],[11.164828,46.941579],[11.048556,46.751359],[10.442701,46.893546]],[[10.442701,46.893546],[9.932448,46.920728],[9.47997,47.10281],[9.632932,47.347601],[9.594226,47.525058]],[[9.594226,47.525058],[9.896068,47.580197],[10.402084,47.302488],[10.544504,47.566399],[11.426414,47.523766],[12.141357,47.703083],[12.62076,47.672388],[12.932627,47.467646],[13.025851,47.637584],[12.884103,48.289146],[13.243357,48.416115],[13.595946,48.877172]],[[13.595946,48.877172],[14.338898,48.555305],[14.901447,48.964402],[15.253416,49.039074],[16.029647,48.733899],[16.499283,48.785808],[16.960288,48.596982]],[[16.960288,48.596982],[16.879983,48.470013],[16.979667,48.123497]],[[44.97248,41.248129],[45.217426,41.411452],[45.962601,41.123873],[46.501637,41.064445],[46.637908,41.181673],[46.145432,41.722802],[46.404951,41.860675]],[[46.404951,41.860675],[46.686071,41.827137],[47.373315,41.219732],[47.815666,41.151416],[47.987283,41.405819],[48.584353,41.808869]],[[48.584353,41.808869],[49.110264,41.282287],[49.618915,40.572924],[50.08483,40.526157],[50.392821,40.256561],[49.569202,40.176101],[49.395259,39.399482],[49.223228,39.049219],[48.856532,38.815486],[48.883249,38.320245]],[[48.883249,38.320245],[48.634375,38.270378],[48.010744,38.794015],[48.355529,39.288765],[48.060095,39.582235],[47.685079,39.508364],[46.50572,38.770605]],[[46.143623,38.741201],[45.457722,38.874139],[44.952688,39.335765],[44.79399,39.713003]],[[29.339998,-4.499983],[29.276384,-3.293907],[29.024926,-2.839258]],[[29.024926,-2.839258],[29.632176,-2.917858],[29.938359,-2.348487],[30.469674,-2.413855]],[[30.469674,-2.413855],[30.52766,-2.80762],[30.74301,-3.03431],[30.75224,-3.35931],[30.50554,-3.56858],[30.11632,-4.09012],[29.753512,-4.452389],[29.339998,-4.499983]],[[6.156658,50.803721],[6.043073,50.128052]],[[6.043073,50.128052],[5.782417,50.090328],[5.674052,49.529484]],[[5.674052,49.529484],[4.799222,49.985373],[4.286023,49.907497],[3.588184,50.378992],[3.123252,50.780363],[2.658422,50.796848],[2.513573,51.148506]],[[2.513573,51.148506],[3.314971,51.345781],[3.315011,51.345777]],[[3.315011,51.345777],[3.314971,51.345755],[4.047071,51.267259],[4.973991,51.475024],[5.606976,51.037298],[6.156658,50.803721]],[[2.691702,6.258817],[1.865241,6.142158]],[[1.865241,6.142158],[1.618951,6.832038],[1.664478,9.12859],[1.463043,9.334624],[1.425061,9.825395],[1.077795,10.175607],[0.772336,10.470808],[0.899563,10.997339]],[[0.899563,10.997339],[1.24347,11.110511],[1.447178,11.547719],[1.935986,11.64115],[2.154474,11.94015]],[[2.154474,11.94015],[2.490164,12.233052],[2.848643,12.235636],[3.61118,11.660167]],[[3.61118,11.660167],[3.572216,11.327939],[3.797112,10.734746],[3.60007,10.332186],[3.705438,10.06321],[3.220352,9.444153],[2.912308,9.137608],[2.723793,8.506845],[2.749063,7.870734],[2.691702,6.258817]],[[0.899563,10.997339],[0.023803,11.018682]],[[0.023803,11.018682],[-0.438702,11.098341],[-0.761576,10.93693],[-1.203358,11.009819],[-2.940409,10.96269],[-2.963896,10.395335],[-2.827496,9.642461]],[[-2.827496,9.642461],[-3.511899,9.900326],[-3.980449,9.862344],[-4.330247,9.610835],[-4.779884,9.821985],[-4.954653,10.152714],[-5.404342,10.370737]],[[-5.404342,10.370737],[-5.470565,10.95127],[-5.197843,11.375146],[-5.220942,11.713859],[-4.427166,12.542646],[-4.280405,13.228444],[-4.006391,13.472485],[-3.522803,13.337662],[-3.103707,13.541267],[-2.967694,13.79815],[-2.191825,14.246418],[-2.001035,14.559008],[-1.066363,14.973815],[-0.515854,15.116158],[-0.266257,14.924309],[0.374892,14.928908]],[[0.374892,14.928908],[0.295646,14.444235],[0.429928,13.988733],[0.993046,13.33575],[1.024103,12.851826],[2.177108,12.625018],[2.154474,11.94015]],[[92.672721,22.041239],[92.652257,21.324048],[92.303234,21.475485],[92.368554,20.670883]],[[92.368554,20.670883],[92.082886,21.192195],[92.025215,21.70157],[91.834891,22.182936],[91.417087,22.765019],[90.496006,22.805017],[90.586957,22.392794],[90.272971,21.836368],[89.847467,22.039146],[89.70205,21.857116],[89.418863,21.966179],[89.031961,22.055708]],[[89.031961,22.055708],[88.876312,22.879146],[88.52977,23.631142],[88.69994,24.233715],[88.084422,24.501657],[88.306373,24.866079],[88.931554,25.238692],[88.209789,25.768066],[88.563049,26.446526],[89.355094,26.014407],[89.832481,25.965082],[89.920693,25.26975],[90.872211,25.132601],[91.799596,25.147432],[92.376202,24.976693],[91.915093,24.130414],[91.46773,24.072639],[91.158963,23.503527],[91.706475,22.985264],[91.869928,23.624346],[92.146035,23.627499],[92.672721,22.041239]],[[22.65715,44.234923],[22.944832,43.823785],[23.332302,43.897011],[24.100679,43.741051],[25.569272,43.688445],[26.065159,43.943494],[27.2424,44.175986],[27.970107,43.812468],[28.558081,43.707462]],[[28.558081,43.707462],[28.039095,43.293172],[27.673898,42.577892],[27.99672,42.007359]],[[27.99672,42.007359],[27.135739,42.141485],[26.117042,41.826905]],[[26.117042,41.826905],[26.106138,41.328899],[25.197201,41.234486],[24.492645,41.583896],[23.692074,41.309081],[22.952377,41.337994]],[[22.952377,41.337994],[22.881374,41.999297],[22.380526,42.32026]],[[22.380526,42.32026],[22.545012,42.461362],[22.436595,42.580321],[22.604801,42.898519],[22.986019,43.211161],[22.500157,43.642814],[22.410446,44.008063],[22.65715,44.234923]],[[-77.53466,23.75975],[-77.78,23.71],[-78.03405,24.28615],[-78.40848,24.57564],[-78.19087,25.2103],[-77.89,25.17],[-77.54,24.34],[-77.53466,23.75975]],[[-77.82,26.58],[-78.91,26.42],[-78.98,26.79],[-78.51,26.87],[-77.85,26.84],[-77.82,26.58]],[[-77,26.59],[-77.17255,25.87918],[-77.35641,26.00735],[-77.34,26.53],[-77.78802,26.92516],[-77.79,27.04],[-77,26.59]],[[19.21852,43.52384],[19.03165,43.43253],[18.70648,43.20011],[18.56,42.65]],[[18.56,42.65],[17.674922,43.028563],[17.297373,43.446341],[16.916156,43.667722],[16.456443,44.04124],[16.23966,44.351143],[15.750026,44.818712],[15.959367,45.233777],[16.318157,45.004127],[16.534939,45.211608],[17.002146,45.233777],[17.861783,45.06774],[18.553214,45.08159],[19.005485,44.860234]],[[19.005485,44.860234],[19.00548,44.86023],[19.36803,44.863],[19.11761,44.42307],[19.59976,44.03847],[19.454,43.5681],[19.21852,43.52384]],[[23.484128,53.912498],[24.450684,53.905702],[25.536354,54.282423],[25.768433,54.846963],[26.588279,55.167176],[26.494331,55.615107]],[[26.494331,55.615107],[27.10246,55.783314],[28.176709,56.16913]],[[28.176709,56.16913],[29.229513,55.918344],[29.371572,55.670091],[29.896294,55.789463],[30.873909,55.550976],[30.971836,55.081548],[30.757534,54.811771],[31.384472,54.157056],[31.791424,53.974639],[31.731273,53.794029],[32.405599,53.618045],[32.693643,53.351421],[32.304519,53.132726],[31.49764,53.16743],[31.305201,53.073996],[31.540018,52.742052],[31.78597,52.10168],[31.785992,52.101678]],[[31.785992,52.101678],[30.927549,52.042353],[30.619454,51.822806],[30.555117,51.319503],[30.157364,51.416138],[29.254938,51.368234],[28.992835,51.602044],[28.617613,51.427714],[28.241615,51.572227],[27.454066,51.592303],[26.337959,51.832289],[25.327788,51.910656],[24.553106,51.888461],[24.005078,51.617444],[23.527071,51.578454]],[[23.527071,51.578454],[23.508002,52.023647],[23.199494,52.486977],[23.799199,52.691099],[23.804935,53.089731],[23.527536,53.470122],[23.484128,53.912498]],[[-89.14308,17.808319],[-89.150909,17.955468],[-89.029857,18.001511],[-88.848344,17.883198],[-88.490123,18.486831],[-88.300031,18.499982]],[[-88.300031,18.499982],[-88.296336,18.353273],[-88.106813,18.348674],[-88.123479,18.076675],[-88.285355,17.644143],[-88.197867,17.489475],[-88.302641,17.131694],[-88.239518,17.036066],[-88.355428,16.530774],[-88.551825,16.265467],[-88.732434,16.233635],[-88.930613,15.887273]],[[-88.930613,15.887273],[-89.229122,15.886938],[-89.150806,17.015577],[-89.14308,17.808319]],[[-67.106674,-22.735925],[-67.82818,-22.872919],[-68.219913,-21.494347],[-68.757167,-20.372658],[-68.442225,-19.405068],[-68.966818,-18.981683],[-69.100247,-18.260125],[-69.590424,-17.580012]],[[-69.590424,-17.580012],[-68.959635,-16.500698],[-69.389764,-15.660129],[-69.160347,-15.323974],[-69.339535,-14.953195],[-68.948887,-14.453639],[-68.929224,-13.602684],[-68.88008,-12.899729],[-68.66508,-12.5613],[-69.529678,-10.951734]],[[-69.529678,-10.951734],[-68.786158,-11.03638],[-68.271254,-11.014521],[-68.048192,-10.712059],[-67.173801,-10.306812],[-66.646908,-9.931331],[-65.338435,-9.761988],[-65.444837,-10.511451],[-65.321899,-10.895872],[-65.402281,-11.56627],[-64.316353,-12.461978],[-63.196499,-12.627033],[-62.80306,-13.000653],[-62.127081,-13.198781],[-61.713204,-13.489202],[-61.084121,-13.479384],[-60.503304,-13.775955],[-60.459198,-14.354007],[-60.264326,-14.645979],[-60.251149,-15.077219],[-60.542966,-15.09391],[-60.15839,-16.258284],[-58.24122,-16.299573],[-58.388058,-16.877109],[-58.280804,-17.27171],[-57.734558,-17.552468],[-57.498371,-18.174188],[-57.676009,-18.96184],[-57.949997,-19.400004],[-57.853802,-19.969995],[-58.166392,-20.176701]],[[-58.166392,-20.176701],[-58.183471,-19.868399],[-59.115042,-19.356906],[-60.043565,-19.342747],[-61.786326,-19.633737],[-62.265961,-20.513735],[-62.291179,-21.051635],[-62.685057,-22.249029]],[[-54.625291,-25.739255],[-54.428946,-25.162185],[-54.293476,-24.5708],[-54.29296,-24.021014],[-54.652834,-23.839578],[-55.027902,-24.001274],[-55.400747,-23.956935],[-55.517639,-23.571998],[-55.610683,-22.655619],[-55.797958,-22.35693],[-56.473317,-22.0863],[-56.88151,-22.282154],[-57.937156,-22.090176],[-57.870674,-20.732688],[-58.166392,-20.176701]],[[-69.529678,-10.951734],[-70.093752,-11.123972],[-70.548686,-11.009147],[-70.481894,-9.490118],[-71.302412,-10.079436],[-72.184891,-10.053598],[-72.563033,-9.520194],[-73.226713,-9.462213],[-73.015383,-9.032833],[-73.571059,-8.424447],[-73.987235,-7.52383],[-73.723401,-7.340999],[-73.724487,-6.918595],[-73.120027,-6.629931],[-73.219711,-6.089189],[-72.964507,-5.741251],[-72.891928,-5.274561],[-71.748406,-4.593983],[-70.928843,-4.401591],[-70.794769,-4.251265],[-69.893635,-4.298187]],[[-69.893635,-4.298187],[-69.444102,-1.556287],[-69.420486,-1.122619],[-69.577065,-0.549992],[-70.020656,-0.185156],[-70.015566,0.541414],[-69.452396,0.706159],[-69.252434,0.602651],[-69.218638,0.985677],[-69.804597,1.089081],[-69.816973,1.714805],[-67.868565,1.692455],[-67.53781,2.037163],[-67.259998,1.719999],[-67.065048,1.130112],[-66.876326,1.253361]],[[-66.876326,1.253361],[-66.325765,0.724452],[-65.548267,0.789254],[-65.354713,1.095282],[-64.611012,1.328731],[-64.199306,1.492855],[-64.083085,1.916369],[-63.368788,2.2009],[-63.422867,2.411068],[-64.269999,2.497006],[-64.408828,3.126786],[-64.368494,3.79721],[-64.816064,4.056445],[-64.628659,4.148481],[-63.888343,4.02053],[-63.093198,3.770571],[-62.804533,4.006965],[-62.08543,4.162124],[-60.966893,4.536468],[-60.601179,4.918098],[-60.733574,5.200277]],[[-60.733574,5.200277],[-60.213683,5.244486],[-59.980959,5.014061],[-60.111002,4.574967],[-59.767406,4.423503],[-59.53804,3.958803],[-59.815413,3.606499],[-59.974525,2.755233],[-59.718546,2.24963],[-59.646044,1.786894],[-59.030862,1.317698],[-58.540013,1.268088],[-58.429477,1.463942],[-58.11345,1.507195],[-57.660971,1.682585],[-57.335823,1.948538],[-56.782704,1.863711],[-56.539386,1.899523]],[[-56.539386,1.899523],[-55.995698,1.817667],[-55.9056,2.021996],[-56.073342,2.220795],[-55.973322,2.510364],[-55.569755,2.421506],[-55.097587,2.523748],[-54.524754,2.311849]],[[-54.524754,2.311849],[-54.088063,2.105557],[-53.778521,2.376703],[-53.554839,2.334897],[-53.418465,2.053389],[-52.939657,2.124858],[-52.556425,2.504705],[-52.249338,3.241094],[-51.657797,4.156232]],[[-51.657797,4.156232],[-51.317146,4.203491],[-51.069771,3.650398],[-50.508875,1.901564],[-49.974076,1.736483],[-49.947101,1.04619],[-50.699251,0.222984],[-50.388211,-0.078445],[-48.620567,-0.235489],[-48.584497,-1.237805],[-47.824956,-0.581618],[-46.566584,-0.941028],[-44.905703,-1.55174],[-44.417619,-2.13775],[-44.581589,-2.691308],[-43.418791,-2.38311],[-41.472657,-2.912018],[-39.978665,-2.873054],[-38.500383,-3.700652],[-37.223252,-4.820946],[-36.452937,-5.109404],[-35.597796,-5.149504],[-35.235389,-5.464937],[-34.89603,-6.738193],[-34.729993,-7.343221],[-35.128212,-8.996401],[-35.636967,-9.649282],[-37.046519,-11.040721],[-37.683612,-12.171195],[-38.423877,-13.038119],[-38.673887,-13.057652],[-38.953276,-13.79337],[-38.882298,-15.667054],[-39.161092,-17.208407],[-39.267339,-17.867746],[-39.583521,-18.262296],[-39.760823,-19.599113],[-40.774741,-20.904512],[-40.944756,-21.937317],[-41.754164,-22.370676],[-41.988284,-22.97007],[-43.074704,-22.967693],[-44.647812,-23.351959],[-45.352136,-23.796842],[-46.472093,-24.088969],[-47.648972,-24.885199],[-48.495458,-25.877025],[-48.641005,-26.623698],[-48.474736,-27.175912],[-48.66152,-28.186135],[-48.888457,-28.674115],[-49.587329,-29.224469],[-50.696874,-30.984465],[-51.576226,-31.777698],[-52.256081,-32.24537],[-52.7121,-33.196578],[-53.373662,-33.768378]],[[-53.373662,-33.768378],[-53.650544,-33.202004],[-53.209589,-32.727666],[-53.787952,-32.047243],[-54.572452,-31.494511],[-55.60151,-30.853879],[-55.973245,-30.883076],[-56.976026,-30.109686],[-57.625133,-30.216295]],[[114.204017,4.525874],[114.599961,4.900011],[115.45071,5.44773]],[[115.45071,5.44773],[115.4057,4.955228],[115.347461,4.316636],[114.869557,4.348314],[114.659596,4.007637],[114.204017,4.525874]],[[91.696657,27.771742],[92.103712,27.452614],[92.033484,26.83831],[91.217513,26.808648],[90.373275,26.875724],[89.744528,26.719403],[88.835643,27.098966],[88.814248,27.299316]],[[88.814248,27.299316],[89.47581,28.042759],[90.015829,28.296439],[90.730514,28.064954],[91.258854,28.040614],[91.696657,27.771742]],[[29.432188,-22.091313],[28.017236,-22.827754],[27.11941,-23.574323],[26.786407,-24.240691],[26.485753,-24.616327],[25.941652,-24.696373],[25.765849,-25.174845],[25.664666,-25.486816],[25.025171,-25.71967],[24.211267,-25.670216],[23.73357,-25.390129],[23.312097,-25.26869],[22.824271,-25.500459],[22.579532,-25.979448],[22.105969,-26.280256],[21.605896,-26.726534],[20.889609,-26.828543],[20.66647,-26.477453],[20.758609,-25.868136],[20.165726,-24.917962],[19.895768,-24.76779]],[[19.895768,-24.76779],[19.895458,-21.849157],[20.881134,-21.814327],[20.910641,-18.252219],[21.65504,-18.219146],[23.196858,-17.869038],[23.579006,-18.281261],[24.217365,-17.889347],[24.520705,-17.887125],[25.084443,-17.661816]],[[25.084443,-17.661816],[25.264226,-17.73654]],[[25.264226,-17.73654],[25.649163,-18.536026],[25.850391,-18.714413],[26.164791,-19.293086],[27.296505,-20.39152],[27.724747,-20.499059],[27.727228,-20.851802],[28.02137,-21.485975],[28.794656,-21.639454],[29.432188,-22.091313]],[[15.27946,7.421925],[16.106232,7.497088],[16.290562,7.754307],[16.456185,7.734774],[16.705988,7.508328],[17.96493,7.890914],[18.389555,8.281304],[18.911022,8.630895],[18.81201,8.982915],[19.094008,9.074847],[20.059685,9.012706],[21.000868,9.475985],[21.723822,10.567056],[22.231129,10.971889],[22.864165,11.142395]],[[22.864165,11.142395],[22.977544,10.714463],[23.554304,10.089255],[23.55725,9.681218],[23.394779,9.265068],[23.459013,8.954286],[23.805813,8.666319],[24.567369,8.229188]],[[24.567369,8.229188],[25.114932,7.825104],[25.124131,7.500085],[25.796648,6.979316],[26.213418,6.546603],[26.465909,5.946717],[27.213409,5.550953],[27.374226,5.233944]],[[27.374226,5.233944],[27.044065,5.127853],[26.402761,5.150875],[25.650455,5.256088],[25.278798,5.170408],[25.128833,4.927245],[24.805029,4.897247],[24.410531,5.108784],[23.297214,4.609693],[22.84148,4.710126],[22.704124,4.633051],[22.405124,4.02916],[21.659123,4.224342],[20.927591,4.322786],[20.290679,4.691678],[19.467784,5.031528],[18.932312,4.709506],[18.542982,4.201785],[18.453065,3.504386]],[[18.453065,3.504386],[17.8099,3.560196],[17.133042,3.728197],[16.537058,3.198255],[16.012852,2.26764]],[[16.012852,2.26764],[15.907381,2.557389],[15.862732,3.013537],[15.405396,3.335301],[15.03622,3.851367],[14.950953,4.210389],[14.478372,4.732605],[14.558936,5.030598],[14.459407,5.451761],[14.53656,6.226959],[14.776545,6.408498],[15.27946,7.421925]],[[-63.6645,46.55001],[-62.9393,46.41587],[-62.01208,46.44314],[-62.50391,46.03339],[-62.87433,45.96818],[-64.1428,46.39265],[-64.39261,46.72747],[-64.01486,47.03601],[-63.6645,46.55001]],[[-61.806305,49.10506],[-62.29318,49.08717],[-63.58926,49.40069],[-64.51912,49.87304],[-64.17322,49.95718],[-62.85829,49.70641],[-61.835585,49.28855],[-61.806305,49.10506]],[[-123.510002,48.510011],[-124.012891,48.370846],[-125.655013,48.825005],[-125.954994,49.179996],[-126.850004,49.53],[-127.029993,49.814996],[-128.059336,49.994959],[-128.444584,50.539138],[-128.358414,50.770648],[-127.308581,50.552574],[-126.695001,50.400903],[-125.755007,50.295018],[-125.415002,49.950001],[-124.920768,49.475275],[-123.922509,49.062484],[-123.510002,48.510011]],[[-56.134036,50.68701],[-56.795882,49.812309],[-56.143105,50.150117],[-55.471492,49.935815],[-55.822401,49.587129],[-54.935143,49.313011],[-54.473775,49.556691],[-53.476549,49.249139],[-53.786014,48.516781],[-53.086134,48.687804],[-52.958648,48.157164],[-52.648099,47.535548],[-53.069158,46.655499],[-53.521456,46.618292],[-54.178936,46.807066],[-53.961869,47.625207],[-54.240482,47.752279],[-55.400773,46.884994],[-55.997481,46.91972],[-55.291219,47.389562],[-56.250799,47.632545],[-57.325229,47.572807],[-59.266015,47.603348],[-59.419494,47.899454],[-58.796586,48.251525],[-59.231625,48.523188],[-58.391805,49.125581],[-57.35869,50.718274],[-56.73865,51.287438],[-55.870977,51.632094],[-55.406974,51.588273],[-55.600218,51.317075],[-56.134036,50.68701]],[[-133.180004,54.169975],[-132.710008,54.040009],[-131.74999,54.120004],[-132.04948,52.984621],[-131.179043,52.180433],[-131.57783,52.182371],[-132.180428,52.639707],[-132.549992,53.100015],[-133.054611,53.411469],[-133.239664,53.85108],[-133.180004,54.169975]],[[-79.26582,62.158675],[-79.65752,61.63308],[-80.09956,61.7181],[-80.36215,62.01649],[-80.315395,62.085565],[-79.92939,62.3856],[-79.52002,62.36371],[-79.26582,62.158675]],[[-81.89825,62.7108],[-83.06857,62.15922],[-83.77462,62.18231],[-83.99367,62.4528],[-83.25048,62.91409],[-81.87699,62.90458],[-81.89825,62.7108]],[[-85.161308,65.657285],[-84.975764,65.217518],[-84.464012,65.371772],[-83.882626,65.109618],[-82.787577,64.766693],[-81.642014,64.455136],[-81.55344,63.979609],[-80.817361,64.057486],[-80.103451,63.725981],[-80.99102,63.411246],[-82.547178,63.651722],[-83.108798,64.101876],[-84.100417,63.569712],[-85.523405,63.052379],[-85.866769,63.637253],[-87.221983,63.541238],[-86.35276,64.035833],[-86.224886,64.822917],[-85.883848,65.738778],[-85.161308,65.657285]],[[-75.86588,67.14886],[-76.98687,67.09873],[-77.2364,67.58809],[-76.81166,68.14856],[-75.89521,68.28721],[-75.1145,68.01036],[-75.10333,67.58202],[-75.21597,67.44425],[-75.86588,67.14886]],[[-95.647681,69.10769],[-96.269521,68.75704],[-97.617401,69.06003],[-98.431801,68.9507],[-99.797401,69.40003],[-98.917401,69.71003],[-98.218261,70.14354],[-97.157401,69.86003],[-96.557401,69.68003],[-96.257401,69.49003],[-95.647681,69.10769]],[[-122.84,49],[-122.97421,49.002538],[-124.91024,49.98456],[-125.62461,50.41656],[-127.43561,50.83061],[-127.99276,51.71583],[-127.85032,52.32961],[-129.12979,52.75538],[-129.30523,53.56159],[-130.51497,54.28757],[-130.536109,54.802754]],[[-130.536109,54.802754],[-130.53611,54.80278],[-129.98,55.285],[-130.00778,55.91583],[-131.70781,56.55212],[-132.73042,57.69289],[-133.35556,58.41028],[-134.27111,58.86111],[-134.945,59.27056],[-135.47583,59.78778],[-136.47972,59.46389],[-137.4525,58.905],[-138.34089,59.56211],[-139.039,60],[-140.013,60.27682],[-140.99778,60.30639],[-140.9925,66.00003],[-140.986,69.712],[-140.985988,69.711998]],[[-140.985988,69.711998],[-139.12052,69.47102],[-137.54636,68.99002],[-136.50358,68.89804],[-135.62576,69.31512],[-134.41464,69.62743],[-132.92925,69.50534],[-131.43136,69.94451],[-129.79471,70.19369],[-129.10773,69.77927],[-128.36156,70.01286],[-128.13817,70.48384],[-127.44712,70.37721],[-125.75632,69.48058],[-124.42483,70.1584],[-124.28968,69.39969],[-123.06108,69.56372],[-122.6835,69.85553],[-121.47226,69.79778],[-119.94288,69.37786],[-117.60268,69.01128],[-116.22643,68.84151],[-115.2469,68.90591],[-113.89794,68.3989],[-115.30489,67.90261],[-113.49727,67.68815],[-110.798,67.80612],[-109.94619,67.98104],[-108.8802,67.38144],[-107.79239,67.88736],[-108.81299,68.31164],[-108.16721,68.65392],[-106.95,68.7],[-106.15,68.8],[-105.34282,68.56122],[-104.33791,68.018],[-103.22115,68.09775],[-101.45433,67.64689],[-99.90195,67.80566],[-98.4432,67.78165],[-98.5586,68.40394],[-97.66948,68.57864],[-96.11991,68.23939],[-96.12588,67.29338],[-95.48943,68.0907],[-94.685,68.06383],[-94.23282,69.06903],[-95.30408,69.68571],[-96.47131,70.08976],[-96.39115,71.19482],[-95.2088,71.92053],[-93.88997,71.76015],[-92.87818,71.31869],[-91.51964,70.19129],[-92.40692,69.69997],[-90.5471,69.49766],[-90.55151,68.47499],[-89.21515,69.25873],[-88.01966,68.61508],[-88.31749,67.87338],[-87.35017,67.19872],[-86.30607,67.92146],[-85.57664,68.78456],[-85.52197,69.88211],[-84.10081,69.80539],[-82.62258,69.65826],[-81.28043,69.16202],[-81.2202,68.66567],[-81.96436,68.13253],[-81.25928,67.59716],[-81.38653,67.11078],[-83.34456,66.41154],[-84.73542,66.2573],[-85.76943,66.55833],[-86.0676,66.05625],[-87.03143,65.21297],[-87.32324,64.77563],[-88.48296,64.09897],[-89.91444,64.03273],[-90.70398,63.61017],[-90.77004,62.96021],[-91.93342,62.83508],[-93.15698,62.02469],[-94.24153,60.89865],[-94.62931,60.11021],[-94.6846,58.94882],[-93.21502,58.78212],[-92.76462,57.84571],[-92.29703,57.08709],[-90.89769,57.28468],[-89.03953,56.85172],[-88.03978,56.47162],[-87.32421,55.99914],[-86.07121,55.72383],[-85.01181,55.3026],[-83.36055,55.24489],[-82.27285,55.14832],[-82.4362,54.28227],[-82.12502,53.27703],[-81.40075,52.15788],[-79.91289,51.20842],[-79.14301,51.53393],[-78.60191,52.56208],[-79.12421,54.14145],[-79.82958,54.66772],[-78.22874,55.13645],[-77.0956,55.83741],[-76.54137,56.53423],[-76.62319,57.20263],[-77.30226,58.05209],[-78.51688,58.80458],[-77.33676,59.85261],[-77.77272,60.75788],[-78.10687,62.31964],[-77.41067,62.55053],[-75.69621,62.2784],[-74.6682,62.18111],[-73.83988,62.4438],[-72.90853,62.10507],[-71.67708,61.52535],[-71.37369,61.13717],[-69.59042,61.06141],[-69.62033,60.22125],[-69.2879,58.95736],[-68.37455,58.80106],[-67.64976,58.21206],[-66.20178,58.76731],[-65.24517,59.87071],[-64.58352,60.33558],[-63.80475,59.4426],[-62.50236,58.16708],[-61.39655,56.96745],[-61.79866,56.33945],[-60.46853,55.77548],[-59.56962,55.20407],[-57.97508,54.94549],[-57.3332,54.6265],[-56.93689,53.78032],[-56.15811,53.64749],[-55.75632,53.27036],[-55.68338,52.14664],[-56.40916,51.7707],[-57.12691,51.41972],[-58.77482,51.0643],[-60.03309,50.24277],[-61.72366,50.08046],[-63.86251,50.29099],[-65.36331,50.2982],[-66.39905,50.22897],[-67.23631,49.51156],[-68.51114,49.06836],[-69.95362,47.74488],[-71.10458,46.82171],[-70.25522,46.98606],[-68.65,48.3],[-66.55243,49.1331],[-65.05626,49.23278],[-64.17099,48.74248],[-65.11545,48.07085],[-64.79854,46.99297],[-64.47219,46.23849],[-63.17329,45.73902],[-61.52072,45.88377],[-60.51815,47.00793],[-60.4486,46.28264],[-59.80287,45.9204],[-61.03988,45.26525],[-63.25471,44.67014],[-64.24656,44.26553],[-65.36406,43.54523],[-66.1234,43.61867],[-66.16173,44.46512],[-64.42549,45.29204],[-66.02605,45.25931],[-67.13741,45.13753]],[[-67.13741,45.13753],[-67.79134,45.70281],[-67.79046,47.06636],[-68.23444,47.35486],[-68.905,47.185],[-69.237216,47.447781],[-69.99997,46.69307],[-70.305,45.915],[-70.66,45.46],[-71.08482,45.30524],[-71.405,45.255],[-71.50506,45.0082],[-73.34783,45.00738],[-74.867,45.00048],[-75.31821,44.81645],[-76.375,44.09631],[-76.5,44.018459],[-76.820034,43.628784],[-77.737885,43.629056],[-78.72028,43.625089],[-79.171674,43.466339],[-79.01,43.27],[-78.92,42.965],[-78.939362,42.863611],[-80.247448,42.3662],[-81.277747,42.209026],[-82.439278,41.675105],[-82.690089,41.675105],[-83.02981,41.832796],[-83.142,41.975681],[-83.12,42.08],[-82.9,42.43],[-82.43,42.98],[-82.137642,43.571088],[-82.337763,44.44],[-82.550925,45.347517],[-83.592851,45.816894],[-83.469551,45.994686],[-83.616131,46.116927],[-83.890765,46.116927],[-84.091851,46.275419],[-84.14212,46.512226],[-84.3367,46.40877],[-84.6049,46.4396],[-84.543749,46.538684],[-84.779238,46.637102],[-84.87608,46.900083],[-85.652363,47.220219],[-86.461991,47.553338],[-87.439793,47.94],[-88.378114,48.302918],[-89.272917,48.019808],[-89.6,48.01],[-90.83,48.27],[-91.64,48.14],[-92.61,48.45],[-93.63087,48.60926],[-94.32914,48.67074],[-94.64,48.84],[-94.81758,49.38905],[-95.15609,49.38425],[-95.15907,49],[-97.22872,49.0007],[-100.65,49],[-104.04826,48.99986],[-107.05,49],[-110.05,49],[-113,49],[-116.04818,49],[-117.03121,49],[-120,49],[-122.84,49]],[[-114.16717,73.12145],[-114.66634,72.65277],[-112.44102,72.9554],[-111.05039,72.4504],[-109.92035,72.96113],[-109.00654,72.63335],[-108.18835,71.65089],[-107.68599,72.06548],[-108.39639,73.08953],[-107.51645,73.23598],[-106.52259,73.07601],[-105.40246,72.67259],[-104.77484,71.6984],[-104.46476,70.99297],[-102.78537,70.49776],[-100.98078,70.02432],[-101.08929,69.58447],[-102.73116,69.50402],[-102.09329,69.11962],[-102.43024,68.75282],[-104.24,68.91],[-105.96,69.18],[-107.12254,69.11922],[-109,68.78],[-111.534149,68.630059],[-113.3132,68.53554],[-113.85496,69.00744],[-115.22,69.28],[-116.10794,69.16821],[-117.34,69.96],[-116.67473,70.06655],[-115.13112,70.2373],[-113.72141,70.19237],[-112.4161,70.36638],[-114.35,70.6],[-116.48684,70.52045],[-117.9048,70.54056],[-118.43238,70.9092],[-116.11311,71.30918],[-117.65568,71.2952],[-119.40199,71.55859],[-118.56267,72.30785],[-117.86642,72.70594],[-115.18909,73.31459],[-114.16717,73.12145]],[[-104.5,73.42],[-105.38,72.76],[-106.94,73.46],[-106.6,73.6],[-105.26,73.64],[-104.5,73.42]],[[-76.34,73.102685],[-76.251404,72.826385],[-77.314438,72.855545],[-78.39167,72.876656],[-79.486252,72.742203],[-79.775833,72.802902],[-80.876099,73.333183],[-80.833885,73.693184],[-80.353058,73.75972],[-78.064438,73.651932],[-76.34,73.102685]],[[-86.562179,73.157447],[-85.774371,72.534126],[-84.850112,73.340278],[-82.31559,73.750951],[-80.600088,72.716544],[-80.748942,72.061907],[-78.770639,72.352173],[-77.824624,72.749617],[-75.605845,72.243678],[-74.228616,71.767144],[-74.099141,71.33084],[-72.242226,71.556925],[-71.200015,70.920013],[-68.786054,70.525024],[-67.91497,70.121948],[-66.969033,69.186087],[-68.805123,68.720198],[-66.449866,68.067163],[-64.862314,67.847539],[-63.424934,66.928473],[-61.851981,66.862121],[-62.163177,66.160251],[-63.918444,64.998669],[-65.14886,65.426033],[-66.721219,66.388041],[-68.015016,66.262726],[-68.141287,65.689789],[-67.089646,65.108455],[-65.73208,64.648406],[-65.320168,64.382737],[-64.669406,63.392927],[-65.013804,62.674185],[-66.275045,62.945099],[-68.783186,63.74567],[-67.369681,62.883966],[-66.328297,62.280075],[-66.165568,61.930897],[-68.877367,62.330149],[-71.023437,62.910708],[-72.235379,63.397836],[-71.886278,63.679989],[-73.378306,64.193963],[-74.834419,64.679076],[-74.818503,64.389093],[-77.70998,64.229542],[-78.555949,64.572906],[-77.897281,65.309192],[-76.018274,65.326969],[-73.959795,65.454765],[-74.293883,65.811771],[-73.944912,66.310578],[-72.651167,67.284576],[-72.92606,67.726926],[-73.311618,68.069437],[-74.843307,68.554627],[-76.869101,68.894736],[-76.228649,69.147769],[-77.28737,69.76954],[-78.168634,69.826488],[-78.957242,70.16688],[-79.492455,69.871808],[-81.305471,69.743185],[-84.944706,69.966634],[-87.060003,70.260001],[-88.681713,70.410741],[-89.51342,70.762038],[-88.467721,71.218186],[-89.888151,71.222552],[-90.20516,72.235074],[-89.436577,73.129464],[-88.408242,73.537889],[-85.826151,73.803816],[-86.562179,73.157447]],[[-100.35642,73.84389],[-99.16387,73.63339],[-97.38,73.76],[-97.12,73.47],[-98.05359,72.99052],[-96.54,72.56],[-96.72,71.66],[-98.35966,71.27285],[-99.32286,71.35639],[-100.01482,71.73827],[-102.5,72.51],[-102.48,72.83],[-100.43836,72.70588],[-101.54,73.36],[-100.35642,73.84389]],[[-93.196296,72.771992],[-94.269047,72.024596],[-95.409856,72.061881],[-96.033745,72.940277],[-96.018268,73.43743],[-95.495793,73.862417],[-94.503658,74.134907],[-92.420012,74.100025],[-90.509793,73.856732],[-92.003965,72.966244],[-93.196296,72.771992]],[[-120.46,71.383602],[-123.09219,70.90164],[-123.62,71.34],[-125.928949,71.868688],[-125.5,72.292261],[-124.80729,73.02256],[-123.94,73.68],[-124.91775,74.29275],[-121.53788,74.44893],[-120.10978,74.24135],[-117.55564,74.18577],[-116.58442,73.89607],[-115.51081,73.47519],[-116.76794,73.22292],[-119.22,72.52],[-120.46,71.82],[-120.46,71.383602]],[[-93.612756,74.979997],[-94.156909,74.592347],[-95.608681,74.666864],[-96.820932,74.927623],[-96.288587,75.377828],[-94.85082,75.647218],[-93.977747,75.29649],[-93.612756,74.979997]],[[-98.5,76.72],[-97.735585,76.25656],[-97.704415,75.74344],[-98.16,75],[-99.80874,74.89744],[-100.88366,75.05736],[-100.86292,75.64075],[-102.50209,75.5638],[-102.56552,76.3366],[-101.48973,76.30537],[-99.98349,76.64634],[-98.57699,76.58859],[-98.5,76.72]],[[-108.21141,76.20168],[-107.81943,75.84552],[-106.92893,76.01282],[-105.881,75.9694],[-105.70498,75.47951],[-106.31347,75.00527],[-109.7,74.85],[-112.22307,74.41696],[-113.74381,74.39427],[-113.87135,74.72029],[-111.79421,75.1625],[-116.31221,75.04343],[-117.7104,75.2222],[-116.34602,76.19903],[-115.40487,76.47887],[-112.59056,76.14134],[-110.81422,75.54919],[-109.0671,75.47321],[-110.49726,76.42982],[-109.5811,76.79417],[-108.54859,76.67832],[-108.21141,76.20168]],[[-94.684086,77.097878],[-93.573921,76.776296],[-91.605023,76.778518],[-90.741846,76.449597],[-90.969661,76.074013],[-89.822238,75.847774],[-89.187083,75.610166],[-87.838276,75.566189],[-86.379192,75.482421],[-84.789625,75.699204],[-82.753445,75.784315],[-81.128531,75.713983],[-80.057511,75.336849],[-79.833933,74.923127],[-80.457771,74.657304],[-81.948843,74.442459],[-83.228894,74.564028],[-86.097452,74.410032],[-88.15035,74.392307],[-89.764722,74.515555],[-92.422441,74.837758],[-92.768285,75.38682],[-92.889906,75.882655],[-93.893824,76.319244],[-95.962457,76.441381],[-97.121379,76.751078],[-96.745123,77.161389],[-94.684086,77.097878]],[[-116.198587,77.645287],[-116.335813,76.876962],[-117.106051,76.530032],[-118.040412,76.481172],[-119.899318,76.053213],[-121.499995,75.900019],[-122.854924,76.116543],[-122.854925,76.116543],[-121.157535,76.864508],[-119.103939,77.51222],[-117.570131,77.498319],[-116.198587,77.645287]],[[-93.840003,77.519997],[-94.295608,77.491343],[-96.169654,77.555111],[-96.436304,77.834629],[-94.422577,77.820005],[-93.720656,77.634331],[-93.840003,77.519997]],[[-110.186938,77.697015],[-112.051191,77.409229],[-113.534279,77.732207],[-112.724587,78.05105],[-111.264443,78.152956],[-109.854452,77.996325],[-110.186938,77.697015]],[[-109.663146,78.601973],[-110.881314,78.40692],[-112.542091,78.407902],[-112.525891,78.550555],[-111.50001,78.849994],[-110.963661,78.804441],[-109.663146,78.601973]],[[-95.830295,78.056941],[-97.309843,77.850597],[-98.124289,78.082857],[-98.552868,78.458105],[-98.631984,78.87193],[-97.337231,78.831984],[-96.754399,78.765813],[-95.559278,78.418315],[-95.830295,78.056941]],[[-100.060192,78.324754],[-99.670939,77.907545],[-101.30394,78.018985],[-102.949809,78.343229],[-105.176133,78.380332],[-104.210429,78.67742],[-105.41958,78.918336],[-105.492289,79.301594],[-103.529282,79.165349],[-100.825158,78.800462],[-100.060192,78.324754]],[[-87.02,79.66],[-85.81435,79.3369],[-87.18756,79.0393],[-89.03535,78.28723],[-90.80436,78.21533],[-92.87669,78.34333],[-93.95116,78.75099],[-93.93574,79.11373],[-93.14524,79.3801],[-94.974,79.37248],[-96.07614,79.70502],[-96.70972,80.15777],[-96.01644,80.60233],[-95.32345,80.90729],[-94.29843,80.97727],[-94.73542,81.20646],[-92.40984,81.25739],[-91.13289,80.72345],[-89.45,80.509322],[-87.81,80.32],[-87.02,79.66]],[[-68.5,83.106322],[-65.82735,83.02801],[-63.68,82.9],[-61.85,82.6286],[-61.89388,82.36165],[-64.334,81.92775],[-66.75342,81.72527],[-67.65755,81.50141],[-65.48031,81.50657],[-67.84,80.9],[-69.4697,80.61683],[-71.18,79.8],[-73.2428,79.63415],[-73.88,79.430162],[-76.90773,79.32309],[-75.52924,79.19766],[-76.22046,79.01907],[-75.39345,78.52581],[-76.34354,78.18296],[-77.88851,77.89991],[-78.36269,77.50859],[-79.75951,77.20968],[-79.61965,76.98336],[-77.91089,77.022045],[-77.88911,76.777955],[-80.56125,76.17812],[-83.17439,76.45403],[-86.11184,76.29901],[-87.6,76.42],[-89.49068,76.47239],[-89.6161,76.95213],[-87.76739,77.17833],[-88.26,77.9],[-87.65,77.970222],[-84.97634,77.53873],[-86.34,78.18],[-87.96192,78.37181],[-87.15198,78.75867],[-85.37868,78.9969],[-85.09495,79.34543],[-86.50734,79.73624],[-86.93179,80.25145],[-84.19844,80.20836],[-83.408696,80.1],[-81.84823,80.46442],[-84.1,80.58],[-87.59895,80.51627],[-89.36663,80.85569],[-90.2,81.26],[-91.36786,81.5531],[-91.58702,81.89429],[-90.1,82.085],[-88.93227,82.11751],[-86.97024,82.27961],[-85.5,82.652273],[-84.260005,82.6],[-83.18,82.32],[-82.42,82.86],[-81.1,83.02],[-79.30664,83.13056],[-76.25,83.172059],[-75.71878,83.06404],[-72.83153,83.23324],[-70.665765,83.169781],[-68.5,83.106322]],[[10.442701,46.893546],[10.363378,46.483571],[9.922837,46.314899],[9.182882,46.440215],[8.966306,46.036932],[8.489952,46.005151],[8.31663,46.163642],[7.755992,45.82449],[7.273851,45.776948],[6.843593,45.991147]],[[6.843593,45.991147],[6.5001,46.429673],[6.022609,46.27299],[6.037389,46.725779],[6.768714,47.287708],[6.736571,47.541801],[7.192202,47.449766],[7.466759,47.620582]],[[7.466759,47.620582],[8.317301,47.61358],[8.522612,47.830828],[9.594226,47.525058]],[[-66.95992,-54.89681],[-67.29103,-55.30124],[-68.14863,-55.61183],[-68.639991,-55.580018],[-69.2321,-55.49906],[-69.95809,-55.19843],[-71.00568,-55.05383],[-72.2639,-54.49514],[-73.2852,-53.95752],[-74.66253,-52.83749],[-73.8381,-53.04743],[-72.43418,-53.7154],[-71.10773,-54.07433],[-70.59178,-53.61583],[-70.26748,-52.93123],[-69.34565,-52.5183],[-68.63401,-52.63637]],[[-68.571545,-52.299444],[-69.461284,-52.291951],[-69.94278,-52.537931],[-70.845102,-52.899201],[-71.006332,-53.833252],[-71.429795,-53.856455],[-72.557943,-53.53141],[-73.702757,-52.835069],[-73.702757,-52.83507],[-74.946763,-52.262754],[-75.260026,-51.629355],[-74.976632,-51.043396],[-75.479754,-50.378372],[-75.608015,-48.673773],[-75.18277,-47.711919],[-74.126581,-46.939253],[-75.644395,-46.647643],[-74.692154,-45.763976],[-74.351709,-44.103044],[-73.240356,-44.454961],[-72.717804,-42.383356],[-73.3889,-42.117532],[-73.701336,-43.365776],[-74.331943,-43.224958],[-74.017957,-41.794813],[-73.677099,-39.942213],[-73.217593,-39.258689],[-73.505559,-38.282883],[-73.588061,-37.156285],[-73.166717,-37.12378],[-72.553137,-35.50884],[-71.861732,-33.909093],[-71.43845,-32.418899],[-71.668721,-30.920645],[-71.370083,-30.095682],[-71.489894,-28.861442],[-70.905124,-27.64038],[-70.724954,-25.705924],[-70.403966,-23.628997],[-70.091246,-21.393319],[-70.16442,-19.756468],[-70.372572,-18.347975]],[[-70.372572,-18.347975],[-69.858444,-18.092694],[-69.590424,-17.580012]],[[74.980002,37.41999],[74.829986,37.990007],[74.864816,38.378846],[74.257514,38.606507],[73.928852,38.505815],[73.675379,39.431237]],[[73.675379,39.431237],[73.960013,39.660008],[73.822244,39.893973],[74.776862,40.366425],[75.467828,40.562072],[76.526368,40.427946],[76.904484,41.066486],[78.187197,41.185316],[78.543661,41.582243],[80.11943,42.123941],[80.25999,42.349999]],[[80.25999,42.349999],[80.18015,42.920068],[80.866206,43.180362],[79.966106,44.917517],[81.947071,45.317027],[82.458926,45.53965],[83.180484,47.330031],[85.16429,47.000956],[85.720484,47.452969],[85.768233,48.455751],[86.598776,48.549182],[87.35997,49.214981]],[[87.35997,49.214981],[87.751264,49.297198]],[[87.751264,49.297198],[88.013832,48.599463],[88.854298,48.069082],[90.280826,47.693549],[90.970809,46.888146],[90.585768,45.719716],[90.94554,45.286073],[92.133891,45.115076],[93.480734,44.975472],[94.688929,44.352332],[95.306875,44.241331],[95.762455,43.319449],[96.349396,42.725635],[97.451757,42.74889],[99.515817,42.524691],[100.845866,42.663804],[101.83304,42.514873],[103.312278,41.907468],[104.522282,41.908347],[104.964994,41.59741],[106.129316,42.134328],[107.744773,42.481516],[109.243596,42.519446],[110.412103,42.871234],[111.129682,43.406834],[111.829588,43.743118],[111.667737,44.073176],[111.348377,44.457442],[111.873306,45.102079],[112.436062,45.011646],[113.463907,44.808893],[114.460332,45.339817],[115.985096,45.727235],[116.717868,46.388202],[117.421701,46.672733],[118.874326,46.805412],[119.66327,46.69268],[119.772824,47.048059],[118.866574,47.74706],[118.064143,48.06673],[117.295507,47.697709],[116.308953,47.85341],[115.742837,47.726545],[115.485282,48.135383],[116.191802,49.134598],[116.678801,49.888531]],[[116.678801,49.888531],[117.879244,49.510983],[119.288461,50.142883],[119.27939,50.58292],[120.18208,51.64355],[120.7382,51.96411],[120.725789,52.516226],[120.177089,52.753886],[121.003085,53.251401],[122.245748,53.431726],[123.57147,53.4588],[125.068211,53.161045],[125.946349,52.792799],[126.564399,51.784255],[126.939157,51.353894],[127.287456,50.739797],[127.6574,49.76027],[129.397818,49.4406],[130.582293,48.729687],[130.98726,47.79013],[132.50669,47.78896],[133.373596,48.183442],[135.026311,48.47823],[134.50081,47.57845],[134.11235,47.21248],[133.769644,46.116927],[133.09712,45.14409],[131.883454,45.321162],[131.02519,44.96796],[131.288555,44.11152],[131.144688,42.92999],[130.633866,42.903015],[130.64,42.395024]],[[130.64,42.395024],[129.994267,42.985387],[129.596669,42.424982],[128.052215,41.994285],[128.208433,41.466772],[127.343783,41.503152],[126.869083,41.816569],[126.182045,41.107336],[125.079942,40.569824],[124.265625,39.928493]],[[124.265625,39.928493],[122.86757,39.637788],[122.131388,39.170452],[121.054554,38.897471],[121.585995,39.360854],[121.376757,39.750261],[122.168595,40.422443],[121.640359,40.94639],[120.768629,40.593388],[119.639602,39.898056],[119.023464,39.252333],[118.042749,39.204274],[117.532702,38.737636],[118.059699,38.061476],[118.87815,37.897325],[118.911636,37.448464],[119.702802,37.156389],[120.823457,37.870428],[121.711259,37.481123],[122.357937,37.454484],[122.519995,36.930614],[121.104164,36.651329],[120.637009,36.11144],[119.664562,35.609791],[119.151208,34.909859],[120.227525,34.360332],[120.620369,33.376723],[121.229014,32.460319],[121.908146,31.692174],[121.891919,30.949352],[121.264257,30.676267],[121.503519,30.142915],[122.092114,29.83252],[121.938428,29.018022],[121.684439,28.225513],[121.125661,28.135673],[120.395473,27.053207],[119.585497,25.740781],[118.656871,24.547391],[117.281606,23.624501],[115.890735,22.782873],[114.763827,22.668074],[114.152547,22.22376],[113.80678,22.54834],[113.241078,22.051367],[111.843592,21.550494],[110.785466,21.397144],[110.444039,20.341033],[109.889861,20.282457],[109.627655,21.008227],[109.864488,21.395051],[108.522813,21.715212],[108.05018,21.55238]],[[108.05018,21.55238],[107.04342,21.811899],[106.567273,22.218205],[106.725403,22.794268],[105.811247,22.976892],[105.329209,23.352063],[104.476858,22.81915],[103.504515,22.703757],[102.706992,22.708795],[102.170436,22.464753]],[[102.170436,22.464753],[101.652018,22.318199],[101.80312,21.174367],[101.270026,21.201652],[101.180005,21.436573]],[[101.180005,21.436573],[101.150033,21.849984],[100.416538,21.558839],[99.983489,21.742937],[99.240899,22.118314],[99.531992,22.949039],[98.898749,23.142722],[98.660262,24.063286],[97.60472,23.897405],[97.724609,25.083637],[98.671838,25.918703],[98.712094,26.743536],[98.68269,27.508812],[98.246231,27.747221],[97.911988,28.335945],[97.327114,28.261583]],[[97.327114,28.261583],[96.248833,28.411031],[96.586591,28.83098],[96.117679,29.452802],[95.404802,29.031717],[94.56599,29.277438],[93.413348,28.640629],[92.503119,27.896876],[91.696657,27.771742]],[[88.814248,27.299316],[88.730326,28.086865],[88.120441,27.876542]],[[88.120441,27.876542],[86.954517,27.974262],[85.82332,28.203576],[85.011638,28.642774],[84.23458,28.839894],[83.898993,29.320226],[83.337115,29.463732],[82.327513,30.115268],[81.525804,30.422717],[81.111256,30.183481]],[[81.111256,30.183481],[79.721367,30.882715],[78.738894,31.515906],[78.458446,32.618164],[79.176129,32.48378],[79.208892,32.994395],[78.811086,33.506198],[78.912269,34.321936],[77.837451,35.49401]],[[77.837451,35.49401],[76.192848,35.898403],[75.896897,36.666806],[75.158028,37.133031]],[[110.339188,18.678395],[109.47521,18.197701],[108.655208,18.507682],[108.626217,19.367888],[109.119056,19.821039],[110.211599,20.101254],[110.786551,20.077534],[111.010051,19.69593],[110.570647,19.255879],[110.339188,18.678395]],[[-2.827496,9.642461],[-2.56219,8.219628],[-2.983585,7.379705],[-3.24437,6.250472],[-2.810701,5.389051],[-2.856125,4.994476]],[[-2.856125,4.994476],[-3.311084,4.984296],[-4.00882,5.179813],[-4.649917,5.168264],[-5.834496,4.993701],[-6.528769,4.705088],[-7.518941,4.338288],[-7.712159,4.364566]],[[-7.712159,4.364566],[-7.635368,5.188159],[-7.539715,5.313345],[-7.570153,5.707352],[-7.993693,6.12619],[-8.311348,6.193033],[-8.60288,6.467564],[-8.385452,6.911801],[-8.485446,7.395208],[-8.439298,7.686043]],[[-8.439298,7.686043],[-8.280703,7.68718],[-8.221792,8.123329],[-8.299049,8.316444],[-8.203499,8.455453],[-7.8321,8.575704],[-8.079114,9.376224],[-8.309616,9.789532],[-8.229337,10.12902],[-8.029944,10.206535]],[[-8.029944,10.206535],[-7.89959,10.297382],[-7.622759,10.147236],[-6.850507,10.138994],[-6.666461,10.430811],[-6.493965,10.411303],[-6.205223,10.524061],[-6.050452,10.096361],[-5.816926,10.222555],[-5.404342,10.370737]],[[16.012852,2.26764],[15.940919,1.727673],[15.146342,1.964015],[14.337813,2.227875],[13.075822,2.267097]],[[13.075822,2.267097],[12.951334,2.321616],[12.35938,2.192812],[11.751665,2.326758],[11.276449,2.261051]],[[11.276449,2.261051],[9.649158,2.283866]],[[9.649158,2.283866],[9.795196,3.073404],[9.404367,3.734527],[8.948116,3.904129],[8.744924,4.352215],[8.488816,4.495617],[8.500288,4.771983]],[[8.500288,4.771983],[8.757533,5.479666],[9.233163,6.444491],[9.522706,6.453482],[10.118277,7.03877],[10.497375,7.055358],[11.058788,6.644427],[11.745774,6.981383],[11.839309,7.397042],[12.063946,7.799808],[12.218872,8.305824],[12.753672,8.717763],[12.955468,9.417772],[13.1676,9.640626],[13.308676,10.160362],[13.57295,10.798566],[14.415379,11.572369],[14.468192,11.904752],[14.577178,12.085361],[14.181336,12.483657]],[[14.181336,12.483657],[14.213531,12.802035],[14.495787,12.859396]],[[14.495787,12.859396],[14.89336,12.21905],[14.960152,11.555574],[14.923565,10.891325],[15.467873,9.982337],[14.909354,9.992129],[14.627201,9.920919],[14.171466,10.021378],[13.954218,9.549495],[14.544467,8.965861],[14.979996,8.796104],[15.120866,8.38215],[15.436092,7.692812],[15.27946,7.421925]],[[12.322432,-6.100092],[12.182337,-5.789931]],[[12.995517,-4.781103],[13.25824,-4.882957],[13.600235,-4.500138],[14.144956,-4.510009],[14.209035,-4.793092],[14.582604,-4.970239],[15.170992,-4.343507],[15.75354,-3.855165],[16.00629,-3.535133],[15.972803,-2.712392],[16.407092,-1.740927],[16.865307,-1.225816],[17.523716,-0.74383],[17.638645,-0.424832],[17.663553,-0.058084],[17.82654,0.288923],[17.774192,0.855659],[17.898835,1.741832],[18.094276,2.365722],[18.393792,2.900443],[18.453065,3.504386]],[[27.374226,5.233944],[27.979977,4.408413],[28.428994,4.287155],[28.696678,4.455077],[29.159078,4.389267],[29.715995,4.600805],[29.9535,4.173699],[30.833852,3.509172]],[[30.833852,3.509172],[30.83386,3.509166],[30.773347,2.339883],[31.174149,2.204465],[30.85267,1.849396],[30.468508,1.583805],[30.086154,1.062313],[29.875779,0.59738],[29.819503,-0.20531],[29.587838,-0.587406],[29.579466,-1.341313]],[[29.579466,-1.341313],[29.291887,-1.620056],[29.254835,-2.21511],[29.117479,-2.292211],[29.024926,-2.839258]],[[29.339998,-4.499983],[29.519987,-5.419979],[29.419993,-5.939999],[29.620032,-6.520015],[30.199997,-7.079981],[30.740015,-8.340007],[30.74001,-8.340006]],[[30.74001,-8.340006],[30.346086,-8.238257],[29.002912,-8.407032],[28.734867,-8.526559],[28.449871,-9.164918],[28.673682,-9.605925],[28.49607,-10.789884],[28.372253,-11.793647],[28.642417,-11.971569],[29.341548,-12.360744],[29.616001,-12.178895],[29.699614,-13.257227],[28.934286,-13.248958],[28.523562,-12.698604],[28.155109,-12.272481],[27.388799,-12.132747],[27.16442,-11.608748],[26.553088,-11.92444],[25.75231,-11.784965],[25.418118,-11.330936],[24.78317,-11.238694],[24.314516,-11.262826],[24.257155,-10.951993],[23.912215,-10.926826]],[[11.914963,-5.037987],[11.093773,-3.978827]],[[11.093773,-3.978827],[11.855122,-3.426871],[11.478039,-2.765619],[11.820964,-2.514161],[12.495703,-2.391688],[12.575284,-1.948511],[13.109619,-2.42874],[13.992407,-2.470805],[14.29921,-1.998276],[14.425456,-1.333407],[14.316418,-0.552627],[13.843321,0.038758],[14.276266,1.19693],[14.026669,1.395677],[13.282631,1.314184],[13.003114,1.830896],[13.075822,2.267097]],[[-69.893635,-4.298187],[-70.394044,-3.766591],[-70.692682,-3.742872],[-70.047709,-2.725156],[-70.813476,-2.256865],[-71.413646,-2.342802],[-71.774761,-2.16979],[-72.325787,-2.434218],[-73.070392,-2.308954],[-73.659504,-1.260491],[-74.122395,-1.002833],[-74.441601,-0.53082],[-75.106625,-0.057205],[-75.373223,-0.152032]],[[-75.373223,-0.152032],[-75.801466,0.084801],[-76.292314,0.416047],[-76.57638,0.256936],[-77.424984,0.395687],[-77.668613,0.825893],[-77.855061,0.809925],[-78.855259,1.380924]],[[-78.855259,1.380924],[-78.990935,1.69137],[-78.617831,1.766404],[-78.662118,2.267355],[-78.42761,2.629556],[-77.931543,2.696606],[-77.510431,3.325017],[-77.12769,3.849636],[-77.496272,4.087606],[-77.307601,4.667984],[-77.533221,5.582812],[-77.318815,5.845354],[-77.476661,6.691116],[-77.881571,7.223771]],[[-77.881571,7.223771],[-77.753414,7.70984],[-77.431108,7.638061],[-77.242566,7.935278],[-77.474723,8.524286],[-77.353361,8.670505]],[[-77.353361,8.670505],[-76.836674,8.638749],[-76.086384,9.336821],[-75.6746,9.443248],[-75.664704,9.774003],[-75.480426,10.61899],[-74.906895,11.083045],[-74.276753,11.102036],[-74.197223,11.310473],[-73.414764,11.227015],[-72.627835,11.731972],[-72.238195,11.95555],[-71.75409,12.437303],[-71.399822,12.376041],[-71.137461,12.112982],[-71.331584,11.776284]],[[-71.331584,11.776284],[-71.973922,11.608672],[-72.227575,11.108702],[-72.614658,10.821975],[-72.905286,10.450344],[-73.027604,9.73677],[-73.304952,9.152],[-72.78873,9.085027],[-72.660495,8.625288],[-72.439862,8.405275],[-72.360901,8.002638],[-72.479679,7.632506],[-72.444487,7.423785],[-72.198352,7.340431],[-71.960176,6.991615],[-70.674234,7.087785],[-70.093313,6.960376],[-69.38948,6.099861],[-68.985319,6.206805],[-68.265052,6.153268],[-67.695087,6.267318],[-67.34144,6.095468],[-67.521532,5.55687],[-67.744697,5.221129],[-67.823012,4.503937],[-67.621836,3.839482],[-67.337564,3.542342],[-67.303173,3.318454],[-67.809938,2.820655],[-67.447092,2.600281],[-67.181294,2.250638],[-66.876326,1.253361]],[[-82.965783,8.225028],[-83.508437,8.446927],[-83.711474,8.656836],[-83.596313,8.830443],[-83.632642,9.051386],[-83.909886,9.290803],[-84.303402,9.487354],[-84.647644,9.615537],[-84.713351,9.908052],[-84.97566,10.086723],[-84.911375,9.795992],[-85.110923,9.55704],[-85.339488,9.834542],[-85.660787,9.933347],[-85.797445,10.134886],[-85.791709,10.439337],[-85.659314,10.754331],[-85.941725,10.895278],[-85.71254,11.088445]],[[-85.71254,11.088445],[-85.561852,11.217119],[-84.903003,10.952303],[-84.673069,11.082657],[-84.355931,10.999226],[-84.190179,10.79345],[-83.895054,10.726839],[-83.655612,10.938764]],[[-83.655612,10.938764],[-83.40232,10.395438],[-83.015677,9.992982],[-82.546196,9.566135]],[[-82.546196,9.566135],[-82.932891,9.476812],[-82.927155,9.07433],[-82.719183,8.925709],[-82.868657,8.807266],[-82.829771,8.626295],[-82.913176,8.423517],[-82.965783,8.225028]],[[-82.268151,23.188611],[-81.404457,23.117271],[-80.618769,23.10598],[-79.679524,22.765303],[-79.281486,22.399202],[-78.347434,22.512166],[-77.993296,22.277194],[-77.146422,21.657851],[-76.523825,21.20682],[-76.19462,21.220565],[-75.598222,21.016624],[-75.67106,20.735091],[-74.933896,20.693905],[-74.178025,20.284628],[-74.296648,20.050379],[-74.961595,19.923435],[-75.63468,19.873774],[-76.323656,19.952891],[-77.755481,19.855481],[-77.085108,20.413354],[-77.492655,20.673105],[-78.137292,20.739949],[-78.482827,21.028613],[-78.719867,21.598114],[-79.285,21.559175],[-80.217475,21.827324],[-80.517535,22.037079],[-81.820943,22.192057],[-82.169992,22.387109],[-81.795002,22.636965],[-82.775898,22.68815],[-83.494459,22.168518],[-83.9088,22.154565],[-84.052151,21.910575],[-84.54703,21.801228],[-84.974911,21.896028],[-84.447062,22.20495],[-84.230357,22.565755],[-83.77824,22.788118],[-83.267548,22.983042],[-82.510436,23.078747],[-82.268151,23.188611]],[[32.73178,35.140026],[32.802474,35.145504],[32.946961,35.386703],[33.667227,35.373216],[34.576474,35.671596],[33.900804,35.245756],[33.973617,35.058506]],[[33.973617,35.058506],[33.86644,35.093595],[33.675392,35.017863],[33.525685,35.038688],[33.475817,35.000345],[33.455922,35.101424],[33.383833,35.162712],[33.190977,35.173125],[32.919572,35.087833],[32.73178,35.140026]],[[33.973617,35.058506],[34.004881,34.978098],[32.979827,34.571869],[32.490296,34.701655],[32.256667,35.103232],[32.73178,35.140026]],[[13.595946,48.877172],[13.031329,49.307068],[12.521024,49.547415],[12.415191,49.969121],[12.240111,50.266338],[12.966837,50.484076],[13.338132,50.733234],[14.056228,50.926918],[14.307013,51.117268],[14.570718,51.002339],[15.016996,51.106674]],[[15.016996,51.106674],[15.490972,50.78473],[16.238627,50.697733],[16.176253,50.422607],[16.719476,50.215747],[16.868769,50.473974],[17.554567,50.362146],[17.649445,50.049038],[18.392914,49.988629],[18.853144,49.49623]],[[18.853144,49.49623],[18.554971,49.495015],[18.399994,49.315001],[18.170498,49.271515],[18.104973,49.043983],[17.913512,48.996493],[17.886485,48.903475],[17.545007,48.800019],[17.101985,48.816969],[16.960288,48.596982]],[[7.466759,47.620582],[7.593676,48.333019],[8.099279,49.017784],[6.65823,49.201958],[6.18632,49.463803]],[[6.18632,49.463803],[6.242751,49.902226],[6.043073,50.128052]],[[6.156658,50.803721],[5.988658,51.851616],[6.589397,51.852029],[6.84287,52.22844],[7.092053,53.144043],[6.90514,53.482162]],[[6.90514,53.482162],[7.100425,53.693932],[7.936239,53.748296],[8.121706,53.527792],[8.800734,54.020786],[8.572118,54.395646],[8.526229,54.962744]],[[8.526229,54.962744],[9.282049,54.830865],[9.921906,54.983104]],[[9.921906,54.983104],[9.93958,54.596642],[10.950112,54.363607],[10.939467,54.008693],[11.956252,54.196486],[12.51844,54.470371],[13.647467,54.075511],[14.119686,53.757029]],[[14.119686,53.757029],[14.353315,53.248171],[14.074521,52.981263],[14.4376,52.62485],[14.685026,52.089947],[14.607098,51.745188],[15.016996,51.106674]],[[43.081226,12.699639],[43.317852,12.390148],[43.286381,11.974928],[42.715874,11.735641],[43.145305,11.46204]],[[43.145305,11.46204],[42.776852,10.926879]],[[42.776852,10.926879],[42.55493,11.10511],[42.31414,11.0342],[41.75557,11.05091],[41.73959,11.35511],[41.66176,11.6312],[42,12.1],[42.35156,12.54223]],[[42.35156,12.54223],[42.779642,12.455416],[43.081226,12.699639]],[[8.526229,54.962744],[8.120311,55.517723],[8.089977,56.540012],[8.256582,56.809969],[8.543438,57.110003],[9.424469,57.172066],[9.775559,57.447941],[10.580006,57.730017],[10.546106,57.215733],[10.25,56.890016],[10.369993,56.609982],[10.912182,56.458621],[10.667804,56.081383],[10.369993,56.190007],[9.649985,55.469999],[9.921906,54.983104]],[[12.690006,55.609991],[12.089991,54.800015],[11.043543,55.364864],[10.903914,55.779955],[12.370904,56.111407],[12.690006,55.609991]],[[-71.712361,19.714456],[-71.587304,19.884911],[-70.806706,19.880286],[-70.214365,19.622885],[-69.950815,19.648],[-69.76925,19.293267],[-69.222126,19.313214],[-69.254346,19.015196],[-68.809412,18.979074],[-68.317943,18.612198],[-68.689316,18.205142],[-69.164946,18.422648],[-69.623988,18.380713],[-69.952934,18.428307],[-70.133233,18.245915],[-70.517137,18.184291],[-70.669298,18.426886],[-70.99995,18.283329],[-71.40021,17.598564],[-71.657662,17.757573],[-71.708305,18.044997]],[[-71.708305,18.044997],[-71.687738,18.31666],[-71.945112,18.6169],[-71.701303,18.785417],[-71.624873,19.169838],[-71.712361,19.714456]],[[4.267419,19.155265],[3.158133,19.057364],[3.146661,19.693579],[2.683588,19.85623],[2.060991,20.142233],[1.823228,20.610809],[-1.550055,22.792666],[-4.923337,24.974574]],[[-4.923337,24.974574],[-8.6844,27.395744]],[[-8.6844,27.395744],[-8.665124,27.589479],[-8.66559,27.656426]],[[-8.66559,27.656426],[-8.674116,28.841289],[-7.059228,29.579228],[-6.060632,29.7317],[-5.242129,30.000443],[-4.859646,30.501188],[-3.690441,30.896952],[-3.647498,31.637294],[-3.06898,31.724498],[-2.616605,32.094346],[-1.307899,32.262889],[-1.124551,32.651522],[-1.388049,32.864015],[-1.733455,33.919713],[-1.792986,34.527919],[-2.169914,35.168396]],[[-2.169914,35.168396],[-1.208603,35.714849],[-0.127454,35.888662],[0.503877,36.301273],[1.466919,36.605647],[3.161699,36.783905],[4.815758,36.865037],[5.32012,36.716519],[6.26182,37.110655],[7.330385,37.118381],[7.737078,36.885708],[8.420964,36.946427]],[[8.420964,36.946427],[8.217824,36.433177],[8.376368,35.479876],[8.140981,34.655146],[7.524482,34.097376],[7.612642,33.344115],[8.430473,32.748337],[8.439103,32.506285],[9.055603,32.102692],[9.48214,30.307556]],[[9.48214,30.307556],[9.805634,29.424638],[9.859998,28.95999],[9.683885,28.144174],[9.756128,27.688259],[9.629056,27.140953],[9.716286,26.512206],[9.319411,26.094325],[9.910693,25.365455],[9.948261,24.936954],[10.303847,24.379313],[10.771364,24.562532],[11.560669,24.097909],[11.999506,23.471668]],[[11.999506,23.471668],[8.572893,21.565661],[5.677566,19.601207],[4.267419,19.155265]],[[-75.373223,-0.152032],[-75.233723,-0.911417],[-75.544996,-1.56161],[-76.635394,-2.608678],[-77.837905,-3.003021],[-78.450684,-3.873097],[-78.639897,-4.547784],[-79.205289,-4.959129],[-79.624979,-4.454198],[-80.028908,-4.346091],[-80.442242,-4.425724],[-80.469295,-4.059287],[-80.184015,-3.821162],[-80.302561,-3.404856]],[[-80.302561,-3.404856],[-79.770293,-2.657512],[-79.986559,-2.220794],[-80.368784,-2.685159],[-80.967765,-2.246943],[-80.764806,-1.965048],[-80.933659,-1.057455],[-80.58337,-0.906663],[-80.399325,-0.283703],[-80.020898,0.36034],[-80.09061,0.768429],[-79.542762,0.982938],[-78.855259,1.380924]],[[36.86623,22],[32.9,22],[29.02,22],[25,22]],[[25,22],[25,25.6825],[25,29.238655],[24.70007,30.04419],[24.95762,30.6616],[24.80287,31.08929],[25.16482,31.56915]],[[25.16482,31.56915],[26.49533,31.58568],[27.45762,31.32126],[28.45048,31.02577],[28.91353,30.87005],[29.68342,31.18686],[30.09503,31.4734],[30.97693,31.55586],[31.68796,31.4296],[31.96041,30.9336],[32.19247,31.26034],[32.99392,31.02407],[33.7734,30.96746],[34.265435,31.219357]],[[34.265435,31.219357],[34.26544,31.21936],[34.823243,29.761081]],[[34.823243,29.761081],[34.9226,29.50133],[34.64174,29.09942],[34.42655,28.34399],[34.15451,27.8233],[33.92136,27.6487],[33.58811,27.97136],[33.13676,28.41765],[32.42323,29.85108],[32.32046,29.76043],[32.73482,28.70523],[33.34876,27.69989],[34.10455,26.14227],[34.47387,25.59856],[34.79507,25.03375],[35.69241,23.92671],[35.49372,23.75237],[35.52598,23.10244],[36.69069,22.20485],[36.86623,22]],[[42.35156,12.54223],[42.00975,12.86582],[41.59856,13.45209],[41.1552,13.77333],[40.8966,14.11864],[40.02625,14.51959],[39.34061,14.53155],[39.0994,14.74064],[38.51295,14.50547],[37.90607,14.95943],[37.59377,14.2131],[36.42951,14.42211]],[[36.42951,14.42211],[36.32322,14.82249],[36.75389,16.29186],[36.85253,16.95655],[37.16747,17.26314],[37.904,17.42754],[38.41009,17.998307]],[[38.41009,17.998307],[38.990623,16.840626],[39.26611,15.922723],[39.814294,15.435647],[41.179275,14.49108],[41.734952,13.921037],[42.276831,13.343992],[42.589576,13.000421],[43.081226,12.699639]],[[-9.034818,41.880571],[-8.984433,42.592775],[-9.392884,43.026625],[-7.97819,43.748338],[-6.754492,43.567909],[-5.411886,43.57424],[-4.347843,43.403449],[-3.517532,43.455901],[-1.901351,43.422802]],[[-1.901351,43.422802],[-1.502771,43.034014],[0.338047,42.579546],[0.701591,42.795734],[1.826793,42.343385],[2.985999,42.473015]],[[2.985999,42.473015],[3.039484,41.89212],[2.091842,41.226089],[0.810525,41.014732],[0.721331,40.678318],[0.106692,40.123934],[-0.278711,39.309978],[0.111291,38.738514],[-0.467124,38.292366],[-0.683389,37.642354],[-1.438382,37.443064],[-2.146453,36.674144],[-3.415781,36.6589],[-4.368901,36.677839],[-4.995219,36.324708],[-5.37716,35.94685],[-5.866432,36.029817],[-6.236694,36.367677],[-6.520191,36.942913],[-7.453726,37.097788]],[[-7.453726,37.097788],[-7.537105,37.428904],[-7.166508,37.803894],[-7.029281,38.075764],[-7.374092,38.373059],[-7.098037,39.030073],[-7.498632,39.629571],[-7.066592,39.711892],[-7.026413,40.184524],[-6.86402,40.330872],[-6.851127,41.111083],[-6.389088,41.381815],[-6.668606,41.883387],[-7.251309,41.918346],[-7.422513,41.792075],[-8.013175,41.790886],[-8.263857,42.280469],[-8.671946,42.134689],[-9.034818,41.880571]],[[24.312863,57.793424],[24.428928,58.383413],[24.061198,58.257375],[23.42656,58.612753],[23.339795,59.18724],[24.604214,59.465854],[25.864189,59.61109],[26.949136,59.445803],[27.981114,59.475388],[27.981127,59.475373]],[[27.981127,59.475373],[27.98112,59.47537],[28.131699,59.300825],[27.42015,58.72457],[27.716686,57.791899],[27.288185,57.474528]],[[27.288185,57.474528],[26.463532,57.476389],[25.60281,57.847529],[25.164594,57.970157],[24.312863,57.793424]],[[42.776852,10.926879],[42.55876,10.57258],[42.92812,10.02194],[43.29699,9.54048],[43.67875,9.18358],[46.94834,7.99688],[47.78942,8.003]],[[47.78942,8.003],[44.9636,5.00162],[43.66087,4.95755],[42.76967,4.25259],[42.12861,4.23413],[41.855083,3.918912]],[[41.855083,3.918912],[41.1718,3.91909],[40.76848,4.25702],[39.85494,3.83879],[39.559384,3.42206],[38.89251,3.50074],[38.67114,3.61607],[38.43697,3.58851],[38.120915,3.598605],[36.855093,4.447864],[36.159079,4.447864],[35.817448,4.776966],[35.817448,5.338232],[35.298007,5.506]],[[35.298007,5.506],[34.70702,6.59422],[34.25032,6.82607],[34.0751,7.22595],[33.56829,7.71334],[32.95418,7.78497],[33.2948,8.35458],[33.8255,8.37916],[33.97498,8.68456]],[[33.97498,8.68456],[33.96162,9.58358],[34.25745,10.63009],[34.73115,10.91017],[34.83163,11.31896],[35.26049,12.08286],[35.86363,12.57828],[36.27022,13.56333],[36.42951,14.42211]],[[23.903379,66.006927],[23.56588,66.396051],[23.539473,67.936009],[21.978535,68.616846],[20.645593,69.106247]],[[20.645593,69.106247],[21.244936,69.370443],[22.356238,68.841741],[23.66205,68.891247],[24.735679,68.649557],[25.689213,69.092114],[26.179622,69.825299],[27.732292,70.164193],[29.015573,69.766491],[28.59193,69.064777]],[[28.59193,69.064777],[28.445944,68.364613],[29.977426,67.698297],[29.054589,66.944286],[30.21765,65.80598],[29.54443,64.948672],[30.444685,64.204453],[30.035872,63.552814],[31.516092,62.867687],[31.139991,62.357693],[30.211107,61.780028],[28.07,60.50352],[28.070002,60.503519]],[[28.070002,60.503519],[28.069998,60.503517],[26.255173,60.423961],[24.496624,60.057316],[22.869695,59.846373],[22.290764,60.391921],[21.322244,60.72017],[21.544866,61.705329],[21.059211,62.607393],[21.536029,63.189735],[22.442744,63.81781],[24.730512,64.902344],[25.398068,65.111427],[25.294043,65.534346],[23.903379,66.006927]],[[178.3736,-17.33992],[178.71806,-17.62846],[178.55271,-18.15059],[177.93266,-18.28799],[177.38146,-18.16432],[177.28504,-17.72465],[177.67087,-17.38114],[178.12557,-17.50481],[178.3736,-17.33992]],[[179.364143,-16.801354],[178.725059,-17.012042],[178.596839,-16.63915],[179.096609,-16.433984],[179.413509,-16.379054],[180,-16.067133],[180,-16.555217],[179.364143,-16.801354]],[[-179.917369,-16.501783],[-180,-16.555217],[-180,-16.067133],[-179.79332,-16.020882],[-179.917369,-16.501783]],[[-61.2,-51.85],[-60,-51.25],[-59.15,-51.5],[-58.55,-51.1],[-57.75,-51.55],[-58.05,-51.9],[-59.4,-52.2],[-59.85,-51.85],[-60.7,-52.3],[-61.2,-51.85]],[[5.674052,49.529484],[5.897759,49.442667],[6.18632,49.463803]],[[6.843593,45.991147],[6.802355,45.70858],[7.096652,45.333099],[6.749955,45.028518],[7.007562,44.254767],[7.549596,44.127901],[7.435185,43.693845]],[[7.435185,43.693845],[6.529245,43.128892],[4.556963,43.399651],[3.100411,43.075201],[2.985999,42.473015]],[[-1.901351,43.422802],[-1.384225,44.02261],[-1.193798,46.014918],[-2.225724,47.064363],[-2.963276,47.570327],[-4.491555,47.954954],[-4.59235,48.68416],[-3.295814,48.901692],[-1.616511,48.644421],[-1.933494,49.776342],[-0.989469,49.347376],[1.338761,50.127173],[1.639001,50.946606],[2.513573,51.148506]],[[-54.524754,2.311849],[-54.27123,2.738748],[-54.184284,3.194172],[-54.011504,3.62257],[-54.399542,4.212611],[-54.478633,4.896756],[-53.958045,5.756548]],[[-53.958045,5.756548],[-53.618453,5.646529],[-52.882141,5.409851],[-51.823343,4.565768],[-51.657797,4.156232]],[[9.560016,42.152492],[9.229752,41.380007],[8.775723,41.583612],[8.544213,42.256517],[8.746009,42.628122],[9.390001,43.009985],[9.560016,42.152492]],[[11.093773,-3.978827],[10.066135,-2.969483],[9.405245,-2.144313],[8.797996,-1.111301],[8.830087,-0.779074],[9.04842,-0.459351],[9.291351,0.268666],[9.492889,1.01012]],[[9.492889,1.01012],[9.830284,1.067894],[11.285079,1.057662],[11.276449,2.261051]],[[-6.197885,53.867565],[-6.95373,54.073702],[-7.572168,54.059956],[-7.366031,54.595841],[-7.572168,55.131622]],[[-7.572168,55.131622],[-6.733847,55.17286],[-5.661949,54.554603],[-6.197885,53.867565]],[[-3.005005,58.635],[-4.073828,57.553025],[-3.055002,57.690019],[-1.959281,57.6848],[-2.219988,56.870017],[-3.119003,55.973793],[-2.085009,55.909998],[-2.005676,55.804903],[-1.114991,54.624986],[-0.430485,54.464376],[0.184981,53.325014],[0.469977,52.929999],[1.681531,52.73952],[1.559988,52.099998],[1.050562,51.806761],[1.449865,51.289428],[0.550334,50.765739],[-0.787517,50.774989],[-2.489998,50.500019],[-2.956274,50.69688],[-3.617448,50.228356],[-4.542508,50.341837],[-5.245023,49.96],[-5.776567,50.159678],[-4.30999,51.210001],[-3.414851,51.426009],[-3.422719,51.426848],[-4.984367,51.593466],[-5.267296,51.9914],[-4.222347,52.301356],[-4.770013,52.840005],[-4.579999,53.495004],[-3.093831,53.404547],[-3.09208,53.404441],[-2.945009,53.985],[-3.614701,54.600937],[-3.630005,54.615013],[-4.844169,54.790971],[-5.082527,55.061601],[-4.719112,55.508473],[-5.047981,55.783986],[-5.586398,55.311146],[-5.644999,56.275015],[-6.149981,56.78501],[-5.786825,57.818848],[-5.009999,58.630013],[-4.211495,58.550845],[-3.005005,58.635]],[[43.582746,41.092143],[42.619549,41.583173],[41.554084,41.535656]],[[41.554084,41.535656],[41.703171,41.962943],[41.45347,42.645123],[40.875469,43.013628],[40.321394,43.128634],[39.955009,43.434998]],[[39.955009,43.434998],[40.076965,43.553104],[40.92219,43.38215],[42.3944,43.2203],[43.75599,42.74083],[43.93121,42.55496],[44.537623,42.711993],[45.470279,42.502781],[45.7764,42.09244],[46.404951,41.860675]],[[0.023803,11.018682],[-0.049785,10.706918],[0.36758,10.191213],[0.365901,9.465004],[0.461192,8.677223],[0.712029,8.312465],[0.490957,7.411744],[0.570384,6.914359],[0.836931,6.279979],[1.060122,5.928837]],[[1.060122,5.928837],[-0.507638,5.343473],[-1.063625,5.000548],[-1.964707,4.710462],[-2.856125,4.994476]],[[-8.439298,7.686043],[-8.722124,7.711674],[-8.926065,7.309037],[-9.208786,7.313921],[-9.403348,7.526905],[-9.33728,7.928534],[-9.755342,8.541055],[-10.016567,8.428504],[-10.230094,8.406206]],[[-10.230094,8.406206],[-10.505477,8.348896],[-10.494315,8.715541],[-10.65477,8.977178],[-10.622395,9.26791],[-10.839152,9.688246],[-11.117481,10.045873],[-11.917277,10.046984],[-12.150338,9.858572],[-12.425929,9.835834],[-12.596719,9.620188],[-12.711958,9.342712],[-13.24655,8.903049]],[[-13.24655,8.903049],[-13.685154,9.494744],[-14.074045,9.886167],[-14.330076,10.01572],[-14.579699,10.214467],[-14.693232,10.656301],[-14.839554,10.876572],[-15.130311,11.040412]],[[-15.130311,11.040412],[-14.685687,11.527824],[-14.382192,11.509272],[-14.121406,11.677117],[-13.9008,11.678719],[-13.743161,11.811269],[-13.828272,12.142644],[-13.718744,12.247186],[-13.700476,12.586183]],[[-13.700476,12.586183],[-13.217818,12.575874],[-12.499051,12.33209],[-12.278599,12.35444],[-12.203565,12.465648],[-11.658301,12.386583],[-11.513943,12.442988]],[[-11.513943,12.442988],[-11.456169,12.076834],[-11.297574,12.077971],[-11.036556,12.211245],[-10.87083,12.177887],[-10.593224,11.923975],[-10.165214,11.844084],[-9.890993,12.060479],[-9.567912,12.194243],[-9.327616,12.334286],[-9.127474,12.30806],[-8.905265,12.088358],[-8.786099,11.812561],[-8.376305,11.393646],[-8.581305,11.136246],[-8.620321,10.810891],[-8.407311,10.909257],[-8.282357,10.792597],[-8.335377,10.494812],[-8.029944,10.206535]],[[-16.841525,13.151394],[-16.713729,13.594959]],[[-16.713729,13.594959],[-15.624596,13.623587],[-15.39877,13.860369],[-15.081735,13.876492],[-14.687031,13.630357],[-14.376714,13.62568],[-14.046992,13.794068],[-13.844963,13.505042],[-14.277702,13.280585],[-14.712197,13.298207],[-15.141163,13.509512],[-15.511813,13.27857],[-15.691001,13.270353],[-15.931296,13.130284],[-16.841525,13.151394]],[[-15.130311,11.040412],[-15.66418,11.458474],[-16.085214,11.524594],[-16.314787,11.806515],[-16.308947,11.958702],[-16.613838,12.170911],[-16.677452,12.384852]],[[-16.677452,12.384852],[-16.147717,12.547762],[-15.816574,12.515567],[-15.548477,12.62817],[-13.700476,12.586183]],[[9.492889,1.01012],[9.305613,1.160911],[9.649158,2.283866]],[[21.02004,40.842727],[21.674161,40.931275],[22.055378,41.149866],[22.597308,41.130487],[22.76177,41.3048],[22.952377,41.337994]],[[26.117042,41.826905],[26.604196,41.562115],[26.294602,40.936261],[26.056942,40.824123]],[[26.056942,40.824123],[25.447677,40.852545],[24.925848,40.947062],[23.714811,40.687129],[24.407999,40.124993],[23.899968,39.962006],[23.342999,39.960998],[22.813988,40.476005],[22.626299,40.256561],[22.849748,39.659311],[23.350027,39.190011],[22.973099,38.970903],[23.530016,38.510001],[24.025025,38.219993],[24.040011,37.655015],[23.115003,37.920011],[23.409972,37.409991],[22.774972,37.30501],[23.154225,36.422506],[22.490028,36.41],[21.670026,36.844986],[21.295011,37.644989],[21.120034,38.310323],[20.730032,38.769985],[20.217712,39.340235],[20.150016,39.624998]],[[23.69998,35.705004],[24.246665,35.368022],[25.025015,35.424996],[25.769208,35.354018],[25.745023,35.179998],[26.290003,35.29999],[26.164998,35.004995],[24.724982,34.919988],[24.735007,35.084991],[23.514978,35.279992],[23.69998,35.705004]],[[-46.76379,82.62796],[-43.40644,83.22516],[-39.89753,83.18018],[-38.62214,83.54905],[-35.08787,83.64513],[-27.10046,83.51966],[-20.84539,82.72669],[-22.69182,82.34165],[-26.51753,82.29765],[-31.9,82.2],[-31.39646,82.02154],[-27.85666,82.13178],[-24.84448,81.78697],[-22.90328,82.09317],[-22.07175,81.73449],[-23.16961,81.15271],[-20.62363,81.52462],[-15.76818,81.91245],[-12.77018,81.71885],[-12.20855,81.29154],[-16.28533,80.58004],[-16.85,80.35],[-20.04624,80.17708],[-17.73035,80.12912],[-18.9,79.4],[-19.70499,78.75128],[-19.67353,77.63859],[-18.47285,76.98565],[-20.03503,76.94434],[-21.67944,76.62795],[-19.83407,76.09808],[-19.59896,75.24838],[-20.66818,75.15585],[-19.37281,74.29561],[-21.59422,74.22382],[-20.43454,73.81713],[-20.76234,73.46436],[-22.17221,73.30955],[-23.56593,73.30663],[-22.31311,72.62928],[-22.29954,72.18409],[-24.27834,72.59788],[-24.79296,72.3302],[-23.44296,72.08016],[-22.13281,71.46898],[-21.75356,70.66369],[-23.53603,70.471],[-24.30702,70.85649],[-25.54341,71.43094],[-25.20135,70.75226],[-26.36276,70.22646],[-23.72742,70.18401],[-22.34902,70.12946],[-25.02927,69.2588],[-27.74737,68.47046],[-30.67371,68.12503],[-31.77665,68.12078],[-32.81105,67.73547],[-34.20196,66.67974],[-36.35284,65.9789],[-37.04378,65.93768],[-38.37505,65.69213],[-39.81222,65.45848],[-40.66899,64.83997],[-40.68281,64.13902],[-41.1887,63.48246],[-42.81938,62.68233],[-42.41666,61.90093],[-42.86619,61.07404],[-43.3784,60.09772],[-44.7875,60.03676],[-46.26364,60.85328],[-48.26294,60.85843],[-49.23308,61.40681],[-49.90039,62.38336],[-51.63325,63.62691],[-52.14014,64.27842],[-52.27659,65.1767],[-53.66166,66.09957],[-53.30161,66.8365],[-53.96911,67.18899],[-52.9804,68.35759],[-51.47536,68.72958],[-51.08041,69.14781],[-50.87122,69.9291],[-52.013585,69.574925],[-52.55792,69.42616],[-53.45629,69.283625],[-54.68336,69.61003],[-54.75001,70.28932],[-54.35884,70.821315],[-53.431315,70.835755],[-51.39014,70.56978],[-53.10937,71.20485],[-54.00422,71.54719],[-55,71.406537],[-55.83468,71.65444],[-54.71819,72.58625],[-55.32634,72.95861],[-56.12003,73.64977],[-57.32363,74.71026],[-58.59679,75.09861],[-58.58516,75.51727],[-61.26861,76.10238],[-63.39165,76.1752],[-66.06427,76.13486],[-68.50438,76.06141],[-69.66485,76.37975],[-71.40257,77.00857],[-68.77671,77.32312],[-66.76397,77.37595],[-71.04293,77.63595],[-73.297,78.04419],[-73.15938,78.43271],[-69.37345,78.91388],[-65.7107,79.39436],[-65.3239,79.75814],[-68.02298,80.11721],[-67.15129,80.51582],[-63.68925,81.21396],[-62.23444,81.3211],[-62.65116,81.77042],[-60.28249,82.03363],[-57.20744,82.19074],[-54.13442,82.19962],[-53.04328,81.88833],[-50.39061,82.43883],[-48.00386,82.06481],[-46.59984,81.985945],[-44.523,81.6607],[-46.9007,82.19979],[-46.76379,82.62796]],[[-88.930613,15.887273],[-88.604586,15.70638],[-88.518364,15.855389],[-88.225023,15.727722]],[[-88.225023,15.727722],[-88.68068,15.346247],[-89.154811,15.066419],[-89.22522,14.874286],[-89.145535,14.678019],[-89.353326,14.424133]],[[-89.353326,14.424133],[-89.587343,14.362586],[-89.534219,14.244816],[-89.721934,14.134228],[-90.064678,13.88197],[-90.095555,13.735338]],[[-90.095555,13.735338],[-90.608624,13.909771],[-91.23241,13.927832],[-91.689747,14.126218],[-92.22775,14.538829]],[[-92.22775,14.538829],[-92.20323,14.830103],[-92.087216,15.064585],[-92.229249,15.251447],[-91.74796,16.066565],[-90.464473,16.069562],[-90.438867,16.41011],[-90.600847,16.470778],[-90.711822,16.687483],[-91.08167,16.918477],[-91.453921,17.252177],[-91.002269,17.254658],[-91.00152,17.817595],[-90.067934,17.819326],[-89.14308,17.808319]],[[-60.733574,5.200277],[-61.410303,5.959068],[-61.139415,6.234297],[-61.159336,6.696077],[-60.543999,6.856584],[-60.295668,7.043911],[-60.637973,7.415],[-60.550588,7.779603],[-59.758285,8.367035]],[[-59.758285,8.367035],[-59.101684,7.999202],[-58.482962,7.347691],[-58.454876,6.832787],[-58.078103,6.809094],[-57.542219,6.321268],[-57.147436,5.97315]],[[-57.147436,5.97315],[-57.307246,5.073567],[-57.914289,4.812626],[-57.86021,4.576801],[-58.044694,4.060864],[-57.601569,3.334655],[-57.281433,3.333492],[-57.150098,2.768927],[-56.539386,1.899523]],[[-88.225023,15.727722],[-88.121153,15.688655],[-87.901813,15.864458],[-87.61568,15.878799],[-87.522921,15.797279],[-87.367762,15.84694],[-86.903191,15.756713],[-86.440946,15.782835],[-86.119234,15.893449],[-86.001954,16.005406],[-85.683317,15.953652],[-85.444004,15.885749],[-85.182444,15.909158],[-84.983722,15.995923],[-84.52698,15.857224],[-84.368256,15.835158],[-84.063055,15.648244],[-83.773977,15.424072],[-83.410381,15.270903],[-83.147219,14.995829]],[[-83.147219,14.995829],[-83.489989,15.016267],[-83.628585,14.880074],[-83.975721,14.749436],[-84.228342,14.748764],[-84.449336,14.621614],[-84.649582,14.666805],[-84.820037,14.819587],[-84.924501,14.790493],[-85.052787,14.551541],[-85.148751,14.560197],[-85.165365,14.35437],[-85.514413,14.079012],[-85.698665,13.960078],[-85.801295,13.836055],[-86.096264,14.038187],[-86.312142,13.771356],[-86.520708,13.778487],[-86.755087,13.754845],[-86.733822,13.263093],[-86.880557,13.254204],[-87.005769,13.025794],[-87.316654,12.984686]],[[-87.316654,12.984686],[-87.489409,13.297535],[-87.793111,13.38448]],[[-87.793111,13.38448],[-87.723503,13.78505],[-87.859515,13.893312],[-88.065343,13.964626],[-88.503998,13.845486],[-88.541231,13.980155],[-88.843073,14.140507],[-89.058512,14.340029],[-89.353326,14.424133]],[[18.56,42.65],[18.450017,42.479992]],[[18.450017,42.479992],[18.450016,42.479991],[17.50997,42.849995],[16.930006,43.209998],[16.015385,43.507215],[15.174454,44.243191],[15.37625,44.317915],[14.920309,44.738484],[14.901602,45.07606],[14.258748,45.233777],[13.952255,44.802124],[13.656976,45.136935],[13.679403,45.484149],[13.71506,45.500324]],[[13.71506,45.500324],[14.411968,45.466166],[14.595109,45.634941],[14.935244,45.471695],[15.327675,45.452316],[15.323954,45.731783],[15.67153,45.834154],[15.768733,46.238108],[16.564808,46.503751]],[[16.564808,46.503751],[16.882515,46.380632],[17.630066,45.951769],[18.456062,45.759481],[18.829825,45.908872]],[[18.829825,45.908872],[19.072769,45.521511],[19.390476,45.236516],[19.005485,44.860234]],[[-71.708305,18.044997],[-72.372476,18.214961],[-72.844411,18.145611],[-73.454555,18.217906],[-73.922433,18.030993],[-74.458034,18.34255],[-74.369925,18.664908],[-73.449542,18.526053],[-72.694937,18.445799],[-72.334882,18.668422],[-72.79165,19.101625],[-72.784105,19.483591],[-73.415022,19.639551],[-73.189791,19.915684],[-72.579673,19.871501],[-71.712361,19.714456]],[[16.979667,48.123497],[17.488473,47.867466],[17.857133,47.758429],[18.696513,47.880954],[18.777025,48.081768],[19.174365,48.111379],[19.661364,48.266615],[19.769471,48.202691],[20.239054,48.327567],[20.473562,48.56285],[20.801294,48.623854],[21.872236,48.319971],[22.085608,48.422264]],[[22.085608,48.422264],[22.64082,48.15024],[22.710531,47.882194]],[[22.710531,47.882194],[22.099768,47.672439],[21.626515,46.994238],[21.021952,46.316088],[20.220192,46.127469]],[[20.220192,46.127469],[19.596045,46.17173],[18.829838,45.908878],[18.829825,45.908872]],[[16.564808,46.503751],[16.370505,46.841327],[16.202298,46.852386]],[[120.715609,-10.239581],[120.295014,-10.25865],[118.967808,-9.557969],[119.90031,-9.36134],[120.425756,-9.665921],[120.775502,-9.969675],[120.715609,-10.239581]],[[124.968682,-8.89279],[125.07002,-9.089987],[125.08852,-9.393173]],[[125.08852,-9.393173],[124.43595,-10.140001],[123.579982,-10.359987],[123.459989,-10.239995],[123.550009,-9.900016],[123.980009,-9.290027],[124.968682,-8.89279]],[[117.900018,-8.095681],[118.260616,-8.362383],[118.87846,-8.280683],[119.126507,-8.705825],[117.970402,-8.906639],[117.277731,-9.040895],[116.740141,-9.032937],[117.083737,-8.457158],[117.632024,-8.449303],[117.900018,-8.095681]],[[122.903537,-8.094234],[122.756983,-8.649808],[121.254491,-8.933666],[119.924391,-8.810418],[119.920929,-8.444859],[120.715092,-8.236965],[121.341669,-8.53674],[122.007365,-8.46062],[122.903537,-8.094234]],[[108.623479,-6.777674],[110.539227,-6.877358],[110.759576,-6.465186],[112.614811,-6.946036],[112.978768,-7.594213],[114.478935,-7.776528],[115.705527,-8.370807],[114.564511,-8.751817],[113.464734,-8.348947],[112.559672,-8.376181],[111.522061,-8.302129],[110.58615,-8.122605],[109.427667,-7.740664],[108.693655,-7.6416],[108.277763,-7.766657],[106.454102,-7.3549],[106.280624,-6.9249],[105.365486,-6.851416],[106.051646,-5.895919],[107.265009,-5.954985],[108.072091,-6.345762],[108.486846,-6.421985],[108.623479,-6.777674]],[[134.724624,-6.214401],[134.210134,-6.895238],[134.112776,-6.142467],[134.290336,-5.783058],[134.499625,-5.445042],[134.727002,-5.737582],[134.724624,-6.214401]],[[127.249215,-3.459065],[126.874923,-3.790983],[126.183802,-3.607376],[125.989034,-3.177273],[127.000651,-3.129318],[127.249215,-3.459065]],[[130.471344,-3.093764],[130.834836,-3.858472],[129.990547,-3.446301],[129.155249,-3.362637],[128.590684,-3.428679],[127.898891,-3.393436],[128.135879,-2.84365],[129.370998,-2.802154],[130.471344,-3.093764]],[[141.00021,-2.600151],[141.017057,-5.859022],[141.033852,-9.117893]],[[141.033852,-9.117893],[140.143415,-8.297168],[139.127767,-8.096043],[138.881477,-8.380935],[137.614474,-8.411683],[138.039099,-7.597882],[138.668621,-7.320225],[138.407914,-6.232849],[137.92784,-5.393366],[135.98925,-4.546544],[135.164598,-4.462931],[133.66288,-3.538853],[133.367705,-4.024819],[132.983956,-4.112979],[132.756941,-3.746283],[132.753789,-3.311787],[131.989804,-2.820551],[133.066845,-2.460418],[133.780031,-2.479848],[133.696212,-2.214542],[132.232373,-2.212526],[131.836222,-1.617162],[130.94284,-1.432522],[130.519558,-0.93772],[131.867538,-0.695461],[132.380116,-0.369538],[133.985548,-0.78021],[134.143368,-1.151867],[134.422627,-2.769185],[135.457603,-3.367753],[136.293314,-2.307042],[137.440738,-1.703513],[138.329727,-1.702686],[139.184921,-2.051296],[139.926684,-2.409052],[141.00021,-2.600151]],[[125.240501,1.419836],[124.437035,0.427881],[123.685505,0.235593],[122.723083,0.431137],[121.056725,0.381217],[120.183083,0.237247],[120.04087,-0.519658],[120.935905,-1.408906],[121.475821,-0.955962],[123.340565,-0.615673],[123.258399,-1.076213],[122.822715,-0.930951],[122.38853,-1.516858],[121.508274,-1.904483],[122.454572,-3.186058],[122.271896,-3.5295],[123.170963,-4.683693],[123.162333,-5.340604],[122.628515,-5.634591],[122.236394,-5.282933],[122.719569,-4.464172],[121.738234,-4.851331],[121.489463,-4.574553],[121.619171,-4.188478],[120.898182,-3.602105],[120.972389,-2.627643],[120.305453,-2.931604],[120.390047,-4.097579],[120.430717,-5.528241],[119.796543,-5.6734],[119.366906,-5.379878],[119.653606,-4.459417],[119.498835,-3.494412],[119.078344,-3.487022],[118.767769,-2.801999],[119.180974,-2.147104],[119.323394,-1.353147],[119.825999,0.154254],[120.035702,0.566477],[120.885779,1.309223],[121.666817,1.013944],[122.927567,0.875192],[124.077522,0.917102],[125.065989,1.643259],[125.240501,1.419836]],[[128.688249,1.132386],[128.635952,0.258486],[128.12017,0.356413],[127.968034,-0.252077],[128.379999,-0.780004],[128.100016,-0.899996],[127.696475,-0.266598],[127.39949,1.011722],[127.600512,1.810691],[127.932378,2.174596],[128.004156,1.628531],[128.594559,1.540811],[128.688249,1.132386]],[[109.66326,2.006467],[109.830227,1.338136],[110.514061,0.773131],[111.159138,0.976478],[111.797548,0.904441],[112.380252,1.410121],[112.859809,1.49779],[113.80585,1.217549],[114.621355,1.430688],[115.134037,2.821482],[115.519078,3.169238],[115.865517,4.306559],[117.015214,4.306094],[117.882035,4.137551]],[[117.882035,4.137551],[117.313232,3.234428],[118.04833,2.28769],[117.875627,1.827641],[118.996747,0.902219],[117.811858,0.784242],[117.478339,0.102475],[117.521644,-0.803723],[116.560048,-1.487661],[116.533797,-2.483517],[116.148084,-4.012726],[116.000858,-3.657037],[114.864803,-4.106984],[114.468652,-3.495704],[113.755672,-3.43917],[113.256994,-3.118776],[112.068126,-3.478392],[111.703291,-2.994442],[111.04824,-3.049426],[110.223846,-2.934032],[110.070936,-1.592874],[109.571948,-1.314907],[109.091874,-0.459507],[108.952658,0.415375],[109.069136,1.341934],[109.66326,2.006467]],[[105.817655,-5.852356],[104.710384,-5.873285],[103.868213,-5.037315],[102.584261,-4.220259],[102.156173,-3.614146],[101.399113,-2.799777],[100.902503,-2.050262],[100.141981,-0.650348],[99.26374,0.183142],[98.970011,1.042882],[98.601351,1.823507],[97.699598,2.453184],[97.176942,3.308791],[96.424017,3.86886],[95.380876,4.970782],[95.293026,5.479821],[95.936863,5.439513],[97.484882,5.246321],[98.369169,4.26837],[99.142559,3.59035],[99.693998,3.174329],[100.641434,2.099381],[101.658012,2.083697],[102.498271,1.3987],[103.07684,0.561361],[103.838396,0.104542],[103.437645,-0.711946],[104.010789,-1.059212],[104.369991,-1.084843],[104.53949,-1.782372],[104.887893,-2.340425],[105.622111,-2.428844],[106.108593,-3.061777],[105.857446,-4.305525],[105.817655,-5.852356]],[[89.031961,22.055708],[88.888766,21.690588],[88.208497,21.703172],[86.975704,21.495562],[87.033169,20.743308],[86.499351,20.151638],[85.060266,19.478579],[83.941006,18.30201],[83.189217,17.671221],[82.192792,17.016636],[82.191242,16.556664],[81.692719,16.310219],[80.791999,15.951972],[80.324896,15.899185],[80.025069,15.136415],[80.233274,13.835771],[80.286294,13.006261],[79.862547,12.056215],[79.857999,10.357275],[79.340512,10.308854],[78.885345,9.546136],[79.18972,9.216544],[78.277941,8.933047],[77.941165,8.252959],[77.539898,7.965535],[76.592979,8.899276],[76.130061,10.29963],[75.746467,11.308251],[75.396101,11.781245],[74.864816,12.741936],[74.616717,13.992583],[74.443859,14.617222],[73.534199,15.990652],[73.119909,17.92857],[72.820909,19.208234],[72.824475,20.419503],[72.630533,21.356009],[71.175273,20.757441],[70.470459,20.877331],[69.16413,22.089298],[69.644928,22.450775],[69.349597,22.84318],[68.176645,23.691965]],[[68.176645,23.691965],[68.842599,24.359134],[71.04324,24.356524],[70.844699,25.215102],[70.282873,25.722229],[70.168927,26.491872],[69.514393,26.940966],[70.616496,27.989196],[71.777666,27.91318],[72.823752,28.961592],[73.450638,29.976413],[74.42138,30.979815],[74.405929,31.692639],[75.258642,32.271105],[74.451559,32.7649],[74.104294,33.441473],[73.749948,34.317699],[74.240203,34.748887],[75.757061,34.504923],[76.871722,34.653544],[77.837451,35.49401]],[[81.111256,30.183481],[80.476721,29.729865],[80.088425,28.79447],[81.057203,28.416095],[81.999987,27.925479],[83.304249,27.364506],[84.675018,27.234901],[85.251779,26.726198],[86.024393,26.630985],[87.227472,26.397898],[88.060238,26.414615],[88.174804,26.810405],[88.043133,27.445819],[88.120441,27.876542]],[[97.327114,28.261583],[97.402561,27.882536],[97.051989,27.699059],[97.133999,27.083774],[96.419366,27.264589],[95.124768,26.573572],[95.155153,26.001307],[94.603249,25.162495],[94.552658,24.675238],[94.106742,23.850741],[93.325188,24.078556],[93.286327,23.043658],[93.060294,22.703111],[93.166128,22.27846],[92.672721,22.041239]],[[-6.197885,53.867565],[-6.032985,53.153164],[-6.788857,52.260118],[-8.561617,51.669301],[-9.977086,51.820455],[-9.166283,52.864629],[-9.688525,53.881363],[-8.327987,54.664519],[-7.572168,55.131622]],[[60.874248,29.829239],[61.369309,29.303276],[61.771868,28.699334],[62.72783,28.259645],[62.755426,27.378923],[63.233898,27.217047],[63.316632,26.756532],[61.874187,26.239975],[61.497363,25.078237]],[[61.497363,25.078237],[59.616134,25.380157],[58.525761,25.609962],[57.397251,25.739902],[56.970766,26.966106],[56.492139,27.143305],[55.72371,26.964633],[54.71509,26.480658],[53.493097,26.812369],[52.483598,27.580849],[51.520763,27.86569],[50.852948,28.814521],[50.115009,30.147773],[49.57685,29.985715],[48.941333,30.31709],[48.567971,29.926778]],[[48.567971,29.926778],[48.014568,30.452457],[48.004698,30.985137],[47.685286,30.984853],[47.849204,31.709176],[47.334661,32.469155],[46.109362,33.017287],[45.416691,33.967798],[45.64846,34.748138],[46.151788,35.093259],[46.07634,35.677383],[45.420618,35.977546],[44.772677,37.170437]],[[44.772677,37.170437],[44.77267,37.17045],[44.225756,37.971584],[44.421403,38.281281],[44.109225,39.428136],[44.79399,39.713003]],[[48.883249,38.320245],[49.199612,37.582874],[50.147771,37.374567],[50.842354,36.872814],[52.264025,36.700422],[53.82579,36.965031],[53.921598,37.198918]],[[53.921598,37.198918],[54.800304,37.392421],[55.511578,37.964117],[56.180375,37.935127],[56.619366,38.121394],[57.330434,38.029229],[58.436154,37.522309],[59.234762,37.412988],[60.377638,36.527383],[61.123071,36.491597],[61.210817,35.650072]],[[48.567971,29.926778],[47.974519,29.975819]],[[47.974519,29.975819],[47.302622,30.05907],[46.568713,29.099025]],[[46.568713,29.099025],[44.709499,29.178891],[41.889981,31.190009],[40.399994,31.889992],[39.195468,32.161009]],[[39.195468,32.161009],[38.792341,33.378686]],[[38.792341,33.378686],[41.006159,34.419372],[41.383965,35.628317],[41.289707,36.358815],[41.837064,36.605854],[42.349591,37.229873]],[[42.349591,37.229873],[42.779126,37.385264],[43.942259,37.256228],[44.293452,37.001514],[44.772677,37.170437]],[[-14.508695,66.455892],[-14.739637,65.808748],[-13.609732,65.126671],[-14.909834,64.364082],[-17.794438,63.678749],[-18.656246,63.496383],[-19.972755,63.643635],[-22.762972,63.960179],[-21.778484,64.402116],[-23.955044,64.89113],[-22.184403,65.084968],[-22.227423,65.378594],[-24.326184,65.611189],[-23.650515,66.262519],[-22.134922,66.410469],[-20.576284,65.732112],[-19.056842,66.276601],[-17.798624,65.993853],[-16.167819,66.526792],[-14.508695,66.455892]],[[34.265435,31.219357],[34.265433,31.219361],[34.556372,31.548824],[34.488107,31.605539],[34.752587,32.072926],[34.955417,32.827376],[35.098457,33.080539],[35.126053,33.0909]],[[35.126053,33.0909],[35.460709,33.08904],[35.552797,33.264275],[35.821101,33.277426]],[[35.821101,33.277426],[35.836397,32.868123],[35.700798,32.716014],[35.719918,32.709192]],[[35.719918,32.709192],[35.545665,32.393992]],[[35.545665,32.393992],[35.18393,32.532511],[34.974641,31.866582],[35.225892,31.754341],[34.970507,31.616778],[34.927408,31.353435],[35.397561,31.489086]],[[35.397561,31.489086],[35.420918,31.100066],[34.922603,29.501326]],[[34.922603,29.501326],[34.823243,29.761081]],[[13.806475,46.509306],[13.69811,46.016778],[13.93763,45.591016]],[[13.93763,45.591016],[13.141606,45.736692],[12.328581,45.381778],[12.383875,44.885374],[12.261453,44.600482],[12.589237,44.091366],[13.526906,43.587727],[14.029821,42.761008],[15.14257,41.95514],[15.926191,41.961315],[16.169897,41.740295],[15.889346,41.541082],[16.785002,41.179606],[17.519169,40.877143],[18.376687,40.355625],[18.480247,40.168866],[18.293385,39.810774],[17.73838,40.277671],[16.869596,40.442235],[16.448743,39.795401],[17.17149,39.4247],[17.052841,38.902871],[16.635088,38.843572],[16.100961,37.985899],[15.684087,37.908849],[15.687963,38.214593],[15.891981,38.750942],[16.109332,38.964547],[15.718814,39.544072],[15.413613,40.048357],[14.998496,40.172949],[14.703268,40.60455],[14.060672,40.786348],[13.627985,41.188287],[12.888082,41.25309],[12.106683,41.704535],[11.191906,42.355425],[10.511948,42.931463],[10.200029,43.920007],[9.702488,44.036279],[8.888946,44.366336],[8.428561,44.231228],[7.850767,43.767148],[7.435185,43.693845]],[[15.520376,38.231155],[15.160243,37.444046],[15.309898,37.134219],[15.099988,36.619987],[14.335229,36.996631],[13.826733,37.104531],[12.431004,37.61295],[12.570944,38.126381],[13.741156,38.034966],[14.761249,38.143874],[15.520376,38.231155]],[[9.210012,41.209991],[9.809975,40.500009],[9.669519,39.177376],[9.214818,39.240473],[8.806936,38.906618],[8.428302,39.171847],[8.388253,40.378311],[8.159998,40.950007],[8.709991,40.899984],[9.210012,41.209991]],[[-77.569601,18.490525],[-76.896619,18.400867],[-76.365359,18.160701],[-76.199659,17.886867],[-76.902561,17.868238],[-77.206341,17.701116],[-77.766023,17.861597],[-78.337719,18.225968],[-78.217727,18.454533],[-77.797365,18.524218],[-77.569601,18.490525]],[[39.195468,32.161009],[39.004886,32.010217],[37.002166,31.508413],[37.998849,30.5085],[37.66812,30.338665],[37.503582,30.003776],[36.740528,29.865283],[36.501214,29.505254],[36.068941,29.197495],[34.956037,29.356555]],[[34.956037,29.356555],[34.922603,29.501326]],[[35.397561,31.489086],[35.545252,31.782505],[35.545665,32.393992]],[[35.719918,32.709192],[36.834062,32.312938],[38.792341,33.378686]],[[134.638428,34.149234],[134.766379,33.806335],[134.203416,33.201178],[133.79295,33.521985],[133.280268,33.28957],[133.014858,32.704567],[132.363115,32.989382],[132.371176,33.463642],[132.924373,34.060299],[133.492968,33.944621],[133.904106,34.364931],[134.638428,34.149234]],[[140.976388,37.142074],[140.59977,36.343983],[140.774074,35.842877],[140.253279,35.138114],[138.975528,34.6676],[137.217599,34.606286],[135.792983,33.464805],[135.120983,33.849071],[135.079435,34.596545],[133.340316,34.375938],[132.156771,33.904933],[130.986145,33.885761],[132.000036,33.149992],[131.33279,31.450355],[130.686318,31.029579],[130.20242,31.418238],[130.447676,32.319475],[129.814692,32.61031],[129.408463,33.296056],[130.353935,33.604151],[130.878451,34.232743],[131.884229,34.749714],[132.617673,35.433393],[134.608301,35.731618],[135.677538,35.527134],[136.723831,37.304984],[137.390612,36.827391],[138.857602,37.827485],[139.426405,38.215962],[140.05479,39.438807],[139.883379,40.563312],[140.305783,41.195005],[141.368973,41.37856],[141.914263,39.991616],[141.884601,39.180865],[140.959489,38.174001],[140.976388,37.142074]],[[143.910162,44.1741],[144.613427,43.960883],[145.320825,44.384733],[145.543137,43.262088],[144.059662,42.988358],[143.18385,41.995215],[141.611491,42.678791],[141.067286,41.584594],[139.955106,41.569556],[139.817544,42.563759],[140.312087,43.333273],[141.380549,43.388825],[141.671952,44.772125],[141.967645,45.551483],[143.14287,44.510358],[143.910162,44.1741]],[[80.25999,42.349999],[79.643645,42.496683],[79.142177,42.856092],[77.658392,42.960686],[76.000354,42.988022],[75.636965,42.8779],[74.212866,43.298339],[73.645304,43.091272],[73.489758,42.500894],[71.844638,42.845395],[71.186281,42.704293],[70.962315,42.266154]],[[70.962315,42.266154],[70.388965,42.081308],[69.070027,41.384244],[68.632483,40.668681],[68.259896,40.662325],[67.985856,41.135991],[66.714047,41.168444],[66.510649,41.987644],[66.023392,41.994646],[66.098012,42.99766],[64.900824,43.728081],[63.185787,43.650075],[62.0133,43.504477],[61.05832,44.405817],[60.239972,44.784037],[58.689989,45.500014],[58.503127,45.586804],[55.928917,44.995858],[55.968191,41.308642]],[[55.968191,41.308642],[55.455251,41.259859],[54.755345,42.043971],[54.079418,42.324109],[52.944293,42.116034],[52.50246,41.783316]],[[52.50246,41.783316],[52.446339,42.027151],[52.692112,42.443895],[52.501426,42.792298],[51.342427,43.132975],[50.891292,44.031034],[50.339129,44.284016],[50.305643,44.609836],[51.278503,44.514854],[51.316899,45.245998],[52.16739,45.408391],[53.040876,45.259047],[53.220866,46.234646],[53.042737,46.853006],[52.042023,46.804637],[51.191945,47.048705],[50.034083,46.60899],[49.10116,46.39933]],[[49.10116,46.39933],[48.59325,46.56104],[48.694734,47.075628],[48.05725,47.74377],[47.31524,47.71585],[46.466446,48.394152],[47.043672,49.152039],[46.751596,49.356006],[47.54948,50.454698],[48.577841,49.87476],[48.702382,50.605128],[50.766648,51.692762],[52.328724,51.718652],[54.532878,51.02624],[55.71694,50.62171],[56.77798,51.04355],[58.36332,51.06364],[59.642282,50.545442],[59.932807,50.842194],[61.337424,50.79907],[61.588003,51.272659],[59.967534,51.96042],[60.927269,52.447548],[60.739993,52.719986],[61.699986,52.979996],[60.978066,53.664993],[61.4366,54.00625],[65.178534,54.354228],[65.66687,54.60125],[68.1691,54.970392],[69.068167,55.38525],[70.865267,55.169734],[71.180131,54.133285],[72.22415,54.376655],[73.508516,54.035617],[73.425679,53.48981],[74.38482,53.54685],[76.8911,54.490524],[76.525179,54.177003],[77.800916,53.404415],[80.03556,50.864751],[80.568447,51.388336],[81.945986,50.812196],[83.383004,51.069183],[83.935115,50.889246],[84.416377,50.3114],[85.11556,50.117303],[85.54127,49.692859],[86.829357,49.826675],[87.35997,49.214981]],[[41.855083,3.918912],[40.98105,2.78452],[40.993,-0.85829],[41.58513,-1.68325]],[[41.58513,-1.68325],[40.88477,-2.08255],[40.63785,-2.49979],[40.26304,-2.57309],[40.12119,-3.27768],[39.80006,-3.68116],[39.60489,-4.34653],[39.20222,-4.67677]],[[39.20222,-4.67677],[37.7669,-3.67712],[37.69869,-3.09699],[34.07262,-1.05982],[33.903711,-0.95]],[[33.903711,-0.95],[33.893569,0.109814],[34.18,0.515],[34.6721,1.17694],[35.03599,1.90584],[34.59607,3.05374],[34.47913,3.5556],[34.005,4.249885]],[[34.005,4.249885],[34.620196,4.847123],[35.298007,5.506]],[[73.675379,39.431237],[71.784694,39.279463],[70.549162,39.604198],[69.464887,39.526683],[69.55961,40.103211],[70.648019,39.935754],[71.014198,40.244366]],[[71.014198,40.244366],[71.774875,40.145844],[73.055417,40.866033],[71.870115,41.3929],[71.157859,41.143587],[70.420022,41.519998],[71.259248,42.167711],[70.962315,42.266154]],[[102.584932,12.186595],[102.348099,13.394247],[102.988422,14.225721],[104.281418,14.416743],[105.218777,14.273212]],[[105.218777,14.273212],[106.043946,13.881091],[106.496373,14.570584],[107.382727,14.202441]],[[107.382727,14.202441],[107.614548,13.535531],[107.491403,12.337206],[105.810524,11.567615],[106.24967,10.961812],[105.199915,10.88931],[104.334335,10.486544]],[[104.334335,10.486544],[103.49728,10.632555],[103.09069,11.153661],[102.584932,12.186595]],[[128.349716,38.612243],[129.21292,37.432392],[129.46045,36.784189],[129.468304,35.632141],[129.091377,35.082484],[128.18585,34.890377],[127.386519,34.475674],[126.485748,34.390046],[126.37392,34.93456],[126.559231,35.684541],[126.117398,36.725485],[126.860143,36.893924],[126.174759,37.749686]],[[126.174759,37.749686],[126.237339,37.840378],[126.68372,37.804773],[127.073309,38.256115],[127.780035,38.304536],[128.205746,38.370397],[128.349716,38.612243]],[[20.0707,42.58863],[20.25758,42.81275]],[[20.25758,42.81275],[20.49679,42.88469],[20.63508,43.21671],[20.81448,43.27205],[20.95651,43.13094],[21.143395,43.068685],[21.27421,42.90959],[21.43866,42.86255],[21.63302,42.67717],[21.77505,42.6827],[21.66292,42.43922],[21.54332,42.32025],[21.576636,42.245224]],[[21.576636,42.245224],[21.3527,42.2068],[20.76216,42.05186],[20.71731,41.84711],[20.590247,41.855409]],[[47.974519,29.975819],[48.183189,29.534477],[48.093943,29.306299],[48.416094,28.552004]],[[48.416094,28.552004],[47.708851,28.526063],[47.459822,29.002519],[46.568713,29.099025]],[[102.170436,22.464753],[102.754896,21.675137],[103.203861,20.766562],[104.435,20.758733],[104.822574,19.886642],[104.183388,19.624668],[103.896532,19.265181],[105.094598,18.666975],[105.925762,17.485315],[106.556008,16.604284],[107.312706,15.908538],[107.564525,15.202173],[107.382727,14.202441]],[[105.218777,14.273212],[105.544338,14.723934],[105.589039,15.570316],[104.779321,16.441865],[104.716947,17.428859],[103.956477,18.240954],[103.200192,18.309632],[102.998706,17.961695],[102.413005,17.932782],[102.113592,18.109102],[101.059548,17.512497],[101.035931,18.408928],[101.282015,19.462585],[100.606294,19.508344],[100.548881,20.109238],[100.115988,20.41785]],[[100.115988,20.41785],[100.329101,20.786122],[101.180005,21.436573]],[[35.126053,33.0909],[35.482207,33.90545],[35.979592,34.610058],[35.998403,34.644914]],[[35.998403,34.644914],[36.448194,34.593935],[36.61175,34.201789],[36.06646,33.824912],[35.821101,33.277426]],[[-7.712159,4.364566],[-7.974107,4.355755],[-9.004794,4.832419],[-9.91342,5.593561],[-10.765384,6.140711],[-11.438779,6.785917]],[[-11.438779,6.785917],[-11.199802,7.105846],[-11.146704,7.396706],[-10.695595,7.939464],[-10.230094,8.406206]],[[9.48214,30.307556],[9.970017,30.539325],[10.056575,30.961831],[9.950225,31.37607],[10.636901,31.761421],[10.94479,32.081815],[11.432253,32.368903],[11.488787,33.136996]],[[11.488787,33.136996],[12.66331,32.79278],[13.08326,32.87882],[13.91868,32.71196],[15.24563,32.26508],[15.71394,31.37626],[16.61162,31.18218],[18.02109,30.76357],[19.08641,30.26639],[19.57404,30.52582],[20.05335,30.98576],[19.82033,31.75179],[20.13397,32.2382],[20.85452,32.7068],[21.54298,32.8432],[22.89576,32.63858],[23.2368,32.19149],[23.60913,32.18726],[23.9275,32.01667],[24.92114,31.89936],[25.16482,31.56915]],[[25,22],[25,20.00304],[23.85,20],[23.83766,19.58047]],[[23.83766,19.58047],[19.84926,21.49509],[15.86085,23.40972],[14.8513,22.86295]],[[14.8513,22.86295],[14.143871,22.491289],[13.581425,23.040506],[11.999506,23.471668]],[[81.787959,7.523055],[81.637322,6.481775],[81.21802,6.197141],[80.348357,5.96837],[79.872469,6.763463],[79.695167,8.200843],[80.147801,9.824078],[80.838818,9.268427],[81.304319,8.564206],[81.787959,7.523055]],[[28.978263,-28.955597],[29.325166,-29.257387],[29.018415,-29.743766],[28.8484,-30.070051],[28.291069,-30.226217],[28.107205,-30.545732],[27.749397,-30.645106],[26.999262,-29.875954],[27.532511,-29.242711],[28.074338,-28.851469],[28.5417,-28.647502],[28.978263,-28.955597]],[[23.484128,53.912498],[23.243987,54.220567],[22.731099,54.327537]],[[22.731099,54.327537],[22.651052,54.582741],[22.757764,54.856574],[22.315724,55.015299],[21.268449,55.190482]],[[21.268449,55.190482],[21.0558,56.031076]],[[21.0558,56.031076],[22.201157,56.337802],[23.878264,56.273671],[24.860684,56.372528],[25.000934,56.164531],[25.533047,56.100297],[26.494331,55.615107]],[[21.0558,56.031076],[21.090424,56.783873],[21.581866,57.411871],[22.524341,57.753374],[23.318453,57.006236],[24.12073,57.025693],[24.312863,57.793424]],[[27.288185,57.474528],[27.770016,57.244258],[27.855282,56.759326],[28.176709,56.16913]],[[-8.66559,27.656426],[-8.817828,27.656426],[-8.794884,27.120696],[-9.413037,27.088476],[-9.735343,26.860945],[-10.189424,26.860945],[-10.551263,26.990808],[-11.392555,26.883424],[-11.71822,26.104092],[-12.030759,26.030866],[-12.500963,24.770116],[-13.89111,23.691009],[-14.221168,22.310163],[-14.630833,21.86094],[-14.750955,21.5006],[-17.002962,21.420734],[-17.020428,21.42231]],[[-17.020428,21.42231],[-16.973248,21.885745],[-16.589137,22.158234],[-16.261922,22.67934],[-16.326414,23.017768],[-15.982611,23.723358],[-15.426004,24.359134],[-15.089332,24.520261],[-14.824645,25.103533],[-14.800926,25.636265],[-14.43994,26.254418],[-13.773805,26.618892],[-13.139942,27.640148],[-13.121613,27.654148],[-12.618837,28.038186],[-11.688919,28.148644],[-10.900957,28.832142],[-10.399592,29.098586],[-9.564811,29.933574],[-9.814718,31.177736],[-9.434793,32.038096],[-9.300693,32.564679],[-8.657476,33.240245],[-7.654178,33.697065],[-6.912544,34.110476],[-6.244342,35.145865],[-5.929994,35.759988],[-5.193863,35.755182],[-4.591006,35.330712],[-3.640057,35.399855],[-2.604306,35.179093],[-2.169914,35.168396]],[[26.619337,48.220726],[26.857824,48.368211],[27.522537,48.467119],[28.259547,48.155562],[28.670891,48.118149],[29.122698,47.849095],[29.050868,47.510227],[29.415135,47.346645],[29.559674,46.928583],[29.908852,46.674361],[29.83821,46.525326],[30.024659,46.423937],[29.759972,46.349988],[29.170654,46.379262],[29.072107,46.517678],[28.862972,46.437889],[28.933717,46.25883],[28.659987,45.939987],[28.485269,45.596907],[28.233554,45.488283]],[[28.233554,45.488283],[28.054443,45.944586],[28.160018,46.371563],[28.12803,46.810476],[27.551166,47.405117],[27.233873,47.826771],[26.924176,48.123264],[26.619337,48.220726]],[[49.543519,-12.469833],[49.808981,-12.895285],[50.056511,-13.555761],[50.217431,-14.758789],[50.476537,-15.226512],[50.377111,-15.706069],[50.200275,-16.000263],[49.860606,-15.414253],[49.672607,-15.710204],[49.863344,-16.451037],[49.774564,-16.875042],[49.498612,-17.106036],[49.435619,-17.953064],[49.041792,-19.118781],[48.548541,-20.496888],[47.930749,-22.391501],[47.547723,-23.781959],[47.095761,-24.94163],[46.282478,-25.178463],[45.409508,-25.601434],[44.833574,-25.346101],[44.03972,-24.988345],[43.763768,-24.460677],[43.697778,-23.574116],[43.345654,-22.776904],[43.254187,-22.057413],[43.433298,-21.336475],[43.893683,-21.163307],[43.89637,-20.830459],[44.374325,-20.072366],[44.464397,-19.435454],[44.232422,-18.961995],[44.042976,-18.331387],[43.963084,-17.409945],[44.312469,-16.850496],[44.446517,-16.216219],[44.944937,-16.179374],[45.502732,-15.974373],[45.872994,-15.793454],[46.312243,-15.780018],[46.882183,-15.210182],[47.70513,-14.594303],[48.005215,-14.091233],[47.869047,-13.663869],[48.293828,-13.784068],[48.84506,-13.089175],[48.863509,-12.487868],[49.194651,-12.040557],[49.543519,-12.469833]],[[-92.22775,14.538829],[-93.359464,15.61543],[-93.875169,15.940164],[-94.691656,16.200975],[-95.250227,16.128318],[-96.053382,15.752088],[-96.557434,15.653515],[-97.263592,15.917065],[-98.01303,16.107312],[-98.947676,16.566043],[-99.697397,16.706164],[-100.829499,17.171071],[-101.666089,17.649026],[-101.918528,17.91609],[-102.478132,17.975751],[-103.50099,18.292295],[-103.917527,18.748572],[-104.99201,19.316134],[-105.493038,19.946767],[-105.731396,20.434102],[-105.397773,20.531719],[-105.500661,20.816895],[-105.270752,21.076285],[-105.265817,21.422104],[-105.603161,21.871146],[-105.693414,22.26908],[-106.028716,22.773752],[-106.90998,23.767774],[-107.915449,24.548915],[-108.401905,25.172314],[-109.260199,25.580609],[-109.444089,25.824884],[-109.291644,26.442934],[-109.801458,26.676176],[-110.391732,27.162115],[-110.641019,27.859876],[-111.178919,27.941241],[-111.759607,28.467953],[-112.228235,28.954409],[-112.271824,29.266844],[-112.809594,30.021114],[-113.163811,30.786881],[-113.148669,31.170966],[-113.871881,31.567608],[-114.205737,31.524045],[-114.776451,31.799532],[-114.9367,31.393485],[-114.771232,30.913617],[-114.673899,30.162681],[-114.330974,29.750432],[-113.588875,29.061611],[-113.424053,28.826174],[-113.271969,28.754783],[-113.140039,28.411289],[-112.962298,28.42519],[-112.761587,27.780217],[-112.457911,27.525814],[-112.244952,27.171727],[-111.616489,26.662817],[-111.284675,25.73259],[-110.987819,25.294606],[-110.710007,24.826004],[-110.655049,24.298595],[-110.172856,24.265548],[-109.771847,23.811183],[-109.409104,23.364672],[-109.433392,23.185588],[-109.854219,22.818272],[-110.031392,22.823078],[-110.295071,23.430973],[-110.949501,24.000964],[-111.670568,24.484423],[-112.182036,24.738413],[-112.148989,25.470125],[-112.300711,26.012004],[-112.777297,26.32196],[-113.464671,26.768186],[-113.59673,26.63946],[-113.848937,26.900064],[-114.465747,27.14209],[-115.055142,27.722727],[-114.982253,27.7982],[-114.570366,27.741485],[-114.199329,28.115003],[-114.162018,28.566112],[-114.931842,29.279479],[-115.518654,29.556362],[-115.887365,30.180794],[-116.25835,30.836464],[-116.721526,31.635744],[-117.12776,32.53534]],[[-117.12776,32.53534],[-115.99135,32.61239],[-114.72139,32.72083],[-114.815,32.52528],[-113.30498,32.03914],[-111.02361,31.33472],[-109.035,31.34194],[-108.24194,31.34222],[-108.24,31.754854],[-106.50759,31.75452],[-106.1429,31.39995],[-105.63159,31.08383],[-105.03737,30.64402],[-104.70575,30.12173],[-104.45697,29.57196],[-103.94,29.27],[-103.11,28.97],[-102.48,29.76],[-101.6624,29.7793],[-100.9576,29.38071],[-100.45584,28.69612],[-100.11,28.11],[-99.52,27.54],[-99.3,26.84],[-99.02,26.37],[-98.24,26.06],[-97.53,25.84]],[[-97.53,25.84],[-97.140008,25.869997],[-97.528072,24.992144],[-97.702946,24.272343],[-97.776042,22.93258],[-97.872367,22.444212],[-97.699044,21.898689],[-97.38896,21.411019],[-97.189333,20.635433],[-96.525576,19.890931],[-96.292127,19.320371],[-95.900885,18.828024],[-94.839063,18.562717],[-94.42573,18.144371],[-93.548651,18.423837],[-92.786114,18.524839],[-92.037348,18.704569],[-91.407903,18.876083],[-90.77187,19.28412],[-90.53359,19.867418],[-90.451476,20.707522],[-90.278618,20.999855],[-89.601321,21.261726],[-88.543866,21.493675],[-87.658417,21.458846],[-87.05189,21.543543],[-86.811982,21.331515],[-86.845908,20.849865],[-87.383291,20.255405],[-87.621054,19.646553],[-87.43675,19.472403],[-87.58656,19.04013],[-87.837191,18.259816],[-88.090664,18.516648],[-88.300031,18.499982]],[[21.576636,42.245224],[21.91708,42.30364],[22.380526,42.32026]],[[-11.513943,12.442988],[-11.467899,12.754519],[-11.553398,13.141214],[-11.927716,13.422075],[-12.124887,13.994727],[-12.17075,14.616834]],[[-12.17075,14.616834],[-11.834208,14.799097],[-11.666078,15.388208],[-11.349095,15.411256],[-10.650791,15.132746],[-10.086846,15.330486],[-9.700255,15.264107],[-9.550238,15.486497],[-5.537744,15.50169],[-5.315277,16.201854],[-5.488523,16.325102],[-5.971129,20.640833],[-6.453787,24.956591],[-4.923337,24.974574]],[[4.267419,19.155265],[4.27021,16.852227],[3.723422,16.184284],[3.638259,15.56812],[2.749993,15.409525],[1.385528,15.323561],[1.015783,14.968182],[0.374892,14.928908]],[[100.115988,20.41785],[99.543309,20.186598],[98.959676,19.752981],[98.253724,19.708203],[97.797783,18.62708],[97.375896,18.445438],[97.859123,17.567946],[98.493761,16.837836],[98.903348,16.177824],[98.537376,15.308497],[98.192074,15.123703],[98.430819,14.622028],[99.097755,13.827503],[99.212012,13.269294],[99.196354,12.804748],[99.587286,11.892763],[99.038121,10.960546],[98.553551,9.93296]],[[98.553551,9.93296],[98.457174,10.675266],[98.764546,11.441292],[98.428339,12.032987],[98.509574,13.122378],[98.103604,13.64046],[97.777732,14.837286],[97.597072,16.100568],[97.16454,16.928734],[96.505769,16.427241],[95.369352,15.71439],[94.808405,15.803454],[94.188804,16.037936],[94.533486,17.27724],[94.324817,18.213514],[93.540988,19.366493],[93.663255,19.726962],[93.078278,19.855145],[92.368554,20.670883]],[[19.371768,41.877551],[19.16246,41.95502],[18.88214,42.28151],[18.450017,42.479992]],[[19.21852,43.52384],[19.48389,43.35229],[19.63,43.21378],[19.95857,43.10604],[20.3398,42.89852],[20.25758,42.81275]],[[87.751264,49.297198],[88.805567,49.470521],[90.713667,50.331812],[92.234712,50.802171],[93.10421,50.49529],[94.147566,50.480537],[94.815949,50.013433],[95.81402,49.97746],[97.25976,49.72605],[98.231762,50.422401],[97.82574,51.010995],[98.861491,52.047366],[99.981732,51.634006],[100.88948,51.516856],[102.06521,51.25991],[102.25589,50.51056],[103.676545,50.089966],[104.62158,50.27532],[105.886591,50.406019],[106.888804,50.274296],[107.868176,49.793705],[108.475167,49.282548],[109.402449,49.292961],[110.662011,49.130128],[111.581231,49.377968],[112.89774,49.543565],[114.362456,50.248303],[114.96211,50.140247],[115.485695,49.805177],[116.678801,49.888531]],[[34.559989,-11.52002],[35.312398,-11.439146],[36.514082,-11.720938],[36.775151,-11.594537],[37.47129,-11.56876],[37.82764,-11.26879],[38.427557,-11.285202],[39.521,-10.89688],[40.31659,-10.3171],[40.316586,-10.317098]],[[40.316586,-10.317098],[40.316589,-10.317096],[40.478387,-10.765441],[40.437253,-11.761711],[40.560811,-12.639177],[40.59962,-14.201975],[40.775475,-14.691764],[40.477251,-15.406294],[40.089264,-16.100774],[39.452559,-16.720891],[38.538351,-17.101023],[37.411133,-17.586368],[36.281279,-18.659688],[35.896497,-18.84226],[35.1984,-19.552811],[34.786383,-19.784012],[34.701893,-20.497043],[35.176127,-21.254361],[35.373428,-21.840837],[35.385848,-22.14],[35.562546,-22.09],[35.533935,-23.070788],[35.371774,-23.535359],[35.60747,-23.706563],[35.458746,-24.12261],[35.040735,-24.478351],[34.215824,-24.816314],[33.01321,-25.357573],[32.574632,-25.727318],[32.660363,-26.148584],[32.915955,-26.215867],[32.83012,-26.742192]],[[32.83012,-26.742192],[32.071665,-26.73382]],[[32.071665,-26.73382],[31.985779,-26.29178],[31.837778,-25.843332]],[[31.837778,-25.843332],[31.752408,-25.484284],[31.930589,-24.369417],[31.670398,-23.658969],[31.191409,-22.25151]],[[31.191409,-22.25151],[32.244988,-21.116489],[32.508693,-20.395292],[32.659743,-20.30429],[32.772708,-19.715592],[32.611994,-19.419383],[32.654886,-18.67209],[32.849861,-17.979057],[32.847639,-16.713398],[32.328239,-16.392074],[31.852041,-16.319417],[31.636498,-16.07199],[31.173064,-15.860944],[30.338955,-15.880839],[30.274256,-15.507787]],[[30.274256,-15.507787],[30.179481,-14.796099],[33.214025,-13.97186]],[[33.214025,-13.97186],[33.7897,-14.451831],[34.064825,-14.35995],[34.459633,-14.61301],[34.517666,-15.013709],[34.307291,-15.478641],[34.381292,-16.18356],[35.03381,-16.8013],[35.339063,-16.10744],[35.771905,-15.896859],[35.686845,-14.611046],[35.267956,-13.887834],[34.907151,-13.565425],[34.559989,-13.579998],[34.280006,-12.280025],[34.559989,-11.52002]],[[-12.17075,14.616834],[-12.830658,15.303692],[-13.435738,16.039383],[-14.099521,16.304302],[-14.577348,16.598264],[-15.135737,16.587282],[-15.623666,16.369337],[-16.12069,16.455663],[-16.463098,16.135036]],[[-16.463098,16.135036],[-16.549708,16.673892],[-16.270552,17.166963],[-16.146347,18.108482],[-16.256883,19.096716],[-16.377651,19.593817],[-16.277838,20.092521],[-16.536324,20.567866],[-17.063423,20.999752]],[[-17.063423,20.999752],[-16.845194,21.333323],[-12.929102,21.327071],[-13.118754,22.77122],[-12.874222,23.284832],[-11.937224,23.374594],[-11.969419,25.933353],[-8.687294,25.881056],[-8.6844,27.395744]],[[33.214025,-13.97186],[32.688165,-13.712858],[32.991764,-12.783871],[33.306422,-12.435778],[33.114289,-11.607198],[33.31531,-10.79655],[33.485688,-10.525559],[33.231388,-9.676722],[32.759375,-9.230599]],[[32.759375,-9.230599],[33.73972,-9.41715],[33.940838,-9.693674],[34.28,-10.16],[34.559989,-11.52002]],[[115.45071,5.44773],[116.220741,6.143191],[116.725103,6.924771],[117.129626,6.928053],[117.643393,6.422166],[117.689075,5.98749],[118.347691,5.708696],[119.181904,5.407836],[119.110694,5.016128],[118.439727,4.966519],[118.618321,4.478202],[117.882035,4.137551]],[[109.66326,2.006467],[110.396135,1.663775],[111.168853,1.850637],[111.370081,2.697303],[111.796928,2.885897],[112.995615,3.102395],[113.712935,3.893509],[114.204017,4.525874]],[[102.141187,6.221636],[102.371147,6.128205],[102.961705,5.524495],[103.381215,4.855001],[103.438575,4.181606],[103.332122,3.726698],[103.429429,3.382869],[103.502448,2.791019],[103.854674,2.515454],[104.247932,1.631141],[104.228811,1.293048],[103.519707,1.226334],[102.573615,1.967115],[101.390638,2.760814],[101.27354,3.270292],[100.695435,3.93914],[100.557408,4.76728],[100.196706,5.312493],[100.30626,6.040562],[100.085757,6.464489]],[[100.085757,6.464489],[100.259596,6.642825],[101.075516,6.204867],[101.154219,5.691384],[101.814282,5.810808],[102.141187,6.221636]],[[23.215048,-17.523116],[24.033862,-17.295843],[24.682349,-17.353411],[25.07695,-17.578823],[25.084443,-17.661816]],[[19.895768,-24.76779],[19.894734,-28.461105],[19.002127,-28.972443],[18.464899,-29.045462],[17.836152,-28.856378],[17.387497,-28.783514],[17.218929,-28.355943],[16.824017,-28.082162],[16.344977,-28.576705]],[[16.344977,-28.576705],[15.601818,-27.821247],[15.210472,-27.090956],[14.989711,-26.117372],[14.743214,-25.39292],[14.408144,-23.853014],[14.385717,-22.656653],[14.257714,-22.111208],[13.868642,-21.699037],[13.352498,-20.872834],[12.826845,-19.673166],[12.608564,-19.045349],[11.794919,-18.069129],[11.734199,-17.301889]],[[165.77999,-21.080005],[166.599991,-21.700019],[167.120011,-22.159991],[166.740035,-22.399976],[166.189732,-22.129708],[165.474375,-21.679607],[164.829815,-21.14982],[164.167995,-20.444747],[164.029606,-20.105646],[164.459967,-20.120012],[165.020036,-20.459991],[165.460009,-20.800022],[165.77999,-21.080005]],[[14.8513,22.86295],[15.096888,21.308519],[15.47106,21.04845],[15.487148,20.730415],[15.903247,20.387619],[15.685741,19.95718],[15.300441,17.92795],[15.247731,16.627306],[13.97217,15.68437],[13.540394,14.367134],[13.956699,13.996691],[13.954477,13.353449],[14.595781,13.330427],[14.495787,12.859396]],[[14.181336,12.483657],[13.995353,12.461565],[13.318702,13.556356],[13.083987,13.596147],[12.302071,13.037189],[11.527803,13.32898],[10.989593,13.387323],[10.701032,13.246918],[10.114814,13.277252],[9.524928,12.851102],[9.014933,12.826659],[7.804671,13.343527],[7.330747,13.098038],[6.820442,13.115091],[6.445426,13.492768],[5.443058,13.865924],[4.368344,13.747482],[4.107946,13.531216],[3.967283,12.956109],[3.680634,12.552903],[3.61118,11.660167]],[[8.500288,4.771983],[7.462108,4.412108],[7.082596,4.464689],[6.698072,4.240594],[5.898173,4.262453],[5.362805,4.887971],[5.033574,5.611802],[4.325607,6.270651],[3.57418,6.2583],[2.691702,6.258817]],[[-85.71254,11.088445],[-86.058488,11.403439],[-86.52585,11.806877],[-86.745992,12.143962],[-87.167516,12.458258],[-87.668493,12.90991],[-87.557467,13.064552],[-87.392386,12.914018],[-87.316654,12.984686]],[[-83.147219,14.995829],[-83.233234,14.899866],[-83.284162,14.676624],[-83.182126,14.310703],[-83.4125,13.970078],[-83.519832,13.567699],[-83.552207,13.127054],[-83.498515,12.869292],[-83.473323,12.419087],[-83.626104,12.32085],[-83.719613,11.893124],[-83.650858,11.629032],[-83.85547,11.373311],[-83.808936,11.103044],[-83.655612,10.938764]],[[3.315011,51.345777],[3.830289,51.620545],[4.705997,53.091798],[6.074183,53.510403],[6.90514,53.482162]],[[20.645593,69.106247],[20.025269,69.065139],[19.87856,68.407194],[17.993868,68.567391],[17.729182,68.010552],[16.768879,68.013937],[16.108712,67.302456],[15.108411,66.193867],[13.55569,64.787028],[13.919905,64.445421],[13.571916,64.049114],[12.579935,64.066219],[11.930569,63.128318],[11.992064,61.800362],[12.631147,61.293572],[12.300366,60.117933],[11.468272,59.432393],[11.027369,58.856149]],[[11.027369,58.856149],[10.356557,59.469807],[8.382,58.313288],[7.048748,58.078884],[5.665835,58.588155],[5.308234,59.663232],[4.992078,61.970998],[5.9129,62.614473],[8.553411,63.454008],[10.527709,64.486038],[12.358347,65.879726],[14.761146,67.810642],[16.435927,68.563205],[19.184028,69.817444],[21.378416,70.255169],[23.023742,70.202072],[24.546543,71.030497],[26.37005,70.986262],[28.165547,71.185474],[31.293418,70.453788],[30.005435,70.186259],[31.101042,69.558101]],[[31.101042,69.558101],[29.39955,69.15692],[28.59193,69.064777]],[[24.72412,77.85385],[22.49032,77.44493],[20.72601,77.67704],[21.41611,77.93504],[20.8119,78.25463],[22.88426,78.45494],[23.28134,78.07954],[24.72412,77.85385]],[[18.25183,79.70175],[21.54383,78.95611],[19.02737,78.5626],[18.47172,77.82669],[17.59441,77.63796],[17.1182,76.80941],[15.91315,76.77045],[13.76259,77.38035],[14.66956,77.73565],[13.1706,78.02493],[11.22231,78.8693],[10.44453,79.65239],[13.17077,80.01046],[13.71852,79.66039],[15.14282,79.67431],[15.52255,80.01608],[16.99085,80.05086],[18.25183,79.70175]],[[25.447625,80.40734],[27.407506,80.056406],[25.924651,79.517834],[23.024466,79.400012],[20.075188,79.566823],[19.897266,79.842362],[18.462264,79.85988],[17.368015,80.318896],[20.455992,80.598156],[21.907945,80.357679],[22.919253,80.657144],[25.447625,80.40734]],[[173.020375,-40.919052],[173.247234,-41.331999],[173.958405,-40.926701],[174.247587,-41.349155],[174.248517,-41.770008],[173.876447,-42.233184],[173.22274,-42.970038],[172.711246,-43.372288],[173.080113,-43.853344],[172.308584,-43.865694],[171.452925,-44.242519],[171.185138,-44.897104],[170.616697,-45.908929],[169.831422,-46.355775],[169.332331,-46.641235],[168.411354,-46.619945],[167.763745,-46.290197],[166.676886,-46.219917],[166.509144,-45.852705],[167.046424,-45.110941],[168.303763,-44.123973],[168.949409,-43.935819],[169.667815,-43.555326],[170.52492,-43.031688],[171.12509,-42.512754],[171.569714,-41.767424],[171.948709,-41.514417],[172.097227,-40.956104],[172.79858,-40.493962],[173.020375,-40.919052]],[[174.612009,-36.156397],[175.336616,-37.209098],[175.357596,-36.526194],[175.808887,-36.798942],[175.95849,-37.555382],[176.763195,-37.881253],[177.438813,-37.961248],[178.010354,-37.579825],[178.517094,-37.695373],[178.274731,-38.582813],[177.97046,-39.166343],[177.206993,-39.145776],[176.939981,-39.449736],[177.032946,-39.879943],[176.885824,-40.065978],[176.508017,-40.604808],[176.01244,-41.289624],[175.239567,-41.688308],[175.067898,-41.425895],[174.650973,-41.281821],[175.22763,-40.459236],[174.900157,-39.908933],[173.824047,-39.508854],[173.852262,-39.146602],[174.574802,-38.797683],[174.743474,-38.027808],[174.697017,-37.381129],[174.292028,-36.711092],[174.319004,-36.534824],[173.840997,-36.121981],[173.054171,-35.237125],[172.636005,-34.529107],[173.007042,-34.450662],[173.551298,-35.006183],[174.32939,-35.265496],[174.612009,-36.156397]],[[56.070821,26.055464],[56.362017,26.395934],[56.485679,26.309118],[56.391421,25.895991],[56.261042,25.714606]],[[56.396847,24.924732],[56.84514,24.241673],[57.403453,23.878594],[58.136948,23.747931],[58.729211,23.565668],[59.180502,22.992395],[59.450098,22.660271],[59.80806,22.533612],[59.806148,22.310525],[59.442191,21.714541],[59.282408,21.433886],[58.861141,21.114035],[58.487986,20.428986],[58.034318,20.481437],[57.826373,20.243002],[57.665762,19.736005],[57.7887,19.06757],[57.694391,18.94471],[57.234264,18.947991],[56.609651,18.574267],[56.512189,18.087113],[56.283521,17.876067],[55.661492,17.884128],[55.269939,17.632309],[55.2749,17.228354],[54.791002,16.950697],[54.239253,17.044981],[53.570508,16.707663],[53.108573,16.651051]],[[53.108573,16.651051],[52.782184,17.349742],[52.00001,19.000003]],[[52.00001,19.000003],[54.999982,19.999994],[55.666659,22.000001],[55.208341,22.70833]],[[68.176645,23.691965],[67.443667,23.944844],[67.145442,24.663611],[66.372828,25.425141],[64.530408,25.237039],[62.905701,25.218409],[61.497363,25.078237]],[[-77.881571,7.223771],[-78.214936,7.512255],[-78.429161,8.052041],[-78.182096,8.319182],[-78.435465,8.387705],[-78.622121,8.718124],[-79.120307,8.996092],[-79.557877,8.932375],[-79.760578,8.584515],[-80.164481,8.333316],[-80.382659,8.298409],[-80.480689,8.090308],[-80.00369,7.547524],[-80.276671,7.419754],[-80.421158,7.271572],[-80.886401,7.220541],[-81.059543,7.817921],[-81.189716,7.647906],[-81.519515,7.70661],[-81.721311,8.108963],[-82.131441,8.175393],[-82.390934,8.292362],[-82.820081,8.290864],[-82.850958,8.073823],[-82.965783,8.225028]],[[-82.546196,9.566135],[-82.187123,9.207449],[-82.207586,8.995575],[-81.808567,8.950617],[-81.714154,9.031955],[-81.439287,8.786234],[-80.947302,8.858504],[-80.521901,9.111072],[-79.9146,9.312765],[-79.573303,9.61161],[-79.021192,9.552931],[-79.05845,9.454565],[-78.500888,9.420459],[-78.055928,9.24773],[-77.729514,8.946844],[-77.353361,8.670505]],[[-70.372572,-18.347975],[-71.37525,-17.773799],[-71.462041,-17.363488],[-73.44453,-16.359363],[-75.237883,-15.265683],[-76.009205,-14.649286],[-76.423469,-13.823187],[-76.259242,-13.535039],[-77.106192,-12.222716],[-78.092153,-10.377712],[-79.036953,-8.386568],[-79.44592,-7.930833],[-79.760578,-7.194341],[-80.537482,-6.541668],[-81.249996,-6.136834],[-80.926347,-5.690557],[-81.410943,-4.736765],[-81.09967,-4.036394],[-80.302561,-3.404856]],[[126.376814,8.414706],[126.478513,7.750354],[126.537424,7.189381],[126.196773,6.274294],[125.831421,7.293715],[125.363852,6.786485],[125.683161,6.049657],[125.396512,5.581003],[124.219788,6.161355],[123.93872,6.885136],[124.243662,7.36061],[123.610212,7.833527],[123.296071,7.418876],[122.825506,7.457375],[122.085499,6.899424],[121.919928,7.192119],[122.312359,8.034962],[122.942398,8.316237],[123.487688,8.69301],[123.841154,8.240324],[124.60147,8.514158],[124.764612,8.960409],[125.471391,8.986997],[125.412118,9.760335],[126.222714,9.286074],[126.306637,8.782487],[126.376814,8.414706]],[[123.982438,10.278779],[123.623183,9.950091],[123.309921,9.318269],[122.995883,9.022189],[122.380055,9.713361],[122.586089,9.981045],[122.837081,10.261157],[122.947411,10.881868],[123.49885,10.940624],[123.337774,10.267384],[124.077936,11.232726],[123.982438,10.278779]],[[118.504581,9.316383],[117.174275,8.3675],[117.664477,9.066889],[118.386914,9.6845],[118.987342,10.376292],[119.511496,11.369668],[119.689677,10.554291],[119.029458,10.003653],[118.504581,9.316383]],[[121.883548,11.891755],[122.483821,11.582187],[123.120217,11.58366],[123.100838,11.165934],[122.637714,10.741308],[122.00261,10.441017],[121.967367,10.905691],[122.03837,11.415841],[121.883548,11.891755]],[[125.502552,12.162695],[125.783465,11.046122],[125.011884,11.311455],[125.032761,10.975816],[125.277449,10.358722],[124.801819,10.134679],[124.760168,10.837995],[124.459101,10.88993],[124.302522,11.495371],[124.891013,11.415583],[124.87799,11.79419],[124.266762,12.557761],[125.227116,12.535721],[125.502552,12.162695]],[[121.527394,13.06959],[121.26219,12.20556],[120.833896,12.704496],[120.323436,13.466413],[121.180128,13.429697],[121.527394,13.06959]],[[121.321308,18.504065],[121.937601,18.218552],[122.246006,18.47895],[122.336957,18.224883],[122.174279,17.810283],[122.515654,17.093505],[122.252311,16.262444],[121.662786,15.931018],[121.50507,15.124814],[121.728829,14.328376],[122.258925,14.218202],[122.701276,14.336541],[123.950295,13.782131],[123.855107,13.237771],[124.181289,12.997527],[124.077419,12.536677],[123.298035,13.027526],[122.928652,13.55292],[122.671355,13.185836],[122.03465,13.784482],[121.126385,13.636687],[120.628637,13.857656],[120.679384,14.271016],[120.991819,14.525393],[120.693336,14.756671],[120.564145,14.396279],[120.070429,14.970869],[119.920929,15.406347],[119.883773,16.363704],[120.286488,16.034629],[120.390047,17.599081],[120.715867,18.505227],[121.321308,18.504065]],[[141.00021,-2.600151],[142.735247,-3.289153],[144.583971,-3.861418],[145.27318,-4.373738],[145.829786,-4.876498],[145.981922,-5.465609],[147.648073,-6.083659],[147.891108,-6.614015],[146.970905,-6.721657],[147.191874,-7.388024],[148.084636,-8.044108],[148.734105,-9.104664],[149.306835,-9.071436],[149.266631,-9.514406],[150.038728,-9.684318],[149.738798,-9.872937],[150.801628,-10.293687],[150.690575,-10.582713],[150.028393,-10.652476],[149.78231,-10.393267],[148.923138,-10.280923],[147.913018,-10.130441],[147.135443,-9.492444],[146.567881,-8.942555],[146.048481,-8.067414],[144.744168,-7.630128],[143.897088,-7.91533],[143.286376,-8.245491],[143.413913,-8.983069],[142.628431,-9.326821],[142.068259,-9.159596],[141.033852,-9.117893]],[[155.880026,-6.819997],[155.599991,-6.919991],[155.166994,-6.535931],[154.729192,-5.900828],[154.514114,-5.139118],[154.652504,-5.042431],[154.759991,-5.339984],[155.062918,-5.566792],[155.547746,-6.200655],[156.019965,-6.540014],[155.880026,-6.819997]],[[151.982796,-5.478063],[151.459107,-5.56028],[151.30139,-5.840728],[150.754447,-6.083763],[150.241197,-6.317754],[149.709963,-6.316513],[148.890065,-6.02604],[148.318937,-5.747142],[148.401826,-5.437756],[149.298412,-5.583742],[149.845562,-5.505503],[149.99625,-5.026101],[150.139756,-5.001348],[150.236908,-5.53222],[150.807467,-5.455842],[151.089672,-5.113693],[151.647881,-4.757074],[151.537862,-4.167807],[152.136792,-4.14879],[152.338743,-4.312966],[152.318693,-4.867661],[151.982796,-5.478063]],[[153.140038,-4.499983],[152.827292,-4.766427],[152.638673,-4.176127],[152.406026,-3.789743],[151.953237,-3.462062],[151.384279,-3.035422],[150.66205,-2.741486],[150.939965,-2.500002],[151.479984,-2.779985],[151.820015,-2.999972],[152.239989,-3.240009],[152.640017,-3.659983],[153.019994,-3.980015],[153.140038,-4.499983]],[[23.527071,51.578454],[24.029986,50.705407],[23.922757,50.424881],[23.426508,50.308506],[22.51845,49.476774],[22.776419,49.027395],[22.558138,49.085738]],[[22.558138,49.085738],[21.607808,49.470107],[20.887955,49.328772],[20.415839,49.431453],[19.825023,49.217125],[19.320713,49.571574],[18.909575,49.435846],[18.853144,49.49623]],[[14.119686,53.757029],[14.8029,54.050706],[16.363477,54.513159],[17.622832,54.851536],[18.620859,54.682606],[18.696255,54.438719],[19.66064,54.426084]],[[19.66064,54.426084],[20.892245,54.312525],[22.731099,54.327537]],[[-66.282434,18.514762],[-65.771303,18.426679],[-65.591004,18.228035],[-65.847164,17.975906],[-66.599934,17.981823],[-67.184162,17.946553],[-67.242428,18.37446],[-67.100679,18.520601],[-66.282434,18.514762]],[[130.64,42.395024],[130.64,42.395],[130.779992,42.22001]],[[130.779992,42.22001],[130.400031,42.280004],[129.965949,41.941368],[129.667362,41.601104],[129.705189,40.882828],[129.188115,40.661808],[129.0104,40.485436],[128.633368,40.189847],[127.967414,40.025413],[127.533436,39.75685],[127.50212,39.323931],[127.385434,39.213472],[127.783343,39.050898],[128.349716,38.612243]],[[126.174759,37.749686],[125.689104,37.94001],[125.568439,37.752089],[125.27533,37.669071],[125.240087,37.857224],[124.981033,37.948821],[124.712161,38.108346],[124.985994,38.548474],[125.221949,38.665857],[125.132859,38.848559],[125.38659,39.387958],[125.321116,39.551385],[124.737482,39.660344],[124.265625,39.928493]],[[130.780005,42.22001],[130.780007,42.220007],[130.780004,42.220008]],[[130.780004,42.220008],[130.780005,42.22001]],[[-7.453726,37.097788],[-7.855613,36.838269],[-8.382816,36.97888],[-8.898857,36.868809],[-8.746101,37.651346],[-8.839998,38.266243],[-9.287464,38.358486],[-9.526571,38.737429],[-9.446989,39.392066],[-9.048305,39.755093],[-8.977353,40.159306],[-8.768684,40.760639],[-8.790853,41.184334],[-8.990789,41.543459],[-9.034818,41.880571]],[[50.810108,24.754743],[50.743911,25.482424],[51.013352,26.006992],[51.286462,26.114582],[51.589079,25.801113],[51.6067,25.21567],[51.389608,24.627386]],[[51.389608,24.627386],[51.112415,24.556331],[50.810108,24.754743]],[[22.65715,44.234923],[22.474008,44.409228],[22.705726,44.578003],[22.459022,44.702517],[22.145088,44.478422],[21.562023,44.768947],[21.483526,45.18117],[20.874313,45.416375],[20.762175,45.734573],[20.220192,46.127469]],[[22.710531,47.882194],[23.142236,48.096341],[23.760958,47.985598],[24.402056,47.981878],[24.866317,47.737526],[25.207743,47.891056],[25.945941,47.987149],[26.19745,48.220881],[26.619337,48.220726]],[[28.233554,45.488283],[28.679779,45.304031],[29.149725,45.464925],[29.603289,45.293308]],[[29.603289,45.293308],[29.626543,45.035391],[29.141612,44.82021],[28.837858,44.913874],[28.558081,43.707462]],[[39.955009,43.434998],[38.68,44.28],[37.53912,44.65721],[36.67546,45.24469],[37.40317,45.40451],[38.23295,46.24087],[37.67372,46.63657],[39.14767,47.04475],[39.1212,47.26336],[38.223538,47.10219]],[[38.223538,47.10219],[38.255112,47.5464],[38.77057,47.82562],[39.738278,47.898937],[39.89562,48.23241],[39.67465,48.78382],[40.080789,49.30743],[40.06904,49.60105],[38.594988,49.926462],[38.010631,49.915662],[37.39346,50.383953],[36.626168,50.225591],[35.356116,50.577197],[35.37791,50.77394],[35.022183,51.207572],[34.224816,51.255993],[34.141978,51.566413],[34.391731,51.768882],[33.7527,52.335075],[32.715761,52.238465],[32.412058,52.288695],[32.15944,52.06125],[31.785992,52.101678]],[[27.981127,59.475373],[29.1177,60.02805],[28.070002,60.503519]],[[31.101042,69.558101],[31.10108,69.55811],[32.13272,69.90595],[33.77547,69.30142],[36.51396,69.06342],[40.29234,67.9324],[41.05987,67.45713],[41.12595,66.79158],[40.01583,66.26618],[38.38295,65.99953],[33.91871,66.75961],[33.18444,66.63253],[34.81477,65.90015],[34.878574,65.436213],[34.94391,64.41437],[36.23129,64.10945],[37.01273,63.84983],[37.14197,64.33471],[36.539579,64.76446],[37.17604,65.14322],[39.59345,64.52079],[40.4356,64.76446],[39.7626,65.49682],[42.09309,66.47623],[43.01604,66.41858],[43.94975,66.06908],[44.53226,66.75634],[43.69839,67.35245],[44.18795,67.95051],[43.45282,68.57079],[46.25,68.25],[46.82134,67.68997],[45.55517,67.56652],[45.56202,67.01005],[46.34915,66.66767],[47.89416,66.88455],[48.13876,67.52238],[50.22766,67.99867],[53.71743,68.85738],[54.47171,68.80815],[53.48582,68.20131],[54.72628,68.09702],[55.44268,68.43866],[57.31702,68.46628],[58.802,68.88082],[59.94142,68.27844],[61.07784,68.94069],[60.03,69.52],[60.55,69.85],[63.504,69.54739],[64.888115,69.234835],[68.51216,68.09233],[69.18068,68.61563],[68.16444,69.14436],[68.13522,69.35649],[66.93008,69.45461],[67.25976,69.92873],[66.72492,70.70889],[66.69466,71.02897],[68.54006,71.9345],[69.19636,72.84336],[69.94,73.04],[72.58754,72.77629],[72.79603,72.22006],[71.84811,71.40898],[72.47011,71.09019],[72.79188,70.39114],[72.5647,69.02085],[73.66787,68.4079],[73.2387,67.7404],[71.28,66.32],[72.42301,66.17267],[72.82077,66.53267],[73.92099,66.78946],[74.18651,67.28429],[75.052,67.76047],[74.46926,68.32899],[74.93584,68.98918],[73.84236,69.07146],[73.60187,69.62763],[74.3998,70.63175],[73.1011,71.44717],[74.89082,72.12119],[74.65926,72.83227],[75.15801,72.85497],[75.68351,72.30056],[75.28898,71.33556],[76.35911,71.15287],[75.90313,71.87401],[77.57665,72.26717],[79.65202,72.32011],[81.5,71.75],[80.61071,72.58285],[80.51109,73.6482],[82.25,73.85],[84.65526,73.80591],[86.8223,73.93688],[86.00956,74.45967],[87.16682,75.11643],[88.31571,75.14393],[90.26,75.64],[92.90058,75.77333],[93.23421,76.0472],[95.86,76.14],[96.67821,75.91548],[98.92254,76.44689],[100.75967,76.43028],[101.03532,76.86189],[101.99084,77.28754],[104.3516,77.69792],[106.06664,77.37389],[104.705,77.1274],[106.97013,76.97419],[107.24,76.48],[108.1538,76.72335],[111.07726,76.71],[113.33151,76.22224],[114.13417,75.84764],[113.88539,75.32779],[112.77918,75.03186],[110.15125,74.47673],[109.4,74.18],[110.64,74.04],[112.11919,73.78774],[113.01954,73.97693],[113.52958,73.33505],[113.96881,73.59488],[115.56782,73.75285],[118.77633,73.58772],[119.02,73.12],[123.20066,72.97122],[123.25777,73.73503],[125.38,73.56],[126.97644,73.56549],[128.59126,73.03871],[129.05157,72.39872],[128.46,71.98],[129.71599,71.19304],[131.28858,70.78699],[132.2535,71.8363],[133.85766,71.38642],[135.56193,71.65525],[137.49755,71.34763],[138.23409,71.62803],[139.86983,71.48783],[139.14791,72.41619],[140.46817,72.84941],[149.5,72.2],[150.35118,71.60643],[152.9689,70.84222],[157.00688,71.03141],[158.99779,70.86672],[159.83031,70.45324],[159.70866,69.72198],[160.94053,69.43728],[162.27907,69.64204],[164.05248,69.66823],[165.94037,69.47199],[167.83567,69.58269],[169.57763,68.6938],[170.81688,69.01363],[170.0082,69.65276],[170.45345,70.09703],[173.64391,69.81743],[175.72403,69.87725],[178.6,69.4],[180,68.963636],[180,64.979709],[179.99281,64.97433],[178.7072,64.53493],[177.41128,64.60821],[178.313,64.07593],[178.90825,63.25197],[179.37034,62.98262],[179.48636,62.56894],[179.22825,62.3041],[177.3643,62.5219],[174.56929,61.76915],[173.68013,61.65261],[172.15,60.95],[170.6985,60.33618],[170.33085,59.88177],[168.90046,60.57355],[166.29498,59.78855],[165.84,60.16],[164.87674,59.7316],[163.53929,59.86871],[163.21711,59.21101],[162.01733,58.24328],[162.05297,57.83912],[163.19191,57.61503],[163.05794,56.15924],[162.12958,56.12219],[161.70146,55.28568],[162.11749,54.85514],[160.36877,54.34433],[160.02173,53.20257],[158.53094,52.95868],[158.23118,51.94269],[156.78979,51.01105],[156.42,51.7],[155.99182,53.15895],[155.43366,55.38103],[155.91442,56.76792],[156.75815,57.3647],[156.81035,57.83204],[158.36433,58.05575],[160.15064,59.31477],[161.87204,60.343],[163.66969,61.1409],[164.47355,62.55061],[163.25842,62.46627],[162.65791,61.6425],[160.12148,60.54423],[159.30232,61.77396],[156.72068,61.43442],[154.21806,59.75818],[155.04375,59.14495],[152.81185,58.88385],[151.26573,58.78089],[151.33815,59.50396],[149.78371,59.65573],[148.54481,59.16448],[145.48722,59.33637],[142.19782,59.03998],[138.95848,57.08805],[135.12619,54.72959],[136.70171,54.60355],[137.19342,53.97732],[138.1647,53.75501],[138.80463,54.25455],[139.90151,54.18968],[141.34531,53.08957],[141.37923,52.23877],[140.59742,51.23967],[140.51308,50.04553],[140.06193,48.44671],[138.55472,46.99965],[138.21971,46.30795],[136.86232,45.1435],[135.51535,43.989],[134.86939,43.39821],[133.53687,42.81147],[132.90627,42.79849],[132.27807,43.28456],[130.93587,42.55274],[130.780005,42.22001]],[[130.780004,42.220008],[130.78,42.22],[130.779992,42.22001]],[[49.10116,46.39933],[48.64541,45.80629],[47.67591,45.64149],[46.68201,44.6092],[47.59094,43.66016],[47.49252,42.98658],[48.58437,41.80888],[48.584353,41.808869]],[[19.66064,54.426084],[19.888481,54.86616],[21.268449,55.190482]],[[33.435988,45.971917],[33.699462,46.219573],[34.410402,46.005162],[34.732017,45.965666],[34.861792,45.768182],[35.012659,45.737725]],[[35.012659,45.737725],[35.020788,45.651219],[35.510009,45.409993],[36.529998,45.46999],[36.334713,45.113216],[35.239999,44.939996],[33.882511,44.361479],[33.326421,44.564877],[33.546924,45.034771],[32.454174,45.327466],[32.630804,45.519186],[33.588162,45.851569],[33.435988,45.971917]],[[143.648007,50.7476],[144.654148,48.976391],[143.173928,49.306551],[142.558668,47.861575],[143.533492,46.836728],[143.505277,46.137908],[142.747701,46.740765],[142.09203,45.966755],[141.906925,46.805929],[142.018443,47.780133],[141.904445,48.859189],[142.1358,49.615163],[142.179983,50.952342],[141.594076,51.935435],[141.682546,53.301966],[142.606934,53.762145],[142.209749,54.225476],[142.654786,54.365881],[142.914616,53.704578],[143.260848,52.74076],[143.235268,51.75666],[143.648007,50.7476]],[[-175.01425,66.58435],[-174.33983,66.33556],[-174.57182,67.06219],[-171.85731,66.91308],[-169.89958,65.97724],[-170.89107,65.54139],[-172.53025,65.43791],[-172.555,64.46079],[-172.95533,64.25269],[-173.89184,64.2826],[-174.65392,64.63125],[-175.98353,64.92288],[-176.20716,65.35667],[-177.22266,65.52024],[-178.35993,65.39052],[-178.90332,65.74044],[-178.68611,66.11211],[-179.88377,65.87456],[-179.43268,65.40411],[-180,64.979709],[-180,68.963636],[-177.55,68.2],[-174.92825,67.20589],[-175.01425,66.58435]],[[180,70.832199],[178.903425,70.78114],[178.7253,71.0988],[180,71.515714],[180,70.832199]],[[-178.69378,70.89302],[-180,70.832199],[-180,71.515714],[-179.871875,71.55762],[-179.02433,71.55553],[-177.577945,71.26948],[-177.663575,71.13277],[-178.69378,70.89302]],[[143.60385,73.21244],[142.08763,73.20544],[140.038155,73.31692],[139.86312,73.36983],[140.81171,73.76506],[142.06207,73.85758],[143.48283,73.47525],[143.60385,73.21244]],[[150.73167,75.08406],[149.575925,74.68892],[147.977465,74.778355],[146.11919,75.17298],[146.358485,75.49682],[148.22223,75.345845],[150.73167,75.08406]],[[145.086285,75.562625],[144.3,74.82],[140.61381,74.84768],[138.95544,74.61148],[136.97439,75.26167],[137.51176,75.94917],[138.831075,76.13676],[141.471615,76.09289],[145.086285,75.562625]],[[57.535693,70.720464],[56.944979,70.632743],[53.677375,70.762658],[53.412017,71.206662],[51.601895,71.474759],[51.455754,72.014881],[52.478275,72.229442],[52.444169,72.774731],[54.427614,73.627548],[53.50829,73.749814],[55.902459,74.627486],[55.631933,75.081412],[57.868644,75.60939],[61.170044,76.251883],[64.498368,76.439055],[66.210977,76.809782],[68.15706,76.939697],[68.852211,76.544811],[68.180573,76.233642],[64.637326,75.737755],[61.583508,75.260885],[58.477082,74.309056],[56.986786,73.333044],[55.419336,72.371268],[55.622838,71.540595],[57.535693,70.720464]],[[105.07547,78.30689],[99.43814,77.921],[101.2649,79.23399],[102.08635,79.34641],[102.837815,79.28129],[105.37243,78.71334],[105.07547,78.30689]],[[51.136187,80.54728],[49.793685,80.415428],[48.894411,80.339567],[48.754937,80.175468],[47.586119,80.010181],[46.502826,80.247247],[47.072455,80.559424],[44.846958,80.58981],[46.799139,80.771918],[48.318477,80.78401],[48.522806,80.514569],[49.09719,80.753986],[50.039768,80.918885],[51.522933,80.699726],[51.136187,80.54728]],[[99.93976,78.88094],[97.75794,78.7562],[94.97259,79.044745],[93.31288,79.4265],[92.5454,80.14379],[91.18107,80.34146],[93.77766,81.0246],[95.940895,81.2504],[97.88385,80.746975],[100.186655,79.780135],[99.93976,78.88094]],[[29.579466,-1.341313],[29.821519,-1.443322],[30.419105,-1.134659]],[[30.419105,-1.134659],[30.816135,-1.698914],[30.758309,-2.28725],[30.46967,-2.41383],[30.469674,-2.413855]],[[-17.063423,20.999752],[-17.020428,21.42231]],[[52.00001,19.000003],[49.116672,18.616668],[48.183344,18.166669],[47.466695,17.116682],[47.000005,16.949999],[46.749994,17.283338],[46.366659,17.233315],[45.399999,17.333335],[45.216651,17.433329],[44.062613,17.410359],[43.791519,17.319977],[43.380794,17.579987],[43.115798,17.08844],[43.218375,16.66689],[42.779332,16.347891]],[[42.779332,16.347891],[42.649573,16.774635],[42.347989,17.075806],[42.270888,17.474722],[41.754382,17.833046],[41.221391,18.6716],[40.939341,19.486485],[40.247652,20.174635],[39.801685,20.338862],[39.139399,21.291905],[39.023696,21.986875],[39.066329,22.579656],[38.492772,23.688451],[38.02386,24.078686],[37.483635,24.285495],[37.154818,24.858483],[37.209491,25.084542],[36.931627,25.602959],[36.639604,25.826228],[36.249137,26.570136],[35.640182,27.37652],[35.130187,28.063352],[34.632336,28.058546],[34.787779,28.607427],[34.83222,28.957483],[34.956037,29.356555]],[[48.416094,28.552004],[48.807595,27.689628],[49.299554,27.461218],[49.470914,27.109999],[50.152422,26.689663],[50.212935,26.277027],[50.113303,25.943972],[50.239859,25.60805],[50.527387,25.327808],[50.660557,24.999896],[50.810108,24.754743]],[[51.389608,24.627386],[51.579519,24.245497]],[[22.864165,11.142395],[22.87622,11.38461],[22.50869,11.67936],[22.49762,12.26024],[22.28801,12.64605],[21.93681,12.58818],[22.03759,12.95546],[22.29658,13.37232],[22.18329,13.78648],[22.51202,14.09318],[22.30351,14.32682],[22.56795,14.94429],[23.02459,15.68072],[23.88689,15.61084],[23.83766,19.58047]],[[36.86623,22],[37.18872,21.01885],[36.96941,20.83744],[37.1147,19.80796],[37.48179,18.61409],[37.86276,18.36786],[38.41009,17.998307]],[[33.97498,8.68456],[33.963393,9.464285],[33.824963,9.484061],[33.842131,9.981915],[33.721959,10.325262],[33.206938,10.720112],[33.086766,11.441141],[33.206938,12.179338],[32.743419,12.248008],[32.67475,12.024832],[32.073892,11.97333],[32.314235,11.681484],[32.400072,11.080626],[31.850716,10.531271],[31.352862,9.810241],[30.837841,9.707237],[29.996639,10.290927],[29.618957,10.084919],[29.515953,9.793074],[29.000932,9.604232],[28.966597,9.398224],[27.97089,9.398224],[27.833551,9.604232],[27.112521,9.638567],[26.752006,9.466893],[26.477328,9.55273],[25.962307,10.136421],[25.790633,10.411099],[25.069604,10.27376],[24.794926,9.810241],[24.537415,8.917538],[24.194068,8.728696],[23.88698,8.61973],[24.567369,8.229188]],[[34.005,4.249885],[33.39,3.79],[32.68642,3.79232],[31.88145,3.55827],[31.24556,3.7819],[30.833852,3.509172]],[[-16.677452,12.384852],[-16.841525,13.151394]],[[-16.713729,13.594959],[-17.126107,14.373516],[-17.625043,14.729541],[-17.185173,14.919477],[-16.700706,15.621527],[-16.463098,16.135036]],[[162.119025,-10.482719],[162.398646,-10.826367],[161.700032,-10.820011],[161.319797,-10.204751],[161.917383,-10.446701],[162.119025,-10.482719]],[[160.852229,-9.872937],[160.462588,-9.89521],[159.849447,-9.794027],[159.640003,-9.63998],[159.702945,-9.24295],[160.362956,-9.400304],[160.688518,-9.610162],[160.852229,-9.872937]],[[161.679982,-9.599982],[161.529397,-9.784312],[160.788253,-8.917543],[160.579997,-8.320009],[160.920028,-8.320009],[161.280006,-9.120011],[161.679982,-9.599982]],[[159.875027,-8.33732],[159.917402,-8.53829],[159.133677,-8.114181],[158.586114,-7.754824],[158.21115,-7.421872],[158.359978,-7.320018],[158.820001,-7.560003],[159.640003,-8.020027],[159.875027,-8.33732]],[[157.538426,-7.34782],[157.33942,-7.404767],[156.90203,-7.176874],[156.491358,-6.765943],[156.542828,-6.599338],[157.14,-7.021638],[157.538426,-7.34782]],[[-11.438779,6.785917],[-11.708195,6.860098],[-12.428099,7.262942],[-12.949049,7.798646],[-13.124025,8.163946],[-13.24655,8.903049]],[[-87.793111,13.38448],[-87.904112,13.149017],[-88.483302,13.163951],[-88.843228,13.259734],[-89.256743,13.458533],[-89.812394,13.520622],[-90.095555,13.735338]],[[43.145305,11.46204],[43.47066,11.27771],[43.666668,10.864169],[44.117804,10.445538],[44.614259,10.442205],[45.556941,10.698029],[46.645401,10.816549],[47.525658,11.127228],[48.021596,11.193064],[48.378784,11.375482],[48.948206,11.410622],[48.948205,11.410617]],[[48.948205,11.410617],[48.948205,11.410617]],[[48.948205,11.410617],[48.942005,11.394266],[48.938491,10.982327],[48.938233,9.9735],[48.93813,9.451749],[48.486736,8.837626],[47.78942,8.003]],[[48.948205,11.410617],[49.26776,11.43033],[49.72862,11.5789],[50.25878,11.67957],[50.73202,12.0219],[51.1112,12.02464],[51.13387,11.74815],[51.04153,11.16651],[51.04531,10.6409],[50.83418,10.27972],[50.55239,9.19874],[50.07092,8.08173],[49.4527,6.80466],[48.59455,5.33911],[47.74079,4.2194],[46.56476,2.85529],[45.56399,2.04576],[44.06815,1.05283],[43.13597,0.2922],[42.04157,-0.91916],[41.81095,-1.44647],[41.58513,-1.68325]],[[-57.147436,5.97315],[-55.949318,5.772878],[-55.84178,5.953125],[-55.03325,6.025291],[-53.958045,5.756548]],[[22.558138,49.085738],[22.280842,48.825392],[22.085608,48.422264]],[[13.71506,45.500324],[13.93763,45.591016]],[[23.903379,66.006927],[22.183173,65.723741],[21.213517,65.026005],[21.369631,64.413588],[19.778876,63.609554],[17.847779,62.7494],[17.119555,61.341166],[17.831346,60.636583],[18.787722,60.081914],[17.869225,58.953766],[16.829185,58.719827],[16.44771,57.041118],[15.879786,56.104302],[14.666681,56.200885],[14.100721,55.407781],[12.942911,55.361737],[12.625101,56.30708],[11.787942,57.441817],[11.027369,58.856149]],[[32.071665,-26.73382],[31.86806,-27.177927],[31.282773,-27.285879],[30.685962,-26.743845],[30.676609,-26.398078],[30.949667,-26.022649],[31.04408,-25.731452],[31.333158,-25.660191],[31.837778,-25.843332]],[[35.998403,34.644914],[35.905023,35.410009],[36.149763,35.821535]],[[36.149763,35.821535],[36.41755,36.040617],[36.685389,36.259699],[36.739494,36.81752],[37.066761,36.623036],[38.167727,36.90121],[38.699891,36.712927],[39.52258,36.716054],[40.673259,37.091276],[41.212089,37.074352],[42.349591,37.229873]],[[1.865241,6.142158],[1.060122,5.928837]],[[102.584932,12.186595],[101.687158,12.64574],[100.83181,12.627085],[100.978467,13.412722],[100.097797,13.406856],[100.018733,12.307001],[99.478921,10.846367],[99.153772,9.963061],[99.222399,9.239255],[99.873832,9.207862],[100.279647,8.295153],[100.459274,7.429573],[101.017328,6.856869],[101.623079,6.740622],[102.141187,6.221636]],[[100.085757,6.464489],[99.690691,6.848213],[99.519642,7.343454],[98.988253,7.907993],[98.503786,8.382305],[98.339662,7.794512],[98.150009,8.350007],[98.25915,8.973923],[98.553551,9.93296]],[[67.83,37.144994],[68.392033,38.157025],[68.176025,38.901553],[67.44222,39.140144],[67.701429,39.580478],[68.536416,39.533453],[69.011633,40.086158],[69.329495,40.727824],[70.666622,40.960213],[70.45816,40.496495],[70.601407,40.218527],[71.014198,40.244366]],[[53.921598,37.198918],[53.735511,37.906136],[53.880929,38.952093],[53.101028,39.290574],[53.357808,39.975286],[52.693973,40.033629],[52.915251,40.876523],[53.858139,40.631034],[54.736845,40.951015],[54.008311,41.551211],[53.721713,42.123191],[52.91675,41.868117],[52.814689,41.135371],[52.50246,41.783316]],[[55.968191,41.308642],[57.096391,41.32231],[56.932215,41.826026],[57.78653,42.170553],[58.629011,42.751551],[59.976422,42.223082],[60.083341,41.425146],[60.465953,41.220327],[61.547179,41.26637],[61.882714,41.084857],[62.37426,40.053886],[63.518015,39.363257],[64.170223,38.892407],[65.215999,38.402695],[66.54615,37.974685],[66.518607,37.362784]],[[124.968682,-8.89279],[125.086246,-8.656887],[125.947072,-8.432095],[126.644704,-8.398247],[126.957243,-8.273345],[127.335928,-8.397317],[126.967992,-8.668256],[125.925885,-9.106007],[125.08852,-9.393173]],[[-61.68,10.76],[-61.105,10.89],[-60.895,10.855],[-60.935,10.11],[-61.77,10],[-61.95,10.09],[-61.66,10.365],[-61.68,10.76]],[[8.420964,36.946427],[9.509994,37.349994],[10.210002,37.230002],[10.18065,36.724038],[11.028867,37.092103],[11.100026,36.899996],[10.600005,36.41],[10.593287,35.947444],[10.939519,35.698984],[10.807847,34.833507],[10.149593,34.330773],[10.339659,33.785742],[10.856836,33.76874],[11.108501,33.293343],[11.488787,33.136996]],[[36.149763,35.821535],[35.782085,36.274995],[36.160822,36.650606],[35.550936,36.565443],[34.714553,36.795532],[34.026895,36.21996],[32.509158,36.107564],[31.699595,36.644275],[30.621625,36.677865],[30.391096,36.262981],[29.699976,36.144357],[28.732903,36.676831],[27.641187,36.658822],[27.048768,37.653361],[26.318218,38.208133],[26.8047,38.98576],[26.170785,39.463612],[27.28002,40.420014],[28.819978,40.460011],[29.240004,41.219991],[31.145934,41.087622],[32.347979,41.736264],[33.513283,42.01896],[35.167704,42.040225],[36.913127,41.335358],[38.347665,40.948586],[39.512607,41.102763],[40.373433,41.013673],[41.554084,41.535656]],[[27.99672,42.007359],[28.115525,41.622886],[28.988443,41.299934],[28.806438,41.054962],[27.619017,40.999823],[27.192377,40.690566],[26.358009,40.151994],[26.043351,40.617754],[26.056942,40.824123]],[[121.777818,24.394274],[121.175632,22.790857],[120.74708,21.970571],[120.220083,22.814861],[120.106189,23.556263],[120.69468,24.538451],[121.495044,25.295459],[121.951244,24.997596],[121.777818,24.394274]],[[30.419105,-1.134659],[30.76986,-1.01455],[31.86617,-1.02736],[33.903711,-0.95]],[[39.20222,-4.67677],[38.74054,-5.90895],[38.79977,-6.47566],[39.44,-6.84],[39.47,-7.1],[39.19469,-7.7039],[39.25203,-8.00781],[39.18652,-8.48551],[39.53574,-9.11237],[39.9496,-10.0984],[40.316586,-10.317098]],[[32.759375,-9.230599],[32.191865,-8.930359],[31.556348,-8.762049],[31.157751,-8.594579],[30.74001,-8.340006]],[[38.223538,47.10219],[37.425137,47.022221],[36.759855,46.6987],[35.823685,46.645964],[34.962342,46.273197],[35.012659,45.737725]],[[33.435988,45.971917],[33.298567,46.080598],[31.74414,46.333348],[31.675307,46.706245],[30.748749,46.5831],[30.377609,46.03241],[29.603289,45.293308]],[[-53.373662,-33.768378],[-53.806426,-34.396815],[-54.935866,-34.952647],[-55.67409,-34.752659],[-56.215297,-34.859836],[-57.139685,-34.430456],[-57.817861,-34.462547],[-58.427074,-33.909454]],[[-67.13741,45.13753],[-66.96466,44.8097],[-68.03252,44.3252],[-69.06,43.98],[-70.11617,43.68405],[-70.645476,43.090238],[-70.81489,42.8653],[-70.825,42.335],[-70.495,41.805],[-70.08,41.78],[-70.185,42.145],[-69.88497,41.92283],[-69.96503,41.63717],[-70.64,41.475],[-71.12039,41.49445],[-71.86,41.32],[-72.295,41.27],[-72.87643,41.22065],[-73.71,40.931102],[-72.24126,41.11948],[-71.945,40.93],[-73.345,40.63],[-73.982,40.628],[-73.952325,40.75075],[-74.25671,40.47351],[-73.96244,40.42763],[-74.17838,39.70926],[-74.90604,38.93954],[-74.98041,39.1964],[-75.20002,39.24845],[-75.52805,39.4985],[-75.32,38.96],[-75.071835,38.782032],[-75.05673,38.40412],[-75.37747,38.01551],[-75.94023,37.21689],[-76.03127,37.2566],[-75.72205,37.93705],[-76.23287,38.319215],[-76.35,39.15],[-76.542725,38.717615],[-76.32933,38.08326],[-76.989998,38.239992],[-76.30162,37.917945],[-76.25874,36.9664],[-75.9718,36.89726],[-75.86804,36.55125],[-75.72749,35.55074],[-76.36318,34.80854],[-77.397635,34.51201],[-78.05496,33.92547],[-78.55435,33.86133],[-79.06067,33.49395],[-79.20357,33.15839],[-80.301325,32.509355],[-80.86498,32.0333],[-81.33629,31.44049],[-81.49042,30.72999],[-81.31371,30.03552],[-80.98,29.18],[-80.535585,28.47213],[-80.53,28.04],[-80.056539,26.88],[-80.088015,26.205765],[-80.13156,25.816775],[-80.38103,25.20616],[-80.68,25.08],[-81.17213,25.20126],[-81.33,25.64],[-81.71,25.87],[-82.24,26.73],[-82.70515,27.49504],[-82.85526,27.88624],[-82.65,28.55],[-82.93,29.1],[-83.70959,29.93656],[-84.1,30.09],[-85.10882,29.63615],[-85.28784,29.68612],[-85.7731,30.15261],[-86.4,30.4],[-87.53036,30.27433],[-88.41782,30.3849],[-89.18049,30.31598],[-89.593831,30.159994],[-89.413735,29.89419],[-89.43,29.48864],[-89.21767,29.29108],[-89.40823,29.15961],[-89.77928,29.30714],[-90.15463,29.11743],[-90.880225,29.148535],[-91.626785,29.677],[-92.49906,29.5523],[-93.22637,29.78375],[-93.84842,29.71363],[-94.69,29.48],[-95.60026,28.73863],[-96.59404,28.30748],[-97.14,27.83],[-97.37,27.38],[-97.38,26.69],[-97.33,26.21],[-97.14,25.87],[-97.53,25.84]],[[-117.12776,32.53534],[-117.295938,33.046225],[-117.944,33.621236],[-118.410602,33.740909],[-118.519895,34.027782],[-119.081,34.078],[-119.438841,34.348477],[-120.36778,34.44711],[-120.62286,34.60855],[-120.74433,35.15686],[-121.71457,36.16153],[-122.54747,37.55176],[-122.51201,37.78339],[-122.95319,38.11371],[-123.7272,38.95166],[-123.86517,39.76699],[-124.39807,40.3132],[-124.17886,41.14202],[-124.2137,41.99964],[-124.53284,42.76599],[-124.14214,43.70838],[-124.020535,44.615895],[-123.89893,45.52341],[-124.079635,46.86475],[-124.39567,47.72017],[-124.68721,48.184433],[-124.566101,48.379715],[-123.12,48.04],[-122.58736,47.096],[-122.34,47.36],[-122.5,48.18],[-122.84,49]],[[-130.536109,54.802754],[-130.53611,54.802753],[-131.085818,55.178906],[-131.967211,55.497776],[-132.250011,56.369996],[-133.539181,57.178887],[-134.078063,58.123068],[-135.038211,58.187715],[-136.628062,58.212209],[-137.800006,58.499995],[-139.867787,59.537762],[-140.825274,59.727517],[-142.574444,60.084447],[-143.958881,59.99918],[-145.925557,60.45861],[-147.114374,60.884656],[-148.224306,60.672989],[-148.018066,59.978329],[-148.570823,59.914173],[-149.727858,59.705658],[-150.608243,59.368211],[-151.716393,59.155821],[-151.859433,59.744984],[-151.409719,60.725803],[-150.346941,61.033588],[-150.621111,61.284425],[-151.895839,60.727198],[-152.57833,60.061657],[-154.019172,59.350279],[-153.287511,58.864728],[-154.232492,58.146374],[-155.307491,57.727795],[-156.308335,57.422774],[-156.556097,56.979985],[-158.117217,56.463608],[-158.433321,55.994154],[-159.603327,55.566686],[-160.28972,55.643581],[-161.223048,55.364735],[-162.237766,55.024187],[-163.069447,54.689737],[-164.785569,54.404173],[-164.942226,54.572225],[-163.84834,55.039431],[-162.870001,55.348043],[-161.804175,55.894986],[-160.563605,56.008055],[-160.07056,56.418055],[-158.684443,57.016675],[-158.461097,57.216921],[-157.72277,57.570001],[-157.550274,58.328326],[-157.041675,58.918885],[-158.194731,58.615802],[-158.517218,58.787781],[-159.058606,58.424186],[-159.711667,58.93139],[-159.981289,58.572549],[-160.355271,59.071123],[-161.355003,58.670838],[-161.968894,58.671665],[-162.054987,59.266925],[-161.874171,59.633621],[-162.518059,59.989724],[-163.818341,59.798056],[-164.662218,60.267484],[-165.346388,60.507496],[-165.350832,61.073895],[-166.121379,61.500019],[-165.734452,62.074997],[-164.919179,62.633076],[-164.562508,63.146378],[-163.753332,63.219449],[-163.067224,63.059459],[-162.260555,63.541936],[-161.53445,63.455817],[-160.772507,63.766108],[-160.958335,64.222799],[-161.518068,64.402788],[-160.777778,64.788604],[-161.391926,64.777235],[-162.45305,64.559445],[-162.757786,64.338605],[-163.546394,64.55916],[-164.96083,64.446945],[-166.425288,64.686672],[-166.845004,65.088896],[-168.11056,65.669997],[-166.705271,66.088318],[-164.47471,66.57666],[-163.652512,66.57666],[-163.788602,66.077207],[-161.677774,66.11612],[-162.489715,66.735565],[-163.719717,67.116395],[-164.430991,67.616338],[-165.390287,68.042772],[-166.764441,68.358877],[-166.204707,68.883031],[-164.430811,68.915535],[-163.168614,69.371115],[-162.930566,69.858062],[-161.908897,70.33333],[-160.934797,70.44769],[-159.039176,70.891642],[-158.119723,70.824721],[-156.580825,71.357764],[-155.06779,71.147776],[-154.344165,70.696409],[-153.900006,70.889989],[-152.210006,70.829992],[-152.270002,70.600006],[-150.739992,70.430017],[-149.720003,70.53001],[-147.613362,70.214035],[-145.68999,70.12001],[-144.920011,69.989992],[-143.589446,70.152514],[-142.07251,69.851938],[-140.985988,69.711998]],[[-140.985988,69.711998],[-140.985988,69.711998]],[[-155.54211,19.08348],[-155.68817,18.91619],[-155.93665,19.05939],[-155.90806,19.33888],[-156.07347,19.70294],[-156.02368,19.81422],[-155.85008,19.97729],[-155.91907,20.17395],[-155.86108,20.26721],[-155.78505,20.2487],[-155.40214,20.07975],[-155.22452,19.99302],[-155.06226,19.8591],[-154.80741,19.50871],[-154.83147,19.45328],[-155.22217,19.23972],[-155.54211,19.08348]],[[-156.07926,20.64397],[-156.41445,20.57241],[-156.58673,20.783],[-156.70167,20.8643],[-156.71055,20.92676],[-156.61258,21.01249],[-156.25711,20.91745],[-155.99566,20.76404],[-156.07926,20.64397]],[[-156.75824,21.17684],[-156.78933,21.06873],[-157.32521,21.09777],[-157.25027,21.21958],[-156.75824,21.17684]],[[-157.65283,21.32217],[-157.70703,21.26442],[-157.7786,21.27729],[-158.12667,21.31244],[-158.2538,21.53919],[-158.29265,21.57912],[-158.0252,21.71696],[-157.94161,21.65272],[-157.65283,21.32217]],[[-159.34512,21.982],[-159.46372,21.88299],[-159.80051,22.06533],[-159.74877,22.1382],[-159.5962,22.23618],[-159.36569,22.21494],[-159.34512,21.982]],[[-153.006314,57.115842],[-154.00509,56.734677],[-154.516403,56.992749],[-154.670993,57.461196],[-153.76278,57.816575],[-153.228729,57.968968],[-152.564791,57.901427],[-152.141147,57.591059],[-153.006314,57.115842]],[[-165.579164,59.909987],[-166.19277,59.754441],[-166.848337,59.941406],[-167.455277,60.213069],[-166.467792,60.38417],[-165.67443,60.293607],[-165.579164,59.909987]],[[-171.731657,63.782515],[-171.114434,63.592191],[-170.491112,63.694975],[-169.682505,63.431116],[-168.689439,63.297506],[-168.771941,63.188598],[-169.52944,62.976931],[-170.290556,63.194438],[-170.671386,63.375822],[-171.553063,63.317789],[-171.791111,63.405846],[-171.731657,63.782515]],[[-71.331584,11.776284],[-71.360006,11.539994],[-71.94705,11.423282],[-71.620868,10.96946],[-71.633064,10.446494],[-72.074174,9.865651],[-71.695644,9.072263],[-71.264559,9.137195],[-71.039999,9.859993],[-71.350084,10.211935],[-71.400623,10.968969],[-70.155299,11.375482],[-70.293843,11.846822],[-69.943245,12.162307],[-69.5843,11.459611],[-68.882999,11.443385],[-68.233271,10.885744],[-68.194127,10.554653],[-67.296249,10.545868],[-66.227864,10.648627],[-65.655238,10.200799],[-64.890452,10.077215],[-64.329479,10.389599],[-64.318007,10.641418],[-63.079322,10.701724],[-61.880946,10.715625],[-62.730119,10.420269],[-62.388512,9.948204],[-61.588767,9.873067],[-60.830597,9.38134],[-60.671252,8.580174],[-60.150096,8.602757],[-59.758285,8.367035]],[[108.05018,21.55238],[106.715068,20.696851],[105.881682,19.75205],[105.662006,19.058165],[106.426817,18.004121],[107.361954,16.697457],[108.269495,16.079742],[108.877107,15.276691],[109.33527,13.426028],[109.200136,11.666859],[108.36613,11.008321],[107.220929,10.364484],[106.405113,9.53084],[105.158264,8.59976],[104.795185,9.241038],[105.076202,9.918491],[104.334335,10.486544]],[[167.844877,-16.466333],[167.515181,-16.59785],[167.180008,-16.159995],[167.216801,-15.891846],[167.844877,-16.466333]],[[167.107712,-14.93392],[167.270028,-15.740021],[167.001207,-15.614602],[166.793158,-15.668811],[166.649859,-15.392704],[166.629137,-14.626497],[167.107712,-14.93392]],[[53.108573,16.651051],[52.385206,16.382411],[52.191729,15.938433],[52.168165,15.59742],[51.172515,15.17525],[49.574576,14.708767],[48.679231,14.003202],[48.238947,13.94809],[47.938914,14.007233],[47.354454,13.59222],[46.717076,13.399699],[45.877593,13.347764],[45.62505,13.290946],[45.406459,13.026905],[45.144356,12.953938],[44.989533,12.699587],[44.494576,12.721653],[44.175113,12.58595],[43.482959,12.6368],[43.222871,13.22095],[43.251448,13.767584],[43.087944,14.06263],[42.892245,14.802249],[42.604873,15.213335],[42.805015,15.261963],[42.702438,15.718886],[42.823671,15.911742],[42.779332,16.347891]],[[29.432188,-22.091313],[29.839037,-22.102216],[30.322883,-22.271612],[30.659865,-22.151567],[31.191409,-22.25151]],[[32.83012,-26.742192],[32.580265,-27.470158],[32.462133,-28.301011],[32.203389,-28.752405],[31.521001,-29.257387],[31.325561,-29.401978],[30.901763,-29.909957],[30.622813,-30.423776],[30.055716,-31.140269],[28.925553,-32.172041],[28.219756,-32.771953],[27.464608,-33.226964],[26.419452,-33.61495],[25.909664,-33.66704],[25.780628,-33.944646],[25.172862,-33.796851],[24.677853,-33.987176],[23.594043,-33.794474],[22.988189,-33.916431],[22.574157,-33.864083],[21.542799,-34.258839],[20.689053,-34.417175],[20.071261,-34.795137],[19.616405,-34.819166],[19.193278,-34.462599],[18.855315,-34.444306],[18.424643,-33.997873],[18.377411,-34.136521],[18.244499,-33.867752],[18.25008,-33.281431],[17.92519,-32.611291],[18.24791,-32.429131],[18.221762,-31.661633],[17.566918,-30.725721],[17.064416,-29.878641],[17.062918,-29.875954],[16.344977,-28.576705]],[[30.274256,-15.507787],[29.516834,-15.644678],[28.947463,-16.043051],[28.825869,-16.389749],[28.467906,-16.4684],[27.598243,-17.290831],[27.044427,-17.938026],[26.706773,-17.961229],[26.381935,-17.846042],[25.264226,-17.73654]]],"bbox":[-180,-90,180,83.64513]}

/***/ }),
/* 908 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(348);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__events__ = __webpack_require__(349);
/**
 * Component-related event-listeners are grouped in this file.
 * This improves project maintainability.
 */




/* harmony default export */ __webpack_exports__["a"] = (function () {
    var sliderMoveIntervalId = void 0;

    /**
     * Change the year when slider changes
     */
    __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].addEventListener('input', function () {
        if (__WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value % 1 !== 0) return;
        __WEBPACK_IMPORTED_MODULE_0__index__["c" /* outputYearEl */].value = __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value;
        window.year = __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value;
        window.dispatchEvent(__WEBPACK_IMPORTED_MODULE_1__events__["c" /* yearChanged */]);
    });

    __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].addEventListener('click', function () {
        var val = Math.floor(__WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value);
        __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value = val;
        __WEBPACK_IMPORTED_MODULE_0__index__["c" /* outputYearEl */].value = val;
        window.year = val;
        window.dispatchEvent(__WEBPACK_IMPORTED_MODULE_1__events__["c" /* yearChanged */]);
    });

    __WEBPACK_IMPORTED_MODULE_0__index__["d" /* playButton */].addEventListener('click', function () {
        window.sliderPlaying = !window.sliderPlaying;
        window.dispatchEvent(window.sliderPlaying ? __WEBPACK_IMPORTED_MODULE_1__events__["a" /* sliderPlayStarted */] : __WEBPACK_IMPORTED_MODULE_1__events__["b" /* sliderPlayStopped */]);
        Object(__WEBPACK_IMPORTED_MODULE_0__index__["b" /* loadPlayButton */])();
    });

    window.addEventListener('sliderPlayStarted', function () {
        document.querySelector('#map').classList.remove('animate-stop');
        sliderMoveIntervalId = setInterval(function () {
            __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value = parseFloat(__WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value) + 0.010;
            if (__WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value % 1 === 0) {
                window.year = __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value;
                window.dispatchEvent(__WEBPACK_IMPORTED_MODULE_1__events__["c" /* yearChanged */]);
                __WEBPACK_IMPORTED_MODULE_0__index__["c" /* outputYearEl */].value = __WEBPACK_IMPORTED_MODULE_0__index__["e" /* sliderEl */].value;
            }
        }, 50);
    });

    window.addEventListener('sliderPlayStopped', function () {
        document.querySelector('#map').className += ' animate-stop';
        clearInterval(sliderMoveIntervalId);
    });

    window.addEventListener('resize', function () {
        Object(__WEBPACK_IMPORTED_MODULE_0__index__["f" /* sliderInit */])();
    });
});

/***/ }),
/* 909 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(350);
/**
 * Component-related event-listeners are grouped in this file.
 * This improves project maintainability.
 */


/* harmony default export */ __webpack_exports__["a"] = (function () {
    /**
     * When year changes, event box must be updated.
     */
    window.addEventListener('yearChanged', function () {
        Object(__WEBPACK_IMPORTED_MODULE_0__index__["b" /* listWars */])();
    }, false);

    window.addEventListener('countryChanged', function () {
        Object(__WEBPACK_IMPORTED_MODULE_0__index__["b" /* listWars */])();
    }, false);
});

/***/ }),
/* 910 */
/***/ (function(module, exports) {

module.exports = [{"start":"1949","stop":"1949","name":"Palace Rebellion","link":"https://en.wikipedia.org/wiki/Palace_Rebellion"},{"start":"2017","stop":"2017","name":"2017 Afghanistan–Pakistan border skirmish","link":"https://en.wikipedia.org/wiki/2017_Afghanistan%E2%80%93Pakistan_border_skirmish","location":["Chaman","Balochistan","Pakistan"]},{"start":"2009","stop":"Ongoing","name":"South Yemen insurgency","link":"https://en.wikipedia.org/wiki/South_Yemen_insurgency","location":"Southern Yemen"},{"start":"1968","stop":"1968","name":"Warsaw Pact invasion of Czechoslovakia","link":"https://en.wikipedia.org/wiki/Warsaw_Pact_invasion_of_Czechoslovakia","location":"Czechoslovakia"},{"start":"1991","stop":"Ongoing","name":"Somali Civil War","link":"https://en.wikipedia.org/wiki/Somali_Civil_War","location":"Somalia"},{"start":"1974","stop":"1974","name":"Turkish invasion of Cyprus","link":"https://en.wikipedia.org/wiki/Turkish_invasion_of_Cyprus","location":"Cyprus"},{"start":"1975","stop":"1989","name":"Cambodian–Vietnamese War","link":"https://en.wikipedia.org/wiki/Cambodian%E2%80%93Vietnamese_War","location":["southern Vietnam"]},{"start":"1971","stop":"1971","name":"Bangladesh Liberation War","link":"https://en.wikipedia.org/wiki/Bangladesh_Liberation_War","location":["East Pakistan","In modern times","Bangladesh","India-East Pakistan border","Bay of Bengal","Pasha enclave","East India"]},{"start":"1958","stop":"1959","name":"North Vietnamese invasion of Laos","link":"https://en.wikipedia.org/wiki/North_Vietnamese_invasion_of_Laos","location":"Kingdom of Laos"},{"start":"1951","stop":"1951","name":"Manhattan Rebellion","link":"https://en.wikipedia.org/wiki/Manhattan_Rebellion","location":["Chao Phraya River","Bangkok"]},{"start":"1966","stop":"1967","name":"Ñancahuazú Guerrilla","link":"https://en.wikipedia.org/wiki/%C3%91ancahuaz%C3%BA_Guerrilla","location":"Bolivia"},{"start":"1958","stop":"1958","name":"1958 Lebanon crisis","link":"https://en.wikipedia.org/wiki/1958_Lebanon_crisis","location":"Lebanon"},{"start":"1949","stop":"1956","name":"Palestinian Fedayeen insurgency","link":"https://en.wikipedia.org/wiki/Palestinian_Fedayeen_insurgency"},{"start":"1960","stop":"1960","name":"1960 Ethiopian coup attempt","link":"https://en.wikipedia.org/wiki/1960_Ethiopian_coup_attempt"},{"start":"1961","stop":"1961","name":"Bizerte crisis","link":"https://en.wikipedia.org/wiki/Bizerte_crisis","location":["Bizerte","Tunisia"]},{"start":"1961","stop":"1970","name":"First Iraqi–Kurdish War","link":"https://en.wikipedia.org/wiki/First_Iraqi%E2%80%93Kurdish_War","location":["Kurdistan","Iraqi Republic (1958–68)","Baathist Iraq"]},{"start":"1965","stop":"1979","name":"Chadian Civil War (1965–79)","link":"https://en.wikipedia.org/wiki/Chadian_Civil_War_(1965%E2%80%9379)","location":"Chad"},{"start":"1950","stop":"1950","name":"Makassar Uprising","link":"https://en.wikipedia.org/wiki/Makassar_Uprising","location":["Makassar","Jakarta"]},{"start":"1954","stop":"1954","name":"Annexation of Dadra and Nagar Haveli","link":"https://en.wikipedia.org/wiki/Annexation_of_Dadra_and_Nagar_Haveli","location":["Dadra and Nagar Haveli","Portuguese India"]},{"start":"1963","stop":"1963","name":"November 1963 Iraqi coup d'état","link":"https://en.wikipedia.org/wiki/November_1963_Iraqi_coup_d%27%C3%A9tat","location":["Republic of Iraq"]},{"start":"1963","stop":"1970","name":"Bale Revolt","link":"https://en.wikipedia.org/wiki/Bale_Revolt","location":["Bale Province","Ethiopia"]},{"start":"1965","stop":"1966","name":"American occupation of the Dominican Rep. (1965–66)","link":"https://en.wikipedia.org/wiki/American_occupation_of_the_Dominican_Republic_(1965%E2%80%9366)"},{"start":"1960","stop":"Ongoing","name":"Katanga insurgency","link":"https://en.wikipedia.org/wiki/Katanga_insurgency","location":"Democratic Republic of the Congo"},{"start":"1949","stop":"1965","name":"Darul Islam (Indonesia)","link":"https://en.wikipedia.org/wiki/Darul_Islam_(Indonesia)"},{"start":"1981","stop":"1981","name":"Paquisha War","link":"https://en.wikipedia.org/wiki/Paquisha_War","location":"Condor mountain range"},{"start":"1979","stop":"1979","name":"Yemenite War of 1979","link":"https://en.wikipedia.org/wiki/Yemenite_War_of_1979","location":"North Yemen-South Yemen border"},{"start":"1963","stop":"1963","name":"Sand War","link":"https://en.wikipedia.org/wiki/Sand_War","location":["French Algeria","département","Tindouf","Béchar","Algeria"]},{"start":"1975","stop":"1979","name":"PUK insurgency","link":"https://en.wikipedia.org/wiki/PUK_insurgency","location":["Iraq"]},{"start":"1986","stop":"1989","name":"Tucayana Amazonas Insurgency (page does not exist)","link":"https://en.wikipedia.org/w/index.php?title=Tucayana_Amazonas_Insurgency&action=edit&redlink=1"},{"start":"1980","stop":"1980","name":"Nojeh coup plot","link":"https://en.wikipedia.org/wiki/Nojeh_coup_plot","location":["Hamadan","Tehran","Isfahan","Mashhad","Kohgiluyeh and Boyer-Ahmad","Khuzestan","Sistan and Baluchestan"]},{"start":"1982","stop":"1982","name":"1982 Amol uprising","link":"https://en.wikipedia.org/wiki/1982_Amol_uprising","location":["Amol County","Iran"]},{"start":"1963","stop":"1967","name":"Shifta War","link":"https://en.wikipedia.org/wiki/Shifta_War","location":["North Eastern Province"]},{"start":"1994","stop":"1994","name":"Zapatista uprising","link":"https://en.wikipedia.org/wiki/Zapatista_uprising","location":["Chiapas","Mexico"]},{"start":"1981","stop":"1986","name":"Ugandan Bush War","link":"https://en.wikipedia.org/wiki/Ugandan_Bush_War","location":"Uganda"},{"start":"1987","stop":"1988","name":"Thai–Laotian Border War","link":"https://en.wikipedia.org/wiki/Thai%E2%80%93Laotian_Border_War","location":["Chat Trakan","Phitsanulok","Sainyabuli"]},{"start":"1978","stop":"1982","name":"NDF Rebellion","link":"https://en.wikipedia.org/wiki/NDF_Rebellion","location":"North Yemen"},{"start":"1987","stop":"1989","name":"1987–89 JVP insurrection","link":"https://en.wikipedia.org/wiki/1987%E2%80%9389_JVP_insurrection","location":"Sri Lanka"},{"start":"1963","stop":"1967","name":"Aden Emergency","link":"https://en.wikipedia.org/wiki/Aden_Emergency","location":["Western","Eastern","Aden Protectorate","Middle East"]},{"start":"1979","stop":"1979","name":"1979 Herat uprising","link":"https://en.wikipedia.org/wiki/1979_Herat_uprising","location":["Herat Province"]},{"start":"2005","stop":"2008","name":"Mount Elgon insurgency","link":"https://en.wikipedia.org/wiki/Mount_Elgon_insurgency","location":["Mount Elgon District","Kenya"]},{"start":"1958","stop":"1961","name":"Permesta","link":"https://en.wikipedia.org/wiki/Permesta","location":"East Indonesia"},{"start":"1965","stop":"1965","name":"Dominican Civil War","link":"https://en.wikipedia.org/wiki/Dominican_Civil_War","location":["Santo Domingo","Dominican Rep."]},{"start":"1967","stop":"1968","name":"1967 Kurdish revolt in Iran","link":"https://en.wikipedia.org/wiki/1967_Kurdish_revolt_in_Iran","location":"Iranian Kurdistan"},{"start":"1977","stop":"1977","name":"Libyan–Egyptian War","link":"https://en.wikipedia.org/wiki/Libyan%E2%80%93Egyptian_War","location":"Libyan–Egyptian border"},{"start":"1994","stop":"1999","name":"Caprivi conflict","link":"https://en.wikipedia.org/wiki/Caprivi_conflict"},{"start":"1991","stop":"1994","name":"Djiboutian Civil War","link":"https://en.wikipedia.org/wiki/Djiboutian_Civil_War"},{"start":"1949","stop":"Ongoing","name":"Afghanistan–Pakistan skirmishes","link":"https://en.wikipedia.org/wiki/Afghanistan%E2%80%93Pakistan_skirmishes","location":["Afghanistan","Khyber Pakhtunkhwa"]},{"start":"1956","stop":"1956","name":"Poznań 1956 protests","link":"https://en.wikipedia.org/wiki/Pozna%C5%84_1956_protests","location":["Poznań","People's Republic of Poland"]},{"start":"1993","stop":"Ongoing","name":"Ethnic conflict in Nagaland","link":"https://en.wikipedia.org/wiki/Ethnic_conflict_in_Nagaland","location":["Nagaland","Northeast India"]},{"start":"2000","stop":"2000","name":"Six-Day War (2000)","link":"https://en.wikipedia.org/wiki/Six-Day_War_(2000)","location":["Kisangani","Democratic Republic of the Congo"]},{"start":"2012","stop":"2012","name":"Baragoi clashes","link":"https://en.wikipedia.org/wiki/Baragoi_clashes"},{"start":"1947","stop":"1948","name":"Malagasy Uprising","link":"https://en.wikipedia.org/wiki/Malagasy_Uprising","location":"Madagascar"},{"start":"1961","stop":"1990","name":"Nicaraguan Revolution","link":"https://en.wikipedia.org/wiki/Nicaraguan_Revolution","location":"Nicaragua"},{"start":"1958","stop":"1958","name":"14 July Revolution","link":"https://en.wikipedia.org/wiki/14_July_Revolution","location":"Iraq"},{"start":"1957","stop":"1958","name":"Ifni War","link":"https://en.wikipedia.org/wiki/Ifni_War","location":["Spanish Sahara","Ifni","Morocco"]},{"start":"1955","stop":"1972","name":"First Sudanese Civil War","link":"https://en.wikipedia.org/wiki/First_Sudanese_Civil_War","location":"Southern Sudan"},{"start":"1954","stop":"1954","name":"Coup d'état of Yanaon","link":"https://en.wikipedia.org/wiki/Coup_d%27%C3%A9tat_of_Yanaon"},{"start":"1959","stop":"1959","name":"1959 Mosul uprising","link":"https://en.wikipedia.org/wiki/1959_Mosul_uprising","location":["Mosul","Iraq"]},{"start":"1964","stop":"1964","name":"Simba rebellion","link":"https://en.wikipedia.org/wiki/Simba_rebellion","location":"Democratic Republic of the Congo"},{"start":"1966","stop":"1967","name":"Stanleyville mutinies","link":"https://en.wikipedia.org/wiki/Stanleyville_mutinies"},{"start":"1965","stop":"1983","name":"Communist insurgency in Thailand","link":"https://en.wikipedia.org/wiki/Communist_insurgency_in_Thailand","location":"Thailand"},{"start":"1979","stop":"1983","name":"1979 Kurdish rebellion in Iran","link":"https://en.wikipedia.org/wiki/1979_Kurdish_rebellion_in_Iran","location":"Iranian Kurdistan"},{"start":"1950","stop":"1950","name":"APRA coup d'état","link":"https://en.wikipedia.org/wiki/APRA_coup_d%27%C3%A9tat","location":["Bandung","Jakarta","Java"]},{"start":"1947","stop":"1947","name":"Paraguayan Civil War (1947)","link":"https://en.wikipedia.org/wiki/Paraguayan_Civil_War_(1947)","location":"Paraguay"},{"start":"1963","stop":"1974","name":"Guinea-Bissau War of Independence","link":"https://en.wikipedia.org/wiki/Guinea-Bissau_War_of_Independence","location":["Guinea-Bissau","Portuguese Guinea"]},{"start":"1987","stop":"1991","name":"Singing Revolution","link":"https://en.wikipedia.org/wiki/Singing_Revolution"},{"start":"1991","stop":"1993","name":"Georgian Civil War","link":"https://en.wikipedia.org/wiki/Georgian_Civil_War","location":["Georgia","Tbilisi","Mingrelia","Abkhazia","South Ossetia"]},{"start":"1998","stop":"1998","name":"War in Abkhazia (1998)","link":"https://en.wikipedia.org/wiki/War_in_Abkhazia_(1998)","location":["Abkhazia","Georgia"]},{"start":"2004","stop":"Ongoing","name":"Sistan and Baluchestan insurgency","link":"https://en.wikipedia.org/wiki/Sistan_and_Baluchestan_insurgency","location":["Sistan and Baluchestan Province","Iran"]},{"start":"2002","stop":"2002","name":"Perejil Island crisis","link":"https://en.wikipedia.org/wiki/Perejil_Island_crisis","location":"Perejil Island"},{"start":"1975","stop":"2007","name":"Insurgency in Laos","link":"https://en.wikipedia.org/wiki/Insurgency_in_Laos","location":["Hmong","Laos","Royalist","Right-wing"]},{"start":"1993","stop":"2005","name":"Burundian Civil War","link":"https://en.wikipedia.org/wiki/Burundian_Civil_War","location":["Burundi","Democratic Republic of the Congo"]},{"start":"1969","stop":"1969","name":"Football War","link":"https://en.wikipedia.org/wiki/Football_War","location":["El Salvador","Honduras"]},{"start":"1995","stop":"Ongoing","name":"Insurgency in Ogaden","link":"https://en.wikipedia.org/wiki/Insurgency_in_Ogaden","location":["Somali Region","Ethiopia"]},{"start":"1982","stop":"Ongoing","name":"Casamance conflict","link":"https://en.wikipedia.org/wiki/Casamance_conflict","location":["Casamance","Senegal"]},{"start":"1970","stop":"1972","name":"Reggio revolt","link":"https://en.wikipedia.org/wiki/Reggio_revolt","location":["Reggio Calabria","Calabria"]},{"start":"1954","stop":"1959","name":"Jebel Akhdar War","link":"https://en.wikipedia.org/wiki/Jebel_Akhdar_War","location":"Sultanate of Muscat and Oman"},{"start":"1980","stop":"Ongoing","name":"Maoist insurgency in Turkey","link":"https://en.wikipedia.org/wiki/Maoist_insurgency_in_Turkey","location":["Tunceli"]},{"start":"2004","stop":"2007","name":"Central African Rep. Bush War","link":"https://en.wikipedia.org/wiki/Central_African_Republic_Bush_War"},{"start":"1949","stop":"1961","name":"Kuomintang insurgency (page does not exist)","link":"https://en.wikipedia.org/w/index.php?title=Kuomintang_insurgency&action=edit&redlink=1"},{"start":"1978","stop":"1979","name":"Uganda–Tanzania War","link":"https://en.wikipedia.org/wiki/Uganda%E2%80%93Tanzania_War","location":"Uganda"},{"start":"1970","stop":"1982","name":"Dirty War (Mexico)","link":"https://en.wikipedia.org/wiki/Dirty_War_(Mexico)","location":"Mexico"},{"start":"1981","stop":"1981","name":"Dawda Jawara","link":"https://en.wikipedia.org/wiki/Dawda_Jawara#The_1981_attempted_coup"},{"start":"2008","stop":"2008","name":"2008 Kufra conflict","link":"https://en.wikipedia.org/wiki/2008_Kufra_conflict","location":["Kufra"," Cyrenaica","Libya"]},{"start":"1989","stop":"1991","name":"Mauritania–Senegal Border War","link":"https://en.wikipedia.org/wiki/Mauritania%E2%80%93Senegal_Border_War","location":["West Africa"]},{"start":"1948","stop":"1948","name":"Yeosu–Suncheon rebellion","link":"https://en.wikipedia.org/wiki/Yeosu%E2%80%93Suncheon_rebellion"},{"start":"1985","stop":"1985","name":"Agacher Strip War","link":"https://en.wikipedia.org/wiki/Agacher_Strip_War","location":["Burkina Faso"]},{"start":"1963","stop":"1963","name":"Ar-Rashid revolt","link":"https://en.wikipedia.org/wiki/Ar-Rashid_revolt","location":["Baghdad","Republic of Iraq"]},{"start":"1980","stop":"1980","name":"Gwangju Uprising","link":"https://en.wikipedia.org/wiki/Gwangju_Uprising","location":["Gwangju","South Korea"]},{"start":"1950","stop":"1958","name":"Kuomintang Islamic insurgency","link":"https://en.wikipedia.org/wiki/Kuomintang_Islamic_insurgency","location":["Gansu","Qinghai","Ningxia","Xinjiang","Yunnan"]},{"start":"1999","stop":"2007","name":"Ituri conflict","link":"https://en.wikipedia.org/wiki/Ituri_conflict","location":["Ituri","Democratic Republic of the Congo"]},{"start":"1978","stop":"1978","name":"Shaba II","link":"https://en.wikipedia.org/wiki/Shaba_II","location":["Shaba","Zaire"]},{"start":"1999","stop":"1999","name":"War of Dagestan","link":"https://en.wikipedia.org/wiki/War_of_Dagestan","location":["Dagestan","Russia"]},{"start":"1945","stop":"1946","name":"War in Vietnam (1945–46)","link":"https://en.wikipedia.org/wiki/War_in_Vietnam_(1945%E2%80%9346)","location":["Southern Vietnam","16th parallel"]},{"start":"2004","stop":"2005","name":"Kondovo Crisis","link":"https://en.wikipedia.org/wiki/Kondovo_Crisis","location":["Kondovo","Skopje","Macedonia"]},{"start":"1978","stop":"1978","name":"1978 South Lebanon conflict","link":"https://en.wikipedia.org/wiki/1978_South_Lebanon_conflict","location":"Southern Lebanon"},{"start":"1997","stop":"1997","name":"1997 clashes in Cambodia","link":"https://en.wikipedia.org/wiki/1997_clashes_in_Cambodia","location":["Phnom Penh","Cambodia","Samrong","Sisophon","Pailin","O'Smach"]},{"start":"1999","stop":"2003","name":"Second Liberian Civil War","link":"https://en.wikipedia.org/wiki/Second_Liberian_Civil_War","location":"Liberia"},{"start":"1979","stop":"1979","name":"Grand Mosque seizure","link":"https://en.wikipedia.org/wiki/Grand_Mosque_seizure","location":["Mecca","Saudi Arabia"]},{"start":"1980","stop":"1981","name":"Eritrean Civil Wars","link":"https://en.wikipedia.org/wiki/Eritrean_Civil_Wars","location":"Eritrea"},{"start":"1969","stop":"Ongoing","name":"Papua conflict","link":"https://en.wikipedia.org/wiki/Papua_conflict","location":["Papua (province)","West Papua (province)","Indonesia","Papua New Guinea"]},{"start":"1983","stop":"2005","name":"Second Sudanese Civil War","link":"https://en.wikipedia.org/wiki/Second_Sudanese_Civil_War","location":["Blue Nile","Nuba Mountains"]},{"start":"1989","stop":"1996","name":"First Liberian Civil War","link":"https://en.wikipedia.org/wiki/First_Liberian_Civil_War","location":"Liberia"},{"start":"1999","stop":"2000","name":"1999 East Timorese crisis","link":"https://en.wikipedia.org/wiki/1999_East_Timorese_crisis","location":"East Timor"},{"start":"1972","stop":"1974","name":"Eritrean Civil Wars","link":"https://en.wikipedia.org/wiki/Eritrean_Civil_Wars","location":"Eritrea"},{"start":"1969","stop":"Ongoing","name":"Civil conflict in the Philippines","link":"https://en.wikipedia.org/wiki/Civil_conflict_in_the_Philippines","location":"Philippines"},{"start":"1988","stop":"1998","name":"Bougainville Civil War","link":"https://en.wikipedia.org/wiki/Bougainville_Civil_War","location":["Autonomous Region of Bougainville","Solomon Is.","Papua New Guinea","Solomon Sea"]},{"start":"1967","stop":"1974","name":"Araguaia Guerrilla War","link":"https://en.wikipedia.org/wiki/Araguaia_Guerrilla_War","location":["State of Goiás","State of Tocantins","Brazil"]},{"start":"1948","stop":"1958","name":"La Violencia","link":"https://en.wikipedia.org/wiki/La_Violencia","location":"{{COL}}"},{"start":"2011","stop":"Ongoing","name":"Ethnic violence in S. Sudan (2011–present)","link":"https://en.wikipedia.org/wiki/Ethnic_violence_in_South_Sudan_(2011%E2%80%93present)"},{"start":"1989","stop":"1996","name":"KDPI insurgency (1989–96)","link":"https://en.wikipedia.org/wiki/KDPI_insurgency_(1989%E2%80%9396)","location":"Iranian Kurdistan"},{"start":"2009","stop":"2009","name":"2009 Boko Haram uprising","link":"https://en.wikipedia.org/wiki/2009_Boko_Haram_uprising","location":["Nigeria","Bauchi","Bauchi State","Maiduguri","Borno State","Potiskum","Yobe State","Wudil","Kano State"]},{"start":"2017","stop":"Ongoing","name":"2017 Qatif unrest","link":"https://en.wikipedia.org/wiki/2017_Qatif_unrest","location":["Qatif","Awamiya","Eastern Province, Saudi Arabia"]},{"start":"2012","stop":"Ongoing","name":"Central African Rep. conflict (2012–present)","link":"https://en.wikipedia.org/wiki/Central_African_Republic_conflict_(2012%E2%80%93present)"},{"start":"2015","stop":"Ongoing","name":"ISIL insurgency in Tunisia","link":"https://en.wikipedia.org/wiki/ISIL_insurgency_in_Tunisia","location":"Tunisia"},{"start":"1960","stop":"Ongoing","name":"South Thailand insurgency","link":"https://en.wikipedia.org/wiki/South_Thailand_insurgency","location":["Southern Thailand","Songkhla","Pattani","Yala","Narathiwat",":th:ความไม่สงบในชายแดนภาคใต้ของประเทศไทย"]},{"start":"1964","stop":"Ongoing","name":"Insurgency in Northeast India","link":"https://en.wikipedia.org/wiki/Insurgency_in_Northeast_India","location":["Northeast","India","Assam","Manipur","Nagaland","Tripura","Meghalaya","Mizoram"]},{"start":"2007","stop":"2015","name":"War in Ingushetia","link":"https://en.wikipedia.org/wiki/War_in_Ingushetia","location":["Ingushetia","Russia"]},{"start":"1962","stop":"1962","name":"Brunei revolt","link":"https://en.wikipedia.org/wiki/Brunei_revolt","location":"Brunei"},{"start":"1990","stop":"1990","name":"1990 Mindanao crisis","link":"https://en.wikipedia.org/wiki/1990_Mindanao_crisis","location":["Cagayan de Oro","Butuan","Iligan","Mindanao","Philippines"]},{"start":"1948","stop":"1948","name":"Madiun Affair","link":"https://en.wikipedia.org/wiki/Madiun_Affair"},{"start":"1990","stop":"Ongoing","name":"DHKP/C insurgency in Turkey","link":"https://en.wikipedia.org/wiki/DHKP/C_insurgency_in_Turkey","location":"Turkey"},{"start":"1974","stop":"1991","name":"Ethiopian Civil War","link":"https://en.wikipedia.org/wiki/Ethiopian_Civil_War","location":"Ethiopia"},{"start":"1969","stop":"1969","name":"Sino-Soviet border conflict","link":"https://en.wikipedia.org/wiki/Sino-Soviet_border_conflict","location":["China","Soviet Union"]},{"start":"1977","stop":"1992","name":"Mozambican Civil War","link":"https://en.wikipedia.org/wiki/Mozambican_Civil_War","location":"People's Republic of Mozambique"},{"start":"1991","stop":"1991","name":"Ten-Day War","link":"https://en.wikipedia.org/wiki/Ten-Day_War","location":"Slovenia"},{"start":"1982","stop":"1982","name":"Ndogboyosoi War","link":"https://en.wikipedia.org/wiki/Ndogboyosoi_War","location":["Sierra Leone","Pujehun District"]},{"start":"1967","stop":"1970","name":"War of Attrition","link":"https://en.wikipedia.org/wiki/War_of_Attrition","location":["Sinai Peninsula"]},{"start":"1989","stop":"1990","name":"United States invasion of Panama","link":"https://en.wikipedia.org/wiki/United_States_invasion_of_Panama","location":"Panama"},{"start":"1998","stop":"2000","name":"Eritrean–Ethiopian War","link":"https://en.wikipedia.org/wiki/Eritrean%E2%80%93Ethiopian_War","location":"Eritrean–Ethiopian border, southern Eritrea, Tigray"},{"start":"1950","stop":"1950","name":"San Juan Nationalist revolt","link":"https://en.wikipedia.org/wiki/San_Juan_Nationalist_revolt"},{"start":"1998","stop":"1999","name":"Guinea-Bissau Civil War","link":"https://en.wikipedia.org/wiki/Guinea-Bissau_Civil_War","location":"Guinea-Bissau"},{"start":"1964","stop":"1964","name":"Zanzibar Revolution","link":"https://en.wikipedia.org/wiki/Zanzibar_Revolution","location":"Zanzibar"},{"start":"1975","stop":"Ongoing","name":"Cabinda War","link":"https://en.wikipedia.org/wiki/Cabinda_War","location":"Cabinda Province"},{"start":"2016","stop":"Ongoing","name":"Kamwina Nsapu rebellion","link":"https://en.wikipedia.org/wiki/Kamwina_Nsapu_rebellion","location":["Kasaï-Central","Kasaï","Kasai-Oriental","Lomami","Sankuru","Democratic Republic of the Congo"]},{"start":"1975","stop":"1975","name":"Indonesian invasion of East Timor","link":"https://en.wikipedia.org/wiki/Indonesian_invasion_of_East_Timor","location":"East Timor"},{"start":"2002","stop":"2003","name":"2002–03 conflict in the Pool Department (page does not exist)","link":"https://en.wikipedia.org/w/index.php?title=2002%E2%80%9303_conflict_in_the_Pool_Department&action=edit&redlink=1"},{"start":"1965","stop":"1965","name":"30 September Movement","link":"https://en.wikipedia.org/wiki/30_September_Movement"},{"start":"1996","stop":"2006","name":"Nepalese Civil War","link":"https://en.wikipedia.org/wiki/Nepalese_Civil_War","location":"Nepal"},{"start":"1969","stop":"1969","name":"Al-Wadiah War","link":"https://en.wikipedia.org/wiki/Al-Wadiah_War","location":["Sharurah"]},{"start":"1961","stop":"1991","name":"Eritrean War of Independence","link":"https://en.wikipedia.org/wiki/Eritrean_War_of_Independence","location":["Eritrea","Ethiopia"]},{"start":"2016","stop":"Ongoing","name":"2016 Niger Delta conflict","link":"https://en.wikipedia.org/wiki/2016_Niger_Delta_conflict","location":"Niger Delta"},{"start":"2002","stop":"Ongoing","name":"Operation Enduring Freedom – Philippines","link":"https://en.wikipedia.org/wiki/Operation_Enduring_Freedom_%E2%80%93_Philippines","location":"Philippines"},{"start":"1950","stop":"1950","name":"Battle of Chamdo","link":"https://en.wikipedia.org/wiki/Battle_of_Chamdo","location":["Chamdo Prefecture"]},{"start":"2010","stop":"2010","name":"2010 Kingston unrest","link":"https://en.wikipedia.org/wiki/2010_Kingston_unrest","location":["Kingston","Jamaica"]},{"start":"1994","stop":"Ongoing","name":"Chiapas conflict","link":"https://en.wikipedia.org/wiki/Chiapas_conflict","location":"Chiapas, Mexico"},{"start":"1987","stop":"Ongoing","name":"Lord's Resistance Army insurgency","link":"https://en.wikipedia.org/wiki/Lord%27s_Resistance_Army_insurgency","location":["Uganda","S. Sudan","DR Congo","Central African Rep."]},{"start":"1999","stop":"2002","name":"Maluku sectarian conflict","link":"https://en.wikipedia.org/wiki/Maluku_sectarian_conflict"},{"start":"1954","stop":"1954","name":"Kengir uprising","link":"https://en.wikipedia.org/wiki/Kengir_uprising","location":["Kengir","Kazakh SSR"]},{"start":"1999","stop":"2001","name":"Insurgency in the Preševo Valley","link":"https://en.wikipedia.org/wiki/Insurgency_in_the_Pre%C5%A1evo_Valley","location":["Preševo","Bujanovac","Medveđa","Serbia","FR Yugoslavia"]},{"start":"2016","stop":"2016","name":"2016 Kasese clashes","link":"https://en.wikipedia.org/wiki/2016_Kasese_clashes","location":["Kasese","Uganda"]},{"start":"2008","stop":"2008","name":"2008 invasion of Anjouan","link":"https://en.wikipedia.org/wiki/2008_invasion_of_Anjouan","location":["Anjouan","Comoros"]},{"start":"2012","stop":"2015","name":"Northern Mali conflict","link":"https://en.wikipedia.org/wiki/Northern_Mali_conflict","location":["Mali"]},{"start":"1948","stop":"1948","name":"Costa Rican Civil War","link":"https://en.wikipedia.org/wiki/Costa_Rican_Civil_War","location":"Costa Rica"},{"start":"1986","stop":"1986","name":"South Yemen Civil War","link":"https://en.wikipedia.org/wiki/South_Yemen_Civil_War","location":"South Yemen"},{"start":"2014","stop":"Ongoing","name":"Iraqi Civil War (2014–present)","link":"https://en.wikipedia.org/wiki/Iraqi_Civil_War_(2014%E2%80%93present)"},{"start":"1974","stop":"1974","name":"Battle of the Paracel Islands","link":"https://en.wikipedia.org/wiki/Battle_of_the_Paracel_Islands","location":"Paracel Islands"},{"start":"1980","stop":"1988","name":"Iran–Iraq War","link":"https://en.wikipedia.org/wiki/Iran%E2%80%93Iraq_War","location":["Iran","Iraq","Persian Gulf"]},{"start":"1948","stop":"1949","name":"Jeju uprising","link":"https://en.wikipedia.org/wiki/Jeju_uprising","location":"Jeju Island, South Korea"},{"start":"2011","stop":"2017","name":"Syrian Civil War spillover in Lebanon","link":"https://en.wikipedia.org/wiki/Syrian_Civil_War_spillover_in_Lebanon","location":["Lebanon","Akkar","Arsal","Beirut","Sidon","Tripoli"]},{"start":"1950","stop":"1950","name":"Jayuya Uprising","link":"https://en.wikipedia.org/wiki/Jayuya_Uprising","location":"Puerto Rico"},{"start":"1979","stop":"1992","name":"Salvadoran Civil War","link":"https://en.wikipedia.org/wiki/Salvadoran_Civil_War","location":"El Salvador"},{"start":"1976","stop":"2005","name":"Insurgency in Aceh","link":"https://en.wikipedia.org/wiki/Insurgency_in_Aceh","location":["Aceh","Indonesia"]},{"start":"1995","stop":"1995","name":"Cenepa War","link":"https://en.wikipedia.org/wiki/Cenepa_War","location":"Upper Cenepa River valley: in the eastern side of the Cordillera del Cóndor, Province of Condorcanqui, Región Amazonas, Republic of Peru, near to the border between the two countries (see map shown in the infobox)"},{"start":"1947","stop":"1948","name":"Indo-Pakistani War of 1947","link":"https://en.wikipedia.org/wiki/Indo-Pakistani_War_of_1947","location":"Kashmir"},{"start":"1960","stop":"1965","name":"Congo Crisis","link":"https://en.wikipedia.org/wiki/Congo_Crisis","location":["Republic of the Congo","Democratic Republic of the Congo"]},{"start":"2014","stop":"2014","name":"2014 Israel–Gaza conflict","link":"https://en.wikipedia.org/wiki/2014_Israel%E2%80%93Gaza_conflict","location":["Gaza Strip","Israel"]},{"start":"1996","stop":"1997","name":"First Congo War","link":"https://en.wikipedia.org/wiki/First_Congo_War","location":"Zaire"},{"start":"1959","stop":"1959","name":"1959 Tibetan uprising","link":"https://en.wikipedia.org/wiki/1959_Tibetan_uprising","location":["Lhasa","Tibet Autonomous Region","China"]},{"start":"2002","stop":"2007","name":"First Ivorian Civil War","link":"https://en.wikipedia.org/wiki/First_Ivorian_Civil_War","location":"Ivory Coast"},{"start":"1945","stop":"1946","name":"Iran crisis of 1946","link":"https://en.wikipedia.org/wiki/Iran_crisis_of_1946","location":["Iran","Azerbaijan People's Republic","Republic of Mahabad"]},{"start":"1947","stop":"1947","name":"1947 Poonch Rebellion","link":"https://en.wikipedia.org/wiki/1947_Poonch_Rebellion","location":"Poonch"},{"start":"2003","stop":"2006","name":"Iraqi insurgency (2003–06)","link":"https://en.wikipedia.org/wiki/Iraqi_insurgency_(2003%E2%80%9306)","location":"Iraq"},{"start":"2012","stop":"2012","name":"Heglig Crisis","link":"https://en.wikipedia.org/wiki/Heglig_Crisis","location":["Heglig"]},{"start":"1945","stop":"Ongoing","name":"Korean conflict","link":"https://en.wikipedia.org/wiki/Korean_conflict","location":"Korea"},{"start":"1993","stop":"1993","name":"1993 Russian constitutional crisis","link":"https://en.wikipedia.org/wiki/1993_Russian_constitutional_crisis","location":["Moscow","Russia"]},{"start":"2002","stop":"Ongoing","name":"Operation Enduring Freedom – Horn of Africa","link":"https://en.wikipedia.org/wiki/Operation_Enduring_Freedom_%E2%80%93_Horn_of_Africa","location":["Horn of Africa","Gulf of Aden"]},{"start":"2009","stop":"2009","name":"2009 Peruvian political crisis","link":"https://en.wikipedia.org/wiki/2009_Peruvian_political_crisis","location":["Bagua Province","Peruvian Amazon"]},{"start":"1964","stop":"1992","name":"FULRO insurgency against Vietnam","link":"https://en.wikipedia.org/wiki/FULRO_insurgency_against_Vietnam","location":["South Vietnam","North Vietnam","Cambodia"]},{"start":"2013","stop":"Ongoing","name":"Batwa-Luba clashes","link":"https://en.wikipedia.org/wiki/Batwa-Luba_clashes","location":["Tanganyika","Democratic Republic of the Congo"]},{"start":"2013","stop":"Ongoing","name":"RENAMO insurgency (2013–present)","link":"https://en.wikipedia.org/wiki/RENAMO_insurgency_(2013%E2%80%93present)","location":"Mozambique"},{"start":"1967","stop":"Ongoing","name":"Naxalite–Maoist insurgency","link":"https://en.wikipedia.org/wiki/Naxalite%E2%80%93Maoist_insurgency","location":["India","Red corridor"]},{"start":"1953","stop":"1959","name":"Cuban Revolution","link":"https://en.wikipedia.org/wiki/Cuban_Revolution","location":"Cuba"},{"start":"2009","stop":"Ongoing","name":"Boko Haram insurgency","link":"https://en.wikipedia.org/wiki/Boko_Haram_insurgency","location":["Borno State","Yobe State"]},{"start":"1991","stop":"2002","name":"Algerian Civil War","link":"https://en.wikipedia.org/wiki/Algerian_Civil_War","location":"Algeria"},{"start":"1976","stop":"1980","name":"Political violence in Turkey (1976–80)","link":"https://en.wikipedia.org/wiki/Political_violence_in_Turkey_(1976%E2%80%9380)","location":"Turkey"},{"start":"1990","stop":"1993","name":"Rwandan Civil War","link":"https://en.wikipedia.org/wiki/Rwandan_Civil_War"},{"start":"1983","stop":"1983","name":"Invasion of Grenada","link":"https://en.wikipedia.org/wiki/Invasion_of_Grenada","location":"Grenada"},{"start":"1983","stop":"1985","name":"Kurdish rebellion of 1983","link":"https://en.wikipedia.org/wiki/Kurdish_rebellion_of_1983","location":"North Iraq"},{"start":"1979","stop":"1990","name":"Sino-Vietnamese conflicts 1979–90","link":"https://en.wikipedia.org/wiki/Sino-Vietnamese_conflicts_1979%E2%80%9390","location":"Sino-Vietnamese border"},{"start":"1959","stop":"1965","name":"Escambray Rebellion","link":"https://en.wikipedia.org/wiki/Escambray_Rebellion","location":["Escambray Mountains","Cuba"]},{"start":"1956","stop":"1956","name":"Quỳnh Lưu Uprising","link":"https://en.wikipedia.org/wiki/Qu%E1%BB%B3nh_L%C6%B0u_Uprising"},{"start":"2012","stop":"2013","name":"M23 rebellion","link":"https://en.wikipedia.org/wiki/M23_rebellion","location":["North Kivu","Democratic Republic of the Congo"]},{"start":"1968","stop":"1989","name":"Communist insurgency in Malaysia (1968–89)","link":"https://en.wikipedia.org/wiki/Communist_insurgency_in_Malaysia_(1968%E2%80%9389)","location":["Peninsular Malaysia"]},{"start":"1968","stop":"1982","name":"Years of Lead (Italy)","link":"https://en.wikipedia.org/wiki/Years_of_Lead_(Italy)","location":["Italy","Northern Italy"]},{"start":"2011","stop":"Ongoing","name":"Sudanese conflict in South Kordofan and Blue Nile","link":"https://en.wikipedia.org/wiki/Sudanese_conflict_in_South_Kordofan_and_Blue_Nile","location":["South Kordofan","Blue Nile","Sudan","S. Sudan"]},{"start":"1963","stop":"1963","name":"Ramadan Revolution","link":"https://en.wikipedia.org/wiki/Ramadan_Revolution","location":["Republic of Iraq"]},{"start":"1946","stop":"1954","name":"First Indochina War","link":"https://en.wikipedia.org/wiki/First_Indochina_War","location":["French Indochina","North Vietnam"]},{"start":"1961","stop":"1962","name":"Operation Trikora","link":"https://en.wikipedia.org/wiki/Operation_Trikora","location":"Western New Guinea"},{"start":"2004","stop":"Ongoing","name":"Kivu conflict","link":"https://en.wikipedia.org/wiki/Kivu_conflict","location":["Kivu","Democratic Republic of the Congo","Burundi","Katanga Province"]},{"start":"1989","stop":"Ongoing","name":"Insurgency in Jammu and Kashmir","link":"https://en.wikipedia.org/wiki/Insurgency_in_Jammu_and_Kashmir","location":"Jammu and Kashmir"},{"start":"1991","stop":"1991","name":"1991 uprisings in Iraq","link":"https://en.wikipedia.org/wiki/1991_uprisings_in_Iraq","location":"Iraq"},{"start":"2010","stop":"2010","name":"2010 South Kyrgyzstan ethnic clashes","link":"https://en.wikipedia.org/wiki/2010_South_Kyrgyzstan_ethnic_clashes","location":["Osh","Jalal-Abad"]},{"start":"1964","stop":"1979","name":"Rhodesian Bush War","link":"https://en.wikipedia.org/wiki/Rhodesian_Bush_War","location":["Rhodesia"]},{"start":"1967","stop":"1975","name":"Cambodian Civil War","link":"https://en.wikipedia.org/wiki/Cambodian_Civil_War","location":"Cambodia"},{"start":"2014","stop":"Ongoing","name":"War in Donbass","link":"https://en.wikipedia.org/wiki/War_in_Donbass","location":["Donbass","Donetsk","Luhansk","oblasts"]},{"start":"2004","stop":"2015","name":"Houthi insurgency in Yemen","link":"https://en.wikipedia.org/wiki/Houthi_insurgency_in_Yemen","location":["Yemen"]},{"start":"1999","stop":"2009","name":"Second Chechen War","link":"https://en.wikipedia.org/wiki/Second_Chechen_War","location":["Chechnya","Dagestan","Ingushetia","Georgia"]},{"start":"2008","stop":"2012","name":"Cambodian–Thai border dispute","link":"https://en.wikipedia.org/wiki/Cambodian%E2%80%93Thai_border_dispute","location":"Cambodian–Thai border"},{"start":"1982","stop":"1982","name":"Falklands War","link":"https://en.wikipedia.org/wiki/Falklands_War","location":["Falkland Islands","South Georgia and the South Sandwich Islands"]},{"start":"1961","stop":"1975","name":"Angolan War of Independence","link":"https://en.wikipedia.org/wiki/Angolan_War_of_Independence","location":"Angola"},{"start":"1998","stop":"2003","name":"Second Congo War","link":"https://en.wikipedia.org/wiki/Second_Congo_War","location":"Democratic Republic of the Congo"},{"start":"1996","stop":"Ongoing","name":"ADF insurgency","link":"https://en.wikipedia.org/wiki/ADF_insurgency","location":["Uganda","Democratic Republic of the Congo"]},{"start":"1963","stop":"1963","name":"1963 Syrian coup d'état","link":"https://en.wikipedia.org/wiki/1963_Syrian_coup_d%27%C3%A9tat","location":"Syria"},{"start":"1948","stop":"1960","name":"Malayan Emergency","link":"https://en.wikipedia.org/wiki/Malayan_Emergency","location":"Southeast Asia"},{"start":"1979","stop":"1988","name":"Iraqi Partisan movement, 1979–88","link":"https://en.wikipedia.org/wiki/Iraqi_Partisan_movement,_1979%E2%80%9388"},{"start":"1994","stop":"1994","name":"1994 civil war in Yemen","link":"https://en.wikipedia.org/wiki/1994_civil_war_in_Yemen","location":"Yemen"},{"start":"1969","stop":"Ongoing","name":"CPP-NPA-NDF rebellion","link":"https://en.wikipedia.org/wiki/CPP-NPA-NDF_rebellion","location":"Philippines"},{"start":"1965","stop":"1965","name":"Indo-Pakistani War of 1965","link":"https://en.wikipedia.org/wiki/Indo-Pakistani_War_of_1965","location":["Indo-Pakistani border","Line of Control","Working Boundary","Radcliffe Line","Sir Creek","Zero-Point","Arabian sea","India-East Pakistan border"]},{"start":"1974","stop":"1975","name":"Second Iraqi–Kurdish War","link":"https://en.wikipedia.org/wiki/Second_Iraqi%E2%80%93Kurdish_War","location":"Northern Iraq"},{"start":"2004","stop":"Ongoing","name":"Conflict in the Niger Delta","link":"https://en.wikipedia.org/wiki/Conflict_in_the_Niger_Delta","location":["Niger Delta","Nigeria"]},{"start":"1960","stop":"1961","name":"Campaign at the China–Burma Border","link":"https://en.wikipedia.org/wiki/Campaign_at_the_China%E2%80%93Burma_Border","location":["China–Myanmar border","Shan State"]},{"start":"1948","stop":"Ongoing","name":"Internal conflict in Burma","link":"https://en.wikipedia.org/wiki/Internal_conflict_in_Burma","location":["Myanmar"]},{"start":"2009","stop":"Ongoing","name":"Insurgency in the North Caucasus","link":"https://en.wikipedia.org/wiki/Insurgency_in_the_North_Caucasus","location":["Russia","North Caucasian Federal District"]},{"start":"1992","stop":"1997","name":"Civil war in Tajikistan","link":"https://en.wikipedia.org/wiki/Civil_war_in_Tajikistan","location":"Tajikistan"},{"start":"1964","stop":"1974","name":"Mozambican War of Independence","link":"https://en.wikipedia.org/wiki/Mozambican_War_of_Independence","location":"Mozambique"},{"start":"1945","stop":"1949","name":"Indonesian National Revolution","link":"https://en.wikipedia.org/wiki/Indonesian_National_Revolution","location":"Indonesia"},{"start":"1990","stop":"1995","name":"Tuareg rebellion (1990–95)","link":"https://en.wikipedia.org/wiki/Tuareg_rebellion_(1990%E2%80%9395)","location":["Mali","Niger"]},{"start":"2010","stop":"2012","name":"Tajikistan insurgency","link":"https://en.wikipedia.org/wiki/Tajikistan_insurgency","location":"Eastern Tajikistan"},{"start":"1981","stop":"1981","name":"1981 Entumbane Uprising","link":"https://en.wikipedia.org/wiki/1981_Entumbane_Uprising","location":["Bulawayo"]},{"start":"1994","stop":"1997","name":"Iraqi Kurdish Civil War","link":"https://en.wikipedia.org/wiki/Iraqi_Kurdish_Civil_War","location":"Iraqi Kurdistan"},{"start":"1995","stop":"Ongoing","name":"Second Afar Insurgency","link":"https://en.wikipedia.org/wiki/Second_Afar_Insurgency","location":["Afar Region","Ethiopia","Southern Red Sea Region","Eritrea"]},{"start":"1997","stop":"1999","name":"Republic of the Congo Civil War (1997-99)","link":"https://en.wikipedia.org/wiki/Republic_of_the_Congo_Civil_War_(1997-99)"},{"start":"1959","stop":"2011","name":"Basque conflict","link":"https://en.wikipedia.org/wiki/Basque_conflict","location":"Spain, France"},{"start":"1984","stop":"1987","name":"Siachen conflict","link":"https://en.wikipedia.org/wiki/Siachen_conflict","location":["Siachen Glacier","Kashmir"]},{"start":"1994","stop":"1996","name":"First Chechen War","link":"https://en.wikipedia.org/wiki/First_Chechen_War","location":["Chechnya","Ingushetia","Stavropol Krai","Dagestan","Russia"]},{"start":"1964","stop":"Present","name":"Colombian conflict (1964–present)","link":"https://en.wikipedia.org/wiki/Colombian_conflict_(1964%E2%80%93present)","location":"Colombia"},{"start":"1982","stop":"1982","name":"1982 Ethiopian–Somali Border War","link":"https://en.wikipedia.org/wiki/1982_Ethiopian%E2%80%93Somali_Border_War","location":["Somalia"]},{"start":"2011","stop":"2012","name":"Operation Linda Nchi","link":"https://en.wikipedia.org/wiki/Operation_Linda_Nchi","location":"Somalia"},{"start":"1979","stop":"1979","name":"1979 Khuzestan uprising","link":"https://en.wikipedia.org/wiki/1979_Khuzestan_uprising","location":["Khuzestan Province","Iran"]},{"start":"1998","stop":"Ongoing","name":"Al-Qaeda insurgency in Yemen","link":"https://en.wikipedia.org/wiki/Al-Qaeda_insurgency_in_Yemen","location":"Yemen"},{"start":"1972","stop":"1975","name":"1972-1975 Bangladesh insurgency","link":"https://en.wikipedia.org/wiki/1972-1975_Bangladesh_insurgency","location":"Bangladesh"},{"start":"1946","stop":"1949","name":"Greek Civil War","link":"https://en.wikipedia.org/wiki/Greek_Civil_War","location":"Greece"},{"start":"1962","stop":"1990","name":"Sarawak Communist Insurgency","link":"https://en.wikipedia.org/wiki/Sarawak_Communist_Insurgency","location":["Sarawak","Malaysia"]},{"start":"1994","stop":"1994","name":"Bophuthatswana conflict (1994)","link":"https://en.wikipedia.org/wiki/Bophuthatswana_conflict_(1994)","location":"South Africa"},{"start":"2004","stop":"Ongoing","name":"Iran–PJAK conflict","link":"https://en.wikipedia.org/wiki/Iran%E2%80%93PJAK_conflict","location":["West-Azerbaijan","Kordestan","Kermanshah Province","Iran","Kurdistan Region","Iraq","Ağrı Province","Turkey"]},{"start":"1950","stop":"1953[2]","name":"Korean War","link":"https://en.wikipedia.org/wiki/Korean_War","location":["Korean Peninsula","Yellow Sea","Sea of Japan","Korea Strait","China–North Korea border"]},{"start":"1962","stop":"1976","name":"Dhofar Rebellion","link":"https://en.wikipedia.org/wiki/Dhofar_Rebellion","location":["Dhofar Province","Oman"]},{"start":"1979","stop":"1979","name":"Sino-Vietnamese War","link":"https://en.wikipedia.org/wiki/Sino-Vietnamese_War","location":"China–Vietnam border"},{"start":"1992","stop":"1992","name":"War of Transnistria","link":"https://en.wikipedia.org/wiki/War_of_Transnistria","location":"Transnistria"},{"start":"1991","stop":"2002","name":"Sierra Leone Civil War","link":"https://en.wikipedia.org/wiki/Sierra_Leone_Civil_War","location":"Sierra Leone"},{"start":"1966","stop":"1969","name":"Korean DMZ Conflict (1966–69)","link":"https://en.wikipedia.org/wiki/Korean_DMZ_Conflict_(1966%E2%80%9369)","location":"Korean Demilitarized Zone"},{"start":"1962","stop":"1970","name":"North Yemen Civil War","link":"https://en.wikipedia.org/wiki/North_Yemen_Civil_War","location":"North Yemen"},{"start":"1952","stop":"1960","name":"Mau Mau Uprising","link":"https://en.wikipedia.org/wiki/Mau_Mau_Uprising","location":"British Kenya"},{"start":"1962","stop":"1964","name":"Tuareg rebellion (1962–64)","link":"https://en.wikipedia.org/wiki/Tuareg_rebellion_(1962%E2%80%9364)","location":["Mali"]},{"start":"1962","stop":"1962","name":"Sino-Indian War","link":"https://en.wikipedia.org/wiki/Sino-Indian_War","location":["Aksai Chin","North-East Frontier Agency"]},{"start":"1992","stop":"1992","name":"East Prigorodny Conflict","link":"https://en.wikipedia.org/wiki/East_Prigorodny_Conflict","location":["Republic of North Ossetia–Alania","Ingushetia"]},{"start":"1992","stop":"1992","name":"1992 Venezuelan coup d'état attempts","link":"https://en.wikipedia.org/wiki/1992_Venezuelan_coup_d%27%C3%A9tat_attempts","location":"{{Flag|Venezuela}}"},{"start":"2009","stop":"2009","name":"Dongo conflict","link":"https://en.wikipedia.org/wiki/Dongo_conflict","location":["Dongo","Democratic Republic of the Congo"]},{"start":"1947","stop":"1947","name":"Integration of Junagadh","link":"https://en.wikipedia.org/wiki/Integration_of_Junagadh"},{"start":"1954","stop":"1962","name":"Algerian War","link":"https://en.wikipedia.org/wiki/Algerian_War","location":"Algeria"},{"start":"1956","stop":"1956","name":"Hungarian Revolution of 1956","link":"https://en.wikipedia.org/wiki/Hungarian_Revolution_of_1956","location":"Hungarian People's Republic"},{"start":"1961","stop":"1961","name":"Bay of Pigs Invasion","link":"https://en.wikipedia.org/wiki/Bay_of_Pigs_Invasion","location":["Bay of Pigs","Cuba"]},{"start":"2006","stop":"2011","name":"Fatah–Hamas conflict","link":"https://en.wikipedia.org/wiki/Fatah%E2%80%93Hamas_conflict","location":"Gaza Strip"},{"start":"1963","stop":"1966","name":"Indonesia–Malaysia confrontation","link":"https://en.wikipedia.org/wiki/Indonesia%E2%80%93Malaysia_confrontation","location":["Malay Peninsula","Borneo"]},{"start":"1953","stop":"1975","name":"Laotian Civil War","link":"https://en.wikipedia.org/wiki/Laotian_Civil_War","location":"Kingdom of Laos"},{"start":"2006","stop":"2007","name":"Sectarian violence in Iraq (2006–07)","link":"https://en.wikipedia.org/wiki/Sectarian_violence_in_Iraq_(2006%E2%80%9307)","location":["Iraq","Baghdad"]},{"start":"1966","stop":"1989","name":"South African Border War","link":"https://en.wikipedia.org/wiki/South_African_Border_War","location":["Namibia","Angola","Zambia"]},{"start":"2007","stop":"Ongoing","name":"Operation Enduring Freedom – Trans Sahara","link":"https://en.wikipedia.org/wiki/Operation_Enduring_Freedom_%E2%80%93_Trans_Sahara","location":"Sahara Desert"},{"start":"1947","stop":"1948","name":"1947–48 Civil War in Mandatory Palestine","link":"https://en.wikipedia.org/wiki/1947%E2%80%9348_Civil_War_in_Mandatory_Palestine","location":"Mandatory Palestine"},{"start":"1967","stop":"1967","name":"Six-Day War","link":"https://en.wikipedia.org/wiki/Six-Day_War","location":"Middle East"},{"start":"1955","stop":"1975","name":"Vietnam War","link":"https://en.wikipedia.org/wiki/Vietnam_War","location":["South Vietnam","North Vietnam","Cambodia","Laos","South China Sea","Gulf of Thailand"]},{"start":"1948","stop":"1948","name":"Hyderabad Police Action","link":"https://en.wikipedia.org/wiki/Hyderabad_Police_Action","location":["Hyderabad State","South India"]},{"start":"2017","stop":"Ongoing","name":"Third Iraqi-Kurdish War","link":"https://en.wikipedia.org/wiki/Third_Iraqi-Kurdish_War","location":["Iraq"]},{"start":"2009","stop":"Ongoing","name":"Sudanese nomadic conflicts","link":"https://en.wikipedia.org/wiki/Sudanese_nomadic_conflicts"},{"start":"1978","stop":"1987","name":"Chadian–Libyan conflict","link":"https://en.wikipedia.org/wiki/Chadian%E2%80%93Libyan_conflict"},{"start":"1977","stop":"1997","name":"Chittagong Hill Tracts conflict","link":"https://en.wikipedia.org/wiki/Chittagong_Hill_Tracts_conflict"},{"start":"2013","stop":"Ongoing","name":"S. Sudanese Civil War","link":"https://en.wikipedia.org/wiki/South_Sudanese_Civil_War"},{"start":"1977","stop":"1977","name":"Shaba I","link":"https://en.wikipedia.org/wiki/Shaba_I"},{"start":"1995","stop":"1995","name":"Hanish Islands conflict","link":"https://en.wikipedia.org/wiki/Hanish_Islands_conflict"},{"start":"1973","stop":"1990","name":"Armed resistance in Chile (1973–90)","link":"https://en.wikipedia.org/wiki/Armed_resistance_in_Chile_(1973%E2%80%9390)"},{"start":"2008","stop":"2008","name":"Djiboutian–Eritrean border conflict","link":"https://en.wikipedia.org/wiki/Djiboutian%E2%80%93Eritrean_border_conflict"},{"start":"1982","stop":"2000","name":"1982 Lebanon War","link":"https://en.wikipedia.org/wiki/1982_Lebanon_War"},{"start":"1975","stop":"2002","name":"Angolan Civil War","link":"https://en.wikipedia.org/wiki/Angolan_Civil_War"},{"start":"1968","stop":"1998","name":"The Troubles","link":"https://en.wikipedia.org/wiki/The_Troubles"},{"start":"1979","stop":"1982","name":"Islamist uprising in Syria","link":"https://en.wikipedia.org/wiki/Islamist_uprising_in_Syria"},{"start":"2011","stop":"Ongoing","name":"Sinai insurgency","link":"https://en.wikipedia.org/wiki/Sinai_insurgency"},{"start":"1973","stop":"Ongoing","name":"Oromo Conflict","link":"https://en.wikipedia.org/wiki/Oromo_Conflict"},{"start":"1970","stop":"1971","name":"Black September in Jordan","link":"https://en.wikipedia.org/wiki/Black_September_in_Jordan"},{"start":"1969","stop":"Ongoing","name":"Moro insurgency in the Philippines","link":"https://en.wikipedia.org/wiki/Moro_insurgency_in_the_Philippines"},{"start":"2016","stop":"Ongoing","name":"The Pool War","link":"https://en.wikipedia.org/wiki/The_Pool_War"},{"start":"1989","stop":"1992","name":"Civil war in Afghanistan (1989–92)","link":"https://en.wikipedia.org/wiki/Civil_war_in_Afghanistan_(1989%E2%80%9392)"},{"start":"1997","stop":"1997","name":"Albanian Rebellion of 1997","link":"https://en.wikipedia.org/wiki/Albanian_Rebellion_of_1997"},{"start":"1988","stop":"1994","name":"Nagorno-Karabakh War","link":"https://en.wikipedia.org/wiki/Nagorno-Karabakh_War"},{"start":"2011","stop":"2014","name":"Factional violence in Libya (2011–14)","link":"https://en.wikipedia.org/wiki/Factional_violence_in_Libya_(2011%E2%80%9314)"},{"start":"2003","stop":"Ongoing","name":"War in Darfur","link":"https://en.wikipedia.org/wiki/War_in_Darfur"},{"start":"1991","stop":"1992","name":"1991–92 South Ossetia War","link":"https://en.wikipedia.org/wiki/1991%E2%80%9392_South_Ossetia_War"},{"start":"1999","stop":"1999","name":"Kargil War","link":"https://en.wikipedia.org/wiki/Kargil_War"},{"start":"1986","stop":"1992","name":"Suriname Guerrilla War","link":"https://en.wikipedia.org/wiki/Suriname_Guerrilla_War"},{"start":"2002","stop":"Ongoing","name":"Taliban insurgency","link":"https://en.wikipedia.org/wiki/Taliban_insurgency"},{"start":"1961","stop":"1961","name":"Indian annexation of Goa","link":"https://en.wikipedia.org/wiki/Indian_annexation_of_Goa"},{"start":"1992","stop":"1993","name":"War in Abkhazia (1992–93)","link":"https://en.wikipedia.org/wiki/War_in_Abkhazia_(1992%E2%80%9393)"},{"start":"1992","stop":"1995","name":"Bosnian War","link":"https://en.wikipedia.org/wiki/Bosnian_War"},{"start":"2005","stop":"2010","name":"Chadian Civil War (2005–10)","link":"https://en.wikipedia.org/wiki/Chadian_Civil_War_(2005%E2%80%9310)"},{"start":"1971","stop":"1972","name":"1971 Janatha Vimukthi Peramuna Insurrection","link":"https://en.wikipedia.org/wiki/1971_Janatha_Vimukthi_Peramuna_Insurrection"},{"start":"1983","stop":"2009","name":"Sri Lankan Civil War","link":"https://en.wikipedia.org/wiki/Sri_Lankan_Civil_War"},{"start":"2011","stop":"2011","name":"Libyan Civil War (2011)","link":"https://en.wikipedia.org/wiki/Libyan_Civil_War_(2011)"},{"start":"1996","stop":"2001","name":"Civil war in Afghanistan (1996–2001)","link":"https://en.wikipedia.org/wiki/Civil_war_in_Afghanistan_(1996%E2%80%932001)"},{"start":"1975","stop":"1991","name":"Western Sahara War","link":"https://en.wikipedia.org/wiki/Western_Sahara_War"},{"start":"2006","stop":"Ongoing","name":"Mexican Drug War","link":"https://en.wikipedia.org/wiki/Mexican_Drug_War"},{"start":"1967","stop":"1967","name":"Nathu La and Cho La incidents","link":"https://en.wikipedia.org/wiki/Nathu_La_and_Cho_La_incidents"},{"start":"1989","stop":"1989","name":"Romanian Revolution of 1989","link":"https://en.wikipedia.org/wiki/Romanian_Revolution_of_1989"},{"start":"2006","stop":"2009","name":"War in Somalia (2006–09)","link":"https://en.wikipedia.org/wiki/War_in_Somalia_(2006%E2%80%9309)"},{"start":"1950","stop":"1950","name":"Utuado Uprising","link":"https://en.wikipedia.org/wiki/Utuado_Uprising"},{"start":"2005","stop":"Ongoing","name":"Paraguayan People's Army insurgency","link":"https://en.wikipedia.org/wiki/Paraguayan_People%27s_Army_insurgency"},{"start":"2001","stop":"Ongoing","name":"War on Terror","link":"https://en.wikipedia.org/wiki/War_on_Terror"},{"start":"1990","stop":"1991","name":"Gulf War","link":"https://en.wikipedia.org/wiki/Gulf_War"},{"start":"2006","stop":"2006","name":"2006 Lebanon War","link":"https://en.wikipedia.org/wiki/2006_Lebanon_War"},{"start":"2007","stop":"2009","name":"Tuareg rebellion (2007–09)","link":"https://en.wikipedia.org/wiki/Tuareg_rebellion_(2007%E2%80%9309)"},{"start":"1977","stop":"1978","name":"Ethio-Somali War","link":"https://en.wikipedia.org/wiki/Ethio-Somali_War"},{"start":"2008","stop":"2009","name":"Gaza War (2008–09)","link":"https://en.wikipedia.org/wiki/Gaza_War_(2008%E2%80%9309)"},{"start":"2003","stop":"2011","name":"Iraq War","link":"https://en.wikipedia.org/wiki/Iraq_War"},{"start":"1998","stop":"1999","name":"Kosovo War","link":"https://en.wikipedia.org/wiki/Kosovo_War"},{"start":"2011","stop":"2014","name":"Iraqi insurgency (2011–14)","link":"https://en.wikipedia.org/wiki/Iraqi_insurgency_(2011%E2%80%9314)"},{"start":"1994","stop":"Ongoing","name":"Armenian-Azerbaijani border conflict","link":"https://en.wikipedia.org/wiki/Armenian-Azerbaijani_border_conflict"},{"start":"1991","stop":"1995","name":"Croatian War of Independence","link":"https://en.wikipedia.org/wiki/Croatian_War_of_Independence"},{"start":"1975","stop":"1990","name":"Lebanese Civil War","link":"https://en.wikipedia.org/wiki/Lebanese_Civil_War"},{"start":"2000","stop":"2005","name":"Second Intifada","link":"https://en.wikipedia.org/wiki/Second_Intifada"},{"start":"1973","stop":"1973","name":"Yom Kippur War","link":"https://en.wikipedia.org/wiki/Yom_Kippur_War"},{"start":"2015","stop":"Ongoing","name":"Kurdish–Turkish conflict (2015–present)","link":"https://en.wikipedia.org/wiki/Kurdish%E2%80%93Turkish_conflict_(2015%E2%80%93present)"},{"start":"2014","stop":"Ongoing","name":"Libyan Civil War (2014–present)","link":"https://en.wikipedia.org/wiki/Libyan_Civil_War_(2014%E2%80%93present)"},{"start":"1976","stop":"1983","name":"Dirty War","link":"https://en.wikipedia.org/wiki/Dirty_War"},{"start":"1992","stop":"1996","name":"Civil war in Afghanistan (1992–96)","link":"https://en.wikipedia.org/wiki/Civil_war_in_Afghanistan_(1992%E2%80%9396)"},{"start":"2010","stop":"2011","name":"2010–2011 Ivorian crisis","link":"https://en.wikipedia.org/wiki/2010%E2%80%932011_Ivorian_crisis"},{"start":"1978","stop":"Ongoing","name":"Turkey–PKK conflict","link":"https://en.wikipedia.org/wiki/Turkey%E2%80%93PKK_conflict"},{"start":"2004","stop":"Ongoing","name":"War in North-West Pakistan","link":"https://en.wikipedia.org/wiki/War_in_North-West_Pakistan"},{"start":"2001","stop":"2001","name":"Insurgency in the Republic of Macedonia","link":"https://en.wikipedia.org/wiki/Insurgency_in_the_Republic_of_Macedonia"},{"start":"1992","stop":"1994","name":"Croat–Bosniak War","link":"https://en.wikipedia.org/wiki/Croat%E2%80%93Bosniak_War"},{"start":"1980","stop":"Ongoing","name":"Internal conflict in Peru","link":"https://en.wikipedia.org/wiki/Internal_conflict_in_Peru"},{"start":"2014","stop":"Ongoing","name":"Military intervention against ISIL","link":"https://en.wikipedia.org/wiki/Military_intervention_against_ISIL"},{"start":"1971","stop":"1971","name":"Indo-Pakistani War of 1971","link":"https://en.wikipedia.org/wiki/Indo-Pakistani_War_of_1971"},{"start":"2016","stop":"2016","name":"2016 Armenian–Azerbaijani clashes","link":"https://en.wikipedia.org/wiki/2016_Armenian%E2%80%93Azerbaijani_clashes"},{"start":"2011","stop":"Ongoing","name":"Syrian Civil War","link":"https://en.wikipedia.org/wiki/Syrian_Civil_War"},{"start":"1960","stop":"1996","name":"Guatemalan Civil War","link":"https://en.wikipedia.org/wiki/Guatemalan_Civil_War","location":"Guatemala"},{"start":"2003","stop":"Ongoing","name":"Balochistan conflict","link":"https://en.wikipedia.org/wiki/Balochistan_conflict","location":"Balochistan"},{"start":"2009","stop":"Ongoing","name":"War in Somalia (2009–present)","link":"https://en.wikipedia.org/wiki/War_in_Somalia_(2009%E2%80%93present)","location":["Somalia","Northeastern Kenya"]},{"start":"2008","stop":"2008","name":"Russo-Georgian war","link":"https://en.wikipedia.org/wiki/Russo-Georgian_war","location":["Georgia","South Ossetia","Abkhazia"]},{"start":"1979","stop":"1989","name":"Soviet war in Afghanistan","link":"https://en.wikipedia.org/wiki/Soviet_war_in_Afghanistan","location":"Afghanistan"},{"start":"1948","stop":"1949","name":"1948 Arab–Israeli War","link":"https://en.wikipedia.org/wiki/1948_Arab%E2%80%93Israeli_War","location":["British Mandate of Palestine","Sinai Peninsula","southern Lebanon"]},{"start":"2015","stop":"Ongoing","name":"Yemeni Civil War (2015)","link":"https://en.wikipedia.org/wiki/Yemeni_Civil_War_(2015)","location":["Yemen","Saudi Arabia","spillovers"]},{"start":"1956","stop":"1956","name":"Suez Crisis","link":"https://en.wikipedia.org/wiki/Suez_Crisis","location":["Gaza Strip","Egypt","Sinai","Suez Canal"]},{"start":"1967","stop":"1970","name":"Nigerian Civil War","link":"https://en.wikipedia.org/wiki/Nigerian_Civil_War","location":["Nigeria"]},{"start":"1948","stop":"1950","name":"Korean War","link":"https://en.wikipedia.org/wiki/Korean_War","location":["Korean Peninsula","Yellow Sea","Sea of Japan","Korea Strait","China–North Korea border"]},{"start":"1960","stop":"Ongoing","name":"Xinjiang conflict","link":"https://en.wikipedia.org/wiki/Xinjiang_conflict","location":["Xinjiang","China"]}]

/***/ }),
/* 911 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(351);
/**
 * Component-related event-listeners are grouped in this file.
 * This improves project maintainability.
 */


/* harmony default export */ __webpack_exports__["a"] = (function () {

    window.addEventListener('yearChanged', function () {
        //console.log('yearChanged event triggered!');
        Object(__WEBPACK_IMPORTED_MODULE_0__index__["b" /* printCountryData */])();
    }, false);

    window.addEventListener('countryChanged', function () {
        //console.log('yearChanged event triggered!');
        Object(__WEBPACK_IMPORTED_MODULE_0__index__["b" /* printCountryData */])();
    }, false);
});

/***/ }),
/* 912 */
/***/ (function(module, exports) {

module.exports = [{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"1330167598","1995":"1320670391","1996":"1379888268","1997":"1531843575","1998":"1665363128","1999":"1722798883","2000":"1873452514","2001":"1920262570","2002":"1941094972","2003":"2021301676","2004":"2228279330","2005":"2331005587","2006":"2421474860","2007":"2623726257","2008":"2791960894","2009":"2498932961","2010":"2467703911","2011":"2584463687","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Aruba","Country Code":"ABW","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"537777811,1","1961":"548888895,6","1962":"546666677,8","1963":"751111191,1","1964":"800000044,4","1965":"1006666638","1966":"1399999967","1967":"1673333418","1968":"1373333367","1969":"1408888922","1970":"1748886596","1971":"1831108971","1972":"1595555476","1973":"1733333264","1974":"2155555498","1975":"2366666616","1976":"2555555567","1977":"2953333418","1978":"3300000109","1979":"3697940410","1980":"3641723322","1981":"3478787909","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"2461665938","2002":"4128820723","2003":"4583644246","2004":"5285465686","2005":"6275073572","2006":"7057598407","2007":"9843842455","2008":"10190529882","2009":"12486943506","2010":"15936800636","2011":"17930239400","2012":"20536542737","2013":"20046334304","2014":"20050189882","2015":"19702986341","2016":"19469022208","Country Name":"Afghanistan","Country Code":"AFG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"6684491979","1986":"6684491979","1987":"6684491979","1988":"6684491979","1989":"10026737968","1990":"10026737968","1991":"12118610904","1992":"5684291719","1993":"5278182971","1994":"4059352153","1995":"5039552482","1996":"7526446606","1997":"7648377413","1998":"6445041825","1999":"6152922943","2000":"9129594819","2001":"8936063723","2002":"12497346670","2003":"14188949191","2004":"19640848729","2005":"28233712831","2006":"41789478661","2007":"60448921272","2008":"84178032716","2009":"75492384801","2010":"82470913121","2011":"1,04E+11","2012":"1,15E+11","2013":"1,25E+11","2014":"1,27E+11","2015":"1,03E+11","2016":"89633156470","Country Name":"Angola","Country Code":"AGO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"1924242453","1985":"1965384586","1986":"2173750013","1987":"2156624900","1988":"2126000000","1989":"2335124988","1990":"2101624963","1991":"1139166646","1992":"709452583,9","1993":"1228071038","1994":"1985673798","1995":"2424499009","1996":"3314898292","1997":"2359903108","1998":"2707123772","1999":"3414760915","2000":"3632043908","2001":"4060758804","2002":"4435078648","2003":"5746945913","2004":"7314865176","2005":"8158548717","2006":"8992642349","2007":"10701011897","2008":"12881352688","2009":"12044212904","2010":"11926953259","2011":"12890867539","2012":"12319784787","2013":"12781029644","2014":"13219857459","2015":"11390365294","2016":"11926892453","Country Name":"Albania","Country Code":"ALB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"78619206,09","1971":"89409820,36","1972":"113408231,9","1973":"150820102,8","1974":"186558696,3","1975":"220127246,4","1976":"227281024,6","1977":"254020153,3","1978":"308008897,6","1979":"411578334,2","1980":"446416105,8","1981":"388958731,3","1982":"375895956,4","1983":"327861832,9","1984":"330070689,3","1985":"346737964,8","1986":"482000594","1987":"611316399,4","1988":"721425939,2","1989":"795449332,4","1990":"1029048482","1991":"1106928583","1992":"1210013652","1993":"1007025755","1994":"1017549124","1995":"1178738991","1996":"1223945357","1997":"1180597273","1998":"1211932398","1999":"1239876305","2000":"1401695228","2001":"1484017897","2002":"1717485413","2003":"2373927765","2004":"2916786690","2005":"3248215396","2006":"3536632794","2007":"4010990966","2008":"4001201113","2009":"3650083356","2010":"3346516556","2011":"3427022519","2012":"3146151869","2013":"3248924588","2014":"","2015":"","2016":"","Country Name":"Andorra","Country Code":"AND","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"25760683041","1969":"28434203615","1970":"31385499664","1971":"36426909888","1972":"43316056615","1973":"55018394946","1974":"1,05E+11","1975":"1,16E+11","1976":"1,45E+11","1977":"1,67E+11","1978":"1,84E+11","1979":"2,49E+11","1980":"3,38E+11","1981":"3,49E+11","1982":"3,24E+11","1983":"3,04E+11","1984":"3,08E+11","1985":"3,04E+11","1986":"2,89E+11","1987":"3,13E+11","1988":"3,08E+11","1989":"3,22E+11","1990":"4,47E+11","1991":"4,40E+11","1992":"4,71E+11","1993":"4,77E+11","1994":"4,88E+11","1995":"5,24E+11","1996":"5,78E+11","1997":"6,13E+11","1998":"5,92E+11","1999":"6,44E+11","2000":"7,35E+11","2001":"7,23E+11","2002":"7,29E+11","2003":"8,23E+11","2004":"9,64E+11","2005":"1,18E+12","2006":"1,40E+12","2007":"1,64E+12","2008":"2,08E+12","2009":"1,80E+12","2010":"2,11E+12","2011":"2,50E+12","2012":"2,74E+12","2013":"2,84E+12","2014":"2,90E+12","2015":"2,56E+12","2016":"2,50E+12","Country Name":"Arab World","Country Code":"ARB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"14720672507","1976":"19213022691","1977":"24871775165","1978":"23775831783","1979":"31225463218","1980":"43598748449","1981":"49333424135","1982":"46622718605","1983":"42803323345","1984":"41807954236","1985":"40603650232","1986":"33943612095","1987":"36384908744","1988":"36275674203","1989":"41464995914","1990":"50701443748","1991":"51552165622","1992":"54239171888","1993":"55625170253","1994":"59305093980","1995":"65743666576","1996":"73571233996","1997":"78839008445","1998":"75674336283","1999":"84445473111","2000":"1,04E+11","2001":"1,03E+11","2002":"1,10E+11","2003":"1,24E+11","2004":"1,48E+11","2005":"1,81E+11","2006":"2,22E+11","2007":"2,58E+11","2008":"3,15E+11","2009":"2,54E+11","2010":"2,90E+11","2011":"3,51E+11","2012":"3,75E+11","2013":"3,90E+11","2014":"4,03E+11","2015":"3,58E+11","2016":"3,49E+11","Country Name":"United Arab Emirates","Country Code":"ARE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"24450604878","1963":"18272123664","1964":"25605249382","1965":"28344705967","1966":"28630474728","1967":"24256667553","1968":"26436857247","1969":"31256284544","1970":"31584210366","1971":"33293199095","1972":"34733000536","1973":"52544000117","1974":"72436777342","1975":"52438647922","1976":"51169499891","1977":"56781000101","1978":"58082870156","1979":"69252328953","1980":"76961923742","1981":"78676842366","1982":"84307486837","1983":"1,04E+11","1984":"79092001998","1985":"88416668900","1986":"1,11E+11","1987":"1,11E+11","1988":"1,26E+11","1989":"76636898036","1990":"1,41E+11","1991":"1,90E+11","1992":"2,29E+11","1993":"2,37E+11","1994":"2,57E+11","1995":"2,58E+11","1996":"2,72E+11","1997":"2,93E+11","1998":"2,99E+11","1999":"2,84E+11","2000":"2,84E+11","2001":"2,69E+11","2002":"97724004252","2003":"1,28E+11","2004":"1,65E+11","2005":"1,99E+11","2006":"2,33E+11","2007":"2,88E+11","2008":"3,62E+11","2009":"3,33E+11","2010":"4,24E+11","2011":"5,30E+11","2012":"5,46E+11","2013":"5,52E+11","2014":"5,26E+11","2015":"5,85E+11","2016":"5,46E+11","Country Name":"Argentina","Country Code":"ARG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2256838858","1991":"2068526522","1992":"1272577522","1993":"1201313196","1994":"1315158670","1995":"1468317350","1996":"1596968913","1997":"1639492424","1998":"1893726437","1999":"1845482181","2000":"1911563665","2001":"2118467913","2002":"2376335048","2003":"2807061009","2004":"3576615240","2005":"4900469515","2006":"6384451606","2007":"9206301700","2008":"11662040714","2009":"8647936748","2010":"9260284938","2011":"10142111334","2012":"10619320049","2013":"11121465767","2014":"11609512940","2015":"10529182498","2016":"10547331235","Country Name":"Armenia","Country Code":"ARM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"514000000","2003":"527000000","2004":"512000000","2005":"503000000","2006":"496000000","2007":"520000000","2008":"563000000","2009":"678000000","2010":"576000000","2011":"574000000","2012":"644000000","2013":"639000000","2014":"638000000","2015":"641000000","2016":"","Country Name":"American Samoa","Country Code":"ASM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"77496740,74","1978":"87879333,33","1979":"109079963","1980":"131431037","1981":"147841740,7","1982":"164369296,3","1983":"182144111,1","1984":"208372851,9","1985":"240923925,9","1986":"290440148,1","1987":"337174851,9","1988":"398637740,7","1989":"438794777,8","1990":"459469074,1","1991":"481706333,3","1992":"499281148,1","1993":"535172777,8","1994":"589429592,6","1995":"577280740,7","1996":"633730629,6","1997":"680617111,1","1998":"727860592,6","1999":"766198925,9","2000":"825405518,5","2001":"795976518,5","2002":"809754481,5","2003":"850218592,6","2004":"913710370,4","2005":"1014979667","2006":"1149025481","2007":"1302388926","2008":"1359733556","2009":"1217719667","2010":"1147942222","2011":"1141865444","2012":"1216045778","2013":"1195885111","2014":"1274330333","2015":"1355645889","2016":"1449160185","Country Name":"Antigua and Barbuda","Country Code":"ATG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"18593347519","1961":"19666256020","1962":"19911524247","1963":"21527606675","1964":"23787658192","1965":"25962593795","1966":"27288610147","1967":"30421099787","1968":"32687870982","1969":"36659200358","1970":"41304737373","1971":"45183111211","1972":"52003504673","1973":"63782190903","1974":"88906411201","1975":"97226546497","1976":"1,05E+11","1977":"1,10E+11","1978":"1,18E+11","1979":"1,35E+11","1980":"1,50E+11","1981":"1,77E+11","1982":"1,94E+11","1983":"1,77E+11","1984":"1,94E+11","1985":"1,80E+11","1986":"1,82E+11","1987":"1,89E+11","1988":"2,36E+11","1989":"3,00E+11","1990":"3,11E+11","1991":"3,26E+11","1992":"3,26E+11","1993":"3,12E+11","1994":"3,23E+11","1995":"3,68E+11","1996":"4,02E+11","1997":"4,36E+11","1998":"4,00E+11","1999":"3,89E+11","2000":"4,15E+11","2001":"3,79E+11","2002":"3,95E+11","2003":"4,67E+11","2004":"6,13E+11","2005":"6,94E+11","2006":"7,48E+11","2007":"8,54E+11","2008":"1,06E+12","2009":"9,27E+11","2010":"1,14E+12","2011":"1,39E+12","2012":"1,54E+12","2013":"1,57E+12","2014":"1,46E+12","2015":"1,35E+12","2016":"1,20E+12","Country Name":"Australia","Country Code":"AUS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"6592693841","1961":"7311749633","1962":"7756110210","1963":"8374175258","1964":"9169983886","1965":"9994070616","1966":"10887682273","1967":"11579431669","1968":"12440625313","1969":"13582798556","1970":"15335972268","1971":"17815464919","1972":"22006470861","1973":"29444365310","1974":"35104529078","1975":"39962704274","1976":"42856485618","1977":"51421585630","1978":"61902774946","1979":"73759181884","1980":"81861232823","1981":"70863106877","1982":"71103585384","1983":"71947277233","1984":"67821568599","1985":"69219621907","1986":"98797587382","1987":"1,24E+11","1988":"1,33E+11","1989":"1,33E+11","1990":"1,66E+11","1991":"1,73E+11","1992":"1,95E+11","1993":"1,90E+11","1994":"2,03E+11","1995":"2,40E+11","1996":"2,37E+11","1997":"2,12E+11","1998":"2,18E+11","1999":"2,17E+11","2000":"1,96E+11","2001":"1,97E+11","2002":"2,13E+11","2003":"2,61E+11","2004":"3,00E+11","2005":"3,15E+11","2006":"3,34E+11","2007":"3,86E+11","2008":"4,28E+11","2009":"3,98E+11","2010":"3,90E+11","2011":"4,29E+11","2012":"4,07E+11","2013":"4,28E+11","2014":"4,38E+11","2015":"3,77E+11","2016":"3,86E+11","Country Name":"Austria","Country Code":"AUT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"8858006036","1991":"8792365811","1992":"4991350458","1993":"3973027397","1994":"3313739674","1995":"3052467522","1996":"3176749593","1997":"3962710163","1998":"4446396218","1999":"4581222442","2000":"5272617196","2001":"5707720391","2002":"6235795104","2003":"7276013032","2004":"8680472169","2005":"13245716099","2006":"20983019924","2007":"33050343783","2008":"48852482960","2009":"44291490421","2010":"52902703376","2011":"65951627200","2012":"69684317719","2013":"74164435946","2014":"75244166773","2015":"53074370486","2016":"37847715736","Country Name":"Azerbaijan","Country Code":"AZE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"195999990","1961":"202999992","1962":"213500006","1963":"232749998","1964":"260750008","1965":"158994963","1966":"165444571,4","1967":"178297142,9","1968":"183200000","1969":"190205714,3","1970":"242732571,4","1971":"252842285,7","1972":"246804571,4","1973":"304339839,6","1974":"345263492,1","1975":"420986666,7","1976":"448412753,6","1977":"547535555,6","1978":"610225555,6","1979":"782496666,7","1980":"919726666,7","1981":"969046666,7","1982":"1013222222","1983":"1082926304","1984":"987143931,2","1985":"1149979286","1986":"1201725497","1987":"1131466494","1988":"1082403219","1989":"1113924130","1990":"1132101253","1991":"1167398478","1992":"1083037671","1993":"938632612","1994":"925030590,2","1995":"1000428394","1996":"869033856,3","1997":"972896267,9","1998":"893770806,1","1999":"808077223,4","2000":"870486065,9","2001":"876794723,1","2002":"825394490,2","2003":"784654423,6","2004":"915257323,4","2005":"1117257279","2006":"1273180597","2007":"1356078278","2008":"1611634332","2009":"1739781489","2010":"2026864469","2011":"2355652126","2012":"2472384907","2013":"2714505635","2014":"3093647227","2015":"3097324740","2016":"3007029030","Country Name":"Burundi","Country Code":"BDI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"11658722591","1961":"12400145222","1962":"13264015675","1963":"14260017387","1964":"15960106681","1965":"17371457608","1966":"18651883472","1967":"19992040788","1968":"21376353113","1969":"23710735895","1970":"26849173618","1971":"29981318395","1972":"37408626615","1973":"47999408508","1974":"56333063691","1975":"66029811341","1976":"71494607106","1977":"83283407091","1978":"1,02E+11","1979":"1,17E+11","1980":"1,28E+11","1981":"1,05E+11","1982":"92588982518","1983":"87650998817","1984":"83795759983","1985":"86730120728","1986":"1,21E+11","1987":"1,50E+11","1988":"1,63E+11","1989":"1,65E+11","1990":"2,06E+11","1991":"2,12E+11","1992":"2,36E+11","1993":"2,26E+11","1994":"2,46E+11","1995":"2,90E+11","1996":"2,81E+11","1997":"2,55E+11","1998":"2,61E+11","1999":"2,60E+11","2000":"2,38E+11","2001":"2,38E+11","2002":"2,59E+11","2003":"3,19E+11","2004":"3,71E+11","2005":"3,87E+11","2006":"4,10E+11","2007":"4,72E+11","2008":"5,19E+11","2009":"4,85E+11","2010":"4,84E+11","2011":"5,27E+11","2012":"4,98E+11","2013":"5,20E+11","2014":"5,32E+11","2015":"4,55E+11","2016":"4,66E+11","Country Name":"Belgium","Country Code":"BEL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"226195579,4","1961":"235668222,4","1962":"236434906,8","1963":"253927646,5","1964":"269818988,3","1965":"289908720,6","1966":"302925280,8","1967":"306222000,4","1968":"326323097,4","1969":"330748211,5","1970":"333627758,2","1971":"335072975,2","1972":"410331901","1973":"504376035,7","1974":"554654787","1975":"676870140,3","1976":"698408244,4","1977":"750049739,2","1978":"928843304,8","1979":"1186231265","1980":"1405251547","1981":"1291119965","1982":"1267778489","1983":"1095348303","1984":"1051133927","1985":"1045712703","1986":"1336102041","1987":"1562412030","1988":"1620246187","1989":"1502294411","1990":"1959965244","1991":"1986437860","1992":"1695315306","1993":"2274557914","1994":"1598075932","1995":"2169627251","1996":"2361116588","1997":"2268301538","1998":"2455092582","1999":"2689787918","2000":"2569186643","2001":"2680213931","2002":"3054571082","2003":"3905366188","2004":"4521424807","2005":"4803702821","2006":"5142380779","2007":"5969535132","2008":"7132787397","2009":"7097198712","2010":"6970240895","2011":"7814081156","2012":"8152554487","2013":"9156748441","2014":"9707432016","2015":"8290986804","2016":"8583031398","Country Name":"Benin","Country Code":"BEN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"330442817,2","1961":"350247237,1","1962":"379567178,3","1963":"394040749,1","1964":"410321785,6","1965":"422916848,4","1966":"433889831,6","1967":"450753993,2","1968":"460442864,2","1969":"478298781,5","1970":"458404330,1","1971":"482411279","1972":"578595584","1973":"674773821,2","1974":"751133642,6","1975":"939972703,5","1976":"976547572,2","1977":"1131225279","1978":"1475584037","1979":"1748480982","1980":"1928720390","1981":"1775842680","1982":"1754450379","1983":"1600278756","1984":"1459880353","1985":"1552493414","1986":"2036303381","1987":"2369835439","1988":"2616040646","1989":"2615588546","1990":"3101301781","1991":"3135045684","1992":"2240264712","1993":"2332018011","1994":"1895290965","1995":"2379518099","1996":"2586550747","1997":"2447669404","1998":"2804902724","1999":"2993753187","2000":"2628920056","2001":"2812845514","2002":"3205592290","2003":"4205691222","2004":"4838551100","2005":"5462709498","2006":"5844669846","2007":"6771277871","2008":"8369637065","2009":"8369175126","2010":"8979966766","2011":"10724061339","2012":"11166061508","2013":"11934606510","2014":"12400688571","2015":"11148759325","2016":"12115155932","Country Name":"Burkina Faso","Country Code":"BFA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"4274893913","1961":"4817580184","1962":"5081413340","1963":"5319458351","1964":"5386054619","1965":"5906636557","1966":"6439687598","1967":"7253575399","1968":"7483685473","1969":"8471006101","1970":"8992721809","1971":"8751842840","1972":"6288245867","1973":"8086725729","1974":"12512460520","1975":"19448348073","1976":"10117113333","1977":"9651149302","1978":"13281767143","1979":"15565480322","1980":"18138049096","1981":"20249694002","1982":"18525399202","1983":"17609048822","1984":"18920840000","1985":"22278423077","1986":"21774033333","1987":"24298032258","1988":"26579005760","1989":"28781714764","1990":"31598341234","1991":"30957483291","1992":"31708873955","1993":"33166520085","1994":"33768662171","1995":"37939748051","1996":"46438482370","1997":"48244308275","1998":"49984559471","1999":"51270569884","2000":"53369787319","2001":"53991289844","2002":"54724081491","2003":"60158929188","2004":"65108544250","2005":"69442943089","2006":"71819083684","2007":"79611888213","2008":"91631278239","2009":"1,02E+11","2010":"1,15E+11","2011":"1,29E+11","2012":"1,33E+11","2013":"1,50E+11","2014":"1,73E+11","2015":"1,95E+11","2016":"2,21E+11","Country Name":"Bangladesh","Country Code":"BGD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"19839230769","1981":"19870000000","1982":"19342000000","1983":"16563666667","1984":"17594944444","1985":"17155421053","1986":"20249294118","1987":"28101000000","1988":"22555941176","1989":"21988444444","1990":"20632090909","1991":"10943548387","1992":"10350515464","1993":"10829710145","1994":"9697416974","1995":"13063422619","1996":"10109404160","1997":"11195630537","1998":"14630974778","1999":"13495062850","2000":"13148099185","2001":"14135393876","2002":"16360346654","2003":"21074775206","2004":"26094622564","2005":"29821662537","2006":"34304448150","2007":"44765733380","2008":"54666642734","2009":"51783454184","2010":"50610031136","2011":"57418391042","2012":"53903028252","2013":"55758744571","2014":"56732006512","2015":"50199117547","2016":"52395164027","Country Name":"Bulgaria","Country Code":"BGR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"3072698328","1981":"3467819149","1982":"3645744681","1983":"3735106383","1984":"3905585106","1985":"3651861702","1986":"3052393617","1987":"3392021011","1988":"3702393617","1989":"3863563830","1990":"4229787234","1991":"4616223404","1992":"4751063830","1993":"5200265957","1994":"5567553457","1995":"5849467819","1996":"6101861436","1997":"6349202394","1998":"6183776596","1999":"6621010372","2000":"9062906915","2001":"8976207713","2002":"9632155053","2003":"11074822074","2004":"13150166755","2005":"15968726862","2006":"18505053191","2007":"21730000000","2008":"25710877660","2009":"22938218085","2010":"25713271277","2011":"29157446809","2012":"30749308511","2013":"32898670213","2014":"33387712766","2015":"31125851064","2016":"31858510638","Country Name":"Bahrain","Country Code":"BHR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"169803921,6","1961":"190098039,2","1962":"212254902","1963":"237745098","1964":"266666666,7","1965":"300392156,9","1966":"340000000","1967":"390196078,4","1968":"444901960,8","1969":"528137254,9","1970":"538423153,7","1971":"573400000","1972":"590900000","1973":"670900000","1974":"632400000","1975":"596200000","1976":"642100000","1977":"713000000","1978":"832400000","1979":"1139800100","1980":"1335300000","1981":"1426500000","1982":"1578300000","1983":"1732800000","1984":"2041100000","1985":"2320699900","1986":"2472500000","1987":"2713999900","1988":"2817900000","1989":"3062000000","1990":"3166000000","1991":"3111160000","1992":"3109000000","1993":"3092000000","1994":"3259000000","1995":"3429000000","1996":"3609000000","1997":"4961119000","1998":"5353524000","1999":"6019972000","2000":"6327552000","2001":"6516651000","2002":"6957996000","2003":"6949317000","2004":"7094413000","2005":"7706222000","2006":"7965588000","2007":"8318996000","2008":"8247000000","2009":"7820000000","2010":"7910000000","2011":"7890000000","2012":"8399000000","2013":"8522000000","2014":"8618000000","2015":"8854000000","2016":"9047000000","Country Name":"Bahamas","Country Code":"BHS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"1255802469","1995":"1866572954","1996":"2786045322","1997":"3671816504","1998":"4116699437","1999":"4685729739","2000":"5505984456","2001":"5748990666","2002":"6651226179","2003":"8370020196","2004":"10022840635","2005":"11225138297","2006":"12866524918","2007":"15776422673","2008":"19101454464","2009":"17600630727","2010":"17164279813","2011":"18629346791","2012":"17207367626","2013":"18154290272","2014":"18521475376","2015":"16173806635","2016":"16559695719","Country Name":"Bosnia and Herz.","Country Code":"BIH","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"21650000000","1991":"17420000000","1992":"17120370370","1993":"16286280992","1994":"14932192011","1995":"13972630804","1996":"14756861538","1997":"14128412417","1998":"15222014828","1999":"12138485329","2000":"12736856828","2001":"12354820144","2002":"14594925393","2003":"17825436035","2004":"23141587718","2005":"30210091837","2006":"36961821894","2007":"45275747861","2008":"60752177439","2009":"49208656976","2010":"57231904543","2011":"61762341357","2012":"65685903833","2013":"75527537703","2014":"78813049850","2015":"56454775871","2016":"47433442293","Country Name":"Belarus","Country Code":"BLR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"28071888,56","1961":"29964370,71","1962":"31856922,86","1963":"33749405,01","1964":"36193826,12","1965":"40069930,07","1966":"44405594,41","1967":"47379310,34","1968":"44910179,64","1969":"47305389,22","1970":"53233532,93","1971":"59207317,07","1972":"66062500","1973":"78343558,28","1974":"103216374,3","1975":"118066298,3","1976":"96905829,6","1977":"117650000","1978":"136300000","1979":"151800000","1980":"194750000","1981":"192900000","1982":"179250000","1983":"189000000","1984":"210900000","1985":"209150000","1986":"227850000","1987":"276550000","1988":"314900000","1989":"363150000","1990":"413050000","1991":"444720750","1992":"518239100","1993":"559858250","1994":"580863700","1995":"620140400","1996":"641383800","1997":"654314350","1998":"688992450","1999":"732732350","2000":"832072450","2001":"871860600","2002":"932551850","2003":"990374050","2004":"1057845500","2005":"1114222550","2006":"1217467600","2007":"1290573400","2008":"1368625150","2009":"1336957250","2010":"1397113450","2011":"1486712300","2012":"1573618750","2013":"1613705850","2014":"1706497950","2015":"1742545900","2016":"1765256400","Country Name":"Belize","Country Code":"BLZ","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"84466654,08","1961":"89249986,7","1962":"94149985,97","1963":"96366652,31","1964":"107566650,6","1965":"114339049","1966":"134173373,8","1967":"155102984,6","1968":"150000000","1969":"164900000","1970":"186300000","1971":"211100000","1972":"235400000","1973":"269500000","1974":"312600000","1975":"345000000","1976":"386300000","1977":"447000000","1978":"475800000","1979":"517200000","1980":"613299968","1981":"739100032","1982":"785500032","1983":"889400000","1984":"985699968","1985":"1039500032","1986":"1173500032","1987":"1296499968","1988":"1415100032","1989":"1501500032","1990":"1592400000","1991":"1634899968","1992":"1679900032","1993":"1820359936","1994":"1867160064","1995":"2030749952","1996":"2695390000","1997":"2932827000","1998":"3130748000","1999":"3324433000","2000":"3480219000","2001":"3680483000","2002":"3937228000","2003":"4186525000","2004":"4484703000","2005":"4868136000","2006":"5414299000","2007":"5895048000","2008":"6109928000","2009":"5806378000","2010":"5744414000","2011":"5550771000","2012":"5537537000","2013":"5573710000","2014":"","2015":"","2016":"","Country Name":"Bermuda","Country Code":"BMU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"563110051,9","1961":"612518906,8","1962":"669722541,3","1963":"721142957,3","1964":"812543072,5","1965":"908874537","1966":"994044553,9","1967":"1084059815","1968":"908874537","1969":"964615698,7","1970":"1017171717","1971":"1095454545","1972":"1257615645","1973":"1263018491","1974":"2100249875","1975":"2404697651","1976":"2732083958","1977":"3227436282","1978":"3758220890","1979":"4421343606","1980":"4537487843","1981":"5891606676","1982":"5594118400","1983":"5422656262","1984":"6169481549","1985":"5377277407","1986":"3959379488","1987":"4347956299","1988":"4597615563","1989":"4715978868","1990":"4867582620","1991":"5343274312","1992":"5643893347","1993":"5734676561","1994":"5981244887","1995":"6715220507","1996":"7396966657","1997":"7925673448","1998":"8497545598","1999":"8285075872","2000":"8397912509","2001":"8141537938","2002":"7905485216","2003":"8082364868","2004":"8773451739","2005":"9549077869","2006":"11451869165","2007":"13120159976","2008":"16674324634","2009":"17339992165","2010":"19649631308","2011":"23963033444","2012":"27084497540","2013":"30659338929","2014":"32996187988","2015":"33000198263","2016":"33806395514","Country Name":"Bolivia","Country Code":"BOL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"15165569913","1961":"15236854859","1962":"19926293839","1963":"23021477292","1964":"21211892260","1965":"21790035117","1966":"27062716578","1967":"30591834054","1968":"33875881876","1969":"37458898244","1970":"42327600098","1971":"49204456700","1972":"58539008786","1973":"79279057731","1974":"1,05E+11","1975":"1,24E+11","1976":"1,53E+11","1977":"1,76E+11","1978":"2,01E+11","1979":"2,25E+11","1980":"2,35E+11","1981":"2,64E+11","1982":"2,82E+11","1983":"2,03E+11","1984":"2,09E+11","1985":"2,23E+11","1986":"2,68E+11","1987":"2,94E+11","1988":"3,30E+11","1989":"4,26E+11","1990":"4,62E+11","1991":"6,03E+11","1992":"4,01E+11","1993":"4,38E+11","1994":"5,58E+11","1995":"7,86E+11","1996":"8,50E+11","1997":"8,83E+11","1998":"8,64E+11","1999":"5,99E+11","2000":"6,55E+11","2001":"5,59E+11","2002":"5,08E+11","2003":"5,58E+11","2004":"6,69E+11","2005":"8,92E+11","2006":"1,11E+12","2007":"1,40E+12","2008":"1,70E+12","2009":"1,67E+12","2010":"2,21E+12","2011":"2,62E+12","2012":"2,47E+12","2013":"2,47E+12","2014":"2,46E+12","2015":"1,80E+12","2016":"1,80E+12","Country Name":"Brazil","Country Code":"BRA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"1012264036","1981":"1114104642","1982":"1164059790","1983":"1235775211","1984":"1347033587","1985":"1409740726","1986":"1547790025","1987":"1704440883","1988":"1812891396","1989":"2006394477","1990":"2012302520","1991":"2020744654","1992":"1957168344","1993":"2063267996","1994":"2151285060","1995":"2261996995","1996":"2411846465","1997":"2549260575","1998":"2874413287","1999":"3012021852","2000":"3121619808","2001":"3116632413","2002":"3169612598","2003":"3274856571","2004":"3514370691","2005":"3897467234","2006":"4303275572","2007":"4546115388","2008":"4595264650","2009":"4601250000","2010":"4446800000","2011":"4358900000","2012":"4332150000","2013":"4371200000","2014":"4352700000","2015":"4421800000","2016":"4587550000","Country Name":"Barbados","Country Code":"BRB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"114040245,7","1966":"132758395,4","1967":"139030445,6","1968":"160819286,6","1969":"161211289,7","1970":"179080099,3","1971":"197523179,2","1972":"270818555,8","1973":"433092003,6","1974":"1073577086","1975":"1168304306","1976":"1423061357","1977":"1732721161","1978":"1941600704","1979":"2803780006","1980":"4928824958","1981":"4366213850","1982":"4264252336","1983":"3844723142","1984":"3782523088","1985":"3523612563","1986":"2358592817","1987":"2754463438","1988":"2690717551","1989":"2985467979","1990":"3520551724","1991":"3701667053","1992":"4183548189","1993":"4105706152","1994":"4087337960","1995":"4734020037","1996":"5115602837","1997":"5197332974","1998":"4051147228","1999":"4600000000","2000":"6001153306","2001":"5601090584","2002":"5843329108","2003":"6557333085","2004":"7872333215","2005":"9531402848","2006":"11470703002","2007":"12247694247","2008":"14393099069","2009":"10732366286","2010":"13707370737","2011":"18525319978","2012":"19048495519","2013":"18093829923","2014":"17123125493","2015":"12930394938","2016":"11400266877","Country Name":"Brunei","Country Code":"BRN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"135653295,2","1981":"146391639,7","1982":"148934334","1983":"165585940,6","1984":"169264991,2","1985":"172217502","1986":"201375725,6","1987":"253182453,7","1988":"283855833,3","1989":"275949889,1","1990":"299787275,8","1991":"250045839,9","1992":"250794359,6","1993":"235239570,4","1994":"270801565,2","1995":"303053462,8","1996":"316420860,9","1997":"365964500,1","1998":"376955087,3","1999":"419035810,5","2000":"439158233,2","2001":"476360697,2","2002":"537050133,7","2003":"622026107,8","2004":"702682019","2005":"818869145,1","2006":"897731524,9","2007":"1196091805","2008":"1258332337","2009":"1264758198","2010":"1585472534","2011":"1820207626","2012":"1823692110","2013":"1798333726","2014":"1958819915","2015":"2057947621","2016":"2236933238","Country Name":"Bhutan","Country Code":"BTN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"30412308,99","1961":"32902336,64","1962":"35643207,63","1963":"38091150,57","1964":"41613969,05","1965":"45790869,75","1966":"51464435,15","1967":"58646443,51","1968":"66248256,62","1969":"77356914,08","1970":"96245114,46","1971":"126957494,4","1972":"165258093,9","1973":"244129088","1974":"306033848,4","1975":"355172413,8","1976":"372010119,6","1977":"451603325,4","1978":"590376720,6","1979":"819877300,6","1980":"1060923829","1981":"1073861599","1982":"1014907255","1983":"1172258182","1984":"1240796365","1985":"1114764007","1986":"1392634772","1987":"1965274882","1988":"2644536804","1989":"3083800685","1990":"3790567052","1991":"3942792837","1992":"4146513722","1993":"4160086253","1994":"4259330999","1995":"4730611067","1996":"4847752843","1997":"5020214747","1998":"4790458837","1999":"5484257417","2000":"5788329609","2001":"5489608300","2002":"5438857107","2003":"7511582173","2004":"8957467707","2005":"9931134941","2006":"10126940513","2007":"10939053367","2008":"10945070442","2009":"10267133178","2010":"12786654366","2011":"15682926890","2012":"14686278714","2013":"14915780533","2014":"16259445050","2015":"14430608463","2016":"15274861068","Country Name":"Botswana","Country Code":"BWA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"112155598,9","1961":"123134584,5","1962":"124482748,9","1963":"129379097,9","1964":"142025069,5","1965":"150574816,3","1966":"157930041,9","1967":"163820538,9","1968":"191767437","1969":"188039191,3","1970":"189106554,5","1971":"201450768,4","1972":"230317908","1973":"271183061,4","1974":"281398668,2","1975":"378660016,3","1976":"451152450","1977":"507298120,7","1978":"610578523,8","1979":"700764892,7","1980":"797048028,8","1981":"694803502,7","1982":"748312283,7","1983":"658679394,9","1984":"637820620,7","1985":"864849765,1","1986":"1122265026","1987":"1200991826","1988":"1264899368","1989":"1233930277","1990":"1440711396","1991":"1377375031","1992":"1411917558","1993":"1278781167","1994":"851174350,6","1995":"1115389732","1996":"1007791186","1997":"937741468","1998":"967338348,7","1999":"999477510,7","2000":"914500299,1","2001":"931833302,8","2002":"991387870,1","2003":"1139754799","2004":"1270080251","2005":"1350301057","2006":"1460562038","2007":"1698125618","2008":"1985239277","2009":"1981728141","2010":"1986014846","2011":"2212699747","2012":"2184183758","2013":"1518565219","2014":"1702898940","2015":"1583776760","2016":"1756124677","Country Name":"Central African Rep.","Country Code":"CAF","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"41093453545","1961":"40767969454","1962":"41978852041","1963":"44657169109","1964":"48882938810","1965":"53909570342","1966":"60358632035","1967":"64768831262","1968":"70759031842","1969":"77887510242","1970":"87896095224","1971":"99271961478","1972":"1,13E+11","1973":"1,31E+11","1974":"1,60E+11","1975":"1,74E+11","1976":"2,07E+11","1977":"2,12E+11","1978":"2,19E+11","1979":"2,43E+11","1980":"2,74E+11","1981":"3,06E+11","1982":"3,14E+11","1983":"3,41E+11","1984":"3,55E+11","1985":"3,65E+11","1986":"3,77E+11","1987":"4,31E+11","1988":"5,07E+11","1989":"5,65E+11","1990":"5,94E+11","1991":"6,10E+11","1992":"5,92E+11","1993":"5,77E+11","1994":"5,78E+11","1995":"6,04E+11","1996":"6,29E+11","1997":"6,53E+11","1998":"6,32E+11","1999":"6,76E+11","2000":"7,42E+11","2001":"7,36E+11","2002":"7,58E+11","2003":"8,92E+11","2004":"1,02E+12","2005":"1,17E+12","2006":"1,32E+12","2007":"1,46E+12","2008":"1,55E+12","2009":"1,37E+12","2010":"1,61E+12","2011":"1,79E+12","2012":"1,82E+12","2013":"1,84E+12","2014":"1,79E+12","2015":"1,55E+12","2016":"1,53E+12","Country Name":"Canada","Country Code":"CAN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2,56E+11","1991":"2,43E+11","1992":"2,60E+11","1993":"2,74E+11","1994":"3,11E+11","1995":"3,86E+11","1996":"4,13E+11","1997":"4,09E+11","1998":"4,47E+11","1999":"4,34E+11","2000":"4,28E+11","2001":"4,68E+11","2002":"5,27E+11","2003":"6,34E+11","2004":"7,62E+11","2005":"8,86E+11","2006":"1,00E+12","2007":"1,26E+12","2008":"1,52E+12","2009":"1,28E+12","2010":"1,31E+12","2011":"1,45E+12","2012":"1,35E+12","2013":"1,42E+12","2014":"1,46E+12","2015":"1,28E+12","2016":"1,30E+12","Country Name":"Central Europe and the Baltics","Country Code":"CEB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"9522746719","1961":"10712712465","1962":"11879982759","1963":"13063643796","1964":"14480556572","1965":"15346741670","1966":"16480058705","1967":"17740013179","1968":"18942729779","1969":"20524886616","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"1,19E+11","1981":"1,09E+11","1982":"1,11E+11","1983":"1,11E+11","1984":"1,06E+11","1985":"1,07E+11","1986":"1,54E+11","1987":"1,93E+11","1988":"2,09E+11","1989":"2,02E+11","1990":"2,57E+11","1991":"2,60E+11","1992":"2,71E+11","1993":"2,64E+11","1994":"2,92E+11","1995":"3,42E+11","1996":"3,30E+11","1997":"2,87E+11","1998":"2,95E+11","1999":"2,90E+11","2000":"2,72E+11","2001":"2,79E+11","2002":"3,01E+11","2003":"3,52E+11","2004":"3,94E+11","2005":"4,08E+11","2006":"4,29E+11","2007":"4,77E+11","2008":"5,52E+11","2009":"5,40E+11","2010":"5,81E+11","2011":"6,96E+11","2012":"6,65E+11","2013":"6,85E+11","2014":"7,03E+11","2015":"6,71E+11","2016":"6,60E+11","Country Name":"Switzerland","Country Code":"CHE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"5945677377","1999":"6262740657","2000":"6439703435","2001":"6232906290","2002":"6663669065","2003":"7332244898","2004":"8553643354","2005":"8827272727","2006":"9676172953","2007":"11514605842","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Channel Islands","Country Code":"CHI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"4110000000","1961":"4609727273","1962":"5416272727","1963":"5668187500","1964":"5982347826","1965":"6026593750","1966":"7072641026","1967":"7013196078","1968":"7167086957","1969":"8377093023","1970":"9126309735","1971":"10884114754","1972":"11853817308","1973":"16836261173","1974":"16210404184","1975":"7622217352","1976":"10341925249","1977":"13962893422","1978":"15989933708","1979":"21803696985","1980":"29036709872","1981":"34509878044","1982":"25325893206","1983":"20355959237","1984":"19622527480","1985":"17702885394","1986":"18891048819","1987":"22255407685","1988":"26040229793","1989":"29885685143","1990":"33113887818","1991":"37834793730","1992":"45964327559","1993":"49297773130","1994":"57008425296","1995":"73447063319","1996":"78039572222","1997":"84952360922","1998":"81577430181","1999":"75173794497","2000":"77860932152","2001":"70979923960","2002":"69736811435","2003":"75643459840","2004":"99210392858","2005":"1,23E+11","2006":"1,55E+11","2007":"1,74E+11","2008":"1,80E+11","2009":"1,72E+11","2010":"2,19E+11","2011":"2,52E+11","2012":"2,67E+11","2013":"2,78E+11","2014":"2,61E+11","2015":"2,43E+11","2016":"2,47E+11","Country Name":"Chile","Country Code":"CHL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"59716467625","1961":"50056868958","1962":"47209359006","1963":"50706799903","1964":"59708343489","1965":"70436266147","1966":"76720285970","1967":"72881631327","1968":"70846535056","1969":"79705906247","1970":"92602973434","1971":"99800958648","1972":"1,14E+11","1973":"1,39E+11","1974":"1,44E+11","1975":"1,63E+11","1976":"1,54E+11","1977":"1,75E+11","1978":"1,50E+11","1979":"1,78E+11","1980":"1,91E+11","1981":"1,96E+11","1982":"2,05E+11","1983":"2,31E+11","1984":"2,60E+11","1985":"3,09E+11","1986":"3,01E+11","1987":"2,73E+11","1988":"3,12E+11","1989":"3,48E+11","1990":"3,61E+11","1991":"3,83E+11","1992":"4,27E+11","1993":"4,45E+11","1994":"5,64E+11","1995":"7,35E+11","1996":"8,64E+11","1997":"9,62E+11","1998":"1,03E+12","1999":"1,09E+12","2000":"1,21E+12","2001":"1,34E+12","2002":"1,47E+12","2003":"1,66E+12","2004":"1,96E+12","2005":"2,29E+12","2006":"2,75E+12","2007":"3,55E+12","2008":"4,60E+12","2009":"5,11E+12","2010":"6,10E+12","2011":"7,57E+12","2012":"8,56E+12","2013":"9,61E+12","2014":"1,05E+13","2015":"1,11E+13","2016":"1,12E+13","Country Name":"China","Country Code":"CHN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"546203561,6","1961":"618245639,2","1962":"645284344,7","1963":"761047045,8","1964":"921063266,4","1965":"919771356,4","1966":"1024103034","1967":"1082922892","1968":"1281281246","1969":"1361360157","1970":"1455482990","1971":"1584128262","1972":"1849400600","1973":"2508421235","1974":"3070151901","1975":"3893839190","1976":"4662053708","1977":"6265067858","1978":"7900524898","1979":"9142935858","1980":"10175615442","1981":"8432588484","1982":"7567109767","1983":"6838185419","1984":"6841638715","1985":"6977650069","1986":"9158302205","1987":"10087653189","1988":"10255170460","1989":"9757410614","1990":"10795850107","1991":"10492628915","1992":"11152971316","1993":"11045759469","1994":"8313557450","1995":"11000146839","1996":"12139234939","1997":"11722142706","1998":"12612033729","1999":"12376639823","2000":"10717022463","2001":"11192560827","2002":"12346919216","2003":"15306602560","2004":"16554441847","2005":"17084928927","2006":"17800887796","2007":"20343635320","2008":"24224903100","2009":"24277493862","2010":"24884505035","2011":"25381616734","2012":"27040562587","2013":"31273049200","2014":"35372603446","2015":"32828516580","2016":"36164644633","Country Name":"Cote d'Ivoire","Country Code":"CIV","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"618740988","1961":"657597382,8","1962":"699373701,2","1963":"723624365,3","1964":"782384527,8","1965":"814139855,8","1966":"853268771,1","1967":"934079050,3","1968":"1053077155","1969":"1152418515","1970":"1160002261","1971":"1233991075","1972":"1430951332","1973":"1758727395","1974":"2255496995","1975":"2752771044","1976":"3076592431","1977":"3366368665","1978":"4409920644","1979":"5811444661","1980":"6740756569","1981":"7636345827","1982":"7322914570","1983":"7381854747","1984":"7801858825","1985":"8148223604","1986":"10621158533","1987":"12302471429","1988":"12493286762","1989":"11140055364","1990":"11151578051","1991":"12434370005","1992":"11396310990","1993":"13532137228","1994":"9220470913","1995":"8733231184","1996":"9732328116","1997":"9840553236","1998":"9629649417","1999":"10486451144","2000":"9287367235","2001":"9633109350","2002":"10879778384","2003":"13621738837","2004":"15775357015","2005":"16587858857","2006":"17953066721","2007":"20431780378","2008":"23322254114","2009":"23381142147","2010":"23622483984","2011":"26587311528","2012":"26472056038","2013":"29567504655","2014":"32050817633","2015":"28415950981","2016":"24204448567","Country Name":"Cameroon","Country Code":"CMR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3359404132","1961":"3086746936","1962":"3779841410","1963":"6213185774","1964":"2881545277","1965":"4043901724","1966":"4532660145","1967":"3384063360","1968":"3909780525","1969":"5032434971","1970":"4877684933","1971":"5594770352","1972":"6173712809","1973":"7870239464","1974":"9596960174","1975":"10237343153","1976":"9648583220","1977":"12344424776","1978":"15372607995","1979":"15068422242","1980":"14394927493","1981":"12537821040","1982":"13651667371","1983":"11006712649","1984":"7857729193","1985":"7195042616","1986":"8095367168","1987":"7661625473","1988":"8861299977","1989":"9021862775","1990":"9349764580","1991":"9087965282","1992":"8206227134","1993":"10707792340","1994":"5820383306","1995":"5643439262","1996":"5771454940","1997":"6090840548","1998":"6215591270","1999":"4711259427","2000":"19088046306","2001":"7438189100","2002":"8728038525","2003":"8937567060","2004":"10297483481","2005":"11964484668","2006":"14296507096","2007":"16364029327","2008":"19206060270","2009":"18262773821","2010":"20523285374","2011":"23849009738","2012":"27463220380","2013":"30014813756","2014":"34028119333","2015":"36188521107","2016":"34998638634","Country Name":"Dem. Rep. Congo","Country Code":"COD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"131731862,6","1961":"151675739,2","1962":"166521239,9","1963":"172233430,9","1964":"185693724,8","1965":"198318063,9","1966":"220613582,4","1967":"237397428,3","1968":"251247458","1969":"265040036,1","1970":"274960699,9","1971":"322128019,3","1972":"410669262,9","1973":"541973362,5","1974":"585364635,4","1975":"767102679","1976":"754549600,5","1977":"765224030,6","1978":"878771771,3","1979":"1198749666","1980":"1705796850","1981":"1993512326","1982":"2160640567","1983":"2097274290","1984":"2193581366","1985":"2160872541","1986":"1849268215","1987":"2297753649","1988":"2212536313","1989":"2389593022","1990":"2798746051","1991":"2724853508","1992":"2933222706","1993":"1918970178","1994":"1769365439","1995":"2116003868","1996":"2540697538","1997":"2322719101","1998":"1949481381","1999":"2353909442","2000":"3219910666","2001":"2794259783","2002":"3019993739","2003":"3495868808","2004":"4648628921","2005":"6087003176","2006":"7731261311","2007":"8394688284","2008":"11859014004","2009":"9593536531","2010":"12007880590","2011":"14425607224","2012":"13677930124","2013":"14085852120","2014":"14177437627","2015":"8553154506","2016":"7833509443","Country Name":"Congo","Country Code":"COG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"4040948154","1961":"4552914000","1962":"4968603736","1963":"4838841456","1964":"5992169467","1965":"5790247619","1966":"5452762963","1967":"5727195020","1968":"5918455410","1969":"6405427874","1970":"7198360460","1971":"7820380971","1972":"8671358733","1973":"10315760000","1974":"12370029584","1975":"13098633902","1976":"15341403660","1977":"19470960619","1978":"23263511958","1979":"27940411250","1980":"33400735644","1981":"36388366869","1982":"38968039722","1983":"38729822782","1984":"38253120738","1985":"34894411352","1986":"34942489684","1987":"36373307085","1988":"39212550050","1989":"39540080200","1990":"40274204595","1991":"41239551378","1992":"49279585355","1993":"55802538219","1994":"81703500846","1995":"92507279383","1996":"97160109278","1997":"1,07E+11","1998":"98443739941","1999":"86186158685","2000":"99886577331","2001":"98203546156","2002":"97933391976","2003":"94684584163","2004":"1,17E+11","2005":"1,47E+11","2006":"1,63E+11","2007":"2,07E+11","2008":"2,44E+11","2009":"2,34E+11","2010":"2,87E+11","2011":"3,35E+11","2012":"3,70E+11","2013":"3,80E+11","2014":"3,78E+11","2015":"2,92E+11","2016":"2,82E+11","Country Name":"Colombia","Country Code":"COL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"123505640,9","1981":"114271897,3","1982":"107089552,3","1983":"111519676","1984":"107489822,7","1985":"114490697,6","1986":"162487763,9","1987":"196433684","1988":"207476554,8","1989":"198733185,9","1990":"250030760,8","1991":"246823428,9","1992":"266191040,4","1993":"263568114,4","1994":"185761822,6","1995":"231896229,6","1996":"230495751,4","1997":"212099634,7","1998":"215394066,1","1999":"222580453,8","2000":"203846427,7","2001":"220093812,2","2002":"246737679,5","2003":"317562269,4","2004":"368143118,7","2005":"380372892,6","2006":"406111873,5","2007":"462453582,9","2008":"523134897","2009":"524157261","2010":"530493353,2","2011":"586281766,8","2012":"570865941,2","2013":"618663921,9","2014":"647720707,1","2015":"565689764,6","2016":"616654490,5","Country Name":"Comoros","Country Code":"COM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"142246875,5","1981":"139468114,6","1982":"140630758,6","1983":"138476239,4","1984":"132019065","1985":"137728155,2","1986":"190651208","1987":"235253171,8","1988":"264308140,3","1989":"267448513,1","1990":"306891107,3","1991":"319827058,6","1992":"357160985,3","1993":"490417389,7","1994":"406580652,3","1995":"487148993,5","1996":"501979069,3","1997":"490608657,9","1998":"521910560,5","1999":"592416703,1","2000":"539227277,6","2001":"563024383,3","2002":"620974660,2","2003":"813963830,2","2004":"924318490,8","2005":"971977088,2","2006":"1107891063","2007":"1513934037","2008":"1789333749","2009":"1711817182","2010":"1664310770","2011":"1864824081","2012":"1751888562","2013":"1850951315","2014":"1858121723","2015":"1574288668","2016":"1617467436","Country Name":"Cabo Verde","Country Code":"CPV","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"507513830","1961":"490325181,6","1962":"479180824,3","1963":"511902136,8","1964":"542578367,2","1965":"592981162,3","1966":"647305630,2","1967":"699456618,9","1968":"773841494,3","1969":"853630203,8","1970":"984830158,5","1971":"1077152902","1972":"1238251696","1973":"1528916185","1974":"1666544754","1975":"1960863466","1976":"2412555426","1977":"3072427013","1978":"3523208810","1979":"4035519323","1980":"4831447001","1981":"2623807074","1982":"2606621255","1983":"3976453967","1984":"4593908719","1985":"4796628461","1986":"5477895475","1987":"5841132962","1988":"6063759371","1989":"6866402028","1990":"7403457319","1991":"7168999428","1992":"8528593084","1993":"9537297507","1994":"10432619390","1995":"11513472694","1996":"11618286553","1997":"12552071367","1998":"13617405420","1999":"14195623425","2000":"14949514585","2001":"15913363335","2002":"16504795453","2003":"17195867540","2004":"18529767934","2005":"19952156475","2006":"22600431878","2007":"26743874287","2008":"30612932803","2009":"30562361123","2010":"37268635287","2011":"42262697840","2012":"46473128286","2013":"49745088112","2014":"50656002896","2015":"54840103850","2016":"57435507212","Country Name":"Costa Rica","Country Code":"CRI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1922640775","1961":"2080830143","1962":"2195684581","1963":"2331959438","1964":"2519261153","1965":"2712715413","1966":"2942141442","1967":"3158211275","1968":"3140469906","1969":"3417668656","1970":"3760199659","1971":"4088013919","1972":"4732543298","1973":"5169932103","1974":"6720764012","1975":"7864013356","1976":"8070017845","1977":"9382602731","1978":"9571657514","1979":"10966585160","1980":"13453485465","1981":"14842851377","1982":"16495461076","1983":"16712010847","1984":"15923806275","1985":"15742679785","1986":"14358714160","1987":"15429015788","1988":"16357329645","1989":"16756727133","1990":"17873417058","1991":"17682124581","1992":"17403218746","1993":"18271706185","1994":"19289595454","1995":"21134882109","1996":"23041766083","1997":"25732062007","1998":"28249810017","1999":"30022260633","2000":"32252030401","2001":"33172149746","2002":"34944596086","2003":"37495408032","2004":"41173138192","2005":"46649069646","2006":"52393433351","2007":"58257681979","2008":"66480563577","2009":"55930530971","2010":"60772694300","2011":"65739442151","2012":"67860562821","2013":"68729777391","2014":"68744227742","2015":"66799701062","2016":"63540193020","Country Name":"Caribbean small states","Country Code":"CSS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"5693005200","1971":"6914658400","1972":"8135150892","1973":"9987709650","1974":"11405957317","1975":"13027415244","1976":"13789579903","1977":"14206158675","1978":"17844705325","1979":"19584443288","1980":"19912889861","1981":"20150254096","1982":"20953510235","1983":"22204940512","1984":"24039383608","1985":"22920490774","1986":"24226574634","1987":"25213935012","1988":"27458999472","1989":"27023468666","1990":"28645436569","1991":"24316556026","1992":"22085858243","1993":"22367254865","1994":"28448326757","1995":"30429803651","1996":"25017300000","1997":"25366200000","1998":"25736331247","1999":"28364615242","2000":"30565400000","2001":"31682400000","2002":"33590500000","2003":"35901200000","2004":"38203000000","2005":"42643836075","2006":"52742800000","2007":"58603900000","2008":"60806300000","2009":"62080000000","2010":"64328000000","2011":"68990000000","2012":"73141000000","2013":"77148000000","2014":"80656100000","2015":"87132800000","2016":"","Country Name":"Cuba","Country Code":"CUB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Curacao","Country Code":"CUW","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"1012444074","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"3207032513","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Cayman Islands","Country Code":"CYM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"489914760,7","1976":"576090073,7","1977":"734887974","1978":"964026512,2","1979":"1288715210","1980":"2154311277","1981":"2087496374","1982":"2159242417","1983":"2160364071","1984":"2278248953","1985":"2430411900","1986":"3090734463","1987":"3704813886","1988":"4278792597","1989":"4563482604","1990":"5591130218","1991":"5770197348","1992":"6912150456","1993":"6590291048","1994":"7425703929","1995":"9826778784","1996":"9899623588","1997":"9594298746","1998":"10353506787","1999":"10614455232","2000":"10183317625","2001":"10567304189","2002":"11618269231","2003":"14576896942","2004":"17422375000","2005":"18703146375","2006":"20403713461","2007":"24077470572","2008":"27839460964","2009":"25942622951","2010":"25562251656","2011":"27427161523","2012":"25012206090","2013":"24054965481","2014":"23308212817","2015":"19559942331","2016":"19801664168","Country Name":"Cyprus","Country Code":"CYP","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"40315847384","1991":"29557058174","1992":"34451993226","1993":"40452245779","1994":"47364869196","1995":"59537113791","1996":"66775046785","1997":"61621364981","1998":"66372594575","1999":"64719461255","2000":"61474265135","2001":"67375623427","2002":"81696651659","2003":"99300329682","2004":"1,19E+11","2005":"1,36E+11","2006":"1,55E+11","2007":"1,89E+11","2008":"2,35E+11","2009":"2,06E+11","2010":"2,07E+11","2011":"2,28E+11","2012":"2,07E+11","2013":"2,09E+11","2014":"2,08E+11","2015":"1,85E+11","2016":"1,93E+11","Country Name":"Czechia","Country Code":"CZE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"2,15E+11","1971":"2,49E+11","1972":"2,99E+11","1973":"3,97E+11","1974":"4,44E+11","1975":"4,89E+11","1976":"5,18E+11","1977":"5,98E+11","1978":"7,38E+11","1979":"8,78E+11","1980":"9,47E+11","1981":"7,97E+11","1982":"7,74E+11","1983":"7,68E+11","1984":"7,22E+11","1985":"7,30E+11","1986":"1,04E+12","1987":"1,29E+12","1988":"1,40E+12","1989":"1,39E+12","1990":"1,76E+12","1991":"1,86E+12","1992":"2,12E+12","1993":"2,07E+12","1994":"2,21E+12","1995":"2,59E+12","1996":"2,50E+12","1997":"2,22E+12","1998":"2,24E+12","1999":"2,20E+12","2000":"1,95E+12","2001":"1,95E+12","2002":"2,08E+12","2003":"2,51E+12","2004":"2,82E+12","2005":"2,86E+12","2006":"3,00E+12","2007":"3,44E+12","2008":"3,75E+12","2009":"3,42E+12","2010":"3,42E+12","2011":"3,76E+12","2012":"3,54E+12","2013":"3,75E+12","2014":"3,88E+12","2015":"3,36E+12","2016":"3,47E+12","Country Name":"Germany","Country Code":"DEU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"340989528","1986":"","1987":"373371738,3","1988":"395794538,6","1989":"409220087,1","1990":"452328087,3","1991":"462421998,5","1992":"478058304,9","1993":"466048469,2","1994":"491689220,7","1995":"497723960,6","1996":"494004647,7","1997":"502675542","1998":"514267869,3","1999":"536080148,1","2000":"551230861,9","2001":"572417440,8","2002":"591122039,6","2003":"622044665,5","2004":"666072101,8","2005":"708633194,7","2006":"768873684","2007":"847918929,1","2008":"999105339,3","2009":"1049110685","2010":"1128611700","2011":"1239144502","2012":"1353632942","2013":"1455000000","2014":"1588000000","2015":"1727000000","2016":"","Country Name":"Djibouti","Country Code":"DJI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"36370370,37","1978":"45170370,37","1979":"44296296,3","1980":"59100000","1981":"66218518,52","1982":"72051851,85","1983":"79925925,93","1984":"89848148,15","1985":"98585185,19","1986":"112074074,1","1987":"126348148,1","1988":"143766666,7","1989":"153374074,1","1990":"166322222,2","1991":"180437037","1992":"191759259,3","1993":"200418518,5","1994":"215459259,3","1995":"224037037","1996":"236444444,4","1997":"245781481,5","1998":"258440740,7","1999":"267740740,7","2000":"335845814,8","2001":"343119370,4","2002":"337695740,7","2003":"350091222,2","2004":"374771481,5","2005":"370370370,4","2006":"390370370,4","2007":"421375851,9","2008":"458190185,2","2009":"489074333,3","2010":"493824407,4","2011":"500988407,4","2012":"485905592,6","2013":"508447148,1","2014":"528178703,7","2015":"517218963","2016":"525424630","Country Name":"Dominica","Country Code":"DMA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"6248946880","1961":"6933842099","1962":"7812968114","1963":"8316692386","1964":"9506678763","1965":"10678897387","1966":"11721248101","1967":"12788479692","1968":"13196541952","1969":"15009384585","1970":"17075466667","1971":"19085681968","1972":"23232411898","1973":"30730638896","1974":"34160363583","1975":"40474400473","1976":"44575847808","1977":"49784281716","1978":"60362854967","1979":"70366280175","1980":"71127592754","1981":"61877755005","1982":"60412846239","1983":"60644833242","1984":"59105208273","1985":"62658544411","1986":"88078729452","1987":"1,09E+11","1988":"1,16E+11","1989":"1,12E+11","1990":"1,38E+11","1991":"1,39E+11","1992":"1,53E+11","1993":"1,43E+11","1994":"1,56E+11","1995":"1,85E+11","1996":"1,88E+11","1997":"1,74E+11","1998":"1,77E+11","1999":"1,78E+11","2000":"1,64E+11","2001":"1,65E+11","2002":"1,79E+11","2003":"2,18E+11","2004":"2,51E+11","2005":"2,64E+11","2006":"2,83E+11","2007":"3,19E+11","2008":"3,53E+11","2009":"3,21E+11","2010":"3,22E+11","2011":"3,44E+11","2012":"3,27E+11","2013":"3,44E+11","2014":"3,52E+11","2015":"3,01E+11","2016":"3,06E+11","Country Name":"Denmark","Country Code":"DNK","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"672399700","1961":"654100200","1962":"824100000","1963":"940799900","1964":"1025599900","1965":"888100000","1966":"983900000","1967":"1034800000","1968":"1079100000","1969":"1230500000","1970":"1485400100","1971":"1666400000","1972":"1987300000","1973":"2344699900","1974":"2925600000","1975":"3599300100","1976":"3951399900","1977":"4587100200","1978":"4774400000","1979":"5498800100","1980":"6631000100","1981":"7266999800","1982":"7964000300","1983":"8622000100","1984":"10330399700","1985":"5044592913","1986":"6122197810","1987":"5826987203","1988":"5374315190","1989":"6686592729","1990":"7073674721","1991":"9724402004","1992":"11277676880","1993":"12976408000","1994":"14511134921","1995":"16358496124","1996":"18131813001","1997":"19593869595","1998":"21171523985","1999":"21709726722","2000":"23996063503","2001":"24892521237","2002":"26571620979","2003":"21277165886","2004":"22039232610","2005":"34004033804","2006":"35952845583","2007":"44169678153","2008":"48288967303","2009":"48376555306","2010":"53954579004","2011":"57746684847","2012":"60613645121","2013":"61965942057","2014":"65231032303","2015":"68102618092","2016":"71583553488","Country Name":"Dominican Rep.","Country Code":"DOM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2723648552","1961":"2434776646","1962":"2001468868","1963":"2703014867","1964":"2909351793","1965":"3136258897","1966":"3039834559","1967":"3370843066","1968":"3852115817","1969":"4257218772","1970":"4863487493","1971":"5077222367","1972":"6761786387","1973":"8715105930","1974":"13209713643","1975":"15557934268","1976":"17728347375","1977":"20971901273","1978":"26364491313","1979":"33243422158","1980":"42345277342","1981":"44348672668","1982":"45207088716","1983":"48801369800","1984":"53698278906","1985":"57937868670","1986":"63696301893","1987":"66742267773","1988":"59089067187","1989":"55631489802","1990":"62045099643","1991":"45715367087","1992":"48003298223","1993":"49946455211","1994":"42542571306","1995":"41764052458","1996":"46941496780","1997":"48177862502","1998":"48187747529","1999":"48640574567","2000":"54790245601","2001":"54744714396","2002":"56760288974","2003":"67863829880","2004":"85324998814","2005":"1,03E+11","2006":"1,17E+11","2007":"1,35E+11","2008":"1,71E+11","2009":"1,37E+11","2010":"1,61E+11","2011":"2,00E+11","2012":"2,09E+11","2013":"2,10E+11","2014":"2,14E+11","2015":"1,65E+11","2016":"1,56E+11","Country Name":"Algeria","Country Code":"DZA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"80250607897","1961":"70446120294","1962":"64553859603","1963":"69902870222","1964":"81045260487","1965":"94581389222","1966":"1,04E+11","1967":"1,00E+11","1968":"1,01E+11","1969":"1,14E+11","1970":"1,27E+11","1971":"1,36E+11","1972":"1,55E+11","1973":"1,95E+11","1974":"2,20E+11","1975":"2,47E+11","1976":"2,51E+11","1977":"2,90E+11","1978":"2,80E+11","1979":"3,25E+11","1980":"3,75E+11","1981":"4,00E+11","1982":"4,20E+11","1983":"4,40E+11","1984":"4,78E+11","1985":"5,24E+11","1986":"5,22E+11","1987":"5,16E+11","1988":"5,72E+11","1989":"6,19E+11","1990":"6,63E+11","1991":"7,20E+11","1992":"8,06E+11","1993":"8,85E+11","1994":"1,06E+12","1995":"1,31E+12","1996":"1,51E+12","1997":"1,56E+12","1998":"1,43E+12","1999":"1,58E+12","2000":"1,74E+12","2001":"1,85E+12","2002":"2,05E+12","2003":"2,32E+12","2004":"2,69E+12","2005":"3,11E+12","2006":"3,74E+12","2007":"4,73E+12","2008":"5,98E+12","2009":"6,49E+12","2010":"7,87E+12","2011":"9,63E+12","2012":"1,07E+13","2013":"1,19E+13","2014":"1,27E+13","2015":"1,33E+13","2016":"1,35E+13","Country Name":"East Asia & Pacific (excluding high income)","Country Code":"EAP","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1,52E+11","1961":"1,53E+11","1962":"1,59E+11","1963":"1,68E+11","1964":"1,92E+11","1965":"2,10E+11","1966":"2,07E+11","1967":"2,18E+11","1968":"2,36E+11","1969":"2,63E+11","1970":"2,78E+11","1971":"3,01E+11","1972":"3,30E+11","1973":"4,23E+11","1974":"5,93E+11","1975":"6,36E+11","1976":"6,94E+11","1977":"7,77E+11","1978":"8,60E+11","1979":"1,05E+12","1980":"1,29E+12","1981":"1,44E+12","1982":"1,37E+12","1983":"1,39E+12","1984":"1,37E+12","1985":"1,40E+12","1986":"1,42E+12","1987":"1,43E+12","1988":"1,54E+12","1989":"1,57E+12","1990":"1,81E+12","1991":"1,91E+12","1992":"2,10E+12","1993":"2,30E+12","1994":"2,41E+12","1995":"2,47E+12","1996":"2,69E+12","1997":"2,88E+12","1998":"2,84E+12","1999":"3,01E+12","2000":"3,27E+12","2001":"3,22E+12","2002":"3,13E+12","2003":"3,50E+12","2004":"4,07E+12","2005":"4,74E+12","2006":"5,43E+12","2007":"6,45E+12","2008":"7,27E+12","2009":"6,99E+12","2010":"8,49E+12","2011":"9,57E+12","2012":"9,96E+12","2013":"1,02E+13","2014":"1,04E+13","2015":"1,01E+13","2016":"1,03E+13","Country Name":"Early-demographic dividend","Country Code":"EAR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1,53E+11","1961":"1,54E+11","1962":"1,57E+11","1963":"1,76E+11","1964":"2,02E+11","1965":"2,25E+11","1966":"2,51E+11","1967":"2,72E+11","1968":"3,00E+11","1969":"3,46E+11","1970":"4,07E+11","1971":"4,52E+11","1972":"5,60E+11","1973":"7,39E+11","1974":"8,50E+11","1975":"9,31E+11","1976":"1,02E+12","1977":"1,22E+12","1978":"1,54E+12","1979":"1,67E+12","1980":"1,81E+12","1981":"1,99E+12","1982":"1,95E+12","1983":"2,07E+12","1984":"2,22E+12","1985":"2,36E+12","1986":"3,08E+12","1987":"3,60E+12","1988":"4,33E+12","1989":"4,53E+12","1990":"4,74E+12","1991":"5,34E+12","1992":"5,83E+12","1993":"6,54E+12","1994":"7,30E+12","1995":"8,30E+12","1996":"7,99E+12","1997":"7,65E+12","1998":"6,86E+12","1999":"7,66E+12","2000":"8,28E+12","2001":"7,71E+12","2002":"7,83E+12","2003":"8,61E+12","2004":"9,65E+12","2005":"1,03E+13","2006":"1,09E+13","2007":"1,22E+13","2008":"1,41E+13","2009":"1,45E+13","2010":"1,69E+13","2011":"1,96E+13","2012":"2,10E+13","2013":"2,13E+13","2014":"2,19E+13","2015":"2,18E+13","2016":"2,25E+13","Country Name":"East Asia & Pacific","Country Code":"EAS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"9,04E+11","1990":"9,60E+11","1991":"9,27E+11","1992":"8,53E+11","1993":"8,38E+11","1994":"7,28E+11","1995":"7,77E+11","1996":"7,88E+11","1997":"8,20E+11","1998":"7,72E+11","1999":"6,50E+11","2000":"7,20E+11","2001":"7,17E+11","2002":"8,20E+11","2003":"1,04E+12","2004":"1,37E+12","2005":"1,73E+12","2006":"2,11E+12","2007":"2,73E+12","2008":"3,37E+12","2009":"2,66E+12","2010":"3,16E+12","2011":"3,87E+12","2012":"4,07E+12","2013":"4,30E+12","2014":"4,08E+12","2015":"3,12E+12","2016":"2,98E+12","Country Name":"Europe & Central Asia (excluding high income)","Country Code":"ECA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"4,33E+11","1961":"4,61E+11","1962":"5,04E+11","1963":"5,55E+11","1964":"6,15E+11","1965":"6,69E+11","1966":"7,27E+11","1967":"7,82E+11","1968":"8,16E+11","1969":"8,96E+11","1970":"1,01E+12","1971":"1,14E+12","1972":"1,36E+12","1973":"1,73E+12","1974":"1,95E+12","1975":"2,28E+12","1976":"2,37E+12","1977":"2,69E+12","1978":"3,28E+12","1979":"4,02E+12","1980":"4,55E+12","1981":"4,05E+12","1982":"3,90E+12","1983":"3,78E+12","1984":"3,64E+12","1985":"3,76E+12","1986":"5,14E+12","1987":"6,35E+12","1988":"7,07E+12","1989":"7,22E+12","1990":"8,84E+12","1991":"9,12E+12","1992":"9,78E+12","1993":"8,99E+12","1994":"9,40E+12","1995":"1,08E+13","1996":"1,11E+13","1997":"1,05E+13","1998":"1,07E+13","1999":"1,06E+13","2000":"1,00E+13","2001":"1,01E+13","2002":"1,11E+13","2003":"1,35E+13","2004":"1,57E+13","2005":"1,67E+13","2006":"1,81E+13","2007":"2,12E+13","2008":"2,32E+13","2009":"2,04E+13","2010":"2,09E+13","2011":"2,31E+13","2012":"2,23E+13","2013":"2,33E+13","2014":"2,36E+13","2015":"2,03E+13","2016":"2,02E+13","Country Name":"Europe & Central Asia","Country Code":"ECS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1010325138","1961":"979108806,8","1962":"958598195","1963":"1038389642","1964":"1156150890","1965":"2387048255","1966":"2429309514","1967":"2553596092","1968":"2582180794","1969":"3112166848","1970":"2862504170","1971":"2754220263","1972":"3185987235","1973":"3891755552","1974":"6599259421","1975":"7731677257","1976":"9091924305","1977":"11026346590","1978":"11922502171","1979":"14175166008","1980":"17881514683","1981":"21810767209","1982":"19929853575","1983":"17152483214","1984":"16912515183","1985":"17149094590","1986":"15314143988","1987":"13945431882","1988":"13051886552","1989":"13890828708","1990":"15239278100","1991":"16988535268","1992":"18094238119","1993":"18938717359","1994":"22708673337","1995":"24432884442","1996":"25226393197","1997":"28162053027","1998":"27981896948","1999":"19645272636","2000":"18327764882","2001":"24468324000","2002":"28548945000","2003":"32432859000","2004":"36591661000","2005":"41507085000","2006":"46802044000","2007":"51007777000","2008":"61762635000","2009":"62519686000","2010":"69555367000","2011":"79276664000","2012":"87924544000","2013":"95129659000","2014":"1,02E+11","2015":"1,00E+11","2016":"97802211000","Country Name":"Ecuador","Country Code":"ECU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"5111621014","1966":"5339520613","1967":"5579168510","1968":"6109112150","1969":"6861743341","1970":"7682491836","1971":"8266003571","1972":"8763960703","1973":"9616725366","1974":"9015166840","1975":"11437965585","1976":"13360476862","1977":"14636028767","1978":"14849909491","1979":"18150000571","1980":"22912500556","1981":"23405404730","1982":"25592365394","1983":"28137369499","1984":"30642873038","1985":"34689560465","1986":"35880262675","1987":"40507934171","1988":"35044634015","1989":"39648442534","1990":"43130416913","1991":"36970555899","1992":"41855986519","1993":"46578631453","1994":"51897983393","1995":"60159245060","1996":"67629716981","1997":"78436578171","1998":"84828807556","1999":"90710704807","2000":"99838543960","2001":"97632008710","2002":"87850683979","2003":"82924503943","2004":"78845185293","2005":"89685725230","2006":"1,07E+11","2007":"1,30E+11","2008":"1,63E+11","2009":"1,89E+11","2010":"2,19E+11","2011":"2,36E+11","2012":"2,79E+11","2013":"2,89E+11","2014":"3,06E+11","2015":"3,33E+11","2016":"3,36E+11","Country Name":"Egypt","Country Code":"EGY","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2,45E+11","1961":"2,70E+11","1962":"3,00E+11","1963":"3,36E+11","1964":"3,74E+11","1965":"4,08E+11","1966":"4,45E+11","1967":"4,83E+11","1968":"5,18E+11","1969":"5,73E+11","1970":"6,41E+11","1971":"7,27E+11","1972":"8,78E+11","1973":"1,14E+12","1974":"1,29E+12","1975":"1,50E+12","1976":"1,56E+12","1977":"1,78E+12","1978":"2,18E+12","1979":"2,64E+12","1980":"2,96E+12","1981":"2,57E+12","1982":"2,49E+12","1983":"2,43E+12","1984":"2,33E+12","1985":"2,39E+12","1986":"3,36E+12","1987":"4,15E+12","1988":"4,57E+12","1989":"4,67E+12","1990":"5,87E+12","1991":"6,10E+12","1992":"6,73E+12","1993":"6,17E+12","1994":"6,52E+12","1995":"7,52E+12","1996":"7,61E+12","1997":"6,96E+12","1998":"7,15E+12","1999":"7,12E+12","2000":"6,49E+12","2001":"6,59E+12","2002":"7,17E+12","2003":"8,85E+12","2004":"1,02E+13","2005":"1,05E+13","2006":"1,12E+13","2007":"1,29E+13","2008":"1,41E+13","2009":"1,29E+13","2010":"1,26E+13","2011":"1,36E+13","2012":"1,26E+13","2013":"1,32E+13","2014":"1,35E+13","2015":"1,16E+13","2016":"1,19E+13","Country Name":"Euro area","Country Code":"EMU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"477101651,6","1993":"467872714,8","1994":"531688311,7","1995":"578015625","1996":"693535954,2","1997":"686490090,1","1998":"745526154,9","1999":"688921325,7","2000":"706370815,6","2001":"752368495,5","2002":"729321366,7","2003":"870247703,2","2004":"1109054005","2005":"1098425901","2006":"1211161880","2007":"1317974491","2008":"1380188800","2009":"1856695551","2010":"2117039512","2011":"2607739837","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Eritrea","Country Code":"ERI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"12072126075","1961":"13834300571","1962":"16138545209","1963":"19074913948","1964":"21343844644","1965":"24756958695","1966":"28721062242","1967":"31647119228","1968":"31475548481","1969":"36038711600","1970":"40881655099","1971":"46492797365","1972":"58971806627","1973":"78425934894","1974":"97009800115","1975":"1,14E+11","1976":"1,18E+11","1977":"1,32E+11","1978":"1,60E+11","1979":"2,14E+11","1980":"2,32E+11","1981":"2,02E+11","1982":"1,95E+11","1983":"1,70E+11","1984":"1,72E+11","1985":"1,80E+11","1986":"2,51E+11","1987":"3,18E+11","1988":"3,75E+11","1989":"4,14E+11","1990":"5,35E+11","1991":"5,76E+11","1992":"6,29E+11","1993":"5,24E+11","1994":"5,29E+11","1995":"6,13E+11","1996":"6,41E+11","1997":"5,89E+11","1998":"6,17E+11","1999":"6,33E+11","2000":"5,95E+11","2001":"6,26E+11","2002":"7,05E+11","2003":"9,07E+11","2004":"1,07E+12","2005":"1,16E+12","2006":"1,26E+12","2007":"1,48E+12","2008":"1,63E+12","2009":"1,50E+12","2010":"1,43E+12","2011":"1,49E+12","2012":"1,34E+12","2013":"1,36E+12","2014":"1,38E+12","2015":"1,19E+12","2016":"1,23E+12","Country Name":"Spain","Country Code":"ESP","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"4373665146","1996":"4746109767","1997":"5066240419","1998":"5617109245","1999":"5726897998","2000":"5685774809","2001":"6245069734","2002":"7322069511","2003":"9833870709","2004":"12059201242","2005":"14006088297","2006":"16963625016","2007":"22237061730","2008":"24194039256","2009":"19652492637","2010":"19490936349","2011":"23170239901","2012":"23043864510","2013":"25081185831","2014":"26213940387","2015":"22460470490","2016":"23136741984","Country Name":"Estonia","Country Code":"EST","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"7324903188","1982":"7707678019","1983":"8567890821","1984":"8096302367","1985":"9480840483","1986":"9848600870","1987":"10527338647","1988":"10908935749","1989":"11476584879","1990":"12175166763","1991":"13463868357","1992":"10492993078","1993":"8830712714","1994":"6927950565","1995":"7663984568","1996":"8547939731","1997":"8589211390","1998":"7818224906","1999":"7700833482","2000":"8242392104","2001":"8231326016","2002":"7850809498","2003":"8623691300","2004":"10131187261","2005":"12401139454","2006":"15280861835","2007":"19707616773","2008":"27066912635","2009":"32437389116","2010":"29933790334","2011":"31952763089","2012":"43310721414","2013":"47648211133","2014":"55612228234","2015":"64464423675","2016":"72374252815","Country Name":"Ethiopia","Country Code":"ETH","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3,59E+11","1961":"3,91E+11","1962":"4,27E+11","1963":"4,70E+11","1964":"5,21E+11","1965":"5,68E+11","1966":"6,15E+11","1967":"6,61E+11","1968":"6,87E+11","1969":"7,55E+11","1970":"8,55E+11","1971":"9,67E+11","1972":"1,16E+12","1973":"1,47E+12","1974":"1,65E+12","1975":"1,93E+12","1976":"2,00E+12","1977":"2,26E+12","1978":"2,77E+12","1979":"3,38E+12","1980":"3,86E+12","1981":"3,42E+12","1982":"3,29E+12","1983":"3,19E+12","1984":"3,06E+12","1985":"3,16E+12","1986":"4,34E+12","1987":"5,37E+12","1988":"5,99E+12","1989":"6,11E+12","1990":"7,58E+12","1991":"7,87E+12","1992":"8,57E+12","1993":"7,81E+12","1994":"8,30E+12","1995":"9,61E+12","1996":"9,82E+12","1997":"9,27E+12","1998":"9,59E+12","1999":"9,58E+12","2000":"8,90E+12","2001":"9,00E+12","2002":"9,81E+12","2003":"1,19E+13","2004":"1,38E+13","2005":"1,44E+13","2006":"1,54E+13","2007":"1,78E+13","2008":"1,91E+13","2009":"1,71E+13","2010":"1,70E+13","2011":"1,83E+13","2012":"1,73E+13","2013":"1,80E+13","2014":"1,86E+13","2015":"1,63E+13","2016":"1,64E+13","Country Name":"European Union","Country Code":"EUU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"2,17E+11","2001":"1,99E+11","2002":"1,94E+11","2003":"2,21E+11","2004":"2,55E+11","2005":"3,09E+11","2006":"3,62E+11","2007":"4,46E+11","2008":"5,76E+11","2009":"5,36E+11","2010":"6,38E+11","2011":"6,95E+11","2012":"7,49E+11","2013":"8,01E+11","2014":"8,43E+11","2015":"7,64E+11","2016":"7,44E+11","Country Name":"Fragile and conflict affected situations","Country Code":"FCS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"5224102196","1961":"5921659485","1962":"6340580854","1963":"6885920329","1964":"7766655086","1965":"8589340019","1966":"9208524505","1967":"9368954010","1968":"8823033880","1969":"10070766721","1970":"11365953567","1971":"12536710287","1972":"14754136507","1973":"19486826980","1974":"24867278714","1975":"29494515597","1976":"31873171719","1977":"33524682308","1978":"36283091408","1979":"44498283621","1980":"53685049410","1981":"52485533205","1982":"52832120390","1983":"51014090521","1984":"52926394935","1985":"55914236378","1986":"73586676050","1987":"91642093873","1988":"1,09E+11","1989":"1,19E+11","1990":"1,42E+11","1991":"1,28E+11","1992":"1,13E+11","1993":"89255751015","1994":"1,03E+11","1995":"1,34E+11","1996":"1,32E+11","1997":"1,27E+11","1998":"1,34E+11","1999":"1,35E+11","2000":"1,26E+11","2001":"1,29E+11","2002":"1,40E+11","2003":"1,71E+11","2004":"1,97E+11","2005":"2,04E+11","2006":"2,17E+11","2007":"2,55E+11","2008":"2,84E+11","2009":"2,51E+11","2010":"2,48E+11","2011":"2,74E+11","2012":"2,57E+11","2013":"2,70E+11","2014":"2,73E+11","2015":"2,32E+11","2016":"2,37E+11","Country Name":"Finland","Country Code":"FIN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"112328422,1","1961":"116987784,9","1962":"122906435","1963":"129454728,6","1964":"140032741,5","1965":"147084750","1966":"150603925,5","1967":"162625885,9","1968":"166952937,1","1969":"182182067,7","1970":"219878482,2","1971":"247749327,7","1972":"316650509","1973":"425963359,4","1974":"558589870,9","1975":"684268280,8","1976":"694552411,7","1977":"719533137,1","1978":"829239489,8","1979":"1019743927","1980":"1202567359","1981":"1235899836","1982":"1194015444","1983":"1123107276","1984":"1177997414","1985":"1141210125","1986":"1290228617","1987":"1177908192","1988":"1109976928","1989":"1182686577","1990":"1337024782","1991":"1383843860","1992":"1531803061","1993":"1635426125","1994":"1825285158","1995":"1970347721","1996":"2129266728","1997":"2093994597","1998":"1656784780","1999":"1942170999","2000":"1684109743","2001":"1660102346","2002":"1842691481","2003":"2315935753","2004":"2727507213","2005":"3006725015","2006":"3102741451","2007":"3405050612","2008":"3523185920","2009":"2870624636","2010":"3140508836","2011":"3774530616","2012":"3972012571","2013":"4190143206","2014":"4469810099","2015":"4391064781","2016":"4631626234","Country Name":"Fiji","Country Code":"FJI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"62651474947","1961":"68346741504","1962":"76313782252","1963":"85551113767","1964":"94906593388","1965":"1,02E+11","1966":"1,11E+11","1967":"1,19E+11","1968":"1,30E+11","1969":"1,41E+11","1970":"1,49E+11","1971":"1,67E+11","1972":"2,04E+11","1973":"2,65E+11","1974":"2,87E+11","1975":"3,62E+11","1976":"3,73E+11","1977":"4,11E+11","1978":"5,08E+11","1979":"6,16E+11","1980":"7,04E+11","1981":"6,18E+11","1982":"5,87E+11","1983":"5,62E+11","1984":"5,33E+11","1985":"5,55E+11","1986":"7,75E+11","1987":"9,38E+11","1988":"1,02E+12","1989":"1,03E+12","1990":"1,28E+12","1991":"1,28E+12","1992":"1,41E+12","1993":"1,33E+12","1994":"1,40E+12","1995":"1,61E+12","1996":"1,61E+12","1997":"1,46E+12","1998":"1,51E+12","1999":"1,50E+12","2000":"1,37E+12","2001":"1,38E+12","2002":"1,50E+12","2003":"1,85E+12","2004":"2,12E+12","2005":"2,20E+12","2006":"2,33E+12","2007":"2,66E+12","2008":"2,92E+12","2009":"2,69E+12","2010":"2,65E+12","2011":"2,86E+12","2012":"2,68E+12","2013":"2,81E+12","2014":"2,85E+12","2015":"2,43E+12","2016":"2,47E+12","Country Name":"France","Country Code":"FRA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"1105688873","1999":"1125684470","2000":"1062339944","2001":"1154899793","2002":"1268445919","2003":"1486861879","2004":"1683997930","2005":"1730891409","2006":"1970142378","2007":"2278229533","2008":"2413237402","2009":"2257097732","2010":"2301178416","2011":"2468748768","2012":"2356505419","2013":"2613458942","2014":"","2015":"","2016":"","Country Name":"Faroe Islands","Country Code":"FRO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"106500000","1984":"","1985":"","1986":"112210000","1987":"116700000","1988":"124700000","1989":"135200000","1990":"147200000","1991":"166200000","1992":"178100000","1993":"198400000","1994":"202500000","1995":"222103600","1996":"218845700","1997":"206900300","1998":"219646200","1999":"220660500","2000":"233226300","2001":"240051900","2002":"241543400","2003":"244991000","2004":"239563300","2005":"249845600","2006":"252991200","2007":"255890800","2008":"261339600","2009":"277510900","2010":"294117200","2011":"310287500","2012":"325835200","2013":"315725600","2014":"318072000","2015":"314971100","2016":"322000000","Country Name":"Micronesia, Fed. Sts.","Country Code":"FSM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"141468977,6","1961":"167637907,4","1962":"182796536,5","1963":"154480244,2","1964":"215679855,3","1965":"226474285,6","1966":"245849781,7","1967":"271543680,3","1968":"294468564,5","1969":"318124701","1970":"323802475,5","1971":"381687073,1","1972":"430508357,7","1973":"722780701,1","1974":"1544216004","1975":"2157592937","1976":"3009409971","1977":"2809349074","1978":"2389479269","1979":"3030251116","1980":"4279637934","1981":"3862269127","1982":"3618007844","1983":"3391275731","1984":"3561451562","1985":"3339914759","1986":"3403638194","1987":"3281797039","1988":"3834503378","1989":"4186411457","1990":"5952293766","1991":"5402919957","1992":"5592390849","1993":"4378645081","1994":"4190819314","1995":"4958845906","1996":"5694040337","1997":"5326816859","1998":"4483417120","1999":"4662992036","2000":"5067865321","2001":"5018874179","2002":"5310381151","2003":"6497305662","2004":"7756293575","2005":"9458884812","2006":"10154041930","2007":"12438956756","2008":"15508574820","2009":"12065138273","2010":"14358584300","2011":"18186478120","2012":"17171447372","2013":"17590716232","2014":"18179717776","2015":"14262032471","2016":"14213558130","Country Name":"Gabon","Country Code":"GAB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"72328047042","1961":"76694360636","1962":"80601939635","1963":"85443766670","1964":"93387598814","1965":"1,01E+11","1966":"1,07E+11","1967":"1,11E+11","1968":"1,05E+11","1969":"1,13E+11","1970":"1,31E+11","1971":"1,48E+11","1972":"1,70E+11","1973":"1,93E+11","1974":"2,06E+11","1975":"2,42E+11","1976":"2,33E+11","1977":"2,63E+11","1978":"3,36E+11","1979":"4,39E+11","1980":"5,65E+11","1981":"5,41E+11","1982":"5,15E+11","1983":"4,90E+11","1984":"4,61E+11","1985":"4,89E+11","1986":"6,01E+11","1987":"7,45E+11","1988":"9,10E+11","1989":"9,27E+11","1990":"1,09E+12","1991":"1,14E+12","1992":"1,18E+12","1993":"1,06E+12","1994":"1,14E+12","1995":"1,32E+12","1996":"1,39E+12","1997":"1,54E+12","1998":"1,62E+12","1999":"1,65E+12","2000":"1,64E+12","2001":"1,61E+12","2002":"1,76E+12","2003":"2,03E+12","2004":"2,39E+12","2005":"2,51E+12","2006":"2,68E+12","2007":"3,06E+12","2008":"2,88E+12","2009":"2,37E+12","2010":"2,43E+12","2011":"2,61E+12","2012":"2,65E+12","2013":"2,72E+12","2014":"3,00E+12","2015":"2,86E+12","2016":"2,62E+12","Country Name":"United Kingdom","Country Code":"GBR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"7753501868","1991":"6357615894","1992":"3690328964","1993":"2701181331","1994":"2513870587","1995":"2693731866","1996":"3094915506","1997":"3510540809","1998":"3613500117","1999":"2800024314","2000":"3057453483","2001":"3219487825","2002":"3395778674","2003":"3991374549","2004":"5125273881","2005":"6410941013","2006":"7745406201","2007":"10172869680","2008":"12795044473","2009":"10766809099","2010":"11638536834","2011":"14434619982","2012":"15846474596","2013":"16140047012","2014":"16509305828","2015":"13993546732","2016":"14332880086","Country Name":"Georgia","Country Code":"GEO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1217230095","1961":"1302674325","1962":"1382515654","1963":"1540797589","1964":"1731296200","1965":"2053462968","1966":"2126300672","1967":"1747187645","1968":"1666909518","1969":"1962050556","1970":"2215028588","1971":"2417108578","1972":"2112293280","1973":"2465493032","1974":"2894409912","1975":"2810106390","1976":"2765254360","1977":"3189428571","1978":"3662478173","1979":"4020227931","1980":"4445228057","1981":"4222441673","1982":"4035994383","1983":"4057275078","1984":"4412279865","1985":"4504342153","1986":"5727602649","1987":"5074829932","1988":"5197840973","1989":"5251764270","1990":"5889174834","1991":"6596546196","1992":"6413901602","1993":"5966255778","1994":"5444560669","1995":"6465137615","1996":"6934984709","1997":"6891308594","1998":"7480968858","1999":"7719354839","2000":"4983024408","2001":"5314909954","2002":"6166330136","2003":"7632406553","2004":"8881368538","2005":"10731634117","2006":"20409257610","2007":"24758819718","2008":"28526891010","2009":"25977847814","2010":"32174772956","2011":"39566292433","2012":"41939728979","2013":"47805069495","2014":"38616536132","2015":"37543361204","2016":"42689783734","Country Name":"Ghana","Country Code":"GHA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Gibraltar","Country Code":"GIB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"1922600899","1987":"2041538057","1988":"2384295764","1989":"2432029380","1990":"2666616177","1991":"3014890569","1992":"3284625277","1993":"3279063318","1994":"3383218923","1995":"3693753379","1996":"3869032271","1997":"3783788551","1998":"3588376057","1999":"3461282294","2000":"2995360969","2001":"2833442750","2002":"2949637039","2003":"3446442219","2004":"3666349049","2005":"2937071767","2006":"2931625105","2007":"4134173275","2008":"4515824647","2009":"4609923756","2010":"4735956493","2011":"5067360009","2012":"5667229759","2013":"6231725485","2014":"6624068016","2015":"6699203543","2016":"6298927773","Country Name":"Guinea","Country Code":"GIN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"44212353,7","1967":"46695363,16","1968":"41160658,57","1969":"45168722,7","1970":"52296836,75","1971":"55728608,97","1972":"59161545","1973":"75187969,92","1974":"95797533,46","1975":"115182522,1","1976":"112189468,5","1977":"138094243,3","1978":"171836793,4","1979":"207114382,5","1980":"241080708,9","1981":"218764445,8","1982":"216051496","1983":"213446562,6","1984":"177338801,9","1985":"225724851,7","1986":"185646209,4","1987":"220626484,2","1988":"266673126,2","1989":"284119692,5","1990":"317083373,5","1991":"690314321,4","1992":"714255460,5","1993":"755042548,1","1994":"746491692,6","1995":"785996982,5","1996":"848237108,6","1997":"803630742,5","1998":"840285264,6","1999":"814723460,1","2000":"782915402,4","2001":"687408804,6","2002":"578236035,1","2003":"487038821,6","2004":"578785278,8","2005":"624174723,7","2006":"655068696","2007":"798870894,2","2008":"965769128,2","2009":"900639747,9","2010":"952429030,4","2011":"904256643,4","2012":"912569686,8","2013":"903779326,2","2014":"849122624,8","2015":"938794719,4","2016":"964599177,5","Country Name":"Gambia","Country Code":"GMB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"78733594,84","1971":"78540057,14","1972":"87702828,57","1973":"89374237,29","1974":"98775328,95","1975":"108985740,2","1976":"112386489","1977":"114971207,2","1978":"122666858,8","1979":"118537875,1","1980":"110653830,7","1981":"154731969,7","1982":"165523634,5","1983":"163577538,3","1984":"138478900,6","1985":"143856253,1","1986":"130225018,8","1987":"173836362","1988":"164458120,3","1989":"213143016,4","1990":"243961995,5","1991":"257150573,2","1992":"226313492,7","1993":"236880813,8","1994":"235619994,8","1995":"253966919,9","1996":"270419779,4","1997":"268551010,9","1998":"206457553,4","1999":"224446652,1","2000":"370173851,9","2001":"392278168,2","2002":"415843482","2003":"476388260,6","2004":"531109356,2","2005":"586791883,7","2006":"591829908,4","2007":"695606288,6","2008":"864136713","2009":"825828703,6","2010":"846332456,4","2011":"1105497855","2012":"995582062,3","2013":"1026664189","2014":"1109007300","2015":"1056776897","2016":"1126122708","Country Name":"Guinea-Bissau","Country Code":"GNB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"9122751,453","1963":"10840095,13","1964":"12712471,4","1965":"64748333,33","1966":"69110000","1967":"72317446,93","1968":"67514285,71","1969":"67225714,29","1970":"66331428,57","1971":"64946954,76","1972":"65429198,24","1973":"81203226,91","1974":"94159862,71","1975":"104295643,4","1976":"103653049,9","1977":"103987520,1","1978":"","1979":"","1980":"50642880,77","1981":"36731422,85","1982":"44294647,73","1983":"44442456,95","1984":"50320914,41","1985":"62118564,85","1986":"76407396,76","1987":"93345847,73","1988":"100534663,3","1989":"88265974,58","1990":"112119406,5","1991":"110906032,1","1992":"134707184,4","1993":"136047896,2","1994":"100807001,8","1995":"141853368,3","1996":"232463036,4","1997":"442337849,5","1998":"370687618,7","1999":"621117885,7","2000":"1045998496","2001":"1461139022","2002":"1806742742","2003":"2484745935","2004":"4410764339","2005":"8217369093","2006":"10086528699","2007":"13071718759","2008":"19749893536","2009":"15027795173","2010":"16298542028","2011":"21329395901","2012":"22389627294","2013":"21942597765","2014":"21461989483","2015":"12162117377","2016":"10178967206","Country Name":"Eq. Guinea","Country Code":"GNQ","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"4446528165","1961":"5016048786","1962":"5327573509","1963":"5949478035","1964":"6680298251","1965":"7600579093","1966":"8455611129","1967":"9136711288","1968":"9915140546","1969":"11266091571","1970":"13139862500","1971":"14591755682","1972":"16885506818","1973":"22347844649","1974":"25351305682","1975":"28525872476","1976":"31152840485","1977":"36176233117","1978":"44270203154","1979":"54481875805","1980":"56829663469","1981":"52346507380","1982":"54617991327","1983":"49428872678","1984":"48020024788","1985":"47820850975","1986":"56379593720","1987":"65652751132","1988":"76261278405","1989":"79169043642","1990":"97891090929","1991":"1,05E+11","1992":"1,16E+11","1993":"1,09E+11","1994":"1,17E+11","1995":"1,37E+11","1996":"1,46E+11","1997":"1,43E+11","1998":"1,44E+11","1999":"1,43E+11","2000":"1,30E+11","2001":"1,36E+11","2002":"1,54E+11","2003":"2,02E+11","2004":"2,41E+11","2005":"2,48E+11","2006":"2,73E+11","2007":"3,18E+11","2008":"3,54E+11","2009":"3,30E+11","2010":"2,99E+11","2011":"2,88E+11","2012":"2,46E+11","2013":"2,40E+11","2014":"2,36E+11","2015":"1,95E+11","2016":"1,95E+11","Country Name":"Greece","Country Code":"GRC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"71494495,19","1978":"88322386,3","1979":"102244362,2","1980":"110900457","1981":"115651918,9","1982":"125435590","1983":"131803552,2","1984":"145533310,7","1985":"167728455,2","1986":"187589522,6","1987":"215009569,6","1988":"236357523,7","1989":"267327642,2","1990":"278098763","1991":"300757900","1992":"310160455,9","1993":"309812193","1994":"325111808,1","1995":"342172523,7","1996":"366911440,4","1997":"392190585,9","1998":"445903598,9","1999":"482009371,5","2000":"520044370,4","2001":"520444185,2","2002":"540336925,9","2003":"591018407,4","2004":"599118592,6","2005":"695370296,3","2006":"698518518,5","2007":"758518518,5","2008":"825925925,9","2009":"771278111,1","2010":"771015888,9","2011":"778648666,7","2012":"799882148,1","2013":"842571333,3","2014":"911481481,5","2015":"984074074,1","2016":"1016208195","Country Name":"Grenada","Country Code":"GRD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"69520026,67","1971":"88570952,87","1972":"106101175,7","1973":"140153748,2","1974":"169918948,6","1975":"211194305,7","1976":"240780413,6","1977":"282269373","1978":"355989047,3","1979":"420642463,4","1980":"476055288,4","1981":"435746974,8","1982":"402405069,4","1983":"416183706,9","1984":"379371608,4","1985":"412876071,1","1986":"603015696,5","1987":"787392365,8","1988":"898611007,9","1989":"929796722,4","1990":"1018970365","1991":"1016493395","1992":"1037921837","1993":"927219728,9","1994":"1005879948","1995":"1208946166","1996":"1197509787","1997":"1072147778","1998":"1149862703","1999":"1131561595","2000":"1068030830","2001":"1086172923","2002":"1169138789","2003":"1407866175","2004":"1621822370","2005":"1656172356","2006":"1818759669","2007":"2049139372","2008":"2310743218","2009":"2324870824","2010":"2306502374","2011":"2515245776","2012":"2408666379","2013":"2483396542","2014":"2551126949","2015":"2220380802","2016":"","Country Name":"Greenland","Country Code":"GRL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1043599900","1961":"1076699900","1962":"1143600000","1963":"1262800000","1964":"1299099900","1965":"1331399900","1966":"1390700000","1967":"1453500000","1968":"1610500000","1969":"1715399900","1970":"1904000000","1971":"1984800000","1972":"2101300000","1973":"2569200100","1974":"3161499900","1975":"3645900000","1976":"4365300200","1977":"5480500200","1978":"6070600200","1979":"6902600200","1980":"7878700000","1981":"8607500300","1982":"8716999700","1983":"9050000400","1984":"9470000100","1985":"9721652087","1986":"7231963516","1987":"7084399840","1988":"7841602824","1989":"8410724361","1990":"7650125217","1991":"9406097735","1992":"10440842165","1993":"11399942453","1994":"12983235568","1995":"14655487456","1996":"15674852771","1997":"17790095901","1998":"19395461990","1999":"18318512501","2000":"19288926545","2001":"18702802395","2002":"20776669467","2003":"21917706491","2004":"23965275996","2005":"27211377225","2006":"30231249362","2007":"34113107086","2008":"39136893345","2009":"37733994976","2010":"41338595381","2011":"47654841113","2012":"50388454861","2013":"53851058955","2014":"58722323918","2015":"63767597194","2016":"68763255964","Country Name":"Guatemala","Country Code":"GTM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"3385000000","2003":"3560000000","2004":"3857000000","2005":"4197000000","2006":"4213000000","2007":"4375000000","2008":"4621000000","2009":"4781000000","2010":"4895000000","2011":"4928000000","2012":"5199000000","2013":"5364000000","2014":"5566000000","2015":"5734000000","2016":"","Country Name":"Guam","Country Code":"GUM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"170215248,2","1961":"185848451,3","1962":"194948375,4","1963":"175756868,7","1964":"194773376,9","1965":"213235294,1","1966":"228705882,4","1967":"250176470,6","1968":"229750000","1969":"249300000","1970":"267800000","1971":"282050000","1972":"285380952,4","1973":"307047619","1974":"433954545,5","1975":"494791666,7","1976":"454440000","1977":"449880000","1978":"507080000","1979":"530440000","1980":"603200000","1981":"570357107,1","1982":"482000000","1983":"489333333,3","1984":"437631605,3","1985":"453488372,1","1986":"504651139,5","1987":"354591846,9","1988":"413799990","1989":"379779389,7","1990":"396582263,3","1991":"336708419,5","1992":"368281378,9","1993":"442273433,2","1994":"540874934,2","1995":"621626785,9","1996":"705406001,4","1997":"749138009,6","1998":"717530683,2","1999":"694754988,3","2000":"712667896,7","2001":"696281471,7","2002":"722460886,4","2003":"741929342,8","2004":"785918769,6","2005":"824880550,3","2006":"1458446872","2007":"1740334782","2008":"1922598121","2009":"2025565089","2010":"2259288396","2011":"2576602497","2012":"2851154076","2013":"2990006534","2014":"3077086276","2015":"3179104116","2016":"3446266344","Country Name":"Guyana","Country Code":"GUY","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1,06E+12","1961":"1,12E+12","1962":"1,21E+12","1963":"1,30E+12","1964":"1,42E+12","1965":"1,55E+12","1966":"1,70E+12","1967":"1,82E+12","1968":"1,97E+12","1969":"2,16E+12","1970":"2,38E+12","1971":"2,64E+12","1972":"3,06E+12","1973":"3,71E+12","1974":"4,18E+12","1975":"4,66E+12","1976":"5,08E+12","1977":"5,75E+12","1978":"6,89E+12","1979":"7,97E+12","1980":"8,90E+12","1981":"9,04E+12","1982":"8,95E+12","1983":"9,24E+12","1984":"9,64E+12","1985":"1,01E+13","1986":"1,23E+13","1987":"1,42E+13","1988":"1,60E+13","1989":"1,68E+13","1990":"1,89E+13","1991":"2,00E+13","1992":"2,15E+13","1993":"2,17E+13","1994":"2,33E+13","1995":"2,58E+13","1996":"2,61E+13","1997":"2,56E+13","1998":"2,57E+13","1999":"2,70E+13","2000":"2,76E+13","2001":"2,73E+13","2002":"2,85E+13","2003":"3,19E+13","2004":"3,55E+13","2005":"3,76E+13","2006":"3,96E+13","2007":"4,33E+13","2008":"4,60E+13","2009":"4,31E+13","2010":"4,52E+13","2011":"4,88E+13","2012":"4,88E+13","2013":"4,93E+13","2014":"5,03E+13","2015":"4,74E+13","2016":"4,84E+13","Country Name":"High income","Country Code":"HIC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1320796652","1961":"1383681651","1962":"1612346412","1963":"1935298266","1964":"2206466461","1965":"2435078534","1966":"2489845017","1967":"2692474989","1968":"2716964388","1969":"3189740055","1970":"3800766536","1971":"4476001946","1972":"5710107420","1973":"8030117556","1974":"9388663646","1975":"10048022370","1976":"12876366009","1977":"15719433719","1978":"18315007366","1979":"22526035941","1980":"28861759209","1981":"31055409443","1982":"32291306282","1983":"29907091340","1984":"33511383986","1985":"35699543051","1986":"41075570592","1987":"50622571586","1988":"59707404561","1989":"68790369107","1990":"76928290842","1991":"88959620136","1992":"1,04E+11","1993":"1,20E+11","1994":"1,36E+11","1995":"1,45E+11","1996":"1,60E+11","1997":"1,77E+11","1998":"1,69E+11","1999":"1,66E+11","2000":"1,72E+11","2001":"1,69E+11","2002":"1,66E+11","2003":"1,61E+11","2004":"1,69E+11","2005":"1,82E+11","2006":"1,94E+11","2007":"2,12E+11","2008":"2,19E+11","2009":"2,14E+11","2010":"2,29E+11","2011":"2,49E+11","2012":"2,63E+11","2013":"2,76E+11","2014":"2,91E+11","2015":"3,09E+11","2016":"3,21E+11","Country Name":"Hong Kong SAR, China","Country Code":"HKG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"335650000","1961":"356200000","1962":"387750000","1963":"410200000","1964":"457000000","1965":"508650000","1966":"549950000","1967":"598100000","1968":"646800000","1969":"668000050","1970":"723000000","1971":"731000000","1972":"802999950","1973":"912499950","1974":"1034500000","1975":"1124000000","1976":"1347999950","1977":"1669499950","1978":"1929499950","1979":"2251499950","1980":"2566000050","1981":"2819500000","1982":"2903500050","1983":"3076999950","1984":"3319000000","1985":"3639499950","1986":"3808500050","1987":"4152499950","1988":"3970386266","1989":"3563448310","1990":"3048881323","1991":"3068444712","1992":"3419487441","1993":"3481990761","1994":"3432356579","1995":"3911053180","1996":"4034037162","1997":"4663193916","1998":"5202215657","1999":"5372543554","2000":"7103529494","2001":"7565869928","2002":"7775078403","2003":"8140271081","2004":"8772194250","2005":"9672035709","2006":"10841742348","2007":"12275501784","2008":"13789715133","2009":"14587496229","2010":"15839344592","2011":"17710275997","2012":"18528554861","2013":"18499729063","2014":"19756533658","2015":"20844308601","2016":"21516915353","Country Name":"Honduras","Country Code":"HND","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"17566642115","1961":"18033526303","1962":"19660722939","1963":"23797854828","1964":"21181173056","1965":"24791433537","1966":"27037002542","1967":"26469517421","1968":"27687706183","1969":"30902141055","1970":"32389167090","1971":"34920433870","1972":"37813701277","1973":"45584823246","1974":"56142116083","1975":"63535307034","1976":"67559791247","1977":"79909125894","1978":"90789385372","1979":"1,02E+11","1980":"1,07E+11","1981":"1,07E+11","1982":"1,06E+11","1983":"1,00E+11","1984":"1,00E+11","1985":"1,05E+11","1986":"1,20E+11","1987":"1,33E+11","1988":"1,32E+11","1989":"1,27E+11","1990":"1,30E+11","1991":"1,33E+11","1992":"1,22E+11","1993":"1,24E+11","1994":"1,10E+11","1995":"1,26E+11","1996":"1,32E+11","1997":"1,39E+11","1998":"1,43E+11","1999":"1,43E+11","2000":"1,55E+11","2001":"1,47E+11","2002":"1,60E+11","2003":"1,82E+11","2004":"2,09E+11","2005":"2,42E+11","2006":"2,89E+11","2007":"3,44E+11","2008":"4,15E+11","2009":"4,22E+11","2010":"4,63E+11","2011":"5,18E+11","2012":"5,58E+11","2013":"6,05E+11","2014":"6,43E+11","2015":"6,35E+11","2016":"6,41E+11","Country Name":"Heavily indebted poor countries (HIPC)","Country Code":"HPC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"22387561845","1996":"23678012697","1997":"23822087053","1998":"25432144406","1999":"23386945597","2000":"21774273832","2001":"23289671102","2002":"26878499206","2003":"34658113497","2004":"41574530816","2005":"45416076681","2006":"50453577898","2007":"60093155533","2008":"70481451814","2009":"62703095751","2010":"59665427465","2011":"62236751773","2012":"56485301967","2013":"57769872075","2014":"57080369368","2015":"48676334689","2016":"50425333970","Country Name":"Croatia","Country Code":"HRV","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"3473562850","1992":"2257129874","1993":"1878253818","1994":"2167569095","1995":"2813313282","1996":"2907517543","1997":"3338949152","1998":"3723903724","1999":"4153725967","2000":"3953839594","2001":"3596448035","2002":"3472194099","2003":"2960306121","2004":"3537721020","2005":"4310356253","2006":"4756204070","2007":"5885321656","2008":"6548530572","2009":"6584649419","2010":"6622541529","2011":"7516834160","2012":"7890216508","2013":"8452509316","2014":"8776360623","2015":"8724656126","2016":"8022638722","Country Name":"Haiti","Country Code":"HTI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"34650782427","1992":"38616036222","1993":"40006243368","1994":"43039008830","1995":"46288369007","1996":"46538169512","1997":"47178241569","1998":"48661666395","1999":"49074725338","2000":"47209471853","2001":"53696730224","2002":"67561285379","2003":"85050281601","2004":"1,04E+11","2005":"1,13E+11","2006":"1,15E+11","2007":"1,39E+11","2008":"1,57E+11","2009":"1,30E+11","2010":"1,30E+11","2011":"1,40E+11","2012":"1,27E+11","2013":"1,35E+11","2014":"1,39E+11","2015":"1,22E+11","2016":"1,24E+11","Country Name":"Hungary","Country Code":"HUN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2,95E+11","1961":"2,82E+11","1962":"2,94E+11","1963":"3,13E+11","1964":"3,55E+11","1965":"3,90E+11","1966":"4,02E+11","1967":"4,13E+11","1968":"4,37E+11","1969":"4,88E+11","1970":"5,29E+11","1971":"5,79E+11","1972":"6,51E+11","1973":"8,38E+11","1974":"1,06E+12","1975":"1,14E+12","1976":"1,25E+12","1977":"1,41E+12","1978":"1,52E+12","1979":"1,83E+12","1980":"2,14E+12","1981":"2,32E+12","1982":"2,30E+12","1983":"2,27E+12","1984":"2,31E+12","1985":"2,44E+12","1986":"2,55E+12","1987":"2,62E+12","1988":"2,84E+12","1989":"3,05E+12","1990":"3,44E+12","1991":"3,71E+12","1992":"3,70E+12","1993":"3,97E+12","1994":"4,34E+12","1995":"4,88E+12","1996":"5,32E+12","1997":"5,63E+12","1998":"5,47E+12","1999":"5,32E+12","2000":"5,78E+12","2001":"5,86E+12","2002":"5,95E+12","2003":"6,72E+12","2004":"7,99E+12","2005":"9,55E+12","2006":"1,13E+13","2007":"1,41E+13","2008":"1,69E+13","2009":"1,64E+13","2010":"2,00E+13","2011":"2,36E+13","2012":"2,50E+13","2013":"2,65E+13","2014":"2,73E+13","2015":"2,58E+13","2016":"2,58E+13","Country Name":"IBRD only","Country Code":"IBD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3,32E+11","1961":"3,22E+11","1962":"3,38E+11","1963":"3,63E+11","1964":"4,03E+11","1965":"4,44E+11","1966":"4,61E+11","1967":"4,73E+11","1968":"5,00E+11","1969":"5,59E+11","1970":"6,12E+11","1971":"6,62E+11","1972":"7,38E+11","1973":"9,37E+11","1974":"1,19E+12","1975":"1,30E+12","1976":"1,41E+12","1977":"1,60E+12","1978":"1,73E+12","1979":"2,07E+12","1980":"2,42E+12","1981":"2,61E+12","1982":"2,58E+12","1983":"2,52E+12","1984":"2,56E+12","1985":"2,69E+12","1986":"2,81E+12","1987":"2,90E+12","1988":"3,14E+12","1989":"3,34E+12","1990":"3,75E+12","1991":"4,03E+12","1992":"4,00E+12","1993":"4,26E+12","1994":"4,63E+12","1995":"5,21E+12","1996":"5,69E+12","1997":"6,01E+12","1998":"5,85E+12","1999":"5,70E+12","2000":"6,20E+12","2001":"6,27E+12","2002":"6,39E+12","2003":"7,22E+12","2004":"8,58E+12","2005":"1,02E+13","2006":"1,21E+13","2007":"1,50E+13","2008":"1,81E+13","2009":"1,76E+13","2010":"2,14E+13","2011":"2,52E+13","2012":"2,68E+13","2013":"2,84E+13","2014":"2,94E+13","2015":"2,78E+13","2016":"2,78E+13","Country Name":"IDA & IBRD total","Country Code":"IBT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"38748692260","1961":"40905486344","1962":"44123855995","1963":"49688700781","1964":"48638830926","1965":"55127127620","1966":"59801429749","1967":"60439331471","1968":"63710108686","1969":"71945084445","1970":"83611704212","1971":"83933783703","1972":"87371340568","1973":"1,00E+11","1974":"1,36E+11","1975":"1,63E+11","1976":"1,69E+11","1977":"1,85E+11","1978":"2,08E+11","1979":"2,42E+11","1980":"2,86E+11","1981":"2,93E+11","1982":"2,83E+11","1983":"2,54E+11","1984":"2,47E+11","1985":"2,57E+11","1986":"2,65E+11","1987":"2,86E+11","1988":"2,96E+11","1989":"2,96E+11","1990":"3,12E+11","1991":"3,19E+11","1992":"3,10E+11","1993":"2,99E+11","1994":"2,86E+11","1995":"3,32E+11","1996":"3,66E+11","1997":"3,78E+11","1998":"3,76E+11","1999":"3,86E+11","2000":"4,26E+11","2001":"4,15E+11","2002":"4,45E+11","2003":"5,04E+11","2004":"5,85E+11","2005":"6,77E+11","2006":"8,14E+11","2007":"9,50E+11","2008":"1,14E+12","2009":"1,13E+12","2010":"1,44E+12","2011":"1,64E+12","2012":"1,77E+12","2013":"1,92E+12","2014":"2,08E+12","2015":"2,03E+12","2016":"2,00E+12","Country Name":"IDA total","Country Code":"IDA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"12528091853","1961":"13388928378","1962":"14310570026","1963":"15136261037","1964":"16547083675","1965":"18008427705","1966":"19548468194","1967":"19670828004","1968":"20910846572","1969":"23861812085","1970":"32843393663","1971":"30365264330","1972":"33936248295","1973":"36073763304","1974":"52387318528","1975":"60251909396","1976":"73264439499","1977":"76793603163","1978":"83188559519","1979":"1,02E+11","1980":"1,32E+11","1981":"1,36E+11","1982":"1,28E+11","1983":"1,06E+11","1984":"99724892443","1985":"99654429285","1986":"96843172568","1987":"1,07E+11","1988":"1,15E+11","1989":"1,17E+11","1990":"1,25E+11","1991":"1,28E+11","1992":"1,29E+11","1993":"1,17E+11","1994":"1,18E+11","1995":"1,40E+11","1996":"1,56E+11","1997":"1,57E+11","1998":"1,50E+11","1999":"1,57E+11","2000":"1,75E+11","2001":"1,69E+11","2002":"1,84E+11","2003":"2,09E+11","2004":"2,52E+11","2005":"2,98E+11","2006":"3,74E+11","2007":"4,27E+11","2008":"5,09E+11","2009":"4,73E+11","2010":"7,00E+11","2011":"8,03E+11","2012":"8,83E+11","2013":"9,60E+11","2014":"1,04E+12","2015":"9,77E+11","2016":"9,14E+11","Country Name":"IDA blend","Country Code":"IDB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"5667756645","1968":"7076465295","1969":"8337423313","1970":"9150684932","1971":"9333536360","1972":"10997590361","1973":"16273253012","1974":"25802409639","1975":"30463855422","1976":"37269156627","1977":"45808915663","1978":"51455719100","1979":"51400186379","1980":"72482337370","1981":"85518233451","1982":"90158449307","1983":"81052283405","1984":"84853699994","1985":"85289491750","1986":"79954072570","1987":"75929617577","1988":"84300174477","1989":"94451427898","1990":"1,06E+11","1991":"1,17E+11","1992":"1,28E+11","1993":"1,58E+11","1994":"1,77E+11","1995":"2,02E+11","1996":"2,27E+11","1997":"2,16E+11","1998":"95445547873","1999":"1,40E+11","2000":"1,65E+11","2001":"1,60E+11","2002":"1,96E+11","2003":"2,35E+11","2004":"2,57E+11","2005":"2,86E+11","2006":"3,65E+11","2007":"4,32E+11","2008":"5,10E+11","2009":"5,40E+11","2010":"7,55E+11","2011":"8,93E+11","2012":"9,18E+11","2013":"9,13E+11","2014":"8,91E+11","2015":"8,61E+11","2016":"9,32E+11","Country Name":"Indonesia","Country Code":"IDN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"26900729559","1961":"28202127747","1962":"30578919823","1963":"35608750995","1964":"32782637428","1965":"38049648216","1966":"41260252648","1967":"41803467079","1968":"43857842843","1969":"49232891560","1970":"51155937981","1971":"54433112943","1972":"53913727573","1973":"65130587108","1974":"84317852975","1975":"1,04E+11","1976":"95540888530","1977":"1,08E+11","1978":"1,26E+11","1979":"1,40E+11","1980":"1,51E+11","1981":"1,55E+11","1982":"1,54E+11","1983":"1,47E+11","1984":"1,47E+11","1985":"1,57E+11","1986":"1,69E+11","1987":"1,80E+11","1988":"1,81E+11","1989":"1,79E+11","1990":"1,88E+11","1991":"1,91E+11","1992":"1,80E+11","1993":"1,82E+11","1994":"1,68E+11","1995":"1,92E+11","1996":"2,10E+11","1997":"2,20E+11","1998":"2,26E+11","1999":"2,29E+11","2000":"2,51E+11","2001":"2,46E+11","2002":"2,61E+11","2003":"2,94E+11","2004":"3,33E+11","2005":"3,79E+11","2006":"4,39E+11","2007":"5,22E+11","2008":"6,33E+11","2009":"6,54E+11","2010":"7,39E+11","2011":"8,30E+11","2012":"8,76E+11","2013":"9,52E+11","2014":"1,03E+12","2015":"1,04E+12","2016":"1,08E+12","Country Name":"IDA only","Country Code":"IDX","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"914727080,6","1996":"1023086919","1997":"1180919719","1998":"1382548250","1999":"1567465657","2000":"1563667800","2001":"1614595291","2002":"1897606791","2003":"2264911807","2004":"2758117365","2005":"2971167185","2006":"3344402193","2007":"5685988395","2008":"5827468750","2009":"5047909332","2010":"5420118974","2011":"6066454094","2012":"6433357030","2013":"6754330155","2014":"7428280402","2015":"","2016":"","Country Name":"Isle of Man","Country Code":"IMN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"36535925031","1961":"38709096076","1962":"41599070242","1963":"47776000900","1964":"55726873084","1965":"58760424670","1966":"45253641303","1967":"49466168891","1968":"52377324284","1969":"57668330026","1970":"61589800520","1971":"66452561866","1972":"70509913049","1973":"84374541630","1974":"98198276857","1975":"97159222024","1976":"1,01E+11","1977":"1,20E+11","1978":"1,35E+11","1979":"1,51E+11","1980":"1,84E+11","1981":"1,91E+11","1982":"1,98E+11","1983":"2,15E+11","1984":"2,09E+11","1985":"2,29E+11","1986":"2,46E+11","1987":"2,75E+11","1988":"2,93E+11","1989":"2,92E+11","1990":"3,17E+11","1991":"2,67E+11","1992":"2,84E+11","1993":"2,76E+11","1994":"3,23E+11","1995":"3,55E+11","1996":"3,88E+11","1997":"4,10E+11","1998":"4,16E+11","1999":"4,53E+11","2000":"4,62E+11","2001":"4,79E+11","2002":"5,08E+11","2003":"6,00E+11","2004":"7,00E+11","2005":"8,09E+11","2006":"9,20E+11","2007":"1,20E+12","2008":"1,19E+12","2009":"1,32E+12","2010":"1,66E+12","2011":"1,82E+12","2012":"1,83E+12","2013":"1,86E+12","2014":"2,04E+12","2015":"2,11E+12","2016":"2,26E+12","Country Name":"India","Country Code":"IND","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Not classified","Country Code":"INX","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1939329775","1961":"2088012282","1962":"2260349684","1963":"2430843768","1964":"2766608946","1965":"2945704143","1966":"3104034393","1967":"3343636773","1968":"3278584478","1969":"3787077344","1970":"4400344547","1971":"5103293982","1972":"6324312352","1973":"7488574957","1974":"7904673173","1975":"9493191638","1976":"9463110246","1977":"11259469295","1978":"14662488976","1979":"18337460026","1980":"21769374171","1981":"20690641399","1982":"21496001230","1983":"20786594499","1984":"20126542855","1985":"21291058299","1986":"28742982514","1987":"33954080524","1988":"37810270546","1989":"39277216207","1990":"49354416569","1991":"49836763468","1992":"55973865068","1993":"52469340621","1994":"57154150177","1995":"69208232323","1996":"75864982359","1997":"82816774117","1998":"90111618257","1999":"98781557639","2000":"99855067256","2001":"1,09E+11","2002":"1,28E+11","2003":"1,64E+11","2004":"1,94E+11","2005":"2,12E+11","2006":"2,32E+11","2007":"2,70E+11","2008":"2,75E+11","2009":"2,36E+11","2010":"2,21E+11","2011":"2,41E+11","2012":"2,26E+11","2013":"2,39E+11","2014":"2,56E+11","2015":"2,84E+11","2016":"2,94E+11","Country Name":"Ireland","Country Code":"IRL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"4199134389","1961":"4426949094","1962":"4693566416","1963":"4928628018","1964":"5379845648","1965":"6197319929","1966":"6789938672","1967":"7555383690","1968":"8623172960","1969":"9743089608","1970":"10976245154","1971":"13731801564","1972":"17153463263","1973":"27081698249","1974":"46209092072","1975":"51776222350","1976":"68055295080","1977":"80600122702","1978":"77994316621","1979":"90391877325","1980":"94362275579","1981":"1,00E+11","1982":"1,26E+11","1983":"1,56E+11","1984":"1,62E+11","1985":"1,80E+11","1986":"2,09E+11","1987":"1,34E+11","1988":"1,23E+11","1989":"1,20E+11","1990":"1,25E+11","1991":"","1992":"","1993":"63743623232","1994":"71841461173","1995":"96419225744","1996":"1,20E+11","1997":"1,14E+11","1998":"1,10E+11","1999":"1,14E+11","2000":"1,10E+11","2001":"1,27E+11","2002":"1,29E+11","2003":"1,54E+11","2004":"1,84E+11","2005":"2,20E+11","2006":"2,59E+11","2007":"3,37E+11","2008":"3,97E+11","2009":"3,99E+11","2010":"4,68E+11","2011":"5,92E+11","2012":"5,87E+11","2013":"5,12E+11","2014":"4,25E+11","2015":"3,93E+11","2016":"","Country Name":"Iran","Country Code":"IRN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1684121535","1961":"1831700364","1962":"1954634836","1963":"1978437693","1964":"2340521143","1965":"","1966":"","1967":"","1968":"2896947634","1969":"3008120975","1970":"3281713806","1971":"3865346535","1972":"4113848002","1973":"5134367778","1974":"11516762614","1975":"13458516763","1976":"17754825601","1977":"19838130715","1978":"23762275652","1979":"37816457839","1980":"53405689130","1981":"38424991534","1982":"42595309883","1983":"40595046639","1984":"46802508845","1985":"48284979093","1986":"47127693792","1987":"56609842393","1988":"62503055645","1989":"65641363783","1990":"1,80E+11","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"36627901762","2005":"49954890353","2006":"65140293688","2007":"88840050497","2008":"1,32E+11","2009":"1,12E+11","2010":"1,39E+11","2011":"1,86E+11","2012":"2,18E+11","2013":"2,35E+11","2014":"2,35E+11","2015":"1,80E+11","2016":"1,71E+11","Country Name":"Iraq","Country Code":"IRQ","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"248434097","1961":"253885656,3","1962":"284916516,2","1963":"340061650,1","1964":"434267936,9","1965":"523694949,4","1966":"628893310,4","1967":"621225962,2","1968":"474399471,6","1969":"414709311,4","1970":"531004659,1","1971":"675722954,5","1972":"846506911,4","1973":"1163864529","1974":"1527559580","1975":"1418360312","1976":"1683117418","1977":"2226538694","1978":"2532331673","1979":"2876729410","1980":"3409023699","1981":"3521512389","1982":"3232804218","1983":"2788530415","1984":"2887825524","1985":"3008412960","1986":"4022192404","1987":"5565384032","1988":"6156487920","1989":"5718878002","1990":"6521544489","1991":"6966138526","1992":"7138787995","1993":"6269347503","1994":"6441621298","1995":"7181787874","1996":"7501950116","1997":"7596126046","1998":"8468339856","1999":"8931365461","2000":"8946079678","2001":"8146073990","2002":"9199643908","2003":"11304084267","2004":"13703315349","2005":"16691213479","2006":"17043245939","2007":"21295012099","2008":"17640375722","2009":"12887072301","2010":"13254818331","2011":"14674650435","2012":"14218575093","2013":"15479256845","2014":"17178962757","2015":"16783714958","2016":"20047413006","Country Name":"Iceland","Country Code":"ISL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2598500000","1961":"3138500000","1962":"2510000000","1963":"2992333333","1964":"3405333333","1965":"3663333333","1966":"3980000000","1967":"4030000000","1968":"4619000000","1969":"5329333333","1970":"6267666667","1971":"5851750000","1972":"7496250000","1973":"9692000000","1974":"13986250000","1975":"13028166667","1976":"12359875000","1977":"14390000000","1978":"13967647059","1979":"17796000000","1980":"21884705882","1981":"23258596491","1982":"24539341564","1983":"27442580071","1984":"26043655184","1985":"24121638985","1986":"29702243917","1987":"35477234542","1988":"43893303709","1989":"44599771760","1990":"52490327348","1991":"59170286560","1992":"65771216421","1993":"65925583866","1994":"74669719505","1995":"99968784246","1996":"1,10E+11","1997":"1,15E+11","1998":"1,16E+11","1999":"1,17E+11","2000":"1,32E+11","2001":"1,31E+11","2002":"1,21E+11","2003":"1,27E+11","2004":"1,35E+11","2005":"1,43E+11","2006":"1,55E+11","2007":"1,80E+11","2008":"2,17E+11","2009":"2,08E+11","2010":"2,34E+11","2011":"2,61E+11","2012":"2,58E+11","2013":"2,93E+11","2014":"3,09E+11","2015":"2,99E+11","2016":"3,19E+11","Country Name":"Israel","Country Code":"ISR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"40385288344","1961":"44842760293","1962":"50383891899","1963":"57710743060","1964":"63175417019","1965":"67978153851","1966":"73654870011","1967":"81133120065","1968":"87942231678","1969":"97085082807","1970":"1,13E+11","1971":"1,24E+11","1972":"1,45E+11","1973":"1,75E+11","1974":"1,99E+11","1975":"2,27E+11","1976":"2,24E+11","1977":"2,57E+11","1978":"3,14E+11","1979":"3,92E+11","1980":"4,76E+11","1981":"4,29E+11","1982":"4,26E+11","1983":"4,42E+11","1984":"4,36E+11","1985":"4,51E+11","1986":"6,38E+11","1987":"8,03E+11","1988":"8,89E+11","1989":"9,26E+11","1990":"1,18E+12","1991":"1,24E+12","1992":"1,32E+12","1993":"1,06E+12","1994":"1,10E+12","1995":"1,17E+12","1996":"1,31E+12","1997":"1,24E+12","1998":"1,27E+12","1999":"1,25E+12","2000":"1,14E+12","2001":"1,16E+12","2002":"1,27E+12","2003":"1,57E+12","2004":"1,80E+12","2005":"1,85E+12","2006":"1,94E+12","2007":"2,20E+12","2008":"2,39E+12","2009":"2,19E+12","2010":"2,13E+12","2011":"2,28E+12","2012":"2,07E+12","2013":"2,13E+12","2014":"2,15E+12","2015":"1,82E+12","2016":"1,85E+12","Country Name":"Italy","Country Code":"ITA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"699050679","1961":"748028839,4","1962":"777712445,8","1963":"826690466,2","1964":"897931401,4","1965":"972140557,2","1966":"1096738065","1967":"1148025407","1968":"1083883355","1969":"1191287652","1970":"1404776071","1971":"1539865514","1972":"1875048860","1973":"1905917553","1974":"2375096249","1975":"2860411286","1976":"2966010230","1977":"3249697393","1978":"2644449232","1979":"2425033998","1980":"2679409453","1981":"2979061412","1982":"3293533288","1983":"3619294121","1984":"2373566957","1985":"2100223150","1986":"2754566176","1987":"3286987552","1988":"3828310735","1989":"4404970059","1990":"4592224067","1991":"4071219198","1992":"3530892749","1993":"4859766161","1994":"4907861406","1995":"5779285208","1996":"6504445801","1997":"7450324787","1998":"8718300136","1999":"8795765306","2000":"8929375580","2001":"9087918837","2002":"9694161516","2003":"9399452788","2004":"10150978155","2005":"11204416000","2006":"11905525197","2007":"12824094990","2008":"13678551838","2009":"12038998757","2010":"13192229343","2011":"14440457549","2012":"14802430173","2013":"14276559216","2014":"13897561173","2015":"14261995114","2016":"14027151473","Country Name":"Jamaica","Country Code":"JAM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"599831979,8","1966":"658078969,5","1967":"631755810,7","1968":"561187342,5","1969":"698963875,7","1970":"639596751,6","1971":"678241389","1972":"788574629","1973":"943700547,8","1974":"1197454207","1975":"1363039400","1976":"1708734940","1977":"2096568479","1978":"2602748691","1979":"3271728272","1980":"3910036925","1981":"4384685230","1982":"4680567376","1983":"4920407601","1984":"4966710013","1985":"4993829194","1986":"6401380000","1987":"6755599114","1988":"6277197435","1989":"4220945005","1990":"4160003917","1991":"4344250257","1992":"5311329067","1993":"5605841536","1994":"6237739516","1995":"6727446632","1996":"6928359238","1997":"7246188575","1998":"7912327362","1999":"8149106065","2000":"8460424401","2001":"8975689845","2002":"9582453032","2003":"10195660790","2004":"11411390409","2005":"12588665303","2006":"15056929760","2007":"17110587447","2008":"21972004086","2009":"23820230000","2010":"26425379437","2011":"28840263380","2012":"30937277606","2013":"33593843662","2014":"35826925775","2015":"37517410282","2016":"38654727746","Country Name":"Jordan","Country Code":"JOR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"44307342950","1961":"53508617739","1962":"60723018684","1963":"69498131797","1964":"81749006382","1965":"90950278258","1966":"1,06E+11","1967":"1,24E+11","1968":"1,47E+11","1969":"1,72E+11","1970":"2,12E+11","1971":"2,39E+11","1972":"3,16E+11","1973":"4,30E+11","1974":"4,77E+11","1975":"5,19E+11","1976":"5,83E+11","1977":"7,18E+11","1978":"1,01E+12","1979":"1,05E+12","1980":"1,10E+12","1981":"1,22E+12","1982":"1,13E+12","1983":"1,23E+12","1984":"1,31E+12","1985":"1,40E+12","1986":"2,08E+12","1987":"2,51E+12","1988":"3,05E+12","1989":"3,05E+12","1990":"3,14E+12","1991":"3,58E+12","1992":"3,90E+12","1993":"4,47E+12","1994":"4,91E+12","1995":"5,45E+12","1996":"4,83E+12","1997":"4,41E+12","1998":"4,03E+12","1999":"4,56E+12","2000":"4,89E+12","2001":"4,30E+12","2002":"4,12E+12","2003":"4,45E+12","2004":"4,82E+12","2005":"4,76E+12","2006":"4,53E+12","2007":"4,52E+12","2008":"5,04E+12","2009":"5,23E+12","2010":"5,70E+12","2011":"6,16E+12","2012":"6,20E+12","2013":"5,16E+12","2014":"4,85E+12","2015":"4,38E+12","2016":"4,94E+12","Country Name":"Japan","Country Code":"JPN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"26932728899","1991":"24881135586","1992":"24906939560","1993":"23409027476","1994":"21250839258","1995":"20374307047","1996":"21035357833","1997":"22165932063","1998":"22135245413","1999":"16870817135","2000":"18291990619","2001":"22152689130","2002":"24636598581","2003":"30833692831","2004":"43151647003","2005":"57123671734","2006":"81003884545","2007":"1,05E+11","2008":"1,33E+11","2009":"1,15E+11","2010":"1,48E+11","2011":"1,93E+11","2012":"2,08E+11","2013":"2,37E+11","2014":"2,21E+11","2015":"1,84E+11","2016":"1,34E+11","Country Name":"Kazakhstan","Country Code":"KAZ","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"791265458,8","1961":"792959472,1","1962":"868111400","1963":"926589348,6","1964":"998759333,6","1965":"997919320","1966":"1164519673","1967":"1232559506","1968":"1353295458","1969":"1458379415","1970":"1603447357","1971":"1778391289","1972":"2107279157","1973":"2502142444","1974":"2973309272","1975":"3259344936","1976":"3474542392","1977":"4494378855","1978":"5303734883","1979":"6234390975","1980":"7265315332","1981":"6854491454","1982":"6431579357","1983":"5979198464","1984":"6191437070","1985":"6135034338","1986":"7239126717","1987":"7970820531","1988":"8355380879","1989":"8283114648","1990":"8572359163","1991":"8151479004","1992":"8209129172","1993":"5751789915","1994":"7148145376","1995":"9046326060","1996":"12045858436","1997":"13115773738","1998":"14093998844","1999":"12896013577","2000":"12705357103","2001":"12986007426","2002":"13147743911","2003":"14904517650","2004":"16095337094","2005":"18737897745","2006":"25825524821","2007":"31958195182","2008":"35895153328","2009":"37021512049","2010":"39999659234","2011":"41953433591","2012":"50412754822","2013":"55097343448","2014":"61445345999","2015":"63767539357","2016":"70529014778","Country Name":"Kenya","Country Code":"KEN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2674000000","1991":"2570833333","1992":"2316562500","1993":"2028295455","1994":"1681006993","1995":"1661018519","1996":"1827570586","1997":"1767864036","1998":"1645963750","1999":"1249062025","2000":"1369693171","2001":"1525112242","2002":"1605640633","2003":"1919012781","2004":"2211535312","2005":"2460248026","2006":"2834168889","2007":"3802566171","2008":"5139957785","2009":"4690062255","2010":"4794357795","2011":"6197766119","2012":"6605139933","2013":"7335027592","2014":"7468096567","2015":"6678178340","2016":"6551287938","Country Name":"Kyrgyzstan","Country Code":"KGZ","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"637142865,7","1961":"642857134,3","1962":"660000008,6","1963":"728571437,1","1964":"782857128,6","1965":"868571428,6","1966":"914285714,3","1967":"962857134,3","1968":"1065714249","1969":"978873232,4","1970":"718401157,7","1971":"969911421,4","1972":"505549441,4","1973":"702899156","1974":"588443893,7","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"2533727592","1994":"2791435272","1995":"3441205693","1996":"3506695720","1997":"3443413389","1998":"3120425503","1999":"3517242477","2000":"3654031716","2001":"3984000517","2002":"4284028483","2003":"4658246918","2004":"5337833248","2005":"6293046162","2006":"7274595707","2007":"8639235842","2008":"10351914093","2009":"10401851851","2010":"11242275199","2011":"12829541141","2012":"14038383450","2013":"15449630419","2014":"16777820333","2015":"18049954289","2016":"20016747754","Country Name":"Cambodia","Country Code":"KHM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"14295279,54","1971":"15278632,48","1972":"18936526,95","1973":"31710657,73","1974":"85637174,37","1975":"55081816,99","1976":"41109617,5","1977":"38748059,44","1978":"45210026,32","1979":"42620165,44","1980":"38715554,54","1981":"41369800,05","1982":"40572066,13","1983":"37837837,84","1984":"41246160,6","1985":"32125148,4","1986":"32085561,5","1987":"33608738,27","1988":"42972107,2","1989":"41119721,65","1990":"39809538,68","1991":"47515189,28","1992":"47737955,35","1993":"46919624,64","1994":"54832577,86","1995":"56338028,17","1996":"66515376,79","1997":"67537479,59","1998":"65334841,06","1999":"69032258,06","2000":"67254174,4","2001":"63101272,37","2002":"72196457,68","2003":"90231856,8","2004":"102367039,3","2005":"112133944,3","2006":"108545632,5","2007":"130754915,9","2008":"139125482,3","2009":"130465372","2010":"153275912,7","2011":"177142135,1","2012":"188045661,6","2013":"187153601,1","2014":"186066973,1","2015":"160121929,2","2016":"165765016,4","Country Name":"Kiribati","Country Code":"KIR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"12366563,61","1961":"12483229,31","1962":"12541562,15","1963":"12833226,39","1964":"13416554,86","1965":"13593932,32","1966":"14469078,18","1967":"16742338,25","1968":"14600000","1969":"15850000","1970":"16300000","1971":"19624746,45","1972":"22944849,12","1973":"24196018,38","1974":"31514856,31","1975":"33364055,3","1976":"30095602,29","1977":"44680000","1978":"49095407,41","1979":"58296666,67","1980":"67715444,44","1981":"79026037,04","1982":"84381407,41","1983":"85100481,48","1984":"95898444,44","1985":"106057000","1986":"125272259,3","1987":"140705629,6","1988":"165745740,7","1989":"185094777,8","1990":"208740444,4","1991":"209880963","1992":"229434518,5","1993":"249676000","1994":"277567259,3","1995":"299699666,7","1996":"318742963","1997":"357237682,1","1998":"364975456,9","1999":"389984428,9","2000":"420515112,9","2001":"461078096,2","2002":"483120201,3","2003":"465850733,3","2004":"502561637","2005":"543167674,4","2006":"636218025,2","2007":"674008481,5","2008":"738942555,6","2009":"723209111,1","2010":"705015370,4","2011":"753225963","2012":"734462666,7","2013":"788163888,9","2014":"847778185,2","2015":"876478555,6","2016":"916896555,6","Country Name":"St. Kitts and Nevis","Country Code":"KNA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3957873926","1961":"2417237754","1962":"2813933900","1963":"3988246109","1964":"3458518494","1965":"3120307808","1966":"3928171298","1967":"4854576371","1968":"6117260076","1969":"7675805108","1970":"8999227202","1971":"9889961112","1972":"10842220469","1973":"13841885921","1974":"19482038223","1975":"21704752066","1976":"29779338843","1977":"38265082645","1978":"51700619835","1979":"66567975207","1980":"64980820835","1981":"72425590649","1982":"77773431088","1983":"87024427973","1984":"96597434180","1985":"1,00E+11","1986":"1,16E+11","1987":"1,46E+11","1988":"1,97E+11","1989":"2,44E+11","1990":"2,79E+11","1991":"3,26E+11","1992":"3,50E+11","1993":"3,86E+11","1994":"4,56E+11","1995":"5,56E+11","1996":"5,98E+11","1997":"5,58E+11","1998":"3,74E+11","1999":"4,85E+11","2000":"5,62E+11","2001":"5,33E+11","2002":"6,09E+11","2003":"6,81E+11","2004":"7,65E+11","2005":"8,98E+11","2006":"1,01E+12","2007":"1,12E+12","2008":"1,00E+12","2009":"9,02E+11","2010":"1,09E+12","2011":"1,20E+12","2012":"1,22E+12","2013":"1,31E+12","2014":"1,41E+12","2015":"1,38E+12","2016":"1,41E+12","Country Name":"South Korea","Country Code":"KOR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"2097451694","1966":"2391486978","1967":"2441893027","1968":"2663119574","1969":"2769532344","1970":"2873984878","1971":"3880370402","1972":"4451200973","1973":"5408293999","1974":"13004774557","1975":"12024138276","1976":"13131668947","1977":"14135729588","1978":"15500908760","1979":"24746019537","1980":"28638550499","1981":"25056672166","1982":"21577977770","1983":"20869434305","1984":"21697297872","1985":"21442619681","1986":"17903681693","1987":"22365734482","1988":"20692472760","1989":"24312117767","1990":"18427777778","1991":"11008793176","1992":"19858555215","1993":"23941391391","1994":"24848483838","1995":"27191689008","1996":"31493987642","1997":"30354434553","1998":"25941929462","1999":"30121879435","2000":"37711864407","2001":"34890772742","2002":"38137545245","2003":"47875838926","2004":"59440108585","2005":"80797945205","2006":"1,02E+11","2007":"1,15E+11","2008":"1,47E+11","2009":"1,06E+11","2010":"1,15E+11","2011":"1,54E+11","2012":"1,74E+11","2013":"1,74E+11","2014":"1,63E+11","2015":"1,14E+11","2016":"","Country Name":"Kuwait","Country Code":"KWT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"73395468427","1961":"77129609860","1962":"88911888349","1963":"89097573499","1964":"99074812474","1965":"1,07E+11","1966":"1,18E+11","1967":"1,21E+11","1968":"1,30E+11","1969":"1,45E+11","1970":"1,58E+11","1971":"1,76E+11","1972":"1,99E+11","1973":"2,59E+11","1974":"3,45E+11","1975":"3,71E+11","1976":"4,12E+11","1977":"4,50E+11","1978":"5,10E+11","1979":"6,03E+11","1980":"7,10E+11","1981":"8,18E+11","1982":"7,70E+11","1983":"6,85E+11","1984":"6,74E+11","1985":"6,96E+11","1986":"7,07E+11","1987":"7,40E+11","1988":"8,47E+11","1989":"9,26E+11","1990":"1,08E+12","1991":"1,34E+12","1992":"1,25E+12","1993":"1,45E+12","1994":"1,66E+12","1995":"1,76E+12","1996":"1,90E+12","1997":"2,07E+12","1998":"2,09E+12","1999":"1,87E+12","2000":"2,07E+12","2001":"2,01E+12","2002":"1,79E+12","2003":"1,84E+12","2004":"2,12E+12","2005":"2,58E+12","2006":"3,03E+12","2007":"3,60E+12","2008":"4,21E+12","2009":"3,95E+12","2010":"4,92E+12","2011":"5,60E+12","2012":"5,64E+12","2013":"5,77E+12","2014":"5,80E+12","2015":"4,92E+12","2016":"4,76E+12","Country Name":"Latin America & Caribbean (excluding high income)","Country Code":"LAC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"1757142806","1985":"2366666616","1986":"1776842041","1987":"1087273104","1988":"598961269,3","1989":"714046821,1","1990":"865559856,2","1991":"1028087972","1992":"1127806945","1993":"1327748655","1994":"1543606345","1995":"1763536305","1996":"1873671550","1997":"1747011857","1998":"1280177839","1999":"1454430642","2000":"1731198022","2001":"1768619058","2002":"1758176653","2003":"2023324407","2004":"2366398120","2005":"2735558726","2006":"3452882514","2007":"4222962988","2008":"5443915121","2009":"5832915387","2010":"7127792630","2011":"8261299200","2012":"10191367558","2013":"11942157500","2014":"13268297522","2015":"14390323462","2016":"15903437790","Country Name":"Laos","Country Code":"LAO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"3313540068","1989":"2717998688","1990":"2838485354","1991":"4451497288","1992":"5545921947","1993":"7535259851","1994":"9599127050","1995":"11718795528","1996":"13690217333","1997":"15751867489","1998":"17247179006","1999":"17391056369","2000":"17260364842","2001":"17649751244","2002":"19152238806","2003":"20082918740","2004":"20955223881","2005":"21287562189","2006":"21796351575","2007":"24577114428","2008":"28829850746","2009":"35139635158","2010":"38009950249","2011":"40078938640","2012":"43205095854","2013":"44352417910","2014":"45730945274","2015":"47084703151","2016":"47536798648","Country Name":"Lebanon","Country Code":"LBN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"190495600","1961":"183920900","1962":"191861800","1963":"200229600","1964":"218929100","1965":"229260800","1966":"244459500","1967":"261024300","1968":"276820700","1969":"306961800","1970":"323099700","1971":"341543100","1972":"368098000","1973":"386968300","1974":"486955000","1975":"577549300","1976":"596675700","1977":"673010600","1978":"717240400","1979":"814067900","1980":"854711500","1981":"846514500","1982":"863933200","1983":"823374900","1984":"848478300","1985":"851296100","1986":"840964400","1987":"972800000","1988":"1038300000","1989":"786300000","1990":"384400000","1991":"348000000","1992":"223500000","1993":"160400000","1994":"132200000","1995":"134800000","1996":"159400000","1997":"295900000","1998":"359600000","1999":"441800000","2000":"529064600","2001":"521000000","2002":"543000000","2003":"416000000","2004":"474700000","2005":"550000000","2006":"604028900","2007":"739027200","2008":"850040500","2009":"1155147400","2010":"1292697100","2011":"1545400000","2012":"1735500000","2013":"1946500000","2014":"2013000000","2015":"2034000000","2016":"2101000000","Country Name":"Liberia","Country Code":"LBR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"28901836158","1991":"31995012469","1992":"33881392045","1993":"30657030223","1994":"28607921929","1995":"25544128199","1996":"27884615385","1997":"30698633109","1998":"27249786142","1999":"35976714101","2000":"38270206950","2001":"34110064452","2002":"20481889764","2003":"26265625000","2004":"33122307692","2005":"47334148578","2006":"54961936663","2007":"67516236338","2008":"87140405361","2009":"63028320702","2010":"74773444901","2011":"34699395524","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Libya","Country Code":"LBY","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"87350296,3","1978":"102094111,1","1979":"123935518,5","1980":"146341370,4","1981":"167970111,1","1982":"182754000","1983":"197228777,8","1984":"217663037","1985":"241273000","1986":"289689703,7","1987":"319999000","1988":"366541074,1","1989":"415518111,1","1990":"483962444,4","1991":"513753814,8","1992":"566894740,7","1993":"574870407,4","1994":"600005555,6","1995":"640449518,5","1996":"662196185,2","1997":"676949592,6","1998":"737554888,9","1999":"775934814,8","2000":"784159222,2","2001":"743808074,1","2002":"748346592,6","2003":"823837148,1","2004":"893107222,2","2005":"951207370,4","2006":"1062617148","2007":"1150526259","2008":"1187075815","2009":"1180949889","2010":"1241892815","2011":"1280623889","2012":"1298815407","2013":"1318052185","2014":"1386188630","2015":"1431135704","2016":"1378627407","Country Name":"St. Lucia","Country Code":"LCA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"81335708158","1961":"86401584488","1962":"99481675926","1963":"1,00E+11","1964":"1,11E+11","1965":"1,20E+11","1966":"1,31E+11","1967":"1,35E+11","1968":"1,45E+11","1969":"1,62E+11","1970":"1,77E+11","1971":"1,98E+11","1972":"2,22E+11","1973":"2,91E+11","1974":"3,77E+11","1975":"3,96E+11","1976":"4,40E+11","1977":"4,85E+11","1978":"5,49E+11","1979":"6,54E+11","1980":"7,76E+11","1981":"8,93E+11","1982":"8,36E+11","1983":"7,42E+11","1984":"7,32E+11","1985":"7,53E+11","1986":"7,67E+11","1987":"8,07E+11","1988":"9,21E+11","1989":"1,01E+12","1990":"1,17E+12","1991":"1,44E+12","1992":"1,36E+12","1993":"1,56E+12","1994":"1,80E+12","1995":"1,92E+12","1996":"2,06E+12","1997":"2,26E+12","1998":"2,27E+12","1999":"2,05E+12","2000":"2,26E+12","2001":"2,20E+12","2002":"1,98E+12","2003":"2,04E+12","2004":"2,35E+12","2005":"2,85E+12","2006":"3,34E+12","2007":"3,94E+12","2008":"4,58E+12","2009":"4,30E+12","2010":"5,33E+12","2011":"6,06E+12","2012":"6,12E+12","2013":"6,27E+12","2014":"6,28E+12","2015":"5,36E+12","2016":"5,20E+12","Country Name":"Latin America & Caribbean","Country Code":"LCN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"1,21E+11","1986":"1,32E+11","1987":"1,44E+11","1988":"1,47E+11","1989":"1,53E+11","1990":"1,57E+11","1991":"1,61E+11","1992":"1,42E+11","1993":"1,44E+11","1994":"1,34E+11","1995":"1,53E+11","1996":"1,69E+11","1997":"1,79E+11","1998":"1,80E+11","1999":"1,82E+11","2000":"2,06E+11","2001":"1,96E+11","2002":"2,12E+11","2003":"2,40E+11","2004":"2,75E+11","2005":"3,22E+11","2006":"3,77E+11","2007":"4,59E+11","2008":"5,71E+11","2009":"5,84E+11","2010":"6,60E+11","2011":"7,50E+11","2012":"7,97E+11","2013":"8,64E+11","2014":"9,37E+11","2015":"9,29E+11","2016":"9,40E+11","Country Name":"Least developed countries: UN classification","Country Code":"LDC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"80209493053","1981":"77218047173","1982":"80698662025","1983":"75225831144","1984":"69082552304","1985":"71599175719","1986":"81243884336","1987":"84768074083","1988":"91473322897","1989":"90496828328","1990":"96263982212","1991":"98290478927","1992":"86879256495","1993":"86545417718","1994":"73004355880","1995":"84186096134","1996":"93849664245","1997":"97016681510","1998":"98076470573","1999":"98178378552","2000":"1,13E+11","2001":"1,02E+11","2002":"1,11E+11","2003":"1,21E+11","2004":"1,38E+11","2005":"1,60E+11","2006":"1,77E+11","2007":"2,12E+11","2008":"2,55E+11","2009":"2,71E+11","2010":"2,90E+11","2011":"3,27E+11","2012":"3,52E+11","2013":"3,80E+11","2014":"4,10E+11","2015":"4,02E+11","2016":"4,06E+11","Country Name":"Low income","Country Code":"LIC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"90098330,67","1971":"104888628,2","1972":"124941925","1973":"165930611,7","1974":"193983720,5","1975":"246387479,2","1976":"272493879","1977":"303496276,3","1978":"436918176,7","1979":"503180670","1980":"534701915,6","1981":"511658690,6","1982":"522090331,5","1983":"524034109,9","1984":"502617355,4","1985":"529078995,6","1986":"779365167,6","1987":"1052843348","1988":"1161757671","1989":"1120000917","1990":"1421466240","1991":"1484152022","1992":"1631197909","1993":"1673104494","1994":"1948118228","1995":"2428461395","1996":"2504033252","1997":"2298410391","1998":"2479721341","1999":"2664026095","2000":"2483953103","2001":"2491822707","2002":"2688630823","2003":"3070691320","2004":"3454362686","2005":"3659251526","2006":"4000239273","2007":"4601299567","2008":"5081432924","2009":"4504549214","2010":"5082366478","2011":"5739977477","2012":"5456009385","2013":"6391735894","2014":"6663501419","2015":"","2016":"","Country Name":"Liechtenstein","Country Code":"LIE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1409873950","1961":"1444327731","1962":"1434156379","1963":"1240672269","1964":"1309747899","1965":"1698319328","1966":"1751470588","1967":"1859465021","1968":"1801344538","1969":"1965546218","1970":"2296470588","1971":"2369308600","1972":"2553936348","1973":"2875625000","1974":"3574586466","1975":"3791298146","1976":"3591319857","1977":"4104509583","1978":"2733183857","1979":"3364611432","1980":"4024621900","1981":"4415844156","1982":"4768765017","1983":"5167913302","1984":"6043474843","1985":"5978460972","1986":"6405210564","1987":"6682167120","1988":"6978371581","1989":"6987267684","1990":"8032551173","1991":"9000362582","1992":"9703011636","1993":"10338679636","1994":"11717604209","1995":"13029697561","1996":"13897738375","1997":"15091913884","1998":"15794972847","1999":"15656327860","2000":"16330814180","2001":"15746229582","2002":"16536535647","2003":"18881765437","2004":"20662525941","2005":"24406252457","2006":"28279814925","2007":"32350248411","2008":"40713812310","2009":"42066217872","2010":"56725745039","2011":"65292741297","2012":"68434399083","2013":"74317806755","2014":"79356456990","2015":"80611989527","2016":"81321876307","Country Name":"Sri Lanka","Country Code":"LKA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"1,37E+11","1966":"1,25E+11","1967":"1,33E+11","1968":"1,42E+11","1969":"1,59E+11","1970":"1,75E+11","1971":"1,82E+11","1972":"1,93E+11","1973":"2,30E+11","1974":"2,96E+11","1975":"3,28E+11","1976":"3,56E+11","1977":"4,08E+11","1978":"4,56E+11","1979":"5,20E+11","1980":"6,46E+11","1981":"6,82E+11","1982":"6,88E+11","1983":"6,73E+11","1984":"6,70E+11","1985":"7,05E+11","1986":"7,35E+11","1987":"8,08E+11","1988":"8,42E+11","1989":"8,54E+11","1990":"9,14E+11","1991":"8,80E+11","1992":"9,17E+11","1993":"9,28E+11","1994":"1,01E+12","1995":"1,13E+12","1996":"1,24E+12","1997":"1,29E+12","1998":"1,16E+12","1999":"1,26E+12","2000":"1,33E+12","2001":"1,35E+12","2002":"1,45E+12","2003":"1,66E+12","2004":"1,90E+12","2005":"2,19E+12","2006":"2,60E+12","2007":"3,20E+12","2008":"3,60E+12","2009":"3,69E+12","2010":"4,66E+12","2011":"5,27E+12","2012":"5,53E+12","2013":"5,77E+12","2014":"6,07E+12","2015":"6,03E+12","2016":"6,25E+12","Country Name":"Lower middle income","Country Code":"LMC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3,23E+11","1961":"3,11E+11","1962":"3,25E+11","1963":"3,50E+11","1964":"3,89E+11","1965":"4,30E+11","1966":"4,46E+11","1967":"4,58E+11","1968":"4,84E+11","1969":"5,41E+11","1970":"5,93E+11","1971":"6,40E+11","1972":"7,15E+11","1973":"9,04E+11","1974":"1,16E+12","1975":"1,28E+12","1976":"1,38E+12","1977":"1,56E+12","1978":"1,69E+12","1979":"2,01E+12","1980":"2,34E+12","1981":"2,52E+12","1982":"2,51E+12","1983":"2,46E+12","1984":"2,50E+12","1985":"2,63E+12","1986":"2,75E+12","1987":"2,83E+12","1988":"3,06E+12","1989":"3,25E+12","1990":"3,66E+12","1991":"3,90E+12","1992":"3,86E+12","1993":"4,11E+12","1994":"4,45E+12","1995":"4,98E+12","1996":"5,43E+12","1997":"5,75E+12","1998":"5,57E+12","1999":"5,44E+12","2000":"5,94E+12","2001":"5,99E+12","2002":"6,11E+12","2003":"6,91E+12","2004":"8,20E+12","2005":"9,77E+12","2006":"1,16E+13","2007":"1,44E+13","2008":"1,73E+13","2009":"1,69E+13","2010":"2,07E+13","2011":"2,44E+13","2012":"2,60E+13","2013":"2,76E+13","2014":"2,85E+13","2015":"2,71E+13","2016":"2,71E+13","Country Name":"Low & middle income","Country Code":"LMY","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"34579308,41","1961":"35699286,01","1962":"41859162,82","1963":"47039059,22","1964":"51938961,22","1965":"54878902,42","1966":"56698866,02","1967":"59260814,78","1968":"61444771,1","1969":"65966680,67","1970":"68738625,23","1971":"76482102,91","1972":"80915831,92","1973":"121181556,2","1974":"150846210,4","1975":"149560513,9","1976":"147654093,8","1977":"193307267,7","1978":"266559337,6","1979":"290142517,8","1980":"431561376,5","1981":"434188034,2","1982":"348746792,5","1983":"386699344,1","1984":"333158502,3","1985":"268626893,7","1986":"318862870,3","1987":"402774850,3","1988":"470389190,1","1989":"495404890,9","1990":"596415106,6","1991":"704329193,3","1992":"831033946,4","1993":"835592816,3","1994":"878250452,8","1995":"1001889846","1996":"946123280,5","1997":"997996034,9","1998":"928458201,1","1999":"912771283,6","2000":"887295262,2","2001":"825706966,8","2002":"775780697,3","2003":"1157832936","2004":"1511236652","2005":"1682350942","2006":"1800105593","2007":"1820597205","2008":"1868776303","2009":"1864004707","2010":"2394097299","2011":"2791545696","2012":"2678243067","2013":"2532392022","2014":"2520952363","2015":"2335194894","2016":"2199709489","Country Name":"Lesotho","Country Code":"LSO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1,71E+11","1961":"1,58E+11","1962":"1,66E+11","1963":"1,80E+11","1964":"1,98E+11","1965":"2,21E+11","1966":"2,45E+11","1967":"2,48E+11","1968":"2,53E+11","1969":"2,83E+11","1970":"3,21E+11","1971":"3,58E+11","1972":"4,11E+11","1973":"5,22E+11","1974":"6,14E+11","1975":"6,75E+11","1976":"7,37E+11","1977":"8,55E+11","1978":"8,91E+11","1979":"1,06E+12","1980":"1,21E+12","1981":"1,28E+12","1982":"1,31E+12","1983":"1,21E+12","1984":"1,27E+12","1985":"1,36E+12","1986":"1,45E+12","1987":"1,53E+12","1988":"1,68E+12","1989":"1,91E+12","1990":"2,03E+12","1991":"2,23E+12","1992":"2,08E+12","1993":"2,16E+12","1994":"2,47E+12","1995":"3,03E+12","1996":"3,33E+12","1997":"3,48E+12","1998":"3,35E+12","1999":"3,10E+12","2000":"3,40E+12","2001":"3,52E+12","2002":"3,73E+12","2003":"4,25E+12","2004":"5,11E+12","2005":"6,16E+12","2006":"7,44E+12","2007":"9,37E+12","2008":"1,16E+13","2009":"1,13E+13","2010":"1,35E+13","2011":"1,65E+13","2012":"1,76E+13","2013":"1,89E+13","2014":"1,97E+13","2015":"1,84E+13","2016":"1,84E+13","Country Name":"Late-demographic dividend","Country Code":"LTE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"7870782261","1996":"8385109020","1997":"10120274493","1998":"11240360898","1999":"10972878636","2000":"11539211480","2001":"12252498921","2002":"14278357284","2003":"18802576988","2004":"22649930576","2005":"26125575942","2006":"30216060233","2007":"39738180077","2008":"47850551149","2009":"37440673478","2010":"37120517694","2011":"43476878139","2012":"42847900766","2013":"46473646002","2014":"48545251796","2015":"41402022148","2016":"42738875963","Country Name":"Lithuania","Country Code":"LTU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"703925705,9","1961":"704145671,4","1962":"741509480,8","1963":"791140595,8","1964":"903158753,9","1965":"921600736,3","1966":"968440149,5","1967":"974721762,5","1968":"1066447131","1969":"1234878981","1970":"1509155063","1971":"1572310772","1972":"1968733022","1973":"2701874664","1974":"3295861019","1975":"3233431611","1976":"3544268025","1977":"3922895892","1978":"4884869092","1979":"5711457760","1980":"6232005656","1981":"5231808670","1982":"4764549532","1983":"4683697830","1984":"4594891581","1985":"4738559685","1986":"6921264132","1987":"8614215559","1988":"9750161053","1989":"10391504709","1990":"13229247948","1991":"14321878795","1992":"16065740778","1993":"16486900187","1994":"18325791415","1995":"21588170498","1996":"21776609772","1997":"19731912494","1998":"20209122027","1999":"22235929043","2000":"21263514833","2001":"21272418792","2002":"23616328816","2003":"29557325056","2004":"34685281848","2005":"37347394603","2006":"42414308117","2007":"50888134410","2008":"55849686539","2009":"51370543206","2010":"53212476812","2011":"60004630234","2012":"56677961787","2013":"61808178300","2014":"66298060522","2015":"58048242436","2016":"59947781147","Country Name":"Luxembourg","Country Code":"LUX","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"5788368511","1996":"5970044666","1997":"6525676264","1998":"7174985107","1999":"7533187605","2000":"7937758980","2001":"8350252966","2002":"9546441564","2003":"11748433157","2004":"14373269156","2005":"16922504045","2006":"21447021570","2007":"30901399261","2008":"35596016664","2009":"26169854045","2010":"23757368290","2011":"28223552825","2012":"28119996053","2013":"30254571078","2014":"31352249350","2015":"27026037600","2016":"27677391316","Country Name":"Latvia","Country Code":"LVA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"1130457130","1983":"1121486563","1984":"1292297736","1985":"1348827324","1986":"1517496131","1987":"1941246972","1988":"2269233639","1989":"2683254708","1990":"3220920085","1991":"3735117374","1992":"4879018602","1993":"5625533410","1994":"6265844252","1995":"6996034037","1996":"7122539667","1997":"7211264780","1998":"6742367273","1999":"6490571704","2000":"6720492406","2001":"6811227983","2002":"7322677820","2003":"8195033162","2004":"10585624891","2005":"12092222042","2006":"14789661809","2007":"18340447243","2008":"20917444920","2009":"21475520709","2010":"28123640999","2011":"36709860068","2012":"43031577366","2013":"51552075902","2014":"55347998648","2015":"45415278647","2016":"44802641830","Country Name":"Macao SAR, China","Country Code":"MAC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"St. Martin (French part)","Country Code":"MAF","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2037150716","1961":"2025689537","1962":"2379606422","1963":"2657247327","1964":"2798339769","1965":"2948325264","1966":"2876395613","1967":"3046339295","1968":"3271415868","1969":"3651615453","1970":"3956328426","1971":"4356633663","1972":"5074117545","1973":"6242177798","1974":"7675408486","1975":"8984824183","1976":"9584323309","1977":"11049896742","1978":"13236854105","1979":"15912133569","1980":"21728770055","1981":"17788171722","1982":"17692341358","1983":"16251460689","1984":"14824728528","1985":"14991283216","1986":"19462175322","1987":"21765261042","1988":"25705296184","1989":"26314220188","1990":"30180108562","1991":"32285388165","1992":"33711069431","1993":"31655473664","1994":"35604137423","1995":"39030285468","1996":"43161452678","1997":"39147844526","1998":"41806219379","1999":"41632027600","2000":"38857251336","2001":"39459581217","2002":"42236836821","2003":"52064058834","2004":"59626020162","2005":"62343022651","2006":"68640825481","2007":"79041294874","2008":"92507257784","2009":"92897320376","2010":"93216746662","2011":"1,01E+11","2012":"98266306615","2013":"1,07E+11","2014":"1,10E+11","2015":"1,01E+11","2016":"1,01E+11","Country Name":"Morocco","Country Code":"MAR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"293073868","1971":"327651488","1972":"402460333,2","1973":"523552815,1","1974":"563939670,7","1975":"711922994,2","1976":"735339911,9","1977":"811250927,4","1978":"1000535735","1979":"1209898293","1980":"1378130996","1981":"1205166026","1982":"1143229072","1983":"1092551781","1984":"1037314956","1985":"1082851077","1986":"1515209588","1987":"1839095595","1988":"2000674667","1989":"2010116851","1990":"2481316054","1991":"2480497548","1992":"2737066956","1993":"2574439973","1994":"2720297739","1995":"3130270919","1996":"3137848783","1997":"2840182192","1998":"2934578789","1999":"2906009308","2000":"2647883820","2001":"2671401083","2002":"2905973022","2003":"3588988601","2004":"4110348444","2005":"4280072626","2006":"4663488363","2007":"5974371696","2008":"6919241412","2009":"5557245122","2010":"5350674803","2011":"6074884389","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Monaco","Country Code":"MCO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"1752975841","1996":"1695130457","1997":"1930071407","1998":"1639497207","1999":"1170785048","2000":"1288429151","2001":"1480656884","2002":"1661818168","2003":"1980901554","2004":"2598231467","2005":"2988338439","2006":"3408272498","2007":"4401154128","2008":"6054806101","2009":"5439422031","2010":"5811604052","2011":"7015206498","2012":"7284686576","2013":"7985349731","2014":"7983271111","2015":"6512899540","2016":"6749515655","Country Name":"Moldova","Country Code":"MDA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"673081724,1","1961":"699161943,9","1962":"739286906,9","1963":"759345863","1964":"802482182,9","1965":"833563472,2","1966":"900264583,7","1967":"956436931,1","1968":"1031669636","1969":"1056391055","1970":"1111859570","1971":"1199507630","1972":"1341590682","1973":"1653062347","1974":"1917508190","1975":"2283049233","1976":"2181844194","1977":"2358930406","1978":"2669755116","1979":"3463565881","1980":"4042139901","1981":"3594868208","1982":"3526198070","1983":"3511573992","1984":"2939485472","1985":"2857889712","1986":"3258288891","1987":"2565634382","1988":"2442507588","1989":"2498059015","1990":"3081479800","1991":"2653141959","1992":"3024459564","1993":"3370842211","1994":"2977040722","1995":"3159901232","1996":"3995028593","1997":"3545776697","1998":"3738704468","1999":"3717515283","2000":"3877673539","2001":"4529575348","2002":"4397254608","2003":"5474030080","2004":"4363934494","2005":"5039293031","2006":"5515884349","2007":"7342923489","2008":"9413002921","2009":"8550363975","2010":"8729936136","2011":"9892702358","2012":"9919780071","2013":"10601690872","2014":"10673516673","2015":"9738652322","2016":"9990653078","Country Name":"Madagascar","Country Code":"MDG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"42463576,16","1981":"44781456,95","1982":"47935843,79","1983":"57829787,23","1984":"109503546,1","1985":"127154929,6","1986":"141902097,9","1987":"141268980,5","1988":"168610478,4","1989":"189535398,2","1990":"215089005,2","1991":"244468292,7","1992":"284853358,6","1993":"322326642,3","1994":"355884383,1","1995":"398988955","1996":"450382328","1997":"508223602,4","1998":"540096397,6","1999":"589239753,6","2000":"624337145,3","2001":"870179738,6","2002":"897031250","2003":"1043403344","2004":"1202240023","2005":"1119806500","2006":"1474698125","2007":"1745998938","2008":"2109960938","2009":"2149257813","2010":"2323401758","2011":"2449576517","2012":"2518312129","2013":"2795147950","2014":"3094197810","2015":"3435244659","2016":"3591112751","Country Name":"Maldives","Country Code":"MDV","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"32544887125","1969":"36324978697","1970":"40541253687","1971":"46837776481","1972":"57004801533","1973":"76859486838","1974":"1,41E+11","1975":"1,54E+11","1976":"1,91E+11","1977":"2,22E+11","1978":"2,36E+11","1979":"3,08E+11","1980":"4,00E+11","1981":"4,13E+11","1982":"4,11E+11","1983":"4,17E+11","1984":"4,23E+11","1985":"4,29E+11","1986":"4,38E+11","1987":"4,06E+11","1988":"4,03E+11","1989":"4,16E+11","1990":"5,45E+11","1991":"5,45E+11","1992":"5,93E+11","1993":"5,97E+11","1994":"6,22E+11","1995":"7,08E+11","1996":"8,02E+11","1997":"8,33E+11","1998":"8,09E+11","1999":"8,67E+11","2000":"9,67E+11","2001":"9,71E+11","2002":"9,67E+11","2003":"1,09E+12","2004":"1,26E+12","2005":"1,52E+12","2006":"1,78E+12","2007":"2,11E+12","2008":"2,64E+12","2009":"2,35E+12","2010":"2,75E+12","2011":"3,29E+12","2012":"3,52E+12","2013":"3,57E+12","2014":"3,55E+12","2015":"3,15E+12","2016":"3,11E+12","Country Name":"Middle East & North Africa","Country Code":"MEA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"13056168000","1961":"14153952000","1962":"15221056000","1963":"16936336000","1964":"20070136000","1965":"21829712000","1966":"24337232000","1967":"26556376000","1968":"29363632000","1969":"32515752000","1970":"35541712000","1971":"39200880000","1972":"45178120000","1973":"55271304000","1974":"71976544000","1975":"88003984000","1976":"89023915584","1977":"81825783186","1978":"1,03E+11","1979":"1,35E+11","1980":"1,94E+11","1981":"2,50E+11","1982":"1,74E+11","1983":"1,49E+11","1984":"1,76E+11","1985":"1,84E+11","1986":"1,29E+11","1987":"1,40E+11","1988":"1,83E+11","1989":"2,23E+11","1990":"2,63E+11","1991":"3,14E+11","1992":"3,64E+11","1993":"5,04E+11","1994":"5,27E+11","1995":"3,44E+11","1996":"3,97E+11","1997":"4,81E+11","1998":"5,02E+11","1999":"5,79E+11","2000":"6,84E+11","2001":"7,25E+11","2002":"7,42E+11","2003":"7,13E+11","2004":"7,70E+11","2005":"8,66E+11","2006":"9,65E+11","2007":"1,04E+12","2008":"1,10E+12","2009":"8,95E+11","2010":"1,05E+12","2011":"1,17E+12","2012":"1,19E+12","2013":"1,26E+12","2014":"1,30E+12","2015":"1,15E+12","2016":"1,05E+12","Country Name":"Mexico","Country Code":"MEX","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"31020000","1982":"34918000","1983":"41749000","1984":"45144000","1985":"43879000","1986":"55989000","1987":"62983000","1988":"70688000","1989":"72798000","1990":"78476000","1991":"82507000","1992":"91063000","1993":"99461000","1994":"108071000","1995":"120230000","1996":"110858000","1997":"106289100","1998":"108702100","1999":"107978900","2000":"110937700","2001":"115152100","2002":"124735100","2003":"126887600","2004":"131106400","2005":"137744500","2006":"143656600","2007":"150851598,3","2008":"152901100","2009":"152631200","2010":"164751300","2011":"172674900","2012":"185055800","2013":"190992000","2014":"183114100","2015":"179432600","2016":"183000000","Country Name":"Marshall Islands","Country Code":"MHL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3,10E+11","1961":"2,99E+11","1962":"3,11E+11","1963":"3,32E+11","1964":"3,75E+11","1965":"4,14E+11","1966":"4,27E+11","1967":"4,40E+11","1968":"4,66E+11","1969":"5,21E+11","1970":"5,71E+11","1971":"6,16E+11","1972":"6,89E+11","1973":"8,73E+11","1974":"1,12E+12","1975":"1,24E+12","1976":"1,34E+12","1977":"1,51E+12","1978":"1,63E+12","1979":"1,95E+12","1980":"2,28E+12","1981":"2,46E+12","1982":"2,44E+12","1983":"2,40E+12","1984":"2,44E+12","1985":"2,58E+12","1986":"2,69E+12","1987":"2,76E+12","1988":"2,99E+12","1989":"3,18E+12","1990":"3,58E+12","1991":"3,83E+12","1992":"3,79E+12","1993":"4,04E+12","1994":"4,40E+12","1995":"4,92E+12","1996":"5,36E+12","1997":"5,67E+12","1998":"5,50E+12","1999":"5,37E+12","2000":"5,85E+12","2001":"5,92E+12","2002":"6,03E+12","2003":"6,83E+12","2004":"8,10E+12","2005":"9,66E+12","2006":"1,15E+13","2007":"1,43E+13","2008":"1,71E+13","2009":"1,67E+13","2010":"2,04E+13","2011":"2,42E+13","2012":"2,57E+13","2013":"2,72E+13","2014":"2,82E+13","2015":"2,67E+13","2016":"2,67E+13","Country Name":"Middle income","Country Code":"MIC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"4471828622","1991":"4694744898","1992":"2316618543","1993":"2550195043","1994":"3381270208","1995":"4449375346","1996":"4422160018","1997":"3735312143","1998":"3571043103","1999":"3673288264","2000":"3772851420","2001":"3709637830","2002":"4018365247","2003":"4946292775","2004":"5682719260","2005":"6258600714","2006":"6861222332","2007":"8336478142","2008":"9909548411","2009":"9401731496","2010":"9407168702","2011":"10494632699","2012":"9745251126","2013":"10817712139","2014":"11362272838","2015":"10051659161","2016":"10899583155","Country Name":"Macedonia","Country Code":"MKD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"275494520,1","1968":"343771964,7","1969":"339913833,1","1970":"359772363,3","1971":"430096738,4","1972":"486617332,4","1973":"563683660,3","1974":"538747268,3","1975":"830710615,2","1976":"939227993,7","1977":"1049838493","1978":"1222702356","1979":"1595423286","1980":"1759690812","1981":"1538972158","1982":"1333754034","1983":"1297765449","1984":"1232932008","1985":"1392195933","1986":"1852163475","1987":"2090629723","1988":"2169040742","1989":"2181821902","1990":"2681912030","1991":"2724131545","1992":"2830673389","1993":"2818280876","1994":"2081846483","1995":"2706425298","1996":"2780422212","1997":"2697105694","1998":"2920358587","1999":"3439463140","2000":"2954129566","2001":"3465305993","2002":"3889758024","2003":"4703504467","2004":"5444474268","2005":"6245031690","2006":"6899799786","2007":"8145694632","2008":"9750822511","2009":"10181021770","2010":"10678749467","2011":"12978107561","2012":"12442747897","2013":"12813248725","2014":"14004067516","2015":"12746688962","2016":"14045098238","Country Name":"Mali","Country Code":"MLI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"250721821,6","1971":"264579879,8","1972":"295118249,3","1973":"345602025,4","1974":"376094108,5","1975":"474620439,6","1976":"527936988,8","1977":"625573345,5","1978":"793675169,9","1979":"1001300838","1980":"1250242108","1981":"1243469361","1982":"1234518125","1983":"1165771369","1984":"1101828569","1985":"1117835286","1986":"1435079200","1987":"1751247763","1988":"2019474244","1989":"2118574772","1990":"2547163582","1991":"2750041434","1992":"3021910217","1993":"2709178327","1994":"2998570147","1995":"3439931907","1996":"3570271558","1997":"3705372039","1998":"3923637971","1999":"4127313818","2000":"4306192436","2001":"4331870648","2002":"4689832690","2003":"5456583589","2004":"6062780269","2005":"6394851387","2006":"6757119558","2007":"7880509171","2008":"8977149553","2009":"8528202278","2010":"8741059603","2011":"9500001983","2012":"9198987220","2013":"10131419449","2014":"11188785253","2015":"10287007021","2016":"10949092472","Country Name":"Malta","Country Code":"MLT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"8905066164","2001":"6477790688","2002":"6777632512","2003":"10467109978","2004":"10567354056","2005":"11986972419","2006":"14502553710","2007":"20182477481","2008":"31862554102","2009":"36906181381","2010":"49540813342","2011":"59977326086","2012":"59731122170","2013":"60132854537","2014":"65574726566","2015":"62600906116","2016":"67429590536","Country Name":"Myanmar","Country Code":"MMR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"2,92E+11","1994":"2,99E+11","1995":"3,41E+11","1996":"3,95E+11","1997":"4,06E+11","1998":"4,12E+11","1999":"4,36E+11","2000":"4,52E+11","2001":"4,67E+11","2002":"4,54E+11","2003":"5,12E+11","2004":"5,86E+11","2005":"6,91E+11","2006":"8,03E+11","2007":"9,90E+11","2008":"1,23E+12","2009":"1,18E+12","2010":"1,36E+12","2011":"1,58E+12","2012":"1,67E+12","2013":"1,64E+12","2014":"1,58E+12","2015":"1,45E+12","2016":"","Country Name":"Middle East & North Africa (excluding high income)","Country Code":"MNA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"984279598,3","2001":"1159860290","2002":"1284446123","2003":"1707678390","2004":"2073255525","2005":"2257174481","2006":"2696020575","2007":"3668857104","2008":"4519731947","2009":"4141382328","2010":"4139192053","2011":"4538198499","2012":"4087724528","2013":"4464260489","2014":"4587928884","2015":"4019889098","2016":"4173255531","Country Name":"Montenegro","Country Code":"MNE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"2310099100","1982":"2552401933","1983":"2725736633","1984":"2098734600","1985":"2186505475","1986":"2896178867","1987":"3020611600","1988":"3204461567","1989":"3576966800","1990":"2560785660","1991":"2379018326","1992":"1317611864","1993":"768401634,2","1994":"925817092,2","1995":"1452165005","1996":"1345719472","1997":"1180934203","1998":"1124440249","1999":"1057408589","2000":"1136896124","2001":"1267997934","2002":"1396555720","2003":"1595297356","2004":"1992066808","2005":"2523471532","2006":"3414055566","2007":"4234999823","2008":"5623216449","2009":"4583850368","2010":"7189481853","2011":"10409797610","2012":"12292770631","2013":"12582122604","2014":"12226514746","2015":"11741338841","2016":"11160356498","Country Name":"Mongolia","Country Code":"MNG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"1284000000","2003":"1239000000","2004":"1210000000","2005":"1061000000","2006":"990000000","2007":"938000000","2008":"939000000","2009":"795000000","2010":"799000000","2011":"733000000","2012":"751000000","2013":"780000000","2014":"836000000","2015":"922000000","2016":"","Country Name":"Northern Mariana Islands","Country Code":"MNP","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"3526287037","1981":"3537099150","1982":"3612171958","1983":"3236430348","1984":"3376172170","1985":"4456240741","1986":"5247193069","1987":"2354117303","1988":"2093571674","1989":"2314159887","1990":"2512079324","1991":"3263761938","1992":"2291175765","1993":"2394823062","1994":"2460670288","1995":"2521738760","1996":"3523842275","1997":"4227273069","1998":"4873242526","1999":"5302532113","2000":"5016469069","2001":"4766928747","2002":"5031510909","2003":"5597367853","2004":"6831808930","2005":"7723846195","2006":"8312078525","2007":"9366742309","2008":"11494837053","2009":"10911698208","2010":"10154238250","2011":"13131168012","2012":"14534278446","2013":"16018848991","2014":"16961127046","2015":"14798399862","2016":"11014858592","Country Name":"Mozambique","Country Code":"MOZ","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"92609222,69","1961":"107726181,2","1962":"111148585,6","1963":"113797356,8","1964":"151897168,1","1965":"172767213,3","1966":"180340653,8","1967":"191221777,8","1968":"210695183,8","1969":"199643444,6","1970":"209348253,6","1971":"227051055","1972":"265009395,1","1973":"333731874,4","1974":"414772351,9","1975":"475916514,7","1976":"524407931,9","1977":"540635389,6","1978":"544424605,1","1979":"644070364,9","1980":"709041452,2","1981":"747994681,9","1982":"750214410,7","1983":"788371855,9","1984":"726937320,8","1985":"683193885","1986":"802890746,9","1987":"909820553,4","1988":"957377507,5","1989":"981529400,5","1990":"1019600771","1991":"1443688870","1992":"1464392416","1993":"1249944999","1994":"1315932645","1995":"1415296704","1996":"1442598431","1997":"1401946853","1998":"1375115534","1999":"1405662879","2000":"1293654175","2001":"1295539448","2002":"1324426607","2003":"1563074860","2004":"1833444740","2005":"2184444849","2006":"3040716679","2007":"3356757497","2008":"3978425731","2009":"3670515696","2010":"4343665120","2011":"5179689614","2012":"5225532807","2013":"5724227536","2014":"5391475878","2015":"4844223518","2016":"4634588338","Country Name":"Mauritania","Country Code":"MRT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"706991274,4","1977":"827094668","1978":"1019630847","1979":"1216229419","1980":"1136543003","1981":"1147192917","1982":"1082939379","1983":"1094857358","1984":"1044928625","1985":"1080642033","1986":"1469046115","1987":"1888754655","1988":"2143484488","1989":"2191096860","1990":"2653480001","1991":"2856890681","1992":"3224267548","1993":"3263368410","1994":"3558137040","1995":"4040345933","1996":"4421943910","1997":"4187367602","1998":"4169664285","1999":"4291172816","2000":"4582555125","2001":"4536538211","2002":"4767303154","2003":"5609831328","2004":"6385695187","2005":"6283803256","2006":"7028803366","2007":"8150138757","2008":"9990370016","2009":"9128843109","2010":"10003670690","2011":"11518393367","2012":"11668685524","2013":"12129642296","2014":"12803445934","2015":"11681761261","2016":"12164207330","Country Name":"Mauritius","Country Code":"MUS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"162960130,5","1961":"174580139,8","1962":"183120146,6","1963":"190820152,8","1964":"194740155,9","1965":"229460183,7","1966":"260400208,5","1967":"269812781,8","1968":"245160098,1","1969":"265800106,4","1970":"290520116,3","1971":"365389567,2","1972":"406084197,4","1973":"444302221,3","1974":"548618789,9","1975":"613196872,6","1976":"670309253","1977":"806265763,8","1978":"948983308,8","1979":"1058297676","1980":"1237662067","1981":"1237686961","1982":"1180094061","1983":"1223225019","1984":"1208026080","1985":"1131349992","1986":"1183671788","1987":"1183071363","1988":"1379923808","1989":"1590201656","1990":"1880784192","1991":"2203536031","1992":"1799529357","1993":"2070647127","1994":"1181801920","1995":"1397454122","1996":"2281039098","1997":"2663238983","1998":"1750585204","1999":"1775920040","2000":"1743506287","2001":"1716502862","2002":"3495748398","2003":"3208837077","2004":"3476094499","2005":"3655909664","2006":"3997852636","2007":"4432192844","2008":"5320925102","2009":"6190991712","2010":"6959697194","2011":"8003300198","2012":"6028470989","2013":"5518901971","2014":"6054750320","2015":"6373201160","2016":"5441852138","Country Name":"Malawi","Country Code":"MWI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1916241997","1961":"1901868548","1962":"2001502679","1963":"2510126748","1964":"2674441396","1965":"2956356984","1966":"3143538482","1967":"3188945512","1968":"3330393310","1969":"3664575983","1970":"3864170913","1971":"4244340334","1972":"5043268549","1973":"7662996767","1974":"9496074114","1975":"9298800799","1976":"11050125905","1977":"13139397879","1978":"16358376511","1979":"21213672089","1980":"24488033442","1981":"25004557094","1982":"26804401816","1983":"30346788438","1984":"33943505718","1985":"31200161095","1986":"27734562640","1987":"32181695507","1988":"35271880250","1989":"38848567631","1990":"44024178343","1991":"49142784405","1992":"59167157498","1993":"66894448545","1994":"74477975918","1995":"88704944179","1996":"1,01E+11","1997":"1,00E+11","1998":"72167753771","1999":"79148947368","2000":"93789736842","2001":"92783947368","2002":"1,01E+11","2003":"1,10E+11","2004":"1,25E+11","2005":"1,44E+11","2006":"1,63E+11","2007":"1,94E+11","2008":"2,31E+11","2009":"2,02E+11","2010":"2,55E+11","2011":"2,98E+11","2012":"3,14E+11","2013":"3,23E+11","2014":"3,38E+11","2015":"2,96E+11","2016":"2,96E+11","Country Name":"Malaysia","Country Code":"MYS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"5,84E+11","1961":"6,04E+11","1962":"6,47E+11","1963":"6,83E+11","1964":"7,35E+11","1965":"7,98E+11","1966":"8,75E+11","1967":"9,27E+11","1968":"1,01E+12","1969":"1,10E+12","1970":"1,16E+12","1971":"1,27E+12","1972":"1,40E+12","1973":"1,56E+12","1974":"1,71E+12","1975":"1,86E+12","1976":"2,08E+12","1977":"2,30E+12","1978":"2,58E+12","1979":"2,88E+12","1980":"3,14E+12","1981":"3,52E+12","1982":"3,66E+12","1983":"3,98E+12","1984":"4,40E+12","1985":"4,71E+12","1986":"4,97E+12","1987":"5,30E+12","1988":"5,76E+12","1989":"6,22E+12","1990":"6,58E+12","1991":"6,79E+12","1992":"7,13E+12","1993":"7,46E+12","1994":"7,89E+12","1995":"8,27E+12","1996":"8,73E+12","1997":"9,26E+12","1998":"9,72E+12","1999":"1,03E+13","2000":"1,10E+13","2001":"1,14E+13","2002":"1,17E+13","2003":"1,24E+13","2004":"1,33E+13","2005":"1,43E+13","2006":"1,52E+13","2007":"1,59E+13","2008":"1,63E+13","2009":"1,58E+13","2010":"1,66E+13","2011":"1,73E+13","2012":"1,80E+13","2013":"1,85E+13","2014":"1,92E+13","2015":"1,96E+13","2016":"2,01E+13","Country Name":"North America","Country Code":"NAC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"2434884951","1981":"2259179125","1982":"2128089611","1983":"2308102953","1984":"1960567071","1985":"1615776821","1986":"1816754048","1987":"2310454961","1988":"2506554607","1989":"2547340984","1990":"2804379662","1991":"3012742078","1992":"3448326858","1993":"3218475900","1994":"3636645995","1995":"3942478206","1996":"3945340776","1997":"4102648720","1998":"3826527631","1999":"3818954448","2000":"3908661518","2001":"3546783708","2002":"3361251198","2003":"4931312147","2004":"6606858786","2005":"7261333795","2006":"7978734402","2007":"8740865600","2008":"8486721917","2009":"8876191121","2010":"11282192605","2011":"12409629836","2012":"13016272899","2013":"12713366873","2014":"12853963143","2015":"11491507356","2016":"10267157280","Country Name":"Namibia","Country Code":"NAM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"159594493,5","1966":"164206537,6","1967":"180036768,9","1968":"215507164","1969":"263108834,5","1970":"358815681,9","1971":"413634335,3","1972":"505892512,9","1973":"542294864,8","1974":"637400199,1","1975":"816647865,8","1976":"798310509,6","1977":"837616756,5","1978":"846007597,7","1979":"1047225130","1980":"1182457143","1981":"972563810,2","1982":"904619629,8","1983":"823832940,5","1984":"796018978,5","1985":"854823821,7","1986":"1201262518","1987":"1488113532","1988":"2072735787","1989":"2185072798","1990":"2529310104","1991":"2653781596","1992":"2923764926","1993":"3070161471","1994":"3038727617","1995":"3628440275","1996":"3606968434","1997":"3291489841","1998":"3158806480","1999":"3056999988","2000":"2682347064","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"New Caledonia","Country Code":"NCL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"449526872,6","1961":"485785231,7","1962":"531736599,9","1963":"586294879,5","1964":"582816396,2","1965":"673383510,2","1966":"702296079,9","1967":"665586872,8","1968":"641214226,8","1969":"625867984,4","1970":"649916621,2","1971":"693573704,4","1972":"742779659,5","1973":"946385105","1974":"1026137112","1975":"1048690932","1976":"1064517600","1977":"1291458044","1978":"1774365588","1979":"2109277663","1980":"2508524716","1981":"2170893418","1982":"2017612218","1983":"1803099561","1984":"1461243327","1985":"1440581653","1986":"1904097001","1987":"2233006102","1988":"2280356194","1989":"2179567111","1990":"2480673305","1991":"2327986216","1992":"2344987614","1993":"1606581744","1994":"1563207225","1995":"1880803362","1996":"1987770899","1997":"1845599608","1998":"2076737357","1999":"2018193703","2000":"1798374468","2001":"1945327565","2002":"2170481509","2003":"2731416346","2004":"3052898739","2005":"3405134832","2006":"3646728060","2007":"4291363391","2008":"5403363917","2009":"5397121856","2010":"5718589799","2011":"6409169890","2012":"6942209595","2013":"7667951988","2014":"8245312137","2015":"7142951342","2016":"7508986509","Country Name":"Niger","Country Code":"NER","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"4196092258","1961":"4467200336","1962":"4909302954","1963":"5165489010","1964":"5552822484","1965":"5874422512","1966":"6366792664","1967":"5203135937","1968":"5200895982","1969":"6634187316","1970":"12545849083","1971":"9181769912","1972":"12274416018","1973":"15162871287","1974":"24846641318","1975":"27778934625","1976":"36308883249","1977":"36035407725","1978":"36527862209","1979":"47259911894","1980":"64201788123","1981":"61076493506","1982":"51397461686","1983":"35451565749","1984":"28500815241","1985":"28873977228","1986":"20721499308","1987":"24093203445","1988":"23272161397","1989":"24231168859","1990":"30757075595","1991":"27392886873","1992":"29300903643","1993":"15789003753","1994":"18086400536","1995":"28546958641","1996":"34987951375","1997":"35822342618","1998":"32004613750","1999":"35870792988","2000":"46386011231","2001":"44137994252","2002":"59116847822","2003":"67655813930","2004":"87845420504","2005":"1,12E+11","2006":"1,45E+11","2007":"1,66E+11","2008":"2,08E+11","2009":"1,69E+11","2010":"3,69E+11","2011":"4,12E+11","2012":"4,61E+11","2013":"5,15E+11","2014":"5,68E+11","2015":"4,81E+11","2016":"4,05E+11","Country Name":"Nigeria","Country Code":"NGA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"223854666,7","1961":"240524723,4","1962":"265291588,7","1963":"292916241,1","1964":"341973758,9","1965":"566542872,4","1966":"606671444","1967":"657171436,7","1968":"695899980,4","1969":"747971449,6","1970":"776585681,1","1971":"826571413,4","1972":"880842890,1","1973":"1093571442","1974":"1520900045","1975":"1590428523","1976":"1847871372","1977":"2239857061","1978":"2142128604","1979":"1527852636","1980":"2189347368","1981":"2448290110","1982":"2465165180","1983":"2743341724","1984":"3105517091","1985":"2683816289","1986":"2885710609","1987":"3851213728","1988":"2630904262","1989":"1013184746","1990":"1009455476","1991":"1488804124","1992":"1792800000","1993":"1756454248","1994":"3863185119","1995":"4140470000","1996":"4308351903","1997":"4389965591","1998":"4635267225","1999":"4855717875","2000":"5107329007","2001":"5323146566","2002":"5224213018","2003":"5322454926","2004":"5795568205","2005":"6321335612","2006":"6763671611","2007":"7423377429","2008":"8496965842","2009":"8298695145","2010":"8758622329","2011":"9774316692","2012":"10532001130","2013":"10982972256","2014":"11880438824","2015":"12747741540","2016":"13230844687","Country Name":"Nicaragua","Country Code":"NIC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"12276734172","1961":"13493833740","1962":"14647057370","1963":"15891241386","1964":"18699380731","1965":"21000586933","1966":"22867203317","1967":"25087562181","1968":"27817605743","1969":"31503868835","1970":"37677621538","1971":"44010160464","1972":"54008338918","1973":"70924006306","1974":"86129928027","1975":"98970041042","1976":"1,08E+11","1977":"1,25E+11","1978":"1,54E+11","1979":"1,77E+11","1980":"1,93E+11","1981":"1,62E+11","1982":"1,56E+11","1983":"1,51E+11","1984":"1,42E+11","1985":"1,42E+11","1986":"1,98E+11","1987":"2,42E+11","1988":"2,59E+11","1989":"2,55E+11","1990":"3,14E+11","1991":"3,23E+11","1992":"3,58E+11","1993":"3,49E+11","1994":"3,74E+11","1995":"4,47E+11","1996":"4,46E+11","1997":"4,12E+11","1998":"4,32E+11","1999":"4,42E+11","2000":"4,13E+11","2001":"4,27E+11","2002":"4,65E+11","2003":"5,72E+11","2004":"6,51E+11","2005":"6,79E+11","2006":"7,27E+11","2007":"8,39E+11","2008":"9,36E+11","2009":"8,58E+11","2010":"8,36E+11","2011":"8,94E+11","2012":"8,29E+11","2013":"8,67E+11","2014":"8,80E+11","2015":"7,50E+11","2016":"7,71E+11","Country Name":"Netherlands","Country Code":"NLD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"5163271598","1961":"5632460937","1962":"6066976683","1963":"6510239503","1964":"7159202706","1965":"8058681060","1966":"8696460205","1967":"9514496703","1968":"10159934137","1969":"11063065083","1970":"12814123115","1971":"14583114840","1972":"17358610850","1973":"22534253703","1974":"27145693810","1975":"32877805200","1976":"35942270686","1977":"41508030431","1978":"46523091010","1979":"53132244624","1980":"64439382896","1981":"63596654761","1982":"62647195538","1983":"61627240831","1984":"62057955033","1985":"65416879914","1986":"78693253276","1987":"94230055659","1988":"1,02E+11","1989":"1,03E+11","1990":"1,20E+11","1991":"1,22E+11","1992":"1,31E+11","1993":"1,21E+11","1994":"1,27E+11","1995":"1,52E+11","1996":"1,64E+11","1997":"1,61E+11","1998":"1,54E+11","1999":"1,62E+11","2000":"1,71E+11","2001":"1,74E+11","2002":"1,95E+11","2003":"2,29E+11","2004":"2,64E+11","2005":"3,09E+11","2006":"3,45E+11","2007":"4,01E+11","2008":"4,62E+11","2009":"3,86E+11","2010":"4,29E+11","2011":"4,98E+11","2012":"5,10E+11","2013":"5,23E+11","2014":"4,98E+11","2015":"3,87E+11","2016":"3,71E+11","Country Name":"Norway","Country Code":"NOR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"508334414","1961":"531959561,6","1962":"574091101,2","1963":"496947904,4","1964":"496098775,3","1965":"735267082,3","1966":"906811943,8","1967":"841974025,5","1968":"772228643,4","1969":"788641965,4","1970":"865975308,6","1971":"882765471,6","1972":"1024098805","1973":"972101725","1974":"1217953547","1975":"1575789254","1976":"1452792989","1977":"1382400000","1978":"1604162497","1979":"1851250008","1980":"1945916583","1981":"2275583317","1982":"2395429852","1983":"2447174803","1984":"2581207388","1985":"2619913956","1986":"2850784523","1987":"2957255380","1988":"3487009748","1989":"3525228153","1990":"3627562403","1991":"3921476085","1992":"3401211581","1993":"3660041667","1994":"4066775510","1995":"4401104418","1996":"4521580381","1997":"4918691917","1998":"4856255044","1999":"5033642384","2000":"5494252208","2001":"6007061224","2002":"6050875807","2003":"6330473097","2004":"7273938315","2005":"8130258041","2006":"9043715356","2007":"10325618017","2008":"12545438605","2009":"12854985464","2010":"16002656434","2011":"18913574371","2012":"18851513891","2013":"19271168018","2014":"20002968838","2015":"21313549579","2016":"21143873417","Country Name":"Nepal","Country Code":"NPL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"20432742,11","2008":"39333572,32","2009":"44290951,93","2010":"49248810,57","2011":"72751801,05","2012":"103811958,8","2013":"108601538,5","2014":"117020381,9","2015":"100459782,6","2016":"102060129,6","Country Name":"Nauru","Country Code":"NRU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"5485854792","1961":"5670064168","1962":"6077496268","1963":"6638937283","1964":"7274144351","1965":"5654463586","1966":"5863733231","1967":"5961418094","1968":"5180597621","1969":"5761588762","1970":"","1971":"7912290825","1972":"9567331065","1973":"12802281898","1974":"13940981798","1975":"12861983284","1976":"13604832424","1977":"15446825318","1978":"18530518395","1979":"20730241410","1980":"23245512449","1981":"24417617184","1982":"24164603059","1983":"24308622503","1984":"21665456808","1985":"24680306905","1986":"30605196451","1987":"40377592077","1988":"45176167472","1989":"43920222525","1990":"45495727007","1991":"42745329732","1992":"41649298171","1993":"46775067751","1994":"55315342817","1995":"63918703507","1996":"70140835299","1997":"66074513018","1998":"56227169851","1999":"58761741658","2000":"52623281957","2001":"53872425917","2002":"66628222189","2003":"88250885550","2004":"1,04E+11","2005":"1,15E+11","2006":"1,12E+11","2007":"1,37E+11","2008":"1,33E+11","2009":"1,21E+11","2010":"1,47E+11","2011":"1,68E+11","2012":"1,76E+11","2013":"1,91E+11","2014":"2,01E+11","2015":"1,76E+11","2016":"1,85E+11","Country Name":"New Zealand","Country Code":"NZL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1,07E+12","1961":"1,13E+12","1962":"1,22E+12","1963":"1,31E+12","1964":"1,43E+12","1965":"1,55E+12","1966":"1,71E+12","1967":"1,83E+12","1968":"1,99E+12","1969":"2,18E+12","1970":"2,39E+12","1971":"2,65E+12","1972":"3,07E+12","1973":"3,71E+12","1974":"4,16E+12","1975":"4,66E+12","1976":"5,05E+12","1977":"5,69E+12","1978":"6,84E+12","1979":"7,90E+12","1980":"8,76E+12","1981":"8,92E+12","1982":"8,79E+12","1983":"9,08E+12","1984":"9,49E+12","1985":"1,00E+13","1986":"1,21E+13","1987":"1,41E+13","1988":"1,59E+13","1989":"1,66E+13","1990":"1,87E+13","1991":"1,98E+13","1992":"2,13E+13","1993":"2,16E+13","1994":"2,31E+13","1995":"2,54E+13","1996":"2,56E+13","1997":"2,52E+13","1998":"2,55E+13","1999":"2,68E+13","2000":"2,74E+13","2001":"2,71E+13","2002":"2,83E+13","2003":"3,17E+13","2004":"3,53E+13","2005":"3,73E+13","2006":"3,93E+13","2007":"4,30E+13","2008":"4,55E+13","2009":"4,26E+13","2010":"4,46E+13","2011":"4,79E+13","2012":"4,78E+13","2013":"4,84E+13","2014":"4,93E+13","2015":"4,65E+13","2016":"4,74E+13","Country Name":"OECD members","Country Code":"OED","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"63287594,51","1966":"67768132,18","1967":"107152720,2","1968":"188864890,8","1969":"239980801,5","1970":"256299496","1971":"301010587,1","1972":"366857738,4","1973":"483033932,1","1974":"1645917776","1975":"2096699189","1976":"2560220035","1977":"2741169948","1978":"2740301390","1979":"3733352635","1980":"5981760278","1981":"7259120151","1982":"7554719456","1983":"7932541691","1984":"8821366532","1985":"10005500579","1986":"7323822251","1987":"7811183095","1988":"8386215865","1989":"9372171651","1990":"11685045514","1991":"11341482445","1992":"12452275683","1993":"12493107932","1994":"12918855657","1995":"13802600780","1996":"15277763329","1997":"15837451235","1998":"14085373212","1999":"15710148244","2000":"19507412224","2001":"19452015605","2002":"20142782835","2003":"21633810143","2004":"24763589077","2005":"31081924577","2006":"37215864759","2007":"42085305592","2008":"60905331599","2009":"48388296489","2010":"58641621958","2011":"67937307405","2012":"76689583317","2013":"78938585286","2014":"81034395038","2015":"69831770996","2016":"66293368010","Country Name":"Oman","Country Code":"OMN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"3120000514","1971":"3703668497","1972":"4485075014","1973":"6495784979","1974":"11967802922","1975":"13355843220","1976":"16602401121","1977":"18699272186","1978":"20631386856","1979":"26785098967","1980":"37183269998","1981":"37385918037","1982":"35362618282","1983":"33399704522","1984":"33642964084","1985":"31964598499","1986":"32342044550","1987":"38389402844","1988":"43139712815","1989":"45177490212","1990":"54042037641","1991":"55656865129","1992":"60712295552","1993":"57746555836","1994":"60482828188","1995":"69298946726","1996":"73172701870","1997":"76266859218","1998":"74735365661","1999":"80433140077","2000":"91230480401","2001":"90672611827","2002":"97772578665","2003":"1,21E+11","2004":"1,50E+11","2005":"1,82E+11","2006":"2,14E+11","2007":"2,62E+11","2008":"3,20E+11","2009":"2,75E+11","2010":"3,20E+11","2011":"3,96E+11","2012":"4,13E+11","2013":"4,31E+11","2014":"4,44E+11","2015":"3,69E+11","2016":"3,59E+11","Country Name":"Other small states","Country Code":"OSS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3707055901","1961":"4054599181","1962":"4233095590","1963":"4540529105","1964":"5130407728","1965":"5884712096","1966":"6466610752","1967":"7403821903","1968":"8090088555","1969":"8632927257","1970":"10027088849","1971":"10602058190","1972":"9309109764","1973":"6324884129","1974":"8773030424","1975":"11340000242","1976":"13338484980","1977":"15126059646","1978":"17820100626","1979":"19707979303","1980":"23689696768","1981":"28100605515","1982":"30725972787","1983":"28691890433","1984":"31151824659","1985":"31144920554","1986":"31899071054","1987":"33351528115","1988":"38472741737","1989":"40171019643","1990":"40010424929","1991":"45451960732","1992":"48635176853","1993":"51478304860","1994":"51894781282","1995":"60636022423","1996":"63320122807","1997":"62433300338","1998":"62191955814","1999":"62973855719","2000":"73952374970","2001":"72309738921","2002":"72306820396","2003":"83244801093","2004":"97977766198","2005":"1,10E+11","2006":"1,37E+11","2007":"1,52E+11","2008":"1,70E+11","2009":"1,68E+11","2010":"1,77E+11","2011":"2,14E+11","2012":"2,24E+11","2013":"2,31E+11","2014":"2,44E+11","2015":"2,71E+11","2016":"2,84E+11","Country Name":"Pakistan","Country Code":"PAK","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"537147100","1961":"599026300","1962":"652120900","1963":"722784500","1964":"776137500","1965":"852485300","1966":"928833000","1967":"1034376400","1968":"1112791100","1969":"1221305700","1970":"1351006400","1971":"1523917200","1972":"1673411700","1973":"1913793400","1974":"2188307600","1975":"2435304100","1976":"2588106000","1977":"2738261900","1978":"3244558600","1979":"3704551600","1980":"4614086400","1981":"5222421500","1982":"5769767900","1983":"5923755900","1984":"6183387100","1985":"6541517100","1986":"6797834200","1987":"6827665300","1988":"5902783400","1989":"5918469800","1990":"6433967000","1991":"7074675500","1992":"8042337700","1993":"8782585400","1994":"9365289800","1995":"9573813700","1996":"9870494000","1997":"10677286100","1998":"11575486400","1999":"12130252200","2000":"12304115000","2001":"12502013400","2002":"12994310400","2003":"13693981200","2004":"15013381700","2005":"16374393900","2006":"18141666300","2007":"20958000000","2008":"24522200000","2009":"26593500000","2010":"28917200000","2011":"34373820500","2012":"39954761200","2013":"44856189500","2014":"49165773100","2015":"52132289700","2016":"55187700000","Country Name":"Panama","Country Code":"PAN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2571908062","1961":"2899654840","1962":"3286773188","1963":"3600957771","1964":"4356913870","1965":"5166861068","1966":"6113607728","1967":"6204253759","1968":"5736083835","1969":"6420909790","1970":"7432223177","1971":"8289582884","1972":"9189413409","1973":"10994381895","1974":"13858441211","1975":"16877163792","1976":"15947709380","1977":"14620386674","1978":"12495779622","1979":"15962459447","1980":"18134029180","1981":"21649137620","1982":"21793496819","1983":"17345624454","1984":"17599660054","1985":"16548827018","1986":"15244232958","1987":"20702298397","1988":"15439408447","1989":"22499559086","1990":"26410386669","1991":"34672122381","1992":"36139225288","1993":"35158109999","1994":"44882079767","1995":"53312793687","1996":"55252414130","1997":"58147522523","1998":"55501467877","1999":"50187324568","2000":"51744749133","2001":"52030158775","2002":"54777553515","2003":"58731030122","2004":"66768703498","2005":"76060606061","2006":"88643193062","2007":"1,02E+11","2008":"1,21E+11","2009":"1,21E+11","2010":"1,48E+11","2011":"1,72E+11","2012":"1,93E+11","2013":"2,01E+11","2014":"2,01E+11","2015":"1,89E+11","2016":"1,92E+11","Country Name":"Peru","Country Code":"PER","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"6684568805","1961":"7256966966","1962":"4399827768","1963":"4875309866","1964":"5271404668","1965":"5784398977","1966":"6371459304","1967":"6809134236","1968":"7591603053","1969":"8408229699","1970":"6687204834","1971":"7408305736","1972":"8017468688","1973":"10082885603","1974":"13781139970","1975":"14893969288","1976":"17097563270","1977":"19648106122","1978":"22706155475","1979":"27502168727","1980":"32450541843","1981":"35646416953","1982":"37140163934","1983":"33212180658","1984":"31408492877","1985":"30734335449","1986":"29868339081","1987":"33195933430","1988":"37885440419","1989":"42575183906","1990":"44311593756","1991":"45417561302","1992":"52976344929","1993":"54368083953","1994":"64084460124","1995":"74119987245","1996":"82848140618","1997":"82344260571","1998":"72207025219","1999":"82995147090","2000":"81026297144","2001":"76262072022","2002":"81357602950","2003":"83908206456","2004":"91371239765","2005":"1,03E+11","2006":"1,22E+11","2007":"1,49E+11","2008":"1,74E+11","2009":"1,68E+11","2010":"2,00E+11","2011":"2,24E+11","2012":"2,50E+11","2013":"2,72E+11","2014":"2,85E+11","2015":"2,93E+11","2016":"3,05E+11","Country Name":"Philippines","Country Code":"PHL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"76888000","1991":"83855000","1992":"82451000","1993":"75907000","1994":"83527000","1995":"95237000","1996":"108203000","1997":"113213000","1998":"117320000","1999":"113485000","2000":"149300000","2001":"160000000","2002":"163500000","2003":"159900000","2004":"175300000","2005":"193300000","2006":"194700000","2007":"196000000","2008":"198100000","2009":"186400000","2010":"183800000","2011":"199900000","2012":"214200000","2013":"228700000","2014":"250900000","2015":"287400000","2016":"293000000","Country Name":"Palau","Country Code":"PLW","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"230496033","1961":"244832035","1962":"261184037,4","1963":"275968039,5","1964":"305312043,7","1965":"344159480,3","1966":"390973233,3","1967":"441706910,1","1968":"485160824,3","1969":"551237316,6","1970":"645537126,2","1971":"717716130,5","1972":"858802035,9","1973":"1299105241","1974":"1467346060","1975":"1356591177","1976":"1511856584","1977":"1640763204","1978":"1947947524","1979":"2293621944","1980":"2545983008","1981":"2498068351","1982":"2368584970","1983":"2562492525","1984":"2552526263","1985":"2423373088","1986":"2648033766","1987":"3143848331","1988":"3655979702","1989":"3546460177","1990":"3219730365","1991":"3787352287","1992":"4377984100","1993":"4974662910","1994":"5502648500","1995":"4636113480","1996":"5155485420","1997":"4936605080","1998":"3789428160","1999":"3477060138","2000":"3521348155","2001":"3081029666","2002":"2999542369","2003":"3536459111","2004":"3927114466","2005":"4865971718","2006":"5527856839","2007":"6340673794","2008":"8000074071","2009":"8105331930","2010":"9716103409","2011":"12873049346","2012":"15391629871","2013":"15413163675","2014":"16928680397","2015":"","2016":"","Country Name":"Papua New Guinea","Country Code":"PNG","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"65977749038","1991":"85500935935","1992":"94337050693","1993":"96045645026","1994":"1,11E+11","1995":"1,42E+11","1996":"1,60E+11","1997":"1,59E+11","1998":"1,74E+11","1999":"1,70E+11","2000":"1,72E+11","2001":"1,91E+11","2002":"1,99E+11","2003":"2,18E+11","2004":"2,55E+11","2005":"3,06E+11","2006":"3,45E+11","2007":"4,29E+11","2008":"5,34E+11","2009":"4,40E+11","2010":"4,79E+11","2011":"5,29E+11","2012":"5,00E+11","2013":"5,24E+11","2014":"5,45E+11","2015":"4,77E+11","2016":"4,70E+11","Country Name":"Poland","Country Code":"POL","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"10444792558","1961":"10792191177","1962":"11794111161","1963":"13764637075","1964":"12795571687","1965":"14432973776","1966":"15869568128","1967":"14966394984","1968":"15779012377","1969":"17940990059","1970":"21951712164","1971":"21460771419","1972":"24863758794","1973":"30483369632","1974":"43595337802","1975":"49542343894","1976":"58304074038","1977":"64654895975","1978":"71877526056","1979":"90876577932","1980":"1,11E+11","1981":"99890611243","1982":"96485338012","1983":"82315486748","1984":"81200162508","1985":"84292961016","1986":"86854873100","1987":"99081060277","1988":"1,02E+11","1989":"1,04E+11","1990":"1,68E+11","1991":"1,67E+11","1992":"1,52E+11","1993":"1,39E+11","1994":"1,27E+11","1995":"1,55E+11","1996":"1,73E+11","1997":"1,81E+11","1998":"1,79E+11","1999":"1,81E+11","2000":"2,12E+11","2001":"2,01E+11","2002":"2,37E+11","2003":"2,74E+11","2004":"3,32E+11","2005":"4,11E+11","2006":"5,14E+11","2007":"6,29E+11","2008":"8,03E+11","2009":"7,31E+11","2010":"1,01E+12","2011":"1,16E+12","2012":"1,28E+12","2013":"1,40E+12","2014":"1,49E+12","2015":"1,30E+12","2016":"1,19E+12","Country Name":"Pre-demographic dividend","Country Code":"PRE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1691900000","1961":"1865100000","1962":"2094400000","1963":"2333600000","1964":"2570500000","1965":"2881500000","1966":"3170500000","1967":"3532700000","1968":"3941700000","1969":"4460700000","1970":"5034700000","1971":"5646800000","1972":"6328900000","1973":"7002400000","1974":"7684800000","1975":"8198300000","1976":"8968600000","1977":"9910900000","1978":"11165000000","1979":"12750000000","1980":"14436100000","1981":"15955700000","1982":"16764200000","1983":"17276600000","1984":"19162600000","1985":"20289200000","1986":"21969400000","1987":"23878000000","1988":"26178400000","1989":"28266800000","1990":"30603919000","1991":"32287031000","1992":"34630430000","1993":"36922456000","1994":"39690630000","1995":"42647331000","1996":"45340835000","1997":"48187039000","1998":"54086409000","1999":"57840954000","2000":"61701810000","2001":"69668635000","2002":"72546194000","2003":"75833996000","2004":"80322313000","2005":"83914521341","2006":"87276164365","2007":"89524131617","2008":"93639316000","2009":"96385638000","2010":"98381268000","2011":"1,00E+11","2012":"1,01E+11","2013":"1,03E+11","2014":"","2015":"","2016":"","Country Name":"Puerto Rico","Country Code":"PRI","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"North Korea","Country Code":"PRK","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"3193200404","1961":"3417516639","1962":"3668222358","1963":"3905734460","1964":"4235608178","1965":"4687464055","1966":"5135387846","1967":"5740241166","1968":"6354262628","1969":"6969025826","1970":"8109032775","1971":"9202512367","1972":"11240223128","1973":"15092052330","1974":"17514112076","1975":"19349512941","1976":"20334835544","1977":"21441635411","1978":"23489924726","1979":"26625439344","1980":"32899759311","1981":"31980423453","1982":"30530759334","1983":"27242331886","1984":"25220451794","1985":"27118476174","1986":"38749715722","1987":"48187667853","1988":"56352797354","1989":"60600056659","1990":"78721607509","1991":"89242382961","1992":"1,08E+11","1993":"95019103603","1994":"99698453261","1995":"1,18E+11","1996":"1,23E+11","1997":"1,17E+11","1998":"1,24E+11","1999":"1,27E+11","2000":"1,18E+11","2001":"1,22E+11","2002":"1,34E+11","2003":"1,65E+11","2004":"1,89E+11","2005":"1,97E+11","2006":"2,09E+11","2007":"2,40E+11","2008":"2,62E+11","2009":"2,44E+11","2010":"2,38E+11","2011":"2,45E+11","2012":"2,16E+11","2013":"2,26E+11","2014":"2,30E+11","2015":"1,99E+11","2016":"2,05E+11","Country Name":"Portugal","Country Code":"PRT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"400129691,3","1966":"421700442,1","1967":"451524124,6","1968":"477012512,7","1969":"512728946","1970":"548758098,4","1971":"609047284,9","1972":"697291727,8","1973":"889357059,5","1974":"1199618980","1975":"1351889403","1976":"1540820245","1977":"1912353340","1978":"2350329157","1979":"3135123879","1980":"4094810488","1981":"5219516810","1982":"5067450002","1983":"5237432542","1984":"4067222369","1985":"2966234106","1986":"3439716562","1987":"3778316380","1988":"4082625953","1989":"4599970618","1990":"5695201563","1991":"6984367763","1992":"7157424031","1993":"7249533620","1994":"7870982171","1995":"9062131308","1996":"9788391733","1997":"9965225497","1998":"9024567484","1999":"8392549702","2000":"8195993231","2001":"7662595076","2002":"6325151760","2003":"6588103836","2004":"8033877360","2005":"8734653809","2006":"10646157920","2007":"13794910634","2008":"18504130753","2009":"15929902138","2010":"20030528043","2011":"25099681461","2012":"24595319574","2013":"28965906502","2014":"30881166852","2015":"27282581336","2016":"27440632934","Country Name":"Paraguay","Country Code":"PRY","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"2843300000","1995":"3282800000","1996":"3409600000","1997":"3759800000","1998":"4067800000","1999":"4271200000","2000":"4313600000","2001":"4003700000","2002":"3555800000","2003":"3968000000","2004":"4329200000","2005":"4831800000","2006":"4910100000","2007":"5505800000","2008":"6673500000","2009":"7268200000","2010":"8913100000","2011":"10465400000","2012":"11279400000","2013":"12476000000","2014":"12715600000","2015":"12673000000","2016":"13397100000","Country Name":"Palestine","Country Code":"PSE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"1119628254","1976":"1122701696","1977":"1171337345","1978":"1358461166","1979":"1664350940","1980":"1904926912","1981":"1963994946","1982":"1918437387","1983":"1837236806","1984":"2014185046","1985":"1906817279","1986":"2070080623","1987":"2033588089","1988":"2130602490","1989":"2224856986","1990":"2396519648","1991":"2548876044","1992":"2794580112","1993":"2946262871","1994":"3395405059","1995":"3668259745","1996":"3939096312","1997":"3935301807","1998":"3383564007","1999":"3685133762","2000":"3448662182","2001":"3375672793","2002":"3547120141","2003":"4158737438","2004":"4803309271","2005":"5273003192","2006":"5542891988","2007":"6079623933","2008":"6554131285","2009":"5775975881","2010":"6402407316","2011":"7588040252","2012":"8109258574","2013":"8375325157","2014":"8780810605","2015":"8577127157","2016":"8888374720","Country Name":"Pacific island small states","Country Code":"PSS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1,04E+12","1961":"1,10E+12","1962":"1,19E+12","1963":"1,28E+12","1964":"1,40E+12","1965":"1,52E+12","1966":"1,67E+12","1967":"1,79E+12","1968":"1,94E+12","1969":"2,13E+12","1970":"2,34E+12","1971":"2,60E+12","1972":"3,01E+12","1973":"3,63E+12","1974":"4,06E+12","1975":"4,55E+12","1976":"4,93E+12","1977":"5,58E+12","1978":"6,70E+12","1979":"7,70E+12","1980":"8,53E+12","1981":"8,63E+12","1982":"8,59E+12","1983":"8,91E+12","1984":"9,31E+12","1985":"9,82E+12","1986":"1,20E+13","1987":"1,39E+13","1988":"1,56E+13","1989":"1,64E+13","1990":"1,84E+13","1991":"1,94E+13","1992":"2,08E+13","1993":"2,10E+13","1994":"2,24E+13","1995":"2,49E+13","1996":"2,50E+13","1997":"2,45E+13","1998":"2,46E+13","1999":"2,58E+13","2000":"2,63E+13","2001":"2,60E+13","2002":"2,72E+13","2003":"3,05E+13","2004":"3,39E+13","2005":"3,56E+13","2006":"3,75E+13","2007":"4,09E+13","2008":"4,32E+13","2009":"4,07E+13","2010":"4,24E+13","2011":"4,55E+13","2012":"4,54E+13","2013":"4,58E+13","2014":"4,67E+13","2015":"4,41E+13","2016":"4,51E+13","Country Name":"Post-demographic dividend","Country Code":"PST","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"176534589,6","1966":"215659455","1967":"220984369,1","1968":"259590076,3","1969":"242943776,9","1970":"254035999,2","1971":"296613496,9","1972":"325843254,7","1973":"431254103","1974":"555337985,7","1975":"690319754,9","1976":"732286143,3","1977":"793193187,4","1978":"1005573294","1979":"1215031775","1980":"1362151524","1981":"1279972866","1982":"1286462643","1983":"1335895286","1984":"1378991403","1985":"1507230779","1986":"2301514717","1987":"2543199148","1988":"2687472830","1989":"2636461517","1990":"3181206305","1991":"3267367610","1992":"3558215110","1993":"3694600400","1994":"3522272321","1995":"3982374846","1996":"3954696874","1997":"3567062512","1998":"3775160797","1999":"3797016069","2000":"3447543138","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"French Polynesia","Country Code":"PYF","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"301791301,8","1971":"387700084,2","1972":"510259940,7","1973":"793884368","1974":"2401403227","1975":"2512784033","1976":"3284301332","1977":"3617580172","1978":"4052000413","1979":"5633000318","1980":"7829094613","1981":"8661263764","1982":"7596703214","1983":"6467582308","1984":"6704395824","1985":"6153296456","1986":"5053021951","1987":"5446428681","1988":"6038187033","1989":"6487912088","1990":"7360439423","1991":"6883516484","1992":"7646153984","1993":"7156593654","1994":"7374450769","1995":"8137911978","1996":"9059340385","1997":"11297802115","1998":"10255495027","1999":"12393131868","2000":"17759890110","2001":"17538461538","2002":"19363736264","2003":"23533791209","2004":"31734065934","2005":"44530494505","2006":"60882142857","2007":"79712087912","2008":"1,15E+11","2009":"97798351648","2010":"1,25E+11","2011":"1,68E+11","2012":"1,87E+11","2013":"1,99E+11","2014":"2,06E+11","2015":"1,65E+11","2016":"1,52E+11","Country Name":"Qatar","Country Code":"QAT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"38413636364","1988":"40809523810","1989":"42105263158","1990":"38995454545","1991":"28998684211","1992":"25121666667","1993":"26362894737","1994":"30074440483","1995":"37662075750","1996":"37182938696","1997":"35838588170","1998":"41976002704","1999":"36183003978","2000":"37438527800","2001":"40716836998","2002":"46174557556","2003":"59867801205","2004":"76216441462","2005":"99697566668","2006":"1,24E+11","2007":"1,72E+11","2008":"2,08E+11","2009":"1,67E+11","2010":"1,68E+11","2011":"1,85E+11","2012":"1,72E+11","2013":"1,92E+11","2014":"1,99E+11","2015":"1,78E+11","2016":"1,87E+11","Country Name":"Romania","Country Code":"ROU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"5,07E+11","1990":"5,17E+11","1991":"5,18E+11","1992":"4,60E+11","1993":"4,35E+11","1994":"3,95E+11","1995":"3,96E+11","1996":"3,92E+11","1997":"4,05E+11","1998":"2,71E+11","1999":"1,96E+11","2000":"2,60E+11","2001":"3,07E+11","2002":"3,45E+11","2003":"4,30E+11","2004":"5,91E+11","2005":"7,64E+11","2006":"9,90E+11","2007":"1,30E+12","2008":"1,66E+12","2009":"1,22E+12","2010":"1,52E+12","2011":"2,03E+12","2012":"2,17E+12","2013":"2,23E+12","2014":"2,06E+12","2015":"1,37E+12","2016":"1,28E+12","Country Name":"Russia","Country Code":"RUS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"119000024","1961":"122000016","1962":"125000008","1963":"128000000","1964":"129999994","1965":"148799980","1966":"124525702,9","1967":"159560018","1968":"172200018","1969":"188700037","1970":"219900006","1971":"222952578,2","1972":"246457838,3","1973":"290746157,1","1974":"308458423,2","1975":"571863295,7","1976":"637754162,1","1977":"746650558,6","1978":"905709147,3","1979":"1109346221","1980":"1254765350","1981":"1407062608","1982":"1407242640","1983":"1479688126","1984":"1587412957","1985":"1715625839","1986":"1944711061","1987":"2157434025","1988":"2395493878","1989":"2405021933","1990":"2550185618","1991":"1911600970","1992":"2029026704","1993":"1971525999","1994":"753636370,5","1995":"1293535011","1996":"1382334879","1997":"1851558302","1998":"1989343495","1999":"1817655328","2000":"1734938264","2001":"1674685094","2002":"1677447150","2003":"1845979299","2004":"2089188829","2005":"2581465864","2006":"3152016557","2007":"3824811913","2008":"4860576609","2009":"5379378135","2010":"5774003744","2011":"6491683832","2012":"7315702176","2013":"7622526429","2014":"8016288347","2015":"8261034258","2016":"8376048905","Country Name":"Rwanda","Country Code":"RWA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"46535882351","1961":"49639265058","1962":"52969959484","1963":"59564124016","1964":"68207240599","1965":"73302133554","1966":"61638106880","1967":"67859668329","1968":"71227636451","1969":"78199356804","1970":"84723556607","1971":"90042201736","1972":"90429767480","1973":"1,03E+11","1974":"1,25E+11","1975":"1,34E+11","1976":"1,31E+11","1977":"1,52E+11","1978":"1,73E+11","1979":"1,93E+11","1980":"2,33E+11","1981":"2,47E+11","1982":"2,56E+11","1983":"2,71E+11","1984":"2,69E+11","1985":"2,93E+11","1986":"3,10E+11","1987":"3,44E+11","1988":"3,70E+11","1989":"3,73E+11","1990":"4,02E+11","1991":"3,58E+11","1992":"3,80E+11","1993":"3,76E+11","1994":"4,27E+11","1995":"4,74E+11","1996":"5,19E+11","1997":"5,44E+11","1998":"5,52E+11","1999":"5,91E+11","2000":"6,15E+11","2001":"6,31E+11","2002":"6,63E+11","2003":"7,74E+11","2004":"8,98E+11","2005":"1,03E+12","2006":"1,18E+12","2007":"1,49E+12","2008":"1,52E+12","2009":"1,67E+12","2010":"2,04E+12","2011":"2,27E+12","2012":"2,30E+12","2013":"2,36E+12","2014":"2,58E+12","2015":"2,71E+12","2016":"2,90E+12","Country Name":"South Asia","Country Code":"SAS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"4187777711","1969":"4485777644","1970":"5377333333","1971":"7184853348","1972":"9664157499","1973":"14947391140","1974":"45412957746","1975":"46773368206","1976":"64005665722","1977":"74188249979","1978":"80265619485","1979":"1,12E+11","1980":"1,65E+11","1981":"1,84E+11","1982":"1,53E+11","1983":"1,29E+11","1984":"1,20E+11","1985":"1,04E+11","1986":"86961922765","1987":"85695861148","1988":"88256074766","1989":"95344459279","1990":"1,18E+11","1991":"1,32E+11","1992":"1,37E+11","1993":"1,33E+11","1994":"1,35E+11","1995":"1,43E+11","1996":"1,59E+11","1997":"1,66E+11","1998":"1,47E+11","1999":"1,62E+11","2000":"1,90E+11","2001":"1,84E+11","2002":"1,90E+11","2003":"2,16E+11","2004":"2,59E+11","2005":"3,28E+11","2006":"3,77E+11","2007":"4,16E+11","2008":"5,20E+11","2009":"4,29E+11","2010":"5,28E+11","2011":"6,71E+11","2012":"7,36E+11","2013":"7,47E+11","2014":"7,56E+11","2015":"6,54E+11","2016":"6,46E+11","Country Name":"Saudi Arabia","Country Code":"SAU","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1307333333","1961":"1419333333","1962":"1541666667","1963":"1568333333","1964":"1611333333","1965":"1679333333","1966":"1723000000","1967":"1865666667","1968":"1947333333","1969":"2144333333","1970":"2437666667","1971":"2656000000","1972":"2882000000","1973":"3571666667","1974":"4595000000","1975":"5598000000","1976":"6979333333","1977":"8704000000","1978":"7670500000","1979":"9032250000","1980":"7459833333","1981":"10016500000","1982":"9240000000","1983":"8230153846","1984":"9701357143","1985":"12403733333","1986":"15769062500","1987":"20155555556","1988":"15399166667","1989":"15291507937","1990":"12408647541","1991":"11379222222","1992":"7034219713","1993":"8881785938","1994":"12794192334","1995":"13829744879","1996":"9018243044","1997":"11681494637","1998":"11250327988","1999":"10682045258","2000":"12257418326","2001":"13182979784","2002":"14803189093","2003":"17646503525","2004":"21457470203","2005":"26524538566","2006":"35822408612","2007":"45898948564","2008":"54526580232","2009":"53150209168","2010":"65634109237","2011":"67327289320","2012":"68125631150","2013":"72065940086","2014":"82151588419","2015":"97156119150","2016":"95584380032","Country Name":"Sudan","Country Code":"SDN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"792824707,3","1961":"836493109,2","1962":"857425916,2","1963":"886387156,1","1964":"939145851,2","1965":"955834893,3","1966":"984942988,1","1967":"984605369,3","1968":"1034293645","1969":"983621024,1","1970":"1024832915","1971":"1058120427","1972":"1280328245","1973":"1471913474","1974":"1658273721","1975":"2235746645","1976":"2266860656","1977":"2320786491","1978":"2591178368","1979":"3226678628","1980":"3503282103","1981":"3176771103","1982":"3109677456","1983":"2774199193","1984":"2705535756","1985":"2962199836","1986":"4189860416","1987":"5040708115","1988":"4985153203","1989":"4913065111","1990":"5716644272","1991":"5617236033","1992":"6004885321","1993":"5678827999","1994":"3877196915","1995":"4878719133","1996":"5065830414","1997":"4672503920","1998":"5030344074","1999":"5144045360","2000":"4679604754","2001":"4877602060","2002":"5333862371","2003":"6858952880","2004":"8031344381","2005":"8707015771","2006":"9358710935","2007":"11284603071","2008":"13428461874","2009":"12809044978","2010":"12937300245","2011":"14368348214","2012":"14202389642","2013":"14810978041","2014":"15308965399","2015":"13609978076","2016":"14765462631","Country Name":"Senegal","Country Code":"SEN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"704462302,4","1961":"764308114,5","1962":"825885273,7","1963":"917222004,4","1964":"893734483,2","1965":"974193126,9","1966":"1095910101","1967":"1237423233","1968":"1425029400","1969":"1659055272","1970":"1919508689","1971":"2262544100","1972":"2719900351","1973":"3693760000","1974":"5216773826","1975":"5633386680","1976":"6326445410","1977":"6617532783","1978":"7515823563","1979":"9294635004","1980":"11893405684","1981":"14171819540","1982":"16078856440","1983":"17775280374","1984":"19735920492","1985":"19138296376","1986":"18569292305","1987":"20897630201","1988":"25337226971","1989":"30423573842","1990":"36152027893","1991":"45474442836","1992":"52156414979","1993":"60644572348","1994":"73777792327","1995":"87890009877","1996":"96403758865","1997":"1,00E+11","1998":"85707636233","1999":"86283126844","2000":"95833932715","2001":"89286208629","2002":"91941192896","2003":"97001377569","2004":"1,14E+11","2005":"1,27E+11","2006":"1,48E+11","2007":"1,80E+11","2008":"1,92E+11","2009":"1,92E+11","2010":"2,36E+11","2011":"2,76E+11","2012":"2,89E+11","2013":"3,03E+11","2014":"3,08E+11","2015":"2,97E+11","2016":"2,97E+11","Country Name":"Singapore","Country Code":"SGP","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"25203524,03","1968":"28084252,76","1969":"28606411,4","1970":"","1971":"50056882,82","1972":"40606712,05","1973":"55272108,84","1974":"84539332,28","1975":"74617096,48","1976":"83099107,91","1977":"93147039,25","1978":"111022090","1979":"151270207,9","1980":"168715353,1","1981":"187313261,3","1982":"188446092,1","1983":"180219397,5","1984":"252806783,4","1985":"232306861,2","1986":"210737869,7","1987":"238606299,6","1988":"310684273,7","1989":"332286760,9","1990":"302515026,9","1991":"320355090,6","1992":"378778047,2","1993":"410923236,2","1994":"464756638,5","1995":"519334096,7","1996":"565163750,6","1997":"567919502,8","1998":"471177008,1","1999":"482214092,3","2000":"435103853,5","2001":"400463452,1","2002":"341661643,6","2003":"332738245,9","2004":"375111894,9","2005":"413909879,3","2006":"456705434","2007":"516074229","2008":"608293860,3","2009":"597765363,1","2010":"671585343,2","2011":"886498370,7","2012":"1025125082","2013":"1059695156","2014":"1156563123","2015":"1129164719","2016":"1202125000","Country Name":"Solomon Is.","Country Code":"SLB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"322009471,6","1961":"327834680,6","1962":"342721579,8","1963":"348546952,1","1964":"371848114,8","1965":"359379856,2","1966":"375479849,8","1967":"348795303","1968":"329860091,9","1969":"408690163,5","1970":"434410373,8","1971":"419549425,1","1972":"465381090","1973":"575230234,4","1974":"648590642,9","1975":"679335901,1","1976":"594895672,3","1977":"691777758,4","1978":"960728338,9","1979":"1109374722","1980":"1100685845","1981":"1114830472","1982":"1295361886","1983":"995104305,3","1984":"1087471862","1985":"856890498,6","1986":"490181456,6","1987":"701307602,3","1988":"1055083945","1989":"932974411,9","1990":"649644826,8","1991":"779981458,9","1992":"679997997,6","1993":"768812334,8","1994":"911915970,7","1995":"870758739,4","1996":"941742152,7","1997":"850218033,6","1998":"672375927,3","1999":"669384768,9","2000":"635874002,2","2001":"1079478388","2002":"1239004288","2003":"1371442566","2004":"1431208677","2005":"1627854495","2006":"1885112202","2007":"2158496873","2008":"2505458705","2009":"2489985963","2010":"2616610911","2011":"2942546781","2012":"3801862611","2013":"4920343195","2014":"5015157816","2015":"4251779857","2016":"3668876080","Country Name":"Sierra Leone","Country Code":"SLE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"877720000","1966":"929520000","1967":"976200000","1968":"1009760100","1969":"1049400000","1970":"1132920000","1971":"1186120000","1972":"1263720000","1973":"1442320000","1974":"1665880000","1975":"1884120100","1976":"2328280100","1977":"2941640100","1978":"3127960000","1979":"3463639900","1980":"3573959900","1981":"3437200200","1982":"3399189100","1983":"3506347800","1984":"3661683400","1985":"3800368600","1986":"3771663200","1987":"3958045800","1988":"4189880000","1989":"4372215300","1990":"4800900000","1991":"5311000000","1992":"5954700000","1993":"6938000000","1994":"8085600000","1995":"9500500000","1996":"10315500000","1997":"11134700000","1998":"12008400000","1999":"12464700000","2000":"13134100000","2001":"13812700000","2002":"14306700000","2003":"15046700000","2004":"15798300000","2005":"17093800000","2006":"18550700000","2007":"20104900000","2008":"21430950000","2009":"20661030000","2010":"21418330000","2011":"23139040000","2012":"23813600000","2013":"24350930000","2014":"25054230000","2015":"26052340000","2016":"26797470000","Country Name":"El Salvador","Country Code":"SLV","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"853373879,7","2000":"773907642,4","2001":"815205233,1","2002":"879957209,9","2003":"1122981525","2004":"1317357835","2005":"1375416604","2006":"1469000145","2007":"1687567364","2008":"1899879955","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"San Marino","Country Code":"SMR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"5352000000","2014":"5647000000","2015":"5925000000","2016":"6217000000","Country Name":"Somalia","Country Code":"SOM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"16750000000","1996":"20948677840","1997":"24147996550","1998":"18284194680","1999":"18409364147","2000":"6540247190","2001":"12267175481","2002":"16116843146","2003":"21188704081","2004":"24861483281","2005":"26252007830","2006":"30607991862","2007":"40289556656","2008":"49259526053","2009":"42616653300","2010":"39460357731","2011":"46466728667","2012":"40742313861","2013":"45519650911","2014":"44210806366","2015":"37160332465","2016":"37745114708","Country Name":"Serbia","Country Code":"SRB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"30375251121","1961":"31551059163","1962":"34197956224","1963":"39213859647","1964":"38257387425","1965":"42627500885","1966":"46017949100","1967":"45479820393","1968":"48646316919","1969":"55775718701","1970":"65627001306","1971":"66769437518","1972":"75217262851","1973":"96146370804","1974":"1,26E+11","1975":"1,39E+11","1976":"1,50E+11","1977":"1,66E+11","1978":"1,83E+11","1979":"2,21E+11","1980":"2,77E+11","1981":"2,79E+11","1982":"2,61E+11","1983":"2,43E+11","1984":"2,31E+11","1985":"2,16E+11","1986":"2,39E+11","1987":"2,82E+11","1988":"2,96E+11","1989":"3,10E+11","1990":"3,10E+11","1991":"3,20E+11","1992":"3,14E+11","1993":"2,98E+11","1994":"2,91E+11","1995":"3,37E+11","1996":"3,49E+11","1997":"3,61E+11","1998":"3,40E+11","1999":"3,43E+11","2000":"3,67E+11","2001":"3,42E+11","2002":"3,66E+11","2003":"4,68E+11","2004":"5,82E+11","2005":"6,85E+11","2006":"8,00E+11","2007":"9,31E+11","2008":"1,06E+12","2009":"1,02E+12","2010":"1,36E+12","2011":"1,53E+12","2012":"1,61E+12","2013":"1,69E+12","2014":"1,77E+12","2015":"1,60E+12","2016":"1,50E+12","Country Name":"Sub-Saharan Africa (excluding high income)","Country Code":"SSA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"15550136279","2009":"12231362023","2010":"15727363443","2011":"17826697892","2012":"10368813559","2013":"13257635695","2014":"13282084034","2015":"9015221096","2016":"","Country Name":"S. Sudan","Country Code":"SSD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"30385873318","1961":"31561069598","1962":"34208896062","1963":"39225741665","1964":"38271070687","1965":"42640958019","1966":"46032013188","1967":"45494160112","1968":"48659688080","1969":"55788782511","1970":"65641311289","1971":"66787674495","1972":"75244560744","1973":"96178659253","1974":"1,26E+11","1975":"1,39E+11","1976":"1,51E+11","1977":"1,66E+11","1978":"1,83E+11","1979":"2,21E+11","1980":"2,77E+11","1981":"2,80E+11","1982":"2,61E+11","1983":"2,43E+11","1984":"2,32E+11","1985":"2,16E+11","1986":"2,39E+11","1987":"2,82E+11","1988":"2,96E+11","1989":"3,10E+11","1990":"3,11E+11","1991":"3,20E+11","1992":"3,15E+11","1993":"2,99E+11","1994":"2,92E+11","1995":"3,38E+11","1996":"3,49E+11","1997":"3,61E+11","1998":"3,41E+11","1999":"3,43E+11","2000":"3,68E+11","2001":"3,43E+11","2002":"3,67E+11","2003":"4,69E+11","2004":"5,83E+11","2005":"6,86E+11","2006":"8,01E+11","2007":"9,32E+11","2008":"1,06E+12","2009":"1,02E+12","2010":"1,36E+12","2011":"1,53E+12","2012":"1,61E+12","2013":"1,69E+12","2014":"1,78E+12","2015":"1,60E+12","2016":"1,50E+12","Country Name":"Sub-Saharan Africa","Country Code":"SSF","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"7836787196","1971":"8818144097","1972":"10407377359","1973":"12964753902","1974":"20152451259","1975":"22936619954","1976":"26214423633","1977":"29771720455","1978":"31993368148","1979":"39722899442","1980":"52643379202","1981":"54400876326","1982":"54173365558","1983":"52414910870","1984":"51973393620","1985":"50036733663","1986":"49068591555","1987":"56063766853","1988":"61791930551","1989":"64304587895","1990":"74325169014","1991":"75856511772","1992":"80746249830","1993":"78946659813","1994":"83179982125","1995":"94034486010","1996":"1,00E+11","1997":"1,06E+11","1998":"1,06E+11","1999":"1,14E+11","2000":"1,27E+11","2001":"1,27E+11","2002":"1,36E+11","2003":"1,63E+11","2004":"1,96E+11","2005":"2,34E+11","2006":"2,72E+11","2007":"3,26E+11","2008":"3,93E+11","2009":"3,37E+11","2010":"3,87E+11","2011":"4,69E+11","2012":"4,89E+11","2013":"5,08E+11","2014":"5,22E+11","2015":"4,44E+11","2016":"4,31E+11","Country Name":"Small states","Country Code":"SST","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"72230284,43","2002":"80531992,12","2003":"96343906,43","2004":"105360801,9","2005":"126194166,2","2006":"134441116,9","2007":"145827429,6","2008":"188021168,8","2009":"187821029","2010":"197454053,1","2011":"233213522,6","2012":"252560557,1","2013":"302925489,7","2014":"348463457,9","2015":"317696178,7","2016":"351054248,5","Country Name":"Sao Tome and Principe","Country Code":"STP","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"93850000","1961":"98400000","1962":"103500000","1963":"110000000","1964":"120850000","1965":"138650000","1966":"171100000","1967":"198450000","1968":"220600000","1969":"233450000","1970":"247150000","1971":"270650000","1972":"287600000","1973":"305300000","1974":"368600000","1975":"465000000","1976":"505500000","1977":"641000000","1978":"735500000","1979":"783000000","1980":"794900000","1981":"889050000","1982":"915150000","1983":"883600000","1984":"864150000","1985":"873250000","1986":"891000000","1987":"979850000","1988":"1160900000","1989":"542520000","1990":"388300000","1991":"448300000","1992":"404600000","1993":"428794117,6","1994":"605492537,3","1995":"693970588,2","1996":"860630922,7","1997":"929607500","1998":"945000000","1999":"885444186","2000":"892164393,9","2001":"763465550,5","2002":"1078402128","2003":"1271196078","2004":"1484092538","2005":"1793754805","2006":"2626380435","2007":"2936612022","2008":"3532969035","2009":"3875409836","2010":"4368398048","2011":"4422276622","2012":"4980000000","2013":"5145757576","2014":"5240606061","2015":"4878731707","2016":"3620699735","Country Name":"Suriname","Country Code":"SUR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"12694544693","1991":"14213045494","1992":"15431288006","1993":"16452201101","1994":"20079363626","1995":"25733043137","1996":"27821913815","1997":"27660149541","1998":"29828899206","1999":"30415095887","2000":"29114875622","2001":"30703017450","2002":"35083608131","2003":"46731767494","2004":"57240535138","2005":"62697540107","2006":"70596729394","2007":"86304245825","2008":"1,00E+11","2009":"88945625174","2010":"89501012916","2011":"98181259740","2012":"93413992956","2013":"98478349315","2014":"1,01E+11","2015":"87267593788","2016":"89551834323","Country Name":"Slovakia","Country Code":"SVK","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"21273055398","1996":"21480023017","1997":"20749140606","1998":"22125435372","1999":"22689994990","2000":"20342201356","2001":"20875387068","2002":"23563576758","2003":"29697448108","2004":"34470227454","2005":"36346974008","2006":"39587732029","2007":"48114688201","2008":"55589849128","2009":"50244793832","2010":"48013606745","2011":"51290792018","2012":"46258247575","2013":"47688566993","2014":"49530147016","2015":"42776716631","2016":"43990635176","Country Name":"Slovenia","Country Code":"SVN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"14842870293","1961":"16147160123","1962":"17511477311","1963":"18954132366","1964":"21137242561","1965":"23260320646","1966":"25302033132","1967":"27463409202","1968":"29143383491","1969":"31649203886","1970":"37555366021","1971":"40980345656","1972":"48263914959","1973":"58567384059","1974":"65082581295","1975":"81716751698","1976":"88102107647","1977":"93136775103","1978":"1,03E+11","1979":"1,22E+11","1980":"1,40E+11","1981":"1,28E+11","1982":"1,13E+11","1983":"1,04E+11","1984":"1,08E+11","1985":"1,13E+11","1986":"1,48E+11","1987":"1,80E+11","1988":"2,04E+11","1989":"2,15E+11","1990":"2,58E+11","1991":"2,70E+11","1992":"2,80E+11","1993":"2,10E+11","1994":"2,26E+11","1995":"2,64E+11","1996":"2,88E+11","1997":"2,64E+11","1998":"2,67E+11","1999":"2,71E+11","2000":"2,60E+11","2001":"2,40E+11","2002":"2,64E+11","2003":"3,31E+11","2004":"3,82E+11","2005":"3,89E+11","2006":"4,20E+11","2007":"4,88E+11","2008":"5,14E+11","2009":"4,30E+11","2010":"4,88E+11","2011":"5,63E+11","2012":"5,44E+11","2013":"5,79E+11","2014":"5,74E+11","2015":"4,96E+11","2016":"5,11E+11","Country Name":"Sweden","Country Code":"SWE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"35076158,48","1961":"43025199,5","1962":"45927061,46","1963":"54128377,43","1964":"64979280,41","1965":"70278594,43","1966":"76858462,83","1967":"74758504,83","1968":"79798404,03","1969":"105417891,6","1970":"112137757,2","1971":"136465324,4","1972":"146741251,5","1973":"221902017,3","1974":"264311994,1","1975":"288302907,4","1976":"272539098,4","1977":"304047838,1","1978":"340616375,3","1979":"412093133,8","1980":"542000513,6","1981":"571542674,6","1982":"537575980,8","1983":"555336145,8","1984":"494475699,9","1985":"361014890,5","1986":"449146608,3","1987":"584135559,9","1988":"692016714,3","1989":"696915430,7","1990":"1114703088","1991":"1156141998","1992":"1284766234","1993":"1357206996","1994":"1419293455","1995":"1698982438","1996":"1602760100","1997":"1716699913","1998":"1576904292","1999":"1547884442","2000":"1738100848","2001":"1542477355","2002":"1432228173","2003":"2197612761","2004":"2770082815","2005":"3178126548","2006":"3291353813","2007":"3469363931","2008":"3294093360","2009":"3580417157","2010":"4438778554","2011":"4820499498","2012":"4807282468","2013":"4575596301","2014":"4486261555","2015":"4137638727","2016":"3727303664","Country Name":"Swaziland","Country Code":"SWZ","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Sint Maarten (Dutch part)","Country Code":"SXM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"12012025,25","1961":"11592024,36","1962":"12642026,57","1963":"13923029,26","1964":"15393032,35","1965":"15603032,8","1966":"16443034,56","1967":"16632032,81","1968":"16074027,35","1969":"16452027,99","1970":"18432031,36","1971":"21965951,72","1972":"30645121,01","1973":"36896278,22","1974":"43134498,69","1975":"47803145,96","1976":"49278979,55","1977":"64526398,66","1978":"85552369,91","1979":"127261099,2","1980":"147357222,8","1981":"154902869","1982":"147912069,8","1983":"146712850,5","1984":"151313242","1985":"168887539,1","1986":"207850623,6","1987":"249267039,8","1988":"283828769","1989":"304832867,4","1990":"368584758,9","1991":"374359556,1","1992":"433667193,8","1993":"473916819,5","1994":"486451204,6","1995":"508221508,2","1996":"503068472,2","1997":"562958836,5","1998":"608369282,2","1999":"622985493,7","2000":"614879764,8","2001":"622262057,2","2002":"697518248,2","2003":"705704816","2004":"839319927,3","2005":"919103254,5","2006":"1016418229","2007":"1033561654","2008":"967199594","2009":"847397850,1","2010":"969936525,3","2011":"1065826670","2012":"1134267367","2013":"1411061261","2014":"1422530792","2015":"1437722206","2016":"1427323889","Country Name":"Seychelles","Country Code":"SYC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"857704431,7","1961":"945244992,2","1962":"1110565864","1963":"1200447429","1964":"1339494290","1965":"1472036551","1966":"1342287557","1967":"1580229795","1968":"1753746370","1969":"2245011572","1970":"2140383696","1971":"2589851693","1972":"3059682162","1973":"3239488105","1974":"5159557176","1975":"6826980767","1976":"7633528921","1977":"7696011360","1978":"9275203106","1979":"9929682184","1980":"13062421025","1981":"15518199247","1982":"16298905397","1983":"17589184557","1984":"17503082982","1985":"16403544511","1986":"13293209270","1987":"11356215713","1988":"10577042355","1989":"9853396226","1990":"12308624284","1991":"12981833333","1992":"13253565899","1993":"13695962019","1994":"10122020000","1995":"11396706587","1996":"13789560878","1997":"14505233969","1998":"15200846138","1999":"15873875969","2000":"19325894913","2001":"21099833784","2002":"21582248882","2003":"21828144686","2004":"25086930693","2005":"28858965517","2006":"33332844575","2007":"40405006007","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Syria","Country Code":"SYR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Turks and Caicos Islands","Country Code":"TCA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"313582727,6","1961":"333975336,6","1962":"357635713,9","1963":"371767002,7","1964":"392247517,6","1965":"416926303","1966":"432794922,5","1967":"449826323","1968":"453980096,7","1969":"471635620,9","1970":"469266736,6","1971":"501866730,7","1972":"585427545,7","1973":"647199482,8","1974":"652532796,1","1975":"864602103,3","1976":"866044961","1977":"935360466,4","1978":"1113920123","1979":"1004316495","1980":"1033002402","1981":"876937559,7","1982":"834369860,4","1983":"832415806","1984":"919103735,3","1985":"1033069710","1986":"1067828247","1987":"1163426851","1988":"1482597299","1989":"1433686310","1990":"1738605558","1991":"1877138042","1992":"1881847677","1993":"1463251055","1994":"1179837955","1995":"1445919970","1996":"1607345450","1997":"1544689503","1998":"1744794457","1999":"1534673583","2000":"1385058162","2001":"1709347793","2002":"1987622279","2003":"2736666516","2004":"4414929220","2005":"6646663561","2006":"7422102656","2007":"8638711443","2008":"10351932604","2009":"9253484108","2010":"10657705536","2011":"12156380425","2012":"12368071039","2013":"12949854263","2014":"13922223234","2015":"10888798114","2016":"9600761474","Country Name":"Chad","Country Code":"TCD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"80087763368","1961":"70303171031","1962":"64422866915","1963":"69761023322","1964":"80880803449","1965":"94389464673","1966":"1,03E+11","1967":"1,00E+11","1968":"1,01E+11","1969":"1,13E+11","1970":"1,26E+11","1971":"1,36E+11","1972":"1,54E+11","1973":"1,94E+11","1974":"2,19E+11","1975":"2,46E+11","1976":"2,50E+11","1977":"2,89E+11","1978":"2,80E+11","1979":"3,24E+11","1980":"3,74E+11","1981":"3,99E+11","1982":"4,19E+11","1983":"4,40E+11","1984":"4,77E+11","1985":"5,23E+11","1986":"5,21E+11","1987":"5,15E+11","1988":"5,71E+11","1989":"6,17E+11","1990":"6,62E+11","1991":"7,18E+11","1992":"8,05E+11","1993":"8,83E+11","1994":"1,06E+12","1995":"1,31E+12","1996":"1,51E+12","1997":"1,56E+12","1998":"1,43E+12","1999":"1,57E+12","2000":"1,73E+12","2001":"1,84E+12","2002":"2,04E+12","2003":"2,31E+12","2004":"2,68E+12","2005":"3,10E+12","2006":"3,73E+12","2007":"4,72E+12","2008":"5,97E+12","2009":"6,48E+12","2010":"7,86E+12","2011":"9,61E+12","2012":"1,07E+13","2013":"1,18E+13","2014":"1,27E+13","2015":"1,32E+13","2016":"1,35E+13","Country Name":"East Asia & Pacific (IDA & IBRD countries)","Country Code":"TEA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"9,60E+11","1990":"1,02E+12","1991":"1,01E+12","1992":"9,44E+11","1993":"9,31E+11","1994":"8,37E+11","1995":"9,19E+11","1996":"9,48E+11","1997":"9,79E+11","1998":"9,46E+11","1999":"8,20E+11","2000":"8,92E+11","2001":"9,08E+11","2002":"1,02E+12","2003":"1,26E+12","2004":"1,62E+12","2005":"2,03E+12","2006":"2,46E+12","2007":"3,16E+12","2008":"3,91E+12","2009":"3,09E+12","2010":"3,64E+12","2011":"4,40E+12","2012":"4,57E+12","2013":"4,83E+12","2014":"4,62E+12","2015":"3,60E+12","2016":"3,45E+12","Country Name":"Europe & Central Asia (IDA & IBRD countries)","Country Code":"TEC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"121128073,1","1961":"126396469,7","1962":"132237441,6","1963":"143255784,5","1964":"166104067,6","1965":"187300336,4","1966":"216136263,9","1967":"231706475,5","1968":"241956910,7","1969":"267732446,4","1970":"253976626,2","1971":"286537525","1972":"335677636,9","1973":"406479906,2","1974":"560437742,6","1975":"617321669,4","1976":"619375134,2","1977":"777435020,5","1978":"824263841,5","1979":"891775906,6","1980":"1136408814","1981":"962347001","1982":"821651918,7","1983":"765746590,6","1984":"718148959,6","1985":"762359722,7","1986":"1060911735","1987":"1249099130","1988":"1378847487","1989":"1352949663","1990":"1628427515","1991":"1602299863","1992":"1692959110","1993":"1233496846","1994":"982624324,5","1995":"1309382885","1996":"1465448290","1997":"1498950899","1998":"1587345951","1999":"1576094566","2000":"1294250233","2001":"1332328999","2002":"1474630207","2003":"1673690430","2004":"1937074572","2005":"2115154262","2006":"2202809251","2007":"2523462557","2008":"3163416242","2009":"3163000529","2010":"3172945645","2011":"3756023160","2012":"3866617463","2013":"4080929201","2014":"4482880424","2015":"4087628276","2016":"4399995987","Country Name":"Togo","Country Code":"TGO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2760747472","1961":"3034043574","1962":"3308912797","1963":"3540403457","1964":"3889129942","1965":"4388937649","1966":"5279230817","1967":"5638461442","1968":"6081009428","1969":"6695336567","1970":"7086538438","1971":"7375000024","1972":"8177884553","1973":"10838587358","1974":"13703000530","1975":"14882747955","1976":"16985211146","1977":"19779315170","1978":"24006570178","1979":"27371699083","1980":"32353440727","1981":"34846107862","1982":"36589797857","1983":"40042826244","1984":"41797592963","1985":"38900692712","1986":"43096746122","1987":"50535438696","1988":"61667199835","1989":"72250877410","1990":"85343063966","1991":"98234695722","1992":"1,11E+11","1993":"1,29E+11","1994":"1,47E+11","1995":"1,69E+11","1996":"1,83E+11","1997":"1,50E+11","1998":"1,14E+11","1999":"1,27E+11","2000":"1,26E+11","2001":"1,20E+11","2002":"1,34E+11","2003":"1,52E+11","2004":"1,73E+11","2005":"1,89E+11","2006":"2,22E+11","2007":"2,63E+11","2008":"2,91E+11","2009":"2,82E+11","2010":"3,41E+11","2011":"3,71E+11","2012":"3,98E+11","2013":"4,21E+11","2014":"4,07E+11","2015":"3,99E+11","2016":"4,07E+11","Country Name":"Thailand","Country Code":"THA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2629395066","1991":"2534720480","1992":"1909246641","1993":"1646693642","1994":"1346074611","1995":"1231523035","1996":"1043893063","1997":"921843144,2","1998":"1320126706","1999":"1086567378","2000":"860550305,8","2001":"1080774007","2002":"1221113780","2003":"1554125531","2004":"2076148696","2005":"2312319579","2006":"2830236054","2007":"3719497371","2008":"5161336170","2009":"4979481980","2010":"5642178580","2011":"6522732203","2012":"7633049792","2013":"8506674783","2014":"9236309138","2015":"7853450374","2016":"6951657159","Country Name":"Tajikistan","Country Code":"TJK","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"2331358820","1988":"3010982414","1989":"3006988217","1990":"3189539641","1991":"3208098919","1992":"3200539816","1993":"3179225949","1994":"2561118608","1995":"2482228440","1996":"2379281768","1997":"2450084970","1998":"2605688065","1999":"2450686660","2000":"2904662605","2001":"3534771969","2002":"4462028989","2003":"5977440583","2004":"6838351088","2005":"8104355717","2006":"10277598152","2007":"12664165103","2008":"19271523179","2009":"20214385965","2010":"22583157895","2011":"29233333333","2012":"35164210526","2013":"39197543860","2014":"43524210526","2015":"35799628571","2016":"36179885714","Country Name":"Turkmenistan","Country Code":"TKM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"76482117752","1961":"81138598562","1962":"93494272336","1963":"93815961171","1964":"1,04E+11","1965":"1,12E+11","1966":"1,23E+11","1967":"1,26E+11","1968":"1,35E+11","1969":"1,51E+11","1970":"1,64E+11","1971":"1,83E+11","1972":"2,06E+11","1973":"2,71E+11","1974":"3,56E+11","1975":"3,72E+11","1976":"4,14E+11","1977":"4,57E+11","1978":"5,17E+11","1979":"6,17E+11","1980":"7,36E+11","1981":"8,51E+11","1982":"7,92E+11","1983":"6,96E+11","1984":"6,82E+11","1985":"7,03E+11","1986":"7,13E+11","1987":"7,50E+11","1988":"8,59E+11","1989":"9,42E+11","1990":"1,10E+12","1991":"1,37E+12","1992":"1,29E+12","1993":"1,49E+12","1994":"1,72E+12","1995":"1,83E+12","1996":"1,98E+12","1997":"2,16E+12","1998":"2,17E+12","1999":"1,95E+12","2000":"2,15E+12","2001":"2,08E+12","2002":"1,85E+12","2003":"1,90E+12","2004":"2,21E+12","2005":"2,69E+12","2006":"3,17E+12","2007":"3,76E+12","2008":"4,39E+12","2009":"4,12E+12","2010":"5,14E+12","2011":"5,86E+12","2012":"5,91E+12","2013":"6,06E+12","2014":"6,06E+12","2015":"5,15E+12","2016":"5,00E+12","Country Name":"Latin America & the Caribbean (IDA & IBRD countries)","Country Code":"TLA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"368000000","2001":"452000000","2002":"444000000","2003":"453000000","2004":"466000000","2005":"491000000","2006":"463000000","2007":"559000000","2008":"694000000","2009":"827000000","2010":"943000000","2011":"1148000000","2012":"1293000000","2013":"1312000000","2014":"1399000000","2015":"1441718600","2016":"","Country Name":"Timor-Leste","Country Code":"TLS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"2,89E+11","1994":"2,96E+11","1995":"3,38E+11","1996":"3,92E+11","1997":"4,02E+11","1998":"4,08E+11","1999":"4,32E+11","2000":"4,47E+11","2001":"4,63E+11","2002":"4,50E+11","2003":"5,08E+11","2004":"5,82E+11","2005":"6,87E+11","2006":"7,98E+11","2007":"9,84E+11","2008":"1,22E+12","2009":"1,17E+12","2010":"1,35E+12","2011":"1,57E+12","2012":"1,66E+12","2013":"1,62E+12","2014":"1,57E+12","2015":"1,43E+12","2016":"","Country Name":"Middle East & North Africa (IDA & IBRD countries)","Country Code":"TMN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"32506741,72","1976":"30036416,96","1977":"34139387,89","1978":"41567471,67","1979":"44667002,01","1980":"53260077,43","1981":"62242013,33","1982":"62068161,07","1983":"60863963,96","1984":"64248354,54","1985":"60058663,31","1986":"68195855,61","1987":"81667133,45","1988":"106657267,4","1989":"106344855","1990":"113563821,6","1991":"132201141,4","1992":"137066290,6","1993":"138489884,4","1994":"193775943","1995":"202547013,9","1996":"219583570,1","1997":"212155124,7","1998":"188686997,3","1999":"196686674,7","2000":"202363492,2","2001":"181244788,5","2002":"182737040,1","2003":"202543202","2004":"229358214,8","2005":"262176133,7","2006":"294137737,1","2007":"300143056,9","2008":"349459648,6","2009":"318151987,3","2010":"369435481,4","2011":"423015938","2012":"472441383","2013":"449387934","2014":"443475142,1","2015":"435430325,2","2016":"395159628,8","Country Name":"Tonga","Country Code":"TON","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"46535882351","1961":"49639265058","1962":"52969959484","1963":"59564124016","1964":"68207240599","1965":"73302133554","1966":"61638106880","1967":"67859668329","1968":"71227636451","1969":"78199356804","1970":"84723556607","1971":"90042201736","1972":"90429767480","1973":"1,03E+11","1974":"1,25E+11","1975":"1,34E+11","1976":"1,31E+11","1977":"1,52E+11","1978":"1,73E+11","1979":"1,93E+11","1980":"2,33E+11","1981":"2,47E+11","1982":"2,56E+11","1983":"2,71E+11","1984":"2,69E+11","1985":"2,93E+11","1986":"3,10E+11","1987":"3,44E+11","1988":"3,70E+11","1989":"3,73E+11","1990":"4,02E+11","1991":"3,58E+11","1992":"3,80E+11","1993":"3,76E+11","1994":"4,27E+11","1995":"4,74E+11","1996":"5,19E+11","1997":"5,44E+11","1998":"5,52E+11","1999":"5,91E+11","2000":"6,15E+11","2001":"6,31E+11","2002":"6,63E+11","2003":"7,74E+11","2004":"8,98E+11","2005":"1,03E+12","2006":"1,18E+12","2007":"1,49E+12","2008":"1,52E+12","2009":"1,67E+12","2010":"2,04E+12","2011":"2,27E+12","2012":"2,30E+12","2013":"2,36E+12","2014":"2,58E+12","2015":"2,71E+12","2016":"2,90E+12","Country Name":"South Asia (IDA & IBRD)","Country Code":"TSA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"30385873318","1961":"31561069598","1962":"34208896062","1963":"39225741665","1964":"38271070687","1965":"42640958019","1966":"46032013188","1967":"45494160112","1968":"48659688080","1969":"55788782511","1970":"65641311289","1971":"66787674495","1972":"75244560744","1973":"96178659253","1974":"1,26E+11","1975":"1,39E+11","1976":"1,51E+11","1977":"1,66E+11","1978":"1,83E+11","1979":"2,21E+11","1980":"2,77E+11","1981":"2,80E+11","1982":"2,61E+11","1983":"2,43E+11","1984":"2,32E+11","1985":"2,16E+11","1986":"2,39E+11","1987":"2,82E+11","1988":"2,96E+11","1989":"3,10E+11","1990":"3,11E+11","1991":"3,20E+11","1992":"3,15E+11","1993":"2,99E+11","1994":"2,92E+11","1995":"3,38E+11","1996":"3,49E+11","1997":"3,61E+11","1998":"3,41E+11","1999":"3,43E+11","2000":"3,68E+11","2001":"3,43E+11","2002":"3,67E+11","2003":"4,69E+11","2004":"5,83E+11","2005":"6,86E+11","2006":"8,01E+11","2007":"9,32E+11","2008":"1,06E+12","2009":"1,02E+12","2010":"1,36E+12","2011":"1,53E+12","2012":"1,61E+12","2013":"1,69E+12","2014":"1,78E+12","2015":"1,60E+12","2016":"1,50E+12","Country Name":"Sub-Saharan Africa (IDA & IBRD countries)","Country Code":"TSS","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"535670127,7","1961":"584961208,7","1962":"619319197,3","1963":"678235373","1964":"711893367,6","1965":"736568861,9","1966":"723735635,5","1967":"761981474","1968":"758899950","1969":"779200000","1970":"821850000","1971":"896754316,7","1972":"1083381044","1973":"1308799459","1974":"2042031901","1975":"2442667573","1976":"2500410584","1977":"3138666667","1978":"3562333458","1979":"4602416625","1980":"6235833333","1981":"6992083333","1982":"8140416667","1983":"7763750000","1984":"7757083333","1985":"7375918367","1986":"4794444444","1987":"4797777778","1988":"4496852073","1989":"4323058824","1990":"5068000000","1991":"5307905882","1992":"5439552941","1993":"4669488516","1994":"4947205860","1995":"5329214163","1996":"5759537726","1997":"5737751332","1998":"6043694330","1999":"6808982521","2000":"8154338233","2001":"8824873259","2002":"9008273721","2003":"11305459802","2004":"13280275123","2005":"15982282462","2006":"18369070085","2007":"21642304046","2008":"27870257894","2009":"19175196446","2010":"22157948396","2011":"25433011405","2012":"25694164489","2013":"26436221401","2014":"26175906133","2015":"23559287484","2016":"20989155540","Country Name":"Trinidad and Tobago","Country Code":"TTO","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"991047619","1966":"1040952381","1967":"1085714286","1968":"1214666667","1969":"1289904762","1970":"1439238095","1971":"1685217059","1972":"2237476420","1973":"2730787476","1974":"3545933562","1975":"4328610490","1976":"4507929104","1977":"5109324009","1978":"5968044210","1979":"7188191882","1980":"8744134354","1981":"8428513568","1982":"8133401050","1983":"8350176783","1984":"8254891864","1985":"8410185740","1986":"9018136020","1987":"9696271268","1988":"10096292842","1989":"10102075213","1990":"12290568182","1991":"13074782609","1992":"15497286296","1993":"14608946896","1994":"15632463424","1995":"18030876599","1996":"19587322786","1997":"20746360430","1998":"21803372267","1999":"22943685719","2000":"21473188882","2001":"22066101341","2002":"23142294436","2003":"27453084983","2004":"31183139301","2005":"32273007554","2006":"34378437265","2007":"38908069299","2008":"44856586316","2009":"43454935940","2010":"44050929160","2011":"45810626509","2012":"45044176964","2013":"46255308672","2014":"47603227897","2015":"43156606852","2016":"42062549395","Country Name":"Tunisia","Country Code":"TUN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"13995067818","1961":"8022222222","1962":"8922222222","1963":"10355555556","1964":"11177777778","1965":"11944444444","1966":"14122222222","1967":"15666666667","1968":"17500000000","1969":"19466666667","1970":"17086956522","1971":"16256619964","1972":"20431095406","1973":"25724381625","1974":"35599913836","1975":"44633707243","1976":"51280134554","1977":"58676813687","1978":"65147022486","1979":"89394085658","1980":"68789289566","1981":"71040020140","1982":"64546332581","1983":"61678280115","1984":"59989909458","1985":"67234948265","1986":"75728009963","1987":"87172789528","1988":"90852814005","1989":"1,07E+11","1990":"1,51E+11","1991":"1,50E+11","1992":"1,58E+11","1993":"1,80E+11","1994":"1,31E+11","1995":"1,69E+11","1996":"1,81E+11","1997":"1,90E+11","1998":"2,76E+11","1999":"2,56E+11","2000":"2,73E+11","2001":"2,00E+11","2002":"2,38E+11","2003":"3,12E+11","2004":"4,05E+11","2005":"5,01E+11","2006":"5,53E+11","2007":"6,76E+11","2008":"7,64E+11","2009":"6,45E+11","2010":"7,72E+11","2011":"8,33E+11","2012":"8,74E+11","2013":"9,51E+11","2014":"9,34E+11","2015":"8,59E+11","2016":"8,58E+11","Country Name":"Turkey","Country Code":"TUR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"8824447,74","1991":"9365165,914","1992":"9742949,471","1993":"9630762,954","1994":"10886825,56","1995":"11025945,14","1996":"12334846,23","1997":"12700905,45","1998":"12757632,87","1999":"13687141,11","2000":"13742057,05","2001":"13196544,95","2002":"15450994,24","2003":"18231078,54","2004":"21534931,61","2005":"21839098,89","2006":"22902861,45","2007":"27030374,03","2008":"30290219,76","2009":"27101076,28","2010":"31823518,62","2011":"39312016,5","2012":"39875750,67","2013":"38322359,53","2014":"37259689,92","2015":"32673277,74","2016":"34218878,44","Country Name":"Tuvalu","Country Code":"TUV","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"5100405772","1989":"4420168102","1990":"4258743263","1991":"4956588279","1992":"4601413264","1993":"4257702197","1994":"4510846968","1995":"5255221425","1996":"6496195451","1997":"7683852497","1998":"9345174219","1999":"9697847264","2000":"10185786383","2001":"10383560603","2002":"10805599893","2003":"11659129889","2004":"12825801581","2005":"16929976600","2006":"18610460327","2007":"21501741757","2008":"27368386358","2009":"28573777052","2010":"31407908612","2011":"33878631649","2012":"39087748240","2013":"44333456245","2014":"48197218327","2015":"45628247290","2016":"47431038892","Country Name":"Tanzania","Country Code":"TZA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"423008385,7","1961":"441524109","1962":"449012578,6","1963":"516147798,7","1964":"589056603,8","1965":"884873949,6","1966":"925770308,1","1967":"967647058,8","1968":"1037815126","1969":"1169047619","1970":"1260084034","1971":"1417787115","1972":"1491596639","1973":"1702521008","1974":"2100142653","1975":"2359555556","1976":"2447300000","1977":"2936470588","1978":"2420260870","1979":"2139025000","1980":"1244610000","1981":"1337300000","1982":"2177500000","1983":"2240333333","1984":"3615647477","1985":"3519666339","1986":"3923232122","1987":"6269511615","1988":"6508931652","1989":"5276480986","1990":"4304398866","1991":"3321729057","1992":"2857457860","1993":"3220439044","1994":"3990430447","1995":"5755818947","1996":"6044585327","1997":"6269333313","1998":"6584815847","1999":"5998563258","2000":"6193246837","2001":"5840503869","2002":"6178563591","2003":"6336696289","2004":"7940362799","2005":"9013834373","2006":"9942597780","2007":"12292813603","2008":"14239026630","2009":"21203769125","2010":"20179411063","2011":"20508595015","2012":"23516083900","2013":"24879053947","2014":"27927875336","2015":"27856380083","2016":"25527910091","Country Name":"Uganda","Country Code":"UGA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"64087694038","1988":"74703517903","1989":"82709161099","1990":"81456918679","1991":"77464561150","1992":"73942235330","1993":"65648559903","1994":"52549555149","1995":"48213868178","1996":"44558077827","1997":"50150399792","1998":"41883241472","1999":"31580639045","2000":"31261527363","2001":"38009344577","2002":"42392896031","2003":"50132953288","2004":"64883060726","2005":"86142018069","2006":"1,08E+11","2007":"1,43E+11","2008":"1,80E+11","2009":"1,17E+11","2010":"1,36E+11","2011":"1,63E+11","2012":"1,76E+11","2013":"1,83E+11","2014":"1,34E+11","2015":"91030959455","2016":"93270479389","Country Name":"Ukraine","Country Code":"UKR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"2,17E+11","1961":"1,98E+11","1962":"2,08E+11","1963":"2,18E+11","1964":"2,46E+11","1965":"2,75E+11","1966":"3,02E+11","1967":"3,06E+11","1968":"3,22E+11","1969":"3,60E+11","1970":"3,95E+11","1971":"4,33E+11","1972":"4,95E+11","1973":"6,42E+11","1974":"8,22E+11","1975":"9,07E+11","1976":"9,85E+11","1977":"1,10E+12","1978":"1,18E+12","1979":"1,43E+12","1980":"1,63E+12","1981":"1,77E+12","1982":"1,75E+12","1983":"1,72E+12","1984":"1,77E+12","1985":"1,87E+12","1986":"1,95E+12","1987":"1,95E+12","1988":"2,14E+12","1989":"2,33E+12","1990":"2,67E+12","1991":"2,95E+12","1992":"2,87E+12","1993":"3,12E+12","1994":"3,39E+12","1995":"3,79E+12","1996":"4,12E+12","1997":"4,39E+12","1998":"4,34E+12","1999":"4,11E+12","2000":"4,52E+12","2001":"4,57E+12","2002":"4,59E+12","2003":"5,17E+12","2004":"6,21E+12","2005":"7,47E+12","2006":"8,89E+12","2007":"1,11E+13","2008":"1,35E+13","2009":"1,30E+13","2010":"1,58E+13","2011":"1,89E+13","2012":"2,01E+13","2013":"2,15E+13","2014":"2,21E+13","2015":"2,07E+13","2016":"2,05E+13","Country Name":"Upper middle income","Country Code":"UMC","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1242289212","1961":"1547388813","1962":"1710004464","1963":"1539681534","1964":"1975701728","1965":"1890769326","1966":"1809183975","1967":"1597721080","1968":"1593675330","1969":"2004435484","1970":"2137096774","1971":"2807258065","1972":"2189418001","1973":"3964295673","1974":"4090209682","1975":"3538283322","1976":"3667161241","1977":"4114667063","1978":"4910257283","1979":"7181185278","1980":"10163020116","1981":"11048335541","1982":"9178802163","1983":"5102281256","1984":"4850241442","1985":"4732017873","1986":"5880112788","1987":"7367494080","1988":"8213515459","1989":"8438951476","1990":"9298839655","1991":"11206193313","1992":"12878157306","1993":"15002144584","1994":"17474578502","1995":"19297663097","1996":"20515465834","1997":"23969746850","1998":"25385928198","1999":"23983945191","2000":"22823255802","2001":"20898788417","2002":"13606494599","2003":"12045631093","2004":"13686329890","2005":"17362857684","2006":"19579457966","2007":"23410572622","2008":"30366213095","2009":"31660911290","2010":"40284481662","2011":"47962439293","2012":"51264390121","2013":"57531233351","2014":"57236013078","2015":"53274304215","2016":"52419720714","Country Name":"Uruguay","Country Code":"URY","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"5,43E+11","1961":"5,63E+11","1962":"6,05E+11","1963":"6,39E+11","1964":"6,86E+11","1965":"7,44E+11","1966":"8,15E+11","1967":"8,62E+11","1968":"9,43E+11","1969":"1,02E+12","1970":"1,08E+12","1971":"1,17E+12","1972":"1,28E+12","1973":"1,43E+12","1974":"1,55E+12","1975":"1,69E+12","1976":"1,88E+12","1977":"2,09E+12","1978":"2,36E+12","1979":"2,63E+12","1980":"2,86E+12","1981":"3,21E+12","1982":"3,34E+12","1983":"3,64E+12","1984":"4,04E+12","1985":"4,35E+12","1986":"4,59E+12","1987":"4,87E+12","1988":"5,25E+12","1989":"5,66E+12","1990":"5,98E+12","1991":"6,17E+12","1992":"6,54E+12","1993":"6,88E+12","1994":"7,31E+12","1995":"7,66E+12","1996":"8,10E+12","1997":"8,61E+12","1998":"9,09E+12","1999":"9,66E+12","2000":"1,03E+13","2001":"1,06E+13","2002":"1,10E+13","2003":"1,15E+13","2004":"1,23E+13","2005":"1,31E+13","2006":"1,39E+13","2007":"1,45E+13","2008":"1,47E+13","2009":"1,44E+13","2010":"1,50E+13","2011":"1,55E+13","2012":"1,62E+13","2013":"1,67E+13","2014":"1,74E+13","2015":"1,80E+13","2016":"1,86E+13","Country Name":"United States","Country Code":"USA","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"13360607991","1991":"13677622222","1992":"12941297376","1993":"13099013836","1994":"12899156991","1995":"13350468917","1996":"13948892216","1997":"14744603774","1998":"14988971211","1999":"17078465982","2000":"13760374488","2001":"11401351420","2002":"9687951055","2003":"10128112401","2004":"12030023548","2005":"14307509839","2006":"17330833853","2007":"22311393928","2008":"29549438884","2009":"33689223673","2010":"39332770929","2011":"45915191189","2012":"51821573338","2013":"57690453461","2014":"63067077179","2015":"66903804143","2016":"67220335570","Country Name":"Uzbekistan","Country Code":"UZB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"13066557,78","1961":"13999883,33","1962":"14524878,96","1963":"13708219,1","1964":"14758210,35","1965":"15108207,43","1966":"16099865,83","1967":"15835177,93","1968":"15350000","1969":"16650000","1970":"18450000","1971":"20051648,18","1972":"27585488,99","1973":"30165373,62","1974":"32924215,86","1975":"33237164,72","1976":"32792480,97","1977":"49353148,15","1978":"60844777,78","1979":"71096370,37","1980":"82340333,33","1981":"102086555,6","1982":"113759185,2","1983":"122255333,3","1984":"135025000","1985":"145641703,7","1986":"160846666,7","1987":"175580629,6","1988":"200726703,7","1989":"214745000","1990":"240365259,3","1991":"254829629,6","1992":"277954111,1","1993":"286307814,8","1994":"289438481,5","1995":"316008481,5","1996":"331489703,7","1997":"347770000","1998":"373619851,9","1999":"390719148,1","2000":"396270000","2001":"430040370,4","2002":"461883444,4","2003":"481806296,3","2004":"521975111,1","2005":"550728666,7","2006":"610930044,4","2007":"651833314,8","2008":"695428851,9","2009":"674922481,5","2010":"681225963","2011":"676129407,4","2012":"692933740,7","2013":"721207148,1","2014":"727912814,8","2015":"737683555,6","2016":"770796555,6","Country Name":"St. Vincent and the Grenadines","Country Code":"VCT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"8736939394","1961":"9058121212","1962":"10022000000","1963":"10823878788","1964":"9111000000","1965":"9496244444","1966":"9984400000","1967":"10356422222","1968":"11343444444","1969":"11795044444","1970":"12848755556","1971":"14625295455","1972":"15922863636","1973":"19466279070","1974":"28985627907","1975":"31303581395","1976":"36187023256","1977":"42263209302","1978":"46426511628","1979":"55653325581","1980":"67018023256","1981":"75367139535","1982":"76559883721","1983":"78540255814","1984":"56091900000","1985":"57935746667","1986":"58793864198","1987":"45343793103","1988":"58428406897","1989":"42119835735","1990":"47028010661","1991":"51749026408","1992":"58450099415","1993":"58124193833","1994":"56531046465","1995":"74906532240","1996":"68263823149","1997":"85843534589","1998":"91331203433","1999":"97976886247","2000":"1,17E+11","2001":"1,23E+11","2002":"92893587734","2003":"83620628582","2004":"1,12E+11","2005":"1,46E+11","2006":"1,83E+11","2007":"2,30E+11","2008":"3,16E+11","2009":"3,30E+11","2010":"3,93E+11","2011":"3,16E+11","2012":"3,81E+11","2013":"3,71E+11","2014":"","2015":"","2016":"","Country Name":"Venezuela","Country Code":"VEN","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"British Virgin Islands","Country Code":"VGB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"24200000","1961":"25700000","1962":"36900000","1963":"41400000","1964":"53800000","1965":"66500000","1966":"84100000","1967":"115400000","1968":"173800000","1969":"211300000","1970":"219000000","1971":"257000000","1972":"307100000","1973":"351600000","1974":"395400000","1975":"399800000","1976":"440000000","1977":"461800000","1978":"512900000","1979":"606700032","1980":"727800000","1981":"821800000","1982":"832600000","1983":"916899968","1984":"985400000","1985":"990400000","1986":"1035600000","1987":"1147800064","1988":"1204600064","1989":"1343900032","1990":"1564700032","1991":"1671200000","1992":"1770899968","1993":"1996000000","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"3269000000","2003":"3453000000","2004":"3799000000","2005":"4439000000","2006":"4504000000","2007":"4803000000","2008":"4250000000","2009":"4203000000","2010":"4339000000","2011":"4239000000","2012":"4095000000","2013":"3764000000","2014":"3624000000","2015":"3765000000","2016":"","Country Name":"Virgin Islands (U.S.)","Country Code":"VIR","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"14094687821","1986":"26336617262","1987":"36658108341","1988":"25423812719","1989":"6293304841","1990":"6471740491","1991":"9613369548","1992":"9866990092","1993":"13180953966","1994":"16286434068","1995":"20736163924","1996":"24657470353","1997":"26843701147","1998":"27209601996","1999":"28683657995","2000":"33640085739","2001":"35291349197","2002":"37947904054","2003":"42717072869","2004":"49424107710","2005":"57633255618","2006":"66371664817","2007":"77414425532","2008":"99130304099","2009":"1,06E+11","2010":"1,16E+11","2011":"1,36E+11","2012":"1,56E+11","2013":"1,71E+11","2014":"1,86E+11","2015":"1,93E+11","2016":"2,03E+11","Country Name":"Vietnam","Country Code":"VNM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"119258835,3","1980":"113423181,3","1981":"98746405,39","1982":"98144643,9","1983":"110123779,8","1984":"135553764","1985":"123698506,1","1986":"118691396,8","1987":"130834145,1","1988":"148545381,4","1989":"144482170,2","1990":"158397403","1991":"188869985,7","1992":"196142585","1993":"188080374,4","1994":"219260341,1","1995":"233902114,9","1996":"245177633,2","1997":"255890221,8","1998":"262301252,8","1999":"267999225,3","2000":"272014693,1","2001":"257926881,7","2002":"262603781,8","2003":"314463144","2004":"364996869,1","2005":"394962552,3","2006":"439376794,1","2007":"526428309,9","2008":"607958616,1","2009":"610066628,7","2010":"700804286,2","2011":"792149700,7","2012":"781702874,1","2013":"801787555,9","2014":"814954307","2015":"742432131","2016":"773502895,9","Country Name":"Vanuatu","Country Code":"VUT","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1,37E+12","1961":"1,42E+12","1962":"1,53E+12","1963":"1,64E+12","1964":"1,80E+12","1965":"1,96E+12","1966":"2,13E+12","1967":"2,26E+12","1968":"2,44E+12","1969":"2,69E+12","1970":"2,96E+12","1971":"3,27E+12","1972":"3,77E+12","1973":"4,59E+12","1974":"5,29E+12","1975":"5,89E+12","1976":"6,41E+12","1977":"7,25E+12","1978":"8,54E+12","1979":"9,92E+12","1980":"1,12E+13","1981":"1,15E+13","1982":"1,14E+13","1983":"1,16E+13","1984":"1,21E+13","1985":"1,27E+13","1986":"1,50E+13","1987":"1,71E+13","1988":"1,91E+13","1989":"2,01E+13","1990":"2,26E+13","1991":"2,39E+13","1992":"2,54E+13","1993":"2,58E+13","1994":"2,77E+13","1995":"3,08E+13","1996":"3,15E+13","1997":"3,14E+13","1998":"3,13E+13","1999":"3,25E+13","2000":"3,35E+13","2001":"3,33E+13","2002":"3,46E+13","2003":"3,89E+13","2004":"4,38E+13","2005":"4,74E+13","2006":"5,13E+13","2007":"5,78E+13","2008":"6,34E+13","2009":"6,01E+13","2010":"6,59E+13","2011":"7,32E+13","2012":"7,48E+13","2013":"7,69E+13","2014":"7,89E+13","2015":"7,45E+13","2016":"7,55E+13","Country Name":"World","Country Code":"WLD","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"121221651,6","1983":"111862823,6","1984":"109200934,3","1985":"95572172,98","1986":"100947848,6","1987":"111713922,1","1988":"133016065,4","1989":"122888609,7","1990":"125766269,8","1991":"125597205,4","1992":"132303041,4","1993":"133122897,2","1994":"221098106,5","1995":"224865731,4","1996":"249908970,7","1997":"285475591,9","1998":"269481523,2","1999":"258833766,6","2000":"269019710,3","2001":"273088357,2","2002":"288078881,4","2003":"338838639,4","2004":"420320176,4","2005":"462644663,1","2006":"508505414,4","2007":"550967295,3","2008":"644143266,2","2009":"560967765,5","2010":"643056627,7","2011":"739777274,1","2012":"801152293,3","2013":"804816205,7","2014":"803574789,1","2015":"803976511,5","2016":"785916937,4","Country Name":"Samoa","Country Code":"WSM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"1849196082","2001":"2535333632","2002":"2702427047","2003":"3355083117","2004":"3639935348","2005":"3736599925","2006":"4078158324","2007":"4833561456","2008":"5687488209","2009":"5653792720","2010":"5829933775","2011":"6649291076","2012":"6473724785","2013":"7072092406","2014":"7386891336","2015":"6440501275","2016":"6649888889","Country Name":"Kosovo","Country Code":"XKX","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"5647251908","1991":"5930370370","1992":"6463649985","1993":"5368270615","1994":"4167356037","1995":"4258788725","1996":"5785685311","1997":"6839039030","1998":"6325219773","1999":"7641101221","2000":"9636342275","2001":"9854042165","2002":"10693278292","2003":"11777768087","2004":"13873500888","2005":"16753769532","2006":"19081722875","2007":"21656517484","2008":"26910851362","2009":"25130274124","2010":"30906749533","2011":"32726417878","2012":"35401339869","2013":"40415233436","2014":"43228583935","2015":"37733919936","2016":"27317605346","Country Name":"Yemen","Country Code":"YEM","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"7575248495","1961":"7972840543","1962":"8497830043","1963":"9423211536","1964":"10373792524","1965":"11334173317","1966":"12354752905","1967":"13777124458","1968":"14894302114","1969":"16780064399","1970":"18418031639","1971":"20334172260","1972":"21358137115","1973":"29293948127","1974":"36806475350","1975":"38114942529","1976":"36601885925","1977":"40649724011","1978":"46737580497","1979":"57647268409","1980":"82984078069","1981":"89629496833","1982":"82696902010","1983":"88786580363","1984":"87880468269","1985":"69208451593","1986":"82107924006","1987":"1,07E+11","1988":"1,18E+11","1989":"1,29E+11","1990":"1,16E+11","1991":"1,24E+11","1992":"1,35E+11","1993":"1,34E+11","1994":"1,40E+11","1995":"1,55E+11","1996":"1,48E+11","1997":"1,53E+11","1998":"1,38E+11","1999":"1,37E+11","2000":"1,36E+11","2001":"1,22E+11","2002":"1,15E+11","2003":"1,75E+11","2004":"2,29E+11","2005":"2,58E+11","2006":"2,72E+11","2007":"2,99E+11","2008":"2,87E+11","2009":"2,96E+11","2010":"3,75E+11","2011":"4,16E+11","2012":"3,96E+11","2013":"3,67E+11","2014":"3,51E+11","2015":"3,17E+11","2016":"2,95E+11","Country Name":"South Africa","Country Code":"ZAF","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"713000000","1961":"696285714,3","1962":"693142857,1","1963":"718714285,7","1964":"839428571,4","1965":"1082857143","1966":"1264285714","1967":"1368000000","1968":"1605857143","1969":"1965714286","1970":"1825285714","1971":"1687000000","1972":"1910714286","1973":"2268714286","1974":"3121833333","1975":"2618666667","1976":"2746714286","1977":"2483000000","1978":"2813375000","1979":"3325500000","1980":"3829500000","1981":"3872666667","1982":"3994777778","1983":"3216307692","1984":"2739444444","1985":"2281258065","1986":"1661948718","1987":"2269894737","1988":"3713614458","1989":"3998637681","1990":"3285217391","1991":"3378882353","1992":"3181921788","1993":"3273237853","1994":"3656647744","1995":"3807067122","1996":"3597220962","1997":"4303281932","1998":"3537683046","1999":"3404311977","2000":"3600683040","2001":"4094480988","2002":"4193845678","2003":"4901839731","2004":"6221077675","2005":"8331870169","2006":"12756858899","2007":"14056957976","2008":"17910858638","2009":"15328342304","2010":"20265556274","2011":"23460098340","2012":"25503370699","2013":"28045460442","2014":"27150630607","2015":"21154394546","2016":"19551093303","Country Name":"Zambia","Country Code":"ZMB","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"},{"1960":"1052990400","1961":"1096646600","1962":"1117601600","1963":"1159511700","1964":"1217138000","1965":"1311435800","1966":"1281749500","1967":"1397002000","1968":"1479599900","1969":"1747998800","1970":"1884206300","1971":"2178716300","1972":"2677729400","1973":"3309353600","1974":"3982161400","1975":"4371300700","1976":"4318372000","1977":"4364382100","1978":"4351600500","1979":"5177459400","1980":"6678868200","1981":"8011373800","1982":"8539700700","1983":"7764067000","1984":"6352125900","1985":"5637259300","1986":"6217523700","1987":"6741215100","1988":"7814784100","1989":"8286322700","1990":"8783816700","1991":"8641481700","1992":"6751472200","1993":"6563813300","1994":"6890675000","1995":"7111270700","1996":"8553146600","1997":"8529571600","1998":"6401968200","1999":"6858013100","2000":"6689957600","2001":"6777384700","2002":"6342116400","2003":"5727591800","2004":"5805598400","2005":"5755215200","2006":"5443896500","2007":"5291950100","2008":"4415702800","2009":"8366794000","2010":"10052045200","2011":"12071733500","2012":"14058378300","2013":"15223528900","2014":"15834069900","2015":"16072380200","2016":"16289212000","Country Name":"Zimbabwe","Country Code":"ZWE","Indicator Name":"GDP (current US$)","Indicator Code":"NY.GDP.MKTP.CD"}]

/***/ }),
/* 913 */
/***/ (function(module, exports) {

module.exports = [{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"17342,47194","1995":"16441,79064","1996":"16585,19553","1997":"17926,57284","1998":"19081,35166","1999":"19356,20339","2000":"20620,70063","2001":"20670,65566","2002":"20434,29944","2003":"20834,5102","2004":"22567,82492","2005":"23302,83199","2006":"24014,94427","2007":"25921,02605","2008":"27546,89939","2009":"24631,43486","2010":"24271,94042","2011":"25324,72036","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Aruba","Country Code":"ABW","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"59,77732651","1961":"59,87815281","1962":"58,49287383","1963":"78,78275804","1964":"82,20844386","1965":"101,2904713","1966":"137,8993619","1967":"161,3220001","1968":"129,5066538","1969":"129,7985414","1970":"157,1874224","1971":"160,3728356","1972":"136,1170144","1973":"144,1103189","1974":"174,9420383","1975":"187,975604","1976":"199,0261727","1977":"226,0053438","1978":"249,2873863","1979":"277,9007417","1980":"274,8808587","1981":"266,4930418","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"117,4096908","2002":"187,845095","2003":"198,7285436","2004":"219,1413528","2005":"250,2941299","2006":"272,563077","2007":"369,835796","2008":"373,3611163","2009":"445,8932979","2010":"553,3002894","2011":"603,5370231","2012":"669,0090509","2013":"631,7449706","2014":"612,0696514","2015":"584,0259021","2016":"561,7787463","Country Name":"Afghanistan","Country Code":"AFG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"630,074985","1986":"612,0748404","1987":"595,8577544","1988":"580,5550249","1989":"847,7667242","1990":"823,7921843","1991":"965,3612964","1992":"438,3205196","1993":"393,7845209","1994":"293,2782224","1995":"353,1820451","1996":"512,6209659","1997":"506,8849522","1998":"415,6933459","1999":"385,7688535","2000":"555,2969419","2001":"526,168743","2002":"711,181716","2003":"779,4683056","2004":"1041,086844","2005":"1443,991929","2006":"2062,415149","2007":"2878,837144","2008":"3868,578883","2009":"3347,84485","2010":"3529,053482","2011":"4299,012889","2012":"4598,249988","2013":"4804,616884","2014":"4709,312024","2015":"3695,793748","2016":"3110,808183","Country Name":"Angola","Country Code":"AGO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"662,5200523","1985":"662,9147926","1986":"719,1572957","1987":"699,3842921","1988":"676,5667325","1989":"723,4096102","1990":"639,4638993","1991":"348,7113178","1992":"218,4921659","1993":"380,5273711","1994":"619,0651634","1995":"760,5593758","1996":"1046,358511","1997":"749,584649","1998":"865,3021618","1999":"1098,425463","2000":"1175,788981","2001":"1326,970339","2002":"1453,642777","2003":"1890,681557","2004":"2416,588235","2005":"2709,142931","2006":"3005,012903","2007":"3603,013685","2008":"4370,539647","2009":"4114,136545","2010":"4094,358832","2011":"4437,178068","2012":"4247,614308","2013":"4414,72314","2014":"4575,763787","2015":"3954,022783","2016":"4146,89625","Country Name":"Albania","Country Code":"ALB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"3238,55685","1971":"3498,173652","1972":"4217,173581","1973":"5342,16856","1974":"6319,739034","1975":"7169,101006","1976":"7152,375134","1977":"7751,370216","1978":"9129,706185","1979":"11820,84939","1980":"12377,41165","1981":"10372,23283","1982":"9610,266308","1983":"8022,654781","1984":"7728,906695","1985":"7774,393829","1986":"10361,81598","1987":"12616,16757","1988":"14304,35696","1989":"15166,43785","1990":"18878,50597","1991":"19532,54015","1992":"20547,71179","1993":"16516,47103","1994":"16234,80901","1995":"18461,06486","1996":"19017,17459","1997":"18353,05972","1998":"18894,5215","1999":"19261,7105","2000":"21435,9264","2001":"22037,36055","2002":"24518,34306","2003":"32438,6839","2004":"38255,9505","2005":"41185,98902","2006":"43666,98514","2007":"48510,46728","2008":"47712,29908","2009":"43215,68701","2010":"39627,66352","2011":"40919,18328","2012":"38167,09575","2013":"40215,43532","2014":"","2015":"","2016":"","Country Name":"Andorra","Country Code":"AND","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"222,6888511","1969":"238,9096771","1970":"256,4208873","1971":"289,545006","1972":"335,0836702","1973":"414,0973987","1974":"769,1901572","1975":"826,0032504","1976":"996,6545473","1977":"1114,400348","1978":"1182,827294","1979":"1550,235983","1980":"2041,031418","1981":"2037,935232","1982":"1837,659921","1983":"1670,070375","1984":"1641,381222","1985":"1572,050826","1986":"1451,723753","1987":"1525,704056","1988":"1458,433302","1989":"1486,825976","1990":"1988,45874","1991":"1905,209155","1992":"2004,63398","1993":"1974,89059","1994":"1970,315735","1995":"2053,721421","1996":"2216,775124","1997":"2300,588127","1998":"2172,848006","1999":"2316,459293","2000":"2589,64845","2001":"2495,366312","2002":"2462,791442","2003":"2721,615721","2004":"3117,660806","2005":"3745,79093","2006":"4336,718583","2007":"4937,598218","2008":"6114,039959","2009":"5157,252898","2010":"5916,329624","2011":"6856,593678","2012":"7341,239892","2013":"7435,889121","2014":"7446,369661","2015":"6430,071957","2016":"6153,069547","Country Name":"Arab World","Country Code":"ARB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"26556,08003","1976":"29698,16922","1977":"33245,8361","1978":"27897,32709","1979":"32798,47823","1980":"41825,99546","1981":"44012,33307","1982":"39193,74097","1983":"34159,03735","1984":"31709,25433","1985":"29189,16779","1986":"23056,10453","1987":"23312,92953","1988":"21907,59798","1989":"23612,7452","1990":"27256,29094","1991":"26168,26662","1992":"25993,55801","1993":"25199,34958","1994":"25467,19222","1995":"26847,08005","1996":"28615,58214","1997":"29199,52461","1998":"26663,3087","1999":"28260,00502","2000":"33071,26869","2001":"31061,52935","2002":"31311,35936","2003":"33230,52318","2004":"36161,17061","2005":"39439,80197","2006":"42372,22166","2007":"42672,61323","2008":"45758,90554","2009":"33072,57517","2010":"35049,14832","2011":"40462,31209","2012":"42112,23565","2013":"43350,64268","2014":"44449,74035","2015":"39101,74689","2016":"37622,20746","Country Name":"United Arab Emirates","Country Code":"ARE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"1148,579957","1963":"845,0771842","1964":"1166,3174","1965":"1272,010496","1966":"1266,344989","1967":"1057,755661","1968":"1136,517832","1969":"1324,082935","1970":"1317,487755","1971":"1366,354726","1972":"1401,487795","1973":"2083,972218","1974":"2824,650915","1975":"2011,68904","1976":"1932,590782","1977":"2112,501173","1978":"2129,313793","1979":"2501,480753","1980":"2738,284723","1981":"2756,396981","1982":"2907,757627","1983":"3530,131783","1984":"2643,369398","1985":"2909,51661","1986":"3595,085898","1987":"3546,71882","1988":"3969,327412","1989":"2375,339103","1990":"4318,7747","1991":"5715,504397","1992":"6798,026763","1993":"6940,350358","1994":"7449,48039","1995":"7373,428246","1996":"7683,574065","1997":"8172,664323","1998":"8248,761989","1999":"7736,369623","2000":"7669,273916","2001":"7170,694674","2002":"2579,193168","2003":"3330,437006","2004":"4251,574348","2005":"5076,883829","2006":"5878,761027","2007":"7193,61764","2008":"8953,359275","2009":"8161,306966","2010":"10276,2605","2011":"12726,90836","2012":"12969,70712","2013":"12976,63642","2014":"12245,25645","2015":"13467,10236","2016":"12449,21685","Country Name":"Argentina","Country Code":"ARG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"637,8557412","1991":"590,1222257","1992":"369,6333872","1993":"357,2043385","1994":"400,5160919","1995":"456,3758997","1996":"504,059514","1997":"523,2835691","1998":"609,1730254","1999":"597,4334817","2000":"622,7427477","2001":"694,4305119","2002":"783,2616099","2003":"930,1661567","2004":"1191,96192","2005":"1643,758397","2006":"2158,002909","2007":"3138,808703","2008":"4010,026997","2009":"2993,832531","2010":"3218,381655","2011":"3526,978143","2012":"3684,80481","2013":"3843,591213","2014":"3994,712355","2015":"3609,654776","2016":"3606,152057","Country Name":"Armenia","Country Code":"ARM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"8751,766529","2003":"8914,525433","2004":"8639,308855","2005":"8508,406915","2006":"8456,947997","2007":"8980,536414","2008":"9871,997194","2009":"12058,26382","2010":"10352,82276","2011":"10375,99422","2012":"11660,32953","2013":"11553,69121","2014":"11508,55927","2015":"11541,85498","2016":"","Country Name":"American Samoa","Country Code":"ASM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"1063,420113","1978":"1198,507083","1979":"1483,51598","1980":"1789,589568","1981":"2023,39995","1982":"2268,789978","1983":"2542,52727","1984":"2946,240394","1985":"3452,522512","1986":"4220,961621","1987":"4969,781883","1988":"5944,670893","1989":"6585,840242","1990":"6889,004949","1991":"7156,853423","1992":"7296,551773","1993":"7652,102974","1994":"8218,597479","1995":"7841,464034","1996":"8379,576739","1997":"8755,156499","1998":"9115,234532","1999":"9363,18664","2000":"9875,161736","2001":"9358,154162","2002":"9386,716452","2003":"9739,82556","2004":"10352,8374","2005":"11371,93895","2006":"12724,39377","2007":"14252,29452","2008":"14703,31923","2009":"13012,46692","2010":"12126,87614","2011":"11929,34991","2012":"12565,44197","2013":"12224,86416","2014":"12888,29667","2015":"13566,90541","2016":"14353,37881","Country Name":"Antigua and Barbuda","Country Code":"ATG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1809,311452","1961":"1876,01412","1962":"1853,614248","1963":"1965,991477","1964":"2130,17446","1965":"2279,820319","1966":"2342,168925","1967":"2578,277802","1968":"2721,947788","1969":"2989,415344","1970":"3302,529573","1971":"3492,549371","1972":"3946,535985","1973":"4766,979888","1974":"6478,642513","1975":"6998,239869","1976":"7480,521526","1977":"7769,59668","1978":"8246,317846","1979":"9287,158625","1980":"10201,9783","1981":"11844,63254","1982":"12778,66257","1983":"11528,1681","1984":"12448,78373","1985":"11452,65689","1986":"11379,52337","1987":"11643,94718","1988":"14283,38445","1989":"17838,36312","1990":"18249,28849","1991":"18865,34352","1992":"18616,32081","1993":"17681,14687","1994":"18102,31756","1995":"20384,66929","1996":"21944,15506","1997":"23551,22217","1998":"21365,98141","1999":"20561,47678","2000":"21690,921","2001":"19517,84168","2002":"20081,81763","2003":"23465,38559","2004":"30472,37977","2005":"34016,71483","2006":"36118,28381","2007":"40991,98289","2008":"49664,68504","2009":"42742,99898","2010":"51874,08048","2011":"62245,10029","2012":"67677,63477","2013":"67792,30386","2014":"62214,60912","2015":"56554,03876","2016":"49927,81951","Country Name":"Australia","Country Code":"AUS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"935,4604269","1961":"1031,815004","1962":"1087,834243","1963":"1167,000532","1964":"1269,412583","1965":"1374,53214","1966":"1486,968606","1967":"1569,667183","1968":"1677,673528","1969":"1825,386126","1970":"2053,809514","1971":"2375,242674","1972":"2917,004844","1973":"3881,349717","1974":"4619,601728","1975":"5272,887682","1976":"5664,707422","1977":"6794,220945","1978":"8185,701971","1979":"9770,17215","1980":"10843,36172","1981":"9362,639985","1982":"9387,677728","1983":"9514,431834","1984":"8969,405618","1985":"9150,001211","1986":"13051,55561","1987":"16353,27943","1988":"17536,27209","1989":"17426,86354","1990":"21628,76023","1991":"22356,92392","1992":"24820,22783","1993":"24023,51547","1994":"25584,91782","1995":"30252,79469","1996":"29742,42881","1997":"26646,88394","1998":"27289,63071","1999":"27116,67608","2000":"24517,26745","2001":"24489,73553","2002":"26351,37568","2003":"32102,93055","2004":"36693,40262","2005":"38242,04252","2006":"40430,99361","2007":"46586,65025","2008":"51386,37665","2009":"47654,18721","2010":"46657,0629","2011":"51126,74139","2012":"48333,57273","2013":"50504,71532","2014":"51322,63997","2015":"43665,00947","2016":"44176,51522","Country Name":"Austria","Country Code":"AUT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"1237,324492","1991":"1209,237493","1992":"676,1515115","1993":"530,0903798","1994":"436,1905586","1995":"397,1981161","1996":"409,2167452","1997":"505,5605732","1998":"561,9103017","1999":"573,8902562","2000":"655,0974326","2001":"703,6838434","2002":"763,0730858","2003":"883,6439965","2004":"1045,02163","2005":"1578,40239","2006":"2473,085776","2007":"3851,437869","2008":"5574,603802","2009":"4950,294791","2010":"5842,805784","2011":"7189,691229","2012":"7496,335728","2013":"7875,756953","2014":"7891,299776","2015":"5500,310382","2016":"3876,936433","Country Name":"Azerbaijan","Country Code":"AZE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"70,34907861","1961":"71,48727773","1962":"73,78176495","1963":"78,9002836","1964":"86,60319464","1965":"51,65736468","1966":"52,47672296","1967":"55,13168671","1968":"55,24340419","1969":"56,07888142","1970":"70,24312709","1971":"72,12955294","1972":"69,63919255","1973":"85,04700015","1974":"95,41395105","1975":"114,6635856","1976":"119,9073909","1977":"143,2891278","1978":"155,9176618","1979":"194,9753861","1980":"223,4072262","1981":"229,4581867","1982":"233,817671","1983":"243,4238066","1984":"215,9441863","1985":"244,5689375","1986":"248,2101339","1987":"226,8497158","1988":"210,7500959","1989":"210,9695203","1990":"209,0516152","1991":"210,6438772","1992":"191,310913","1993":"162,635225","1994":"157,5430015","1995":"167,7991717","1996":"143,8532933","1997":"159,1755281","1998":"144,4746122","1999":"128,6964397","2000":"135,9984455","2001":"133,7427689","2002":"122,4335893","2003":"112,8493703","2004":"127,4296648","2005":"150,5070434","2006":"165,8794176","2007":"170,7999005","2008":"196,2472628","2009":"204,9446502","2010":"231,1943256","2011":"260,4799073","2012":"265,2856051","2013":"282,7555252","2014":"312,7489794","2015":"303,6810223","2016":"285,7274421","Country Name":"Burundi","Country Code":"BDI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1273,691659","1961":"1350,197673","1962":"1438,523233","1963":"1535,023729","1964":"1701,846276","1965":"1835,594766","1966":"1957,62608","1967":"2086,636005","1968":"2222,361511","1969":"2458,08182","1970":"2780,69881","1971":"3099,433091","1972":"3852,145363","1973":"4927,200588","1974":"5764,49533","1975":"6737,254619","1976":"7281,824621","1977":"8472,062471","1978":"10344,85691","1979":"11873,84662","1980":"12932,87283","1981":"10679,67399","1982":"9393,885569","1983":"8893,594536","1984":"8502,54663","1985":"8797,66799","1986":"12235,1957","1987":"15216,8854","1988":"16478,84717","1989":"16613,53235","1990":"20710,66393","1991":"21154,31183","1992":"23497,74962","1993":"22403,238","1994":"24338,16069","1995":"28565,94615","1996":"27701,85197","1997":"25027,77782","1998":"25541,71829","1999":"25444,13926","2000":"23207,40591","2001":"23121,56635","2002":"25052,33028","2003":"30743,95693","2004":"35589,71295","2005":"36967,28292","2006":"38852,36103","2007":"44403,83131","2008":"48424,58927","2009":"44880,56015","2010":"44380,23741","2011":"47702,77415","2012":"44740,5717","2013":"46510,38647","2014":"47439,39684","2015":"40356,875","2016":"41096,1573","Country Name":"Belgium","Country Code":"BEL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"93,02250899","1961":"95,57215471","1962":"94,46453498","1963":"99,85911389","1964":"104,339768","1965":"110,1327938","1966":"112,9408364","1967":"111,9516019","1968":"116,895066","1969":"116,0250943","1970":"114,5565965","1971":"112,5700891","1972":"134,8194079","1973":"161,9873737","1974":"174,0141491","1975":"207,3004397","1976":"208,6561538","1977":"218,4543658","1978":"263,5810576","1979":"327,821678","1980":"378,0438983","1981":"337,9781947","1982":"322,7776995","1983":"271,1292402","1984":"252,869785","1985":"244,4109989","1986":"303,3488979","1987":"344,5030708","1988":"346,7360377","1989":"311,6783039","1990":"393,6862144","1991":"385,753616","1992":"317,9628553","1993":"411,9260305","1994":"279,6665043","1995":"367,387341","1996":"387,4329246","1997":"361,1002698","1998":"379,442354","1999":"403,6237038","2000":"374,1923942","2001":"378,736054","2002":"418,6985763","2003":"519,2922847","2004":"583,4093514","2005":"601,799977","2006":"625,830092","2007":"706,0535419","2008":"820,1513498","2009":"793,45243","2010":"757,6959074","2011":"825,9427854","2012":"837,9505001","2013":"915,2674586","2014":"943,686575","2015":"783,947091","2016":"789,4404107","Country Name":"Benin","Country Code":"BEN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"68,42474857","1961":"71,55818009","1962":"76,5206114","1963":"78,37207194","1964":"80,47276675","1965":"81,7251155","1966":"82,54563689","1967":"84,36316494","1968":"84,73304935","1969":"86,52021111","1970":"81,49989868","1971":"84,28781501","1972":"99,32676402","1973":"113,7805843","1974":"124,3590305","1975":"152,7282201","1976":"155,648998","1977":"176,7833677","1978":"225,9416525","1979":"262,0760096","1980":"282,6857353","1981":"254,2307807","1982":"245,0947024","1983":"217,9947508","1984":"193,8432403","1985":"200,8944225","1986":"256,7623188","1987":"291,1319639","1988":"313,0618911","1989":"304,8534388","1990":"351,9793229","1991":"346,4106724","1992":"240,963481","1993":"244,1270735","1994":"193,0702363","1995":"235,8321973","1996":"249,3602944","1997":"229,4931177","1998":"255,7182334","1999":"265,3401156","2000":"226,4759814","2001":"235,4912324","2002":"260,7635413","2003":"332,3443051","2004":"371,3230865","2005":"406,9988071","2006":"422,6332374","2007":"475,1100122","2008":"569,7612784","2009":"552,7455521","2010":"575,4464527","2011":"666,8402783","2012":"673,8227","2013":"699,0452847","2014":"705,1464113","2015":"615,592225","2016":"649,7304837","Country Name":"Burkina Faso","Country Code":"BFA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"88,69121063","1961":"97,14273018","1962":"99,57671365","1963":"101,2604912","1964":"99,50386427","1965":"105,7891703","1966":"111,6586395","1967":"121,6620934","1968":"121,5288977","1969":"133,5754367","1970":"138,2479647","1971":"131,7557632","1972":"93,02487011","1973":"117,7258149","1974":"179,045065","1975":"272,7451978","1976":"138,5922339","1977":"128,8092611","1978":"172,414696","1979":"196,4426256","1980":"222,6323509","1981":"241,8703692","1982":"215,3932576","1983":"199,3366454","1984":"208,5346351","1985":"239,0392205","1986":"227,4230256","1987":"247,072312","1988":"263,2227905","1989":"277,8178391","1990":"297,5679945","1991":"284,7255998","1992":"285,0954994","1993":"291,7144952","1994":"290,652464","1995":"319,6086944","1996":"382,9357493","1997":"389,5236244","1998":"395,2974607","1999":"397,3548219","2000":"405,6033071","2001":"402,5981152","2002":"400,6135745","2003":"432,7388972","2004":"460,7579167","2005":"484,1554071","2006":"494,0501466","2007":"541,0651484","2008":"615,7775411","2009":"681,1205368","2010":"757,6717572","2011":"835,7893401","2012":"856,342857","2013":"951,8894535","2014":"1084,56543","2015":"1210,15812","2016":"1358,779752","Country Name":"Bangladesh","Country Code":"BGD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"2238,802958","1981":"2234,814816","1982":"2169,004011","1983":"1852,813434","1984":"1963,572676","1985":"1914,550647","1986":"2260,427281","1987":"3132,30136","1988":"2511,393063","1989":"2477,020818","1990":"2366,529821","1991":"1267,734375","1992":"1211,980878","1993":"1278,247173","1994":"1148,494399","1995":"1554,046931","1996":"1208,850233","1997":"1346,91277","1998":"1771,993943","1999":"1643,609895","2000":"1609,280586","2001":"1764,907387","2002":"2087,534843","2003":"2710,468024","2004":"3381,507837","2005":"3893,68998","2006":"4513,13628","2007":"5932,899677","2008":"7296,122479","2009":"6955,987733","2010":"6843,263289","2011":"7813,803499","2012":"7378,025539","2013":"7674,860559","2014":"7853,335191","2015":"6993,47736","2016":"7350,795801","Country Name":"Bulgaria","Country Code":"BGR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"8537,929379","1981":"9269,269617","1982":"9446,158002","1983":"9421,285655","1984":"9590,683099","1985":"8706,725084","1986":"7041,56947","1987":"7555,066809","1988":"7958,679492","1989":"8030,85458","1990":"8528,983334","1991":"9055,591114","1992":"9082,741169","1993":"9698,134804","1994":"10130,41307","1995":"10376,93489","1996":"10544,66713","1997":"10672,18394","1998":"10076,18778","1999":"10401,48045","2000":"13636,34668","2001":"12868,211","2002":"13102,33457","2003":"14221,99259","2004":"15846,47641","2005":"17959,17854","2006":"19307,99549","2007":"20977,11053","2008":"23067,56535","2009":"19356,67236","2010":"20722,10389","2011":"22810,10242","2012":"23649,36661","2013":"25010,18329","2014":"24983,37902","2015":"22688,87824","2016":"22354,16707","Country Name":"Bahrain","Country Code":"BHR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1550,324315","1961":"1651,475477","1962":"1752,970293","1963":"1867,112988","1964":"1994,54492","1965":"2144,830971","1966":"2322,943853","1967":"2556,835301","1968":"2804,705131","1969":"3215,486672","1970":"3179,276272","1971":"3297,998999","1972":"3322,668256","1973":"3696,66314","1974":"3416,550062","1975":"3156,468059","1976":"3328,633192","1977":"3617,251193","1978":"4130,75087","1979":"5532,150831","1980":"6338,619868","1981":"6622,685658","1982":"7165,134491","1983":"7694,937985","1984":"8873,769102","1985":"9888,48935","1986":"10339,52102","1987":"11150,69004","1988":"11381,82156","1989":"12158,07885","1990":"12350,97684","1991":"11914,85776","1992":"11682,08496","1993":"11402,65152","1994":"11812,46489","1995":"12239,8715","1996":"12717,15001","1997":"17287,93602","1998":"18456,60898","1999":"20505,94743","2000":"21241,2367","2001":"21497,52091","2002":"22506,35114","2003":"22009,20043","2004":"21996,40649","2005":"23405,45302","2006":"23719,10788","2007":"24301,24325","2008":"23652,33053","2009":"22037,10801","2010":"21921,55906","2011":"21523,97372","2012":"22575,59019","2013":"22590,39338","2014":"22550,23301","2015":"22888,13405","2016":"23124,38655","Country Name":"Bahamas","Country Code":"BHS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"318,0200012","1995":"485,6172767","1996":"736,9753294","1997":"978,516728","1998":"1097,644555","1999":"1246,497114","2000":"1461,75052","2001":"1524,412022","2002":"1761,537647","2003":"2214,732246","2004":"2650,642661","2005":"2968,411806","2006":"3404,321698","2007":"4180,292176","2008":"5075,316064","2009":"4697,809732","2010":"4611,470298","2011":"5050,156834","2012":"4716,673325","2013":"5035,86555","2014":"5193,904932","2015":"4574,090787","2016":"4708,718261","Country Name":"Bosnia and Herz.","Country Code":"BIH","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2124,840514","1991":"1708,848342","1992":"1675,838916","1993":"1590,612461","1994":"1460,075488","1995":"1370,672043","1996":"1452,447002","1997":"1396,502166","1998":"1511,770268","1999":"1210,6116","2000":"1276,288034","2001":"1244,373185","2002":"1479,383142","2003":"1819,525644","2004":"2378,339207","2005":"3126,071767","2006":"3848,215966","2007":"4735,484827","2008":"6376,183153","2009":"5176,172649","2010":"6030,388707","2011":"6519,710753","2012":"6940,243915","2013":"7978,825443","2014":"8318,429294","2015":"5949,110677","2016":"4989,254611","Country Name":"Belarus","Country Code":"BLR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"304,9171073","1961":"316,4036061","1962":"327,1268675","1963":"336,9414661","1964":"351,1611263","1965":"377,5943052","1966":"406,0979671","1967":"420,4318882","1968":"386,953237","1969":"396,6543063","1970":"435,6904694","1971":"474,4442162","1972":"519,5635077","1973":"605,9334407","1974":"786,069092","1975":"885,9845291","1976":"717,0401829","1977":"858,8280811","1978":"980,8225093","1979":"1074,271965","1980":"1350,97638","1981":"1307,211688","1982":"1183,168317","1983":"1212,922437","1984":"1315,272503","1985":"1268,182948","1986":"1343,708719","1987":"1586,450207","1988":"1758,942735","1989":"1979,35346","1990":"2202,322556","1991":"2326,845903","1992":"2666,977671","1993":"2833,061341","1994":"2880,211133","1995":"2996,382928","1996":"3001,665138","1997":"2952,602141","1998":"2991,924971","1999":"3065,492248","2000":"3364,423711","2001":"3419,275719","2002":"3556,561825","2003":"3679,909523","2004":"3831,538019","2005":"3933,332215","2006":"4187,37803","2007":"4324,876427","2008":"4470,220796","2009":"4258,788611","2010":"4344,150177","2011":"4516,24675","2012":"4673,63848","2013":"4688,538443","2014":"4852,223666","2015":"4849,997495","2016":"4810,565902","Country Name":"Belize","Country Code":"BLZ","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1902,402119","1961":"1961,538169","1962":"2020,385965","1963":"2020,265248","1964":"2199,727007","1965":"2282,216546","1966":"2630,850466","1967":"2982,749704","1968":"2830,188679","1969":"3053,703704","1970":"3387,272727","1971":"3866,300366","1972":"4343,173432","1973":"5009,29368","1974":"5853,932584","1975":"6509,433962","1976":"7261,278195","1977":"8370,786517","1978":"8876,865672","1979":"9613,3829","1980":"11218,21782","1981":"13425,97697","1982":"14166,17129","1983":"15902,02038","1984":"17469,82557","1985":"18269,53552","1986":"20450,66453","1987":"22411,79567","1988":"24253,17552","1989":"25517,92172","1990":"26841,51974","1991":"27700,30952","1992":"28669,68226","1993":"30900,69489","1994":"31476,06312","1995":"33989,72236","1996":"44826,78907","1997":"48478,88325","1998":"51371,74081","1999":"54245,45974","2000":"56284,16865","2001":"58883,95943","2002":"62583,1002","2003":"66111,72523","2004":"70359,31911","2005":"75882,03386","2006":"83912,6978","2007":"90849,58698","2008":"93605,74817","2009":"88463,31282","2010":"88207,32756","2011":"85973,15842","2012":"85458,45551","2013":"85748,06541","2014":"","2015":"","2016":"","Country Name":"Bermuda","Country Code":"BMU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"152,4618458","1961":"162,6957054","1962":"174,493386","1963":"184,275535","1964":"203,6011495","1965":"223,2783299","1966":"239,374916","1967":"255,8479664","1968":"210,1898901","1969":"218,5558012","1970":"225,7482986","1971":"238,1117003","1972":"267,6869789","1973":"263,210612","1974":"428,4328638","1975":"480,0507642","1976":"533,6275535","1977":"616,667074","1978":"702,4289173","1979":"808,4191206","1980":"811,7768958","1981":"1031,516161","1982":"958,6879039","1983":"909,847761","1984":"1013,800937","1985":"865,6901106","1986":"624,71542","1987":"672,565591","1988":"697,3705601","1989":"701,4646141","1990":"709,9488612","1991":"764,1413321","1992":"791,3804293","1993":"788,3990281","1994":"806,2214519","1995":"887,4685243","1996":"958,4737662","1997":"1006,964739","1998":"1058,71875","1999":"1012,509773","2000":"1007,002869","2001":"958,2366524","2002":"913,5756423","2003":"917,3643105","2004":"978,3346485","2005":"1046,427384","2006":"1233,594435","2007":"1389,634888","2008":"1736,935051","2009":"1776,866476","2010":"1981,160705","2011":"2377,675918","2012":"2645,227753","2013":"2947,938526","2014":"3124,00031","2015":"3077,026199","2016":"3104,956089","Country Name":"Bolivia","Country Code":"BOL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"210,0274704","1961":"204,9293015","1962":"260,2252661","1963":"291,950589","1964":"261,3310831","1965":"260,9646925","1966":"315,2773824","1967":"346,8801004","1968":"374,0832618","1969":"403,0652523","1970":"444,0262676","1971":"503,4787661","1972":"584,5506848","1973":"772,8187913","1974":"1000,634253","1975":"1149,586121","1976":"1385,29853","1977":"1560,86306","1978":"1737,367552","1979":"1901,001325","1980":"1939,790876","1981":"2124,962989","1982":"2218,890515","1983":"1565,297832","1984":"1573,967139","1985":"1643,196503","1986":"1936,016335","1987":"2081,665262","1988":"2294,401695","1989":"2901,285449","1990":"3093,037479","1991":"3966,795488","1992":"2591,797116","1993":"2786,171356","1994":"3494,640541","1995":"4840,787782","1996":"5156,805408","1997":"5271,411137","1998":"5075,631114","1999":"3469,503972","2000":"3739,119036","2001":"3146,950177","2002":"2819,649531","2003":"3059,587582","2004":"3623,047667","2005":"4770,182746","2006":"5860,145975","2007":"7313,557962","2008":"8787,610375","2009":"8553,38047","2010":"11224,15408","2011":"13167,47289","2012":"12291,46685","2013":"12216,90446","2014":"12026,61731","2015":"8757,206202","2016":"8649,948492","Country Name":"Brazil","Country Code":"BRA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"4013,830765","1981":"4402,183665","1982":"4585,783186","1983":"4855,35487","1984":"5278,489562","1985":"5508,435028","1986":"6028,722211","1987":"6616,335805","1988":"7012,387087","1989":"7733,022214","1990":"7728,507914","1991":"7734,167653","1992":"7464,86568","1993":"7842,471543","1994":"8148,344073","1995":"8537,158561","1996":"9069,069442","1997":"9549,759595","1998":"10727,4241","1999":"11200,35494","2000":"11568,11011","2001":"11513,87189","2002":"11675,39395","2003":"12028,50447","2004":"12868,86309","2005":"14223,86576","2006":"15646,05591","2007":"16462,48556","2008":"16570,32028","2009":"16523,32388","2010":"15905,91232","2011":"15534,15704","2012":"15384,8749","2013":"15472,7814","2014":"15359,66971","2015":"15557,83081","2016":"16096,89259","Country Name":"Barbados","Country Code":"BRB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"1113,402447","1966":"1237,079237","1967":"1235,892097","1968":"1363,453044","1969":"1303,739413","1970":"1381,972167","1971":"1455,308336","1972":"1906,192984","1973":"2915,266583","1974":"6921,436446","1975":"7226,430873","1976":"8459,324214","1977":"9914,123812","1978":"10711,86604","1979":"14941,0624","1980":"25412,99495","1981":"21821,79499","1982":"20687,39975","1983":"18123,85989","1984":"17332,97479","1985":"15694,53999","1986":"10211,59628","1987":"11591,78627","1988":"11006,87051","1989":"11869,98727","1990":"13604,15683","1991":"13901,72173","1992":"15270,48612","1993":"14572,10853","1994":"14117,39214","1995":"15929,16376","1996":"16789,03717","1997":"16656,08988","1998":"12690,68932","1999":"14097,93159","2000":"18008,44826","2001":"16468,12886","2002":"16846,02198","2003":"18555,56649","2004":"21896,60527","2005":"26102,13345","2006":"30980,96692","2007":"32672,36717","2008":"37951,2806","2009":"27965,47504","2010":"35268,10117","2011":"47017,0273","2012":"47651,25909","2013":"44597,27968","2014":"41590,86502","2015":"30967,89051","2016":"26938,50338","Country Name":"Brunei","Country Code":"BRN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"331,5312269","1981":"348,2364521","1982":"345,5152164","1983":"374,758549","1984":"373,0604584","1985":"368,6335872","1986":"416,968406","1987":"505,9227309","1988":"548,7543973","1989":"520,4078194","1990":"557,9721483","1991":"465,3885839","1992":"471,8392542","1993":"449,688254","1994":"524,2981458","1995":"588,5939027","1996":"609,3430176","1997":"692,1262064","1998":"695,2902533","1999":"751,5757717","2000":"765,8632358","2001":"807,9387673","2002":"885,6382245","2003":"997,7417141","2004":"1097,457088","2005":"1247,061392","2006":"1335,456906","2007":"1741,142552","2008":"1795,181307","2009":"1770,234497","2010":"2178,921383","2011":"2458,045976","2012":"2422,008016","2013":"2350,882889","2014":"2522,796008","2015":"2613,645177","2016":"2804,000223","Country Name":"Bhutan","Country Code":"BTN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"57,97768188","1961":"61,24224828","1962":"64,7070068","1963":"67,37587059","1964":"71,64951911","1965":"76,67722123","1966":"83,73469996","1967":"92,6258754","1968":"101,476552","1969":"114,8342053","1970":"138,363326","1971":"176,663797","1972":"222,46945","1973":"317,6646403","1974":"384,4187546","1975":"430,0741231","1976":"433,6515141","1977":"506,3237594","1978":"636,4664377","1979":"850,3486958","1980":"1059,6967","1981":"1034,153218","1982":"943,3196682","1983":"1052,732039","1984":"1077,74254","1985":"937,4744618","1986":"1135,167444","1987":"1554,419932","1988":"2031,41822","1989":"2301,989726","1990":"2750,950026","1991":"2783,021503","1992":"2848,206987","1993":"2783,237931","1994":"2779,113832","1995":"3014,867858","1996":"3022,176753","1997":"3065,527268","1998":"2869,182503","1999":"3226,295674","2000":"3349,068823","2001":"3128,097793","2002":"3055,618382","2003":"4163,065906","2004":"4896,583835","2005":"5351,253732","2006":"5374,554867","2007":"5714,047937","2008":"5623,379566","2009":"5185,729845","2010":"6346,156204","2011":"7645,214609","2012":"7029,231453","2013":"7007,625783","2014":"7497,762376","2015":"6532,060501","2016":"6788,042745","Country Name":"Botswana","Country Code":"BWA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"74,59594425","1961":"80,52080199","1962":"79,96779577","1963":"81,58791565","1964":"87,8587465","1965":"91,32205402","1966":"93,84482117","1967":"95,32192069","1968":"109,247781","1969":"104,9197037","1970":"103,409867","1971":"108,0397857","1972":"121,1997304","1973":"140,0130735","1974":"142,4427623","1975":"187,699649","1976":"218,7506576","1977":"240,3735877","1978":"282,3812261","1979":"315,8626112","1980":"349,6099162","1981":"296,0645947","1982":"309,3677326","1983":"264,1972436","1984":"248,5851878","1985":"328,3119198","1986":"416,1188419","1987":"435,8930918","1988":"449,7829378","1989":"429,5415541","1990":"490,0745619","1991":"456,8977858","1992":"456,074154","1993":"401,9779716","1994":"260,4835711","1995":"332,6773772","1996":"293,3188854","1997":"266,6076447","1998":"268,9004231","1999":"271,8551165","2000":"243,5429317","2001":"243,1586486","2002":"253,7068343","2003":"286,2508019","2004":"313,210598","2005":"327,1149461","2006":"347,6073678","2007":"397,1480467","2008":"456,8614334","2009":"449,9601839","2010":"446,4434494","2011":"494,3306779","2012":"486,410114","2013":"337,4849614","2014":"377,1320274","2015":"348,381417","2016":"382,2131743","Country Name":"Central African Rep.","Country Code":"CAF","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"2294,568814","1961":"2231,293824","1962":"2255,230044","1963":"2354,839122","1964":"2529,518179","1965":"2739,585849","1966":"3010,705908","1967":"3173,076194","1968":"3411,060154","1969":"3703,990405","1970":"4121,932809","1971":"4586,255848","1972":"5141,616725","1973":"5870,600564","1974":"7043,474351","1975":"7489,940531","1976":"8783,721592","1977":"8892,76168","1978":"9096,058722","1979":"10012,44397","1980":"11135,43799","1981":"12297,78569","1982":"12439,74784","1983":"13377,89565","1984":"13826,64999","1985":"14060,46178","1986":"14403,8287","1987":"16245,45168","1988":"18864,26292","1989":"20638,29005","1990":"21371,2911","1991":"21664,59864","1992":"20771,25035","1993":"20017,42985","1994":"19859,20398","1995":"20577,48939","1996":"21183,22008","1997":"21770,13408","1998":"20887,83947","1999":"22167,22585","2000":"24124,16917","2001":"23691,59472","2002":"24167,80431","2003":"28172,14883","2004":"31979,87195","2005":"36189,58838","2006":"40386,69948","2007":"44544,5268","2008":"46596,33599","2009":"40773,45436","2010":"47447,47602","2011":"52082,21076","2012":"52496,69487","2013":"52413,72116","2014":"50440,43376","2015":"43315,70044","2016":"42157,92799","Country Name":"Canada","Country Code":"CAN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2312,627721","1991":"2199,934611","1992":"2361,907109","1993":"2488,294607","1994":"2824,066268","1995":"3512,905828","1996":"3766,137175","1997":"3735,598222","1998":"4097,242893","1999":"3977,136296","2000":"3943,987822","2001":"4342,857257","2002":"4922,109778","2003":"5941,171573","2004":"7161,448082","2005":"8342,436299","2006":"9461,098659","2007":"11951,68715","2008":"14489,15052","2009":"12197,87382","2010":"12556,93917","2011":"13882,73542","2012":"12996,3408","2013":"13704,56665","2014":"14125,86185","2015":"12411,07162","2016":"12657,3868","Country Name":"Central Europe and the Baltics","Country Code":"CEB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1787,360348","1961":"1971,316323","1962":"2131,391652","1963":"2294,182847","1964":"2501,29319","1965":"2620,475547","1966":"2784,733548","1967":"2960,722586","1968":"3121,889031","1969":"3344,783603","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"18785,03644","1981":"17110,44514","1982":"17434,88509","1983":"17298,56641","1984":"16457,82916","1985":"16613,62848","1986":"23691,97026","1987":"29484,873","1988":"31664,15929","1989":"30325,75893","1990":"38332,15172","1991":"38303,04989","1992":"39435,53813","1993":"38005,32345","1994":"41738,97019","1995":"48540,57749","1996":"46610,05975","1997":"40429,93726","1998":"41487,69019","1999":"40577,33663","2000":"37813,23426","2001":"38538,64447","2002":"41336,72192","2003":"47960,56497","2004":"53255,97631","2005":"54797,54663","2006":"57348,92788","2007":"63223,46778","2008":"72119,56087","2009":"69672,00471","2010":"74276,71842","2011":"87998,44468","2012":"83164,38795","2013":"84658,88768","2014":"85814,58857","2015":"80989,84024","2016":"78812,65069","Country Name":"Switzerland","Country Code":"CHE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"40537,51169","1999":"42405,49714","2000":"43299,40114","2001":"41610,13058","2002":"44159,21077","2003":"48226,39668","2004":"55844,11669","2005":"57210,73229","2006":"62261,82801","2007":"73569,64496","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Channel Islands","Country Code":"CHI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"532,6162668","1961":"584,237786","1962":"671,3997046","1963":"687,2683744","1964":"709,5792644","1965":"699,3779619","1966":"803,1491022","1967":"779,4756862","1968":"779,9788652","1969":"893,2475969","1970":"954,2491173","1971":"1116,870566","1972":"1194,633209","1973":"1667,568269","1974":"1578,875598","1975":"730,4099007","1976":"975,4843641","1977":"1296,892999","1978":"1462,835161","1979":"1964,851432","1980":"2577,323575","1981":"3016,823465","1982":"2180,290184","1983":"1725,441879","1984":"1637,167311","1985":"1453,316206","1986":"1525,426685","1987":"1767,123349","1988":"2032,959557","1989":"2294,345992","1990":"2500,646257","1991":"2811,481588","1992":"3362,169308","1993":"3551,030186","1994":"4045,621429","1995":"5137,375078","1996":"5382,846519","1997":"5781,103423","1998":"5479,498064","1999":"4986,007417","2000":"5101,368479","2001":"4595,666327","2002":"4463,545867","2003":"4787,699532","2004":"6210,828325","2005":"7615,30468","2006":"9484,681227","2007":"10526,87746","2008":"10781,36608","2009":"10243,32824","2010":"12860,17764","2011":"14705,69242","2012":"15431,90293","2013":"15941,39722","2014":"14817,37778","2015":"13653,2264","2016":"13792,92605","Country Name":"Chile","Country Code":"CHL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"89,52054151","1961":"75,80583793","1962":"70,90941167","1963":"74,31364345","1964":"85,49855516","1965":"98,48677775","1966":"104,3245662","1967":"96,58953194","1968":"91,47271831","1969":"100,1299033","1970":"113,1629916","1971":"118,6545778","1972":"131,8835612","1973":"157,0903743","1974":"160,1400937","1975":"178,3418196","1976":"165,4055404","1977":"185,4228329","1978":"156,3962814","1979":"183,9852309","1980":"194,8055257","1981":"197,0701634","1982":"203,3368064","1983":"225,4310265","1984":"250,7138896","1985":"294,4572943","1986":"281,9293584","1987":"251,8120671","1988":"283,5379478","1989":"310,8811572","1990":"317,8851981","1991":"333,1417146","1992":"366,4602759","1993":"377,3895183","1994":"473,4927622","1995":"609,6567653","1996":"709,4134628","1997":"781,743728","1998":"828,5804103","1999":"873,2872953","2000":"959,3721081","2001":"1053,108024","2002":"1148,508057","2003":"1288,642924","2004":"1508,668462","2005":"1753,4178","2006":"2099,229676","2007":"2695,366223","2008":"3471,247547","2009":"3838,434292","2010":"4560,512487","2011":"5633,796106","2012":"6337,882993","2013":"7077,770594","2014":"7683,502038","2015":"8069,211938","2016":"8123,180873","Country Name":"China","Country Code":"CHN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"153,4715941","1961":"167,355531","1962":"167,995943","1963":"190,4073755","1964":"221,5178017","1965":"212,8218038","1966":"228,2274294","1967":"232,5688993","1968":"265,0408149","1969":"270,7573606","1970":"277,6370324","1971":"289,1094256","1972":"322,3479205","1973":"417,1065506","1974":"486,9170747","1975":"589,2070767","1976":"673,4169911","1977":"864,2870072","1978":"1041,473038","1979":"1152,333546","1980":"1226,912731","1981":"973,2840497","1982":"836,6556865","1983":"724,9422695","1984":"696,275231","1985":"682,5737814","1986":"862,3419925","1987":"915,4240175","1988":"897,6660598","1989":"824,1583194","1990":"880,0184701","1991":"825,5407011","1992":"847,2958457","1993":"810,8329724","1994":"590,3001333","1995":"756,5011354","1996":"809,5387372","1997":"758,911908","1998":"793,9810785","1999":"759,2922029","2000":"642,254714","2001":"656,834565","2002":"710,9611683","2003":"865,789649","2004":"919,8068028","2005":"931,754287","2006":"951,9478956","2007":"1065,896375","2008":"1242,431044","2009":"1217,749206","2010":"1219,749096","2011":"1214,703946","2012":"1262,480218","2013":"1423,682282","2014":"1569,928275","2015":"1420,626884","2016":"1526,197175","Country Name":"Cote d'Ivoire","Country Code":"CIV","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"119,5341872","1961":"124,4216918","1962":"129,5155192","1963":"131,0834865","1964":"138,5654873","1965":"140,9074501","1966":"144,2520758","1967":"154,1756272","1968":"169,6245685","1969":"181,0678013","1970":"177,7063609","1971":"184,2397815","1972":"208,1314731","1973":"249,0902541","1974":"310,9114267","1975":"369,1346945","1976":"401,1492919","1977":"426,6103015","1978":"542,9245797","1979":"694,7470764","1980":"782,1396718","1981":"859,6568809","1982":"799,5699949","1983":"781,5619272","1984":"800,8261351","1985":"810,7666623","1986":"1024,387656","1987":"1150,1642","1988":"1132,477702","1989":"979,5901011","1990":"951,8882236","1991":"1030,979969","1992":"918,3958707","1993":"1060,605333","1994":"703,3340997","1995":"648,7805569","1996":"704,6043688","1997":"694,6882727","1998":"663,0359765","1999":"704,1718976","2000":"608,0414399","2001":"614,6729339","2002":"676,3976061","2003":"824,8689393","2004":"930,2011716","2005":"952,1872484","2006":"1002,989164","2007":"1110,701186","2008":"1233,524316","2009":"1203,195308","2010":"1182,869227","2011":"1295,649726","2012":"1255,648189","2013":"1365,34419","2014":"1441,140107","2015":"1244,429421","2016":"1032,648722","Country Name":"Cameroon","Country Code":"CMR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"220,3140631","1961":"197,3909477","1962":"235,6324068","1963":"377,4275418","1964":"170,4660674","1965":"232,811109","1966":"253,761636","1967":"184,1345062","1968":"206,7222842","1969":"258,6186237","1970":"243,7631573","1971":"272,0812665","1972":"292,3140097","1973":"362,8637899","1974":"430,7254315","1975":"447,0002865","1976":"409,5485438","1977":"509,0998792","1978":"616,0216599","1979":"587,1908018","1980":"546,1423977","1981":"463,6859364","1982":"492,5317093","1983":"387,4937757","1984":"269,8259433","1985":"240,7701781","1986":"263,8145604","1987":"242,996146","1988":"273,1246877","1989":"269,5874462","1990":"270,1105809","1991":"253,0421708","1992":"219,7342375","1993":"275,7352838","1994":"144,5206962","1995":"135,6734781","1996":"134,939947","1997":"138,964642","1998":"138,615476","1999":"102,6447985","2000":"405,4696531","2001":"153,6995733","2002":"175,1360715","2003":"173,9163518","2004":"194,1667863","2005":"218,5235092","2006":"252,8430454","2007":"280,1217437","2008":"318,1201341","2009":"292,6284114","2010":"318,0757516","2011":"357,4834938","2012":"398,1406948","2013":"420,87049","2014":"461,5680853","2015":"474,9360481","2016":"444,5053168","Country Name":"Dem. Rep. Congo","Country Code":"COD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"127,0047459","1961":"142,5375164","1962":"152,4512126","1963":"153,541996","1964":"161,1348414","1965":"167,4536727","1966":"181,2183451","1967":"189,6595505","1968":"195,1412317","1969":"200,0080263","1970":"201,4641576","1971":"229,0048145","1972":"283,1190395","1973":"362,2702779","1974":"379,4441108","1975":"482,4426816","1976":"460,6695849","1977":"453,7285154","1978":"506,1760713","1979":"670,7684034","1980":"927,0962559","1981":"1052,165292","1982":"1107,342201","1983":"1043,853685","1984":"1060,658298","1985":"1015,557387","1986":"845,1688012","1987":"1021,611602","1988":"957,2493252","1989":"1006,141041","1990":"1146,812278","1991":"1086,563494","1992":"1138,216092","1993":"724,5478973","1994":"649,9053769","1995":"755,9167951","1996":"882,4250224","1997":"784,0481427","1998":"639,4985852","1999":"750,5265499","2000":"998,1968921","2001":"842,7090677","2002":"886,3616653","2003":"998,1013117","2004":"1289,337837","2005":"1637,064381","2006":"2012,11007","2007":"2111,209489","2008":"2881,594292","2009":"2255,332879","2010":"2737,342365","2011":"3196,647534","2012":"2952,052348","2013":"2964,573152","2014":"2910,520153","2015":"1712,121131","2016":"1528,24483","Country Name":"Congo","Country Code":"COG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"245,1974662","1961":"268,0973707","1962":"283,9174392","1963":"268,3243984","1964":"322,4721694","1965":"302,4540416","1966":"276,4887797","1967":"281,9698887","1968":"283,1111555","1969":"298,0524064","1970":"326,2903","1971":"345,8511327","1972":"374,6244668","1973":"435,732888","1974":"510,9888819","1975":"529,0886694","1976":"605,8191248","1977":"751,6257542","1978":"877,7966283","1979":"1030,497681","1980":"1204,155168","1981":"1282,364618","1982":"1342,468124","1983":"1304,601346","1984":"1260,395794","1985":"1125,201935","1986":"1103,338706","1987":"1125,261149","1988":"1189,140678","1989":"1175,93261","1990":"1175,14927","1991":"1181,081644","1992":"1385,866477","1993":"1541,712369","1994":"2218,78471","1995":"2470,683623","1996":"2553,549692","1997":"2759,952748","1998":"2509,139633","1999":"2164,432929","2000":"2472,197831","2001":"2395,856551","2002":"2355,725857","2003":"2246,257472","2004":"2740,249442","2005":"3386,0256","2006":"3709,078776","2007":"4674,21961","2008":"5433,72045","2009":"5148,422113","2010":"6250,655044","2011":"7227,73968","2012":"7884,984429","2013":"8030,58603","2014":"7913,383432","2015":"6044,525556","2016":"5805,605335","Country Name":"Colombia","Country Code":"COL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"401,2150932","1981":"359,7913681","1982":"327,5450756","1983":"331,8089951","1984":"311,144433","1985":"322,2031412","1986":"444,2469485","1987":"521,5228938","1988":"534,7843862","1989":"497,2904719","1990":"607,4694013","1991":"582,3065192","1992":"609,9032196","1993":"586,6533885","1994":"401,8409364","1995":"487,797973","1996":"471,721275","1997":"422,5487938","1998":"417,928473","1999":"420,8779342","2000":"375,8528566","2001":"395,9319363","2002":"433,2691451","2003":"544,5066526","2004":"616,4197236","2005":"621,9033702","2006":"648,3008717","2007":"720,7593013","2008":"795,9705019","2009":"778,5454199","2010":"769,1742883","2011":"829,7586885","2012":"788,632653","2013":"834,3410949","2014":"852,9543079","2015":"727,6463868","2016":"775,0800847","Country Name":"Comoros","Country Code":"COM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"496,2267642","1981":"478,282435","1982":"473,0503005","1983":"456,4629076","1984":"426,6979481","1985":"437,1364851","1986":"595,4445052","1987":"724,0943075","1988":"801,733062","1989":"797,9155124","1990":"897,6495095","1991":"913,9639435","1992":"994,6280468","1993":"1328,993994","1994":"1072,330788","1995":"1251,902319","1996":"1258,80907","1997":"1201,956656","1998":"1250,615376","1999":"1389,719796","2000":"1239,377855","2001":"1268,884564","2002":"1373,515636","2003":"1768,921302","2004":"1976,458506","2005":"2048,13459","2006":"2304,289902","2007":"3112,285712","2008":"3638,905946","2009":"3444,5566","2010":"3312,825985","2011":"3670,429453","2012":"3408,482762","2013":"3558,796314","2014":"3529,618403","2015":"2954,119467","2016":"2997,75268","Country Name":"Cabo Verde","Country Code":"CPV","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"380,7191307","1961":"354,815218","1962":"334,4868363","1963":"344,8290256","1964":"353,001883","1965":"373,0330451","1966":"394,173151","1967":"412,7293867","1968":"442,9877079","1969":"474,6844143","1970":"532,6671368","1971":"567,4123466","1972":"635,9636206","1973":"766,0887124","1974":"814,7052445","1975":"934,8988849","1976":"1121,338039","1977":"1391,67107","1978":"1554,708466","1979":"1734,436062","1980":"2022,109731","1981":"1069,139835","1982":"1033,894312","1983":"1535,351908","1984":"1727,175553","1985":"1756,856818","1986":"1955,702554","1987":"2033,671259","1988":"2059,311255","1989":"2274,430069","1990":"2391,301446","1991":"2257,491123","1992":"2618,167952","1993":"2854,6202","1994":"3045,406733","1995":"3279,326506","1996":"3230,234155","1997":"3408,365101","1998":"3614,562567","1999":"3688,398314","2000":"3808,363689","2001":"3981,528047","2002":"4062,014965","2003":"4167,714107","2004":"4425,507467","2005":"4697,011135","2006":"5245,187372","2007":"6120,623418","2008":"6911,136136","2009":"6809,396224","2010":"8199,414621","2011":"9186,59639","2012":"9985,36959","2013":"10569,66631","2014":"10647,44179","2015":"11406,36273","2016":"11824,6381","Country Name":"Costa Rica","Country Code":"CRI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"457,9562132","1961":"486,4250713","1962":"503,8578616","1963":"525,594423","1964":"558,1927404","1965":"591,5497882","1966":"632,1857863","1967":"669,3725073","1968":"657,053757","1969":"706,1472494","1970":"767,3784456","1971":"824,0888575","1972":"942,4825625","1973":"1017,292848","1974":"1306,970536","1975":"1511,81456","1976":"1534,205841","1977":"1764,462365","1978":"1780,643297","1979":"2017,71787","1980":"2447,086678","1981":"2667,562521","1982":"2928,018046","1983":"2930,515826","1984":"2761,214671","1985":"2703,421871","1986":"2446,108671","1987":"2611,154757","1988":"2752,063021","1989":"2802,171862","1990":"2968,21036","1991":"2912,937453","1992":"2841,682838","1993":"2955,851147","1994":"3091,98693","1995":"3358,56716","1996":"3632,237942","1997":"4025,64158","1998":"4387,579141","1999":"4629,842599","2000":"4938,532599","2001":"5043,494048","2002":"5275,617967","2003":"5621,26785","2004":"6130,263788","2005":"6898,778285","2006":"7697,176479","2007":"8503,255402","2008":"9641,410665","2009":"8059,695503","2010":"8701,583469","2011":"9352,573111","2012":"9592,779948","2013":"9654,56647","2014":"9597,558084","2015":"9271,364771","2016":"8769,641649","Country Name":"Caribbean small states","Country Code":"CSS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"653,2329148","1971":"779,5590533","1972":"901,3717984","1973":"1088,453907","1974":"1224,423039","1975":"1380,250601","1976":"1444,801798","1977":"1474,48163","1978":"1837,502319","1979":"2003,054352","1980":"2024,66004","1981":"2038,630096","1982":"2111,052398","1983":"2227,905625","1984":"2399,844466","1985":"2273,184149","1986":"2382,608905","1987":"2455,209164","1988":"2645,49087","1989":"2576,974727","1990":"2706,975742","1991":"2280,335931","1992":"2057,682969","1993":"2072,167419","1994":"2621,824239","1995":"2790,178221","1996":"2282,389619","1997":"2303,090535","1998":"2326,112221","1999":"2553,06976","2000":"2741,110542","2001":"2832,188893","2002":"2994,339988","2003":"3192,669378","2004":"3390,716256","2005":"3779,05707","2006":"4669,060916","2007":"5184,494227","2008":"5376,447622","2009":"5484,7763","2010":"5676,141403","2011":"6075,924306","2012":"6425,941119","2013":"6760,15344","2014":"7050,50199","2015":"7602,261218","2016":"","Country Name":"Cuba","Country Code":"CUB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Curacao","Country Code":"CUW","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"30189,76843","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"64100,9077","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Cayman Islands","Country Code":"CYM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"976,3342448","1976":"1157,411648","1977":"1476,271543","1978":"1929,403607","1979":"2559,259675","1980":"4232,022939","1981":"4033,240478","1982":"4122,784499","1983":"4091,048498","1984":"4258,743589","1985":"4488,287003","1986":"5642,631476","1987":"6690,577975","1988":"7645,629767","1989":"8038,914242","1990":"9641,575273","1991":"9696,099593","1992":"11310,07192","1993":"10526,14177","1994":"11617,69278","1995":"15098,00602","1996":"14969,42279","1997":"14303,53857","1998":"15247,29329","1999":"15457,64436","2000":"14672,88206","2001":"15062,92433","2002":"16372,29152","2003":"20293,40789","2004":"23932,49128","2005":"25324,48666","2006":"27169,99256","2007":"31386,63265","2008":"35390,70488","2009":"32105,8159","2010":"30818,46396","2011":"32233,83942","2012":"28951,15556","2013":"27907,96736","2014":"27340,88382","2015":"23075,1127","2016":"23324,20174","Country Name":"Cyprus","Country Code":"CYP","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"3901,525437","1991":"2867,229425","1992":"3338,655158","1993":"3916,051656","1994":"4583,584499","1995":"5765,048439","1996":"6473,435452","1997":"5980,258304","1998":"6447,463539","1999":"6293,304387","2000":"5994,528277","2001":"6594,717465","2002":"8011,898074","2003":"9741,058384","2004":"11667,63212","2005":"13317,72983","2006":"15159,14115","2007":"18333,9459","2008":"22649,37934","2009":"19698,49209","2010":"19764,01554","2011":"21717,45794","2012":"19729,87051","2013":"19916,01939","2014":"19744,55861","2015":"17556,9243","2016":"18266,54969","Country Name":"Czechia","Country Code":"CZE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"2750,719742","1971":"3180,055927","1972":"3795,566081","1973":"5027,660309","1974":"5617,741721","1975":"6212,763127","1976":"6609,753392","1977":"7653,884711","1978":"9446,166785","1979":"11238,34067","1980":"12092,38185","1981":"10170,44628","1982":"9876,228232","1983":"9827,022409","1984":"9277,932299","1985":"9393,891691","1986":"13410,8971","1987":"16614,4101","1988":"17863,4379","1989":"17697,16351","1990":"22219,57253","1991":"23269,3818","1992":"26333,53744","1993":"25488,51952","1994":"27087,55845","1995":"31729,69976","1996":"30564,24781","1997":"27045,71913","1998":"27340,67288","1999":"26795,99113","2000":"23718,7467","2001":"23687,31689","2002":"25205,16445","2003":"30359,95215","2004":"34165,93403","2005":"34696,62092","2006":"36447,87232","2007":"41814,8191","2008":"45699,19832","2009":"41732,70725","2010":"41785,55691","2011":"46810,32796","2012":"44065,24891","2013":"46530,91143","2014":"47902,65288","2015":"41176,88158","2016":"41936,05858","Country Name":"Germany","Country Code":"DEU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"801,1727273","1986":"","1987":"761,4703124","1988":"748,1952492","1989":"725,7425321","1990":"766,1409545","1991":"762,0113217","1992":"777,2623296","1993":"753,5201889","1994":"790,0322652","1995":"789,5517691","1996":"767,4669289","1997":"760,5314478","1998":"755,5962418","1999":"765,7204882","2000":"768,1760767","2001":"781,2322196","2002":"792,15412","2003":"819,974118","2004":"864,1847206","2005":"904,7297489","2006":"965,6693779","2007":"1047,586896","2008":"1214,077118","2009":"1253,657431","2010":"1325,990724","2011":"1430,986898","2012":"1536,150685","2013":"1622,637974","2014":"1740,915011","2015":"1862,167274","2016":"","Country Name":"Djibouti","Country Code":"DJI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"495,4348854","1978":"608,4207102","1979":"591,2084924","1980":"784,7146613","1981":"878,5209754","1982":"958,5187156","1983":"1069,286071","1984":"1210,679371","1985":"1338,690509","1986":"1534,735694","1987":"1745,863592","1988":"2003,940044","1989":"2152,860308","1990":"2345,010606","1991":"2547,034768","1992":"2701,976318","1993":"2814,471542","1994":"3018,778239","1995":"3139,180544","1996":"3323,416184","1997":"3473,795902","1998":"3676,778215","1999":"3830,175253","2000":"4820,107567","2001":"4924,922784","2002":"4836,384921","2003":"4994,667402","2004":"5325,046981","2005":"5244,033732","2006":"5513,16071","2007":"5939,053585","2008":"6446,663832","2009":"6866,224899","2010":"6912,435714","2011":"6985,532327","2012":"6744,567106","2013":"7022,750665","2014":"7257,395143","2015":"7069,502788","2016":"7144,454673","Country Name":"Dominica","Country Code":"DMA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1364,51716","1961":"1503,537013","1962":"1681,029913","1963":"1775,370385","1964":"2013,243077","1965":"2243,931595","1966":"2443,259791","1967":"2644,786647","1968":"2712,6124","1969":"3068,236741","1970":"3464,456995","1971":"3845,496159","1972":"4654,305336","1973":"6119,372658","1974":"6770,73393","1975":"7999,111532","1976":"8787,580917","1977":"9783,840858","1978":"11826,00355","1979":"13752,00641","1980":"13883,89965","1981":"12081,78954","1982":"11804,43319","1983":"11857,90212","1984":"11562,91349","1985":"12253,09555","1986":"17201,08283","1987":"21340,71406","1988":"22527,0471","1989":"21901,05752","1990":"26891,44164","1991":"27011,38589","1992":"29569,65453","1993":"27597,97148","1994":"29995,56522","1995":"35351,38071","1996":"35650,72434","1997":"32835,92877","1998":"33368,15485","1999":"33440,80162","2000":"30743,55917","2001":"30751,64946","2002":"33228,69291","2003":"40458,77064","2004":"46511,60457","2005":"48799,82037","2006":"52026,99311","2007":"58487,04501","2008":"64322,06664","2009":"58163,29359","2010":"58041,41122","2011":"61753,66007","2012":"58507,50021","2013":"61191,19263","2014":"62425,5392","2015":"53014,64416","2016":"53417,66428","Country Name":"Denmark","Country Code":"DNK","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"204,1260251","1961":"192,0266541","1962":"234,0343478","1963":"258,5589678","1964":"272,9142917","1965":"228,9538297","1966":"245,8904751","1967":"250,8539774","1968":"253,9043888","1969":"281,1894003","1970":"329,8606475","1971":"359,8270308","1972":"417,5057889","1973":"479,5440415","1974":"582,8500323","1975":"698,9020444","1976":"748,2687314","1977":"847,6006331","1978":"861,258295","1979":"968,7926263","1980":"1141,451721","1981":"1222,661485","1982":"1310,122738","1983":"1387,320754","1984":"1626,43196","1985":"777,424081","1986":"923,89029","1987":"861,3911436","1988":"778,5121223","1989":"949,404024","1990":"984,6913025","1991":"1327,450694","1992":"1510,022075","1993":"1704,850249","1994":"1871,667431","1995":"2072,683652","1996":"2258,25854","1997":"2400,188253","1998":"2551,900557","1999":"2575,565104","2000":"2802,420042","2001":"2862,154836","2002":"3008,465078","2003":"2372,628827","2004":"2421,096062","2005":"3681,059903","2006":"3836,468771","2007":"4647,310359","2008":"5011,037937","2009":"4952,677503","2010":"5451,06696","2011":"5759,0643","2012":"5968,876767","2013":"6027,055544","2014":"6268,692122","2015":"6468,471648","2016":"6722,223536","Country Name":"Dominican Rep.","Country Code":"DOM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"244,8248065","1961":"213,4859051","1962":"171,2098095","1963":"225,5305962","1964":"236,6101896","1965":"248,3781436","1966":"234,1889083","1967":"252,4182522","1968":"280,2682882","1969":"300,9818257","1970":"334,2595277","1971":"339,3840491","1972":"439,7311239","1973":"551,4344417","1974":"813,0499027","1975":"931,1055173","1976":"1031,303135","1977":"1185,510635","1978":"1447,618021","1979":"1771,965549","1980":"2189,77668","1981":"2223,697344","1982":"2197,1105","1983":"2298,883805","1984":"2452,664632","1985":"2567,495905","1986":"2740,654724","1987":"2790,473919","1988":"2402,825627","1989":"2202,55809","1990":"2394,42038","1991":"1721,578696","1992":"1766,054678","1993":"1797,523561","1994":"1499,971505","1995":"1444,908036","1996":"1596,029867","1997":"1612,009303","1998":"1588,481449","1999":"1581,004564","2000":"1757,017797","2001":"1732,857979","2002":"1774,033673","2003":"2094,335506","2004":"2598,908023","2005":"3100,122378","2006":"3464,610079","2007":"3935,183343","2008":"4905,254866","2009":"3868,83123","2010":"4463,394675","2011":"5432,250203","2012":"5564,82566","2013":"5471,866766","2014":"5470,851007","2015":"4132,760292","2016":"3843,752322","Country Name":"Algeria","Country Code":"DZA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"89,562542","1961":"78,68452694","1962":"71,18198478","1963":"75,18417751","1964":"85,10737615","1965":"96,92635807","1966":"103,2376425","1967":"97,48192206","1968":"95,85259837","1969":"104,7559443","1970":"113,6379926","1971":"118,9372118","1972":"131,6023678","1973":"161,829373","1974":"178,6294931","1975":"196,9512684","1976":"196,4166348","1977":"223,3557655","1978":"212,8467449","1979":"242,6967058","1980":"275,8069858","1981":"289,8144458","1982":"299,1009668","1983":"308,6947983","1984":"329,9239394","1985":"355,8548113","1986":"348,9331458","1987":"338,6196304","1988":"369,0637138","1989":"392,2467526","1990":"413,7518804","1991":"442,3411731","1992":"488,8730549","1993":"529,6868784","1994":"628,9967686","1995":"766,6718988","1996":"869,932056","1997":"890,3753013","1998":"806,793345","1999":"878,0550585","2000":"958,2275205","2001":"1009,927342","2002":"1107,819717","2003":"1243,193206","2004":"1429,786281","2005":"1640,151665","2006":"1958,345175","2007":"2458,680923","2008":"3089,768511","2009":"3328,470927","2010":"4008,175818","2011":"4864,576139","2012":"5387,908975","2013":"5905,389866","2014":"6304,610974","2015":"6514,616205","2016":"6586,077744","Country Name":"East Asia & Pacific (excluding high income)","Country Code":"EAP","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"155,4512223","1961":"152,7993649","1962":"154,6948052","1963":"159,7753274","1964":"178,6798679","1965":"190,3317943","1966":"183,3969313","1967":"187,8391467","1968":"198,5682701","1969":"216,5418632","1970":"223,3182694","1971":"235,3730651","1972":"252,1866876","1973":"314,7952505","1974":"430,7260009","1975":"451,4059766","1976":"480,8313792","1977":"525,2521498","1978":"567,617135","1979":"673,004741","1980":"810,1539094","1981":"882,7971162","1982":"819,3628873","1983":"806,6415545","1984":"775,5512911","1985":"774,3300678","1986":"766,712776","1987":"754,4466061","1988":"791,9127257","1989":"790,4833406","1990":"889,4414149","1991":"921,6014199","1992":"989,7628203","1993":"1064,065286","1994":"1091,101554","1995":"1096,381674","1996":"1173,373951","1997":"1229,828559","1998":"1190,519941","1999":"1239,139573","2000":"1319,889063","2001":"1280,919911","2002":"1222,804198","2003":"1344,428834","2004":"1536,269143","2005":"1762,84505","2006":"1985,615393","2007":"2320,982644","2008":"2577,850413","2009":"2440,345378","2010":"2918,784661","2011":"3240,127598","2012":"3322,534107","2013":"3354,888268","2014":"3375,658748","2015":"3237,128484","2016":"3240,724515","Country Name":"Early-demographic dividend","Country Code":"EAR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"147,2203122","1961":"147,1833281","1962":"148,5868423","1963":"161,9172542","1964":"181,8281691","1965":"197,8602212","1966":"215,593012","1967":"228,0039621","1968":"245,2526482","1969":"275,1833868","1970":"315,7677883","1971":"341,5228457","1972":"413,8976058","1973":"533,5869357","1974":"601,3117204","1975":"645,96331","1976":"698,3313304","1977":"819,5422675","1978":"1018,413141","1979":"1089,268081","1980":"1160,136698","1981":"1261,797313","1982":"1215,991135","1983":"1270,256748","1984":"1342,753591","1985":"1402,61569","1986":"1801,042387","1987":"2072,61835","1988":"2454,287159","1989":"2526,884351","1990":"2605,483418","1991":"2892,791724","1992":"3117,596334","1993":"3457,039278","1994":"3811,80645","1995":"4279,750366","1996":"4075,546585","1997":"3856,020555","1998":"3420,095703","1999":"3780,306121","2000":"4051,694011","2001":"3734,924892","2002":"3762,157335","2003":"4103,130421","2004":"4566,472945","2005":"4833,571691","2006":"5087,217636","2007":"5649,697592","2008":"6479,052497","2009":"6630,443905","2010":"7677,795457","2011":"8842,558955","2012":"9400,029868","2013":"9445,001895","2014":"9662,432037","2015":"9541,144659","2016":"9786,468143","Country Name":"East Asia & Pacific","Country Code":"EAS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"2331,369195","1990":"2461,354038","1991":"2364,757101","1992":"2168,537779","1993":"2122,686233","1994":"1839,597958","1995":"1961,682479","1996":"1988,092791","1997":"2067,005379","1998":"1944,266216","1999":"1638,116465","2000":"1813,342178","2001":"1806,728721","2002":"2068,785101","2003":"2615,230472","2004":"3444,238761","2005":"4343,651604","2006":"5312,265531","2007":"6841,426722","2008":"8436,825523","2009":"6613,476812","2010":"7822,755234","2011":"9548,097617","2012":"9984,825787","2013":"10491,19978","2014":"9887,735413","2015":"7518,759638","2016":"7136,901298","Country Name":"Europe & Central Asia (excluding high income)","Country Code":"ECA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"648,581537","1961":"682,4997381","1962":"737,4582206","1963":"803,7611917","1964":"879,9878452","1965":"947,139553","1966":"1019,260903","1967":"1086,672451","1968":"1123,535323","1969":"1223,158858","1970":"1365,420926","1971":"1528,197636","1972":"1816,08665","1973":"2288,100685","1974":"2565,413983","1975":"2975,084819","1976":"3070,236337","1977":"3455,920746","1978":"4190,127865","1979":"5092,246527","1980":"5728,8458","1981":"5065,308134","1982":"4852,1083","1983":"4680,500836","1984":"4472,309812","1985":"4600,970229","1986":"6241,440411","1987":"7665,72538","1988":"8481,18164","1989":"8616,30562","1990":"10485,63204","1991":"10775,80781","1992":"11510,61173","1993":"10539,76472","1994":"10998,20329","1995":"12644,20823","1996":"12889,92216","1997":"12210,00404","1998":"12496,18171","1999":"12339,00501","2000":"11609,94629","2001":"11709,96011","2002":"12785,0111","2003":"15534,97875","2004":"18056,92455","2005":"19172,63322","2006":"20687,72896","2007":"24088,04199","2008":"26325,92753","2009":"23056,929","2010":"23515,28637","2011":"25975,01712","2012":"24901,23891","2013":"25870,41354","2014":"26135,2771","2015":"22347,20402","2016":"22108,51128","Country Name":"Europe & Central Asia","Country Code":"ECS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"222,2668628","1961":"209,3517908","1962":"199,1730946","1963":"209,617604","1964":"226,719903","1965":"454,6655524","1966":"449,3990149","1967":"458,7800829","1968":"450,5711303","1969":"527,4997645","1970":"471,385993","1971":"440,7573993","1972":"495,5872546","1973":"588,5972465","1974":"970,7354295","1975":"1106,518478","1976":"1266,390725","1977":"1495,253146","1978":"1574,55979","1979":"1823,722995","1980":"2241,790006","1981":"2665,31225","1982":"2374,597409","1983":"1993,03494","1984":"1916,703586","1985":"1895,769887","1986":"1651,4935","1987":"1467,302462","1988":"1340,142796","1989":"1392,232518","1990":"1491,401682","1991":"1623,989246","1992":"1690,155141","1993":"1729,373393","1994":"2028,197734","1995":"2135,632812","1996":"2159,150814","1997":"2361,599124","1998":"2300,407884","1999":"1584,463443","2000":"1451,290776","2001":"1903,741571","2002":"2183,966796","2003":"2440,46898","2004":"2708,557892","2005":"3021,942547","2006":"3350,786541","2007":"3590,718086","2008":"4274,952065","2009":"4255,565701","2010":"4657,302361","2011":"5223,351763","2012":"5702,104313","2013":"6074,090829","2014":"6432,216537","2015":"6205,062224","2016":"5968,984138","Country Name":"Ecuador","Country Code":"ECU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"165,5534063","1966":"168,4518045","1967":"171,4872106","1968":"183,0321702","1969":"200,5371083","1970":"219,2099524","1971":"230,4858914","1972":"238,971649","1973":"256,5276403","1974":"235,2476819","1975":"291,8764051","1976":"333,2701289","1977":"356,7459318","1978":"353,5300907","1979":"421,8201679","1980":"519,5679443","1981":"517,6296623","1982":"551,8019638","1983":"591,1888221","1984":"627,0417599","1985":"690,9584868","1986":"695,2501388","1987":"763,3467637","1988":"642,4632674","1989":"707,9248097","1990":"751,2411237","1991":"629,260459","1992":"697,1868548","1993":"760,1497283","1994":"830,4242696","1995":"944,2019116","1996":"1041,523448","1997":"1185,718121","1998":"1258,997552","1999":"1321,799713","2000":"1428,183004","2001":"1370,717438","2002":"1210,229249","2003":"1120,874928","2004":"1045,943208","2005":"1168,115231","2006":"1375,196316","2007":"1640,476068","2008":"2011,246154","2009":"2291,667062","2010":"2602,479549","2011":"2747,480327","2012":"3181,441708","2013":"3213,389158","2014":"3327,754247","2015":"3547,713012","2016":"3514,490097","Country Name":"Egypt","Country Code":"EGY","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"924,614762","1961":"1008,52581","1962":"1108,84942","1963":"1232,322444","1964":"1358,149496","1965":"1468,811167","1966":"1588,592599","1967":"1713,634954","1968":"1825,08387","1969":"2002,876116","1970":"2231,817922","1971":"2515,444616","1972":"3018,038368","1973":"3892,027751","1974":"4387,375739","1975":"5060,993855","1976":"5257,594334","1977":"5956,581615","1978":"7265,687133","1979":"8767,071814","1980":"9778,745962","1981":"8467,315951","1982":"8175,667964","1983":"7960,085455","1984":"7622,835536","1985":"7816,69186","1986":"10942,8598","1987":"13497,46767","1988":"14794,09214","1989":"15046,46129","1990":"18847,338","1991":"19521,49396","1992":"21437,66812","1993":"19555,17707","1994":"20594,78792","1995":"23709,16352","1996":"23936,01991","1997":"21832,87204","1998":"22386,55988","1999":"22229,58688","2000":"20189,0172","2001":"20441,10134","2002":"22132,18892","2003":"27158,57724","2004":"30980,64058","2005":"31985,29093","2006":"33797,63094","2007":"38712,1148","2008":"42226,84293","2009":"38482,28388","2010":"37610,82843","2011":"40613,22038","2012":"37593,15416","2013":"39097,59064","2014":"39765,19375","2015":"34213,51214","2016":"34866,09607","Country Name":"Euro area","Country Code":"EMU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"152,9867265","1993":"150,9730942","1994":"172,3215472","1995":"187,0504479","1996":"222,5454459","1997":"217,1509292","1998":"231,2266102","1999":"208,6209747","2000":"208,1969487","2001":"215,1392103","2002":"201,7687981","2003":"232,7945459","2004":"287,4222243","2005":"276,7508096","2006":"297,8280588","2007":"317,3294336","2008":"326,0825642","2009":"430,7544499","2010":"482,1490904","2011":"582,7755302","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Eritrea","Country Code":"ERI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"396,3922533","1961":"450,0532892","1962":"520,2061314","1963":"609,4873841","1964":"675,2416391","1965":"774,7616093","1966":"889,659872","1967":"968,3067818","1968":"950,5457406","1969":"1077,6787","1970":"1208,996662","1971":"1358,465747","1972":"1704,167361","1973":"2241,448847","1974":"2742,455585","1975":"3201,119201","1976":"3270,405729","1977":"3617,737759","1978":"4344,606706","1979":"5754,542183","1980":"6191,714945","1981":"5356,577832","1982":"5145,694384","1983":"4466,336264","1984":"4477,793724","1985":"4686,891069","1986":"6495,811997","1987":"8217,234257","1988":"9676,769252","1989":"10652,95797","1990":"13767,38147","1991":"14771,6723","1992":"16068,42672","1993":"13303,67613","1994":"13378,84984","1995":"15429,93942","1996":"16069,20709","1997":"14696,21611","1998":"15340,33211","1999":"15678,21523","2000":"14676,70609","2001":"15323,6114","2002":"17019,53541","2003":"21495,70741","2004":"24918,64584","2005":"26510,71745","2006":"28482,60948","2007":"32709,40104","2008":"35578,73619","2009":"32333,4661","2010":"30736,00228","2011":"31834,21816","2012":"28562,29324","2013":"29210,09342","2014":"29600,47225","2015":"25683,84565","2016":"26528,49179","Country Name":"Spain","Country Code":"ESP","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"3044,383709","1996":"3352,733741","1997":"3619,945496","1998":"4052,292271","1999":"4119,347394","2000":"4070,032827","2001":"4498,957027","2002":"5308,347781","2003":"7174,237415","2004":"8850,465115","2005":"10338,31322","2006":"12595,41065","2007":"16586,4052","2008":"18094,54805","2009":"14726,31828","2010":"14638,60482","2011":"17454,84342","2012":"17421,89022","2013":"19029,7746","2014":"19941,45532","2015":"17074,92091","2016":"17574,68736","Country Name":"Estonia","Country Code":"EST","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"202,7919376","1982":"207,5479863","1983":"223,7872069","1984":"204,8721662","1985":"232,3715877","1986":"233,8183804","1987":"242,0451601","1988":"242,7873277","1989":"247,0265475","1990":"253,1929484","1991":"270,2443935","1992":"203,1645022","1993":"164,9584363","1994":"124,9830454","1995":"133,7288539","1996":"144,5003524","1997":"140,8611257","1998":"124,5056232","1999":"119,1340818","2000":"123,8762057","2001":"120,1789279","2002":"111,3634356","2003":"118,8734466","2004":"135,7623858","2005":"161,6266248","2006":"193,7949056","2007":"243,3026822","2008":"325,3825543","2009":"379,7566385","2010":"341,3099092","2011":"354,8463544","2012":"468,5067249","2013":"502,1535887","2014":"571,1622759","2015":"645,4637627","2016":"706,7577541","Country Name":"Ethiopia","Country Code":"ETH","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"876,5348324","1961":"946,2056056","1962":"1024,569903","1963":"1118,707418","1964":"1229,019939","1965":"1327,409576","1966":"1428,008992","1967":"1523,420758","1968":"1572,873613","1969":"1716,497189","1970":"1934,646808","1971":"2176,907042","1972":"2589,850947","1973":"3268,565406","1974":"3653,018414","1975":"4236,358625","1976":"4367,016512","1977":"4925,038353","1978":"6011,919448","1979":"7313,888477","1980":"8313,964738","1981":"7329,499352","1982":"7034,62776","1983":"6802,943344","1984":"6517,506204","1985":"6719,650513","1986":"9189,076823","1987":"11337,61956","1988":"12606,45173","1989":"12828,73905","1990":"15854,49684","1991":"16420,74197","1992":"17838,87528","1993":"16209,97847","1994":"17171,67728","1995":"19845,27354","1996":"20257,01958","1997":"19085,23442","1998":"19709,24551","1999":"19643,09289","2000":"18229,55141","2001":"18400,50767","2002":"20006,69568","2003":"24270,13266","2004":"27917,03876","2005":"29079,12604","2006":"30902,70134","2007":"35568,53816","2008":"38097,79753","2009":"33936,55819","2010":"33658,09787","2011":"36389,08523","2012":"34194,35316","2013":"35536,86208","2014":"36579,69918","2015":"32047,74924","2016":"32058,77358","Country Name":"European Union","Country Code":"EUU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"635,2207441","2001":"569,6207037","2002":"540,7768568","2003":"598,7971676","2004":"673,3290252","2005":"796,8977803","2006":"911,078808","2007":"1093,30624","2008":"1377,520141","2009":"1251,8725","2010":"1453,7164","2011":"1546,095017","2012":"1627,913888","2013":"1699,637379","2014":"1746,52115","2015":"1546,674042","2016":"1471,014651","Country Name":"Fragile and conflict affected situations","Country Code":"FCS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1179,353011","1961":"1327,427224","1962":"1411,702398","1963":"1522,319242","1964":"1707,503938","1965":"1882,086858","1966":"2010,213456","1967":"2034,18905","1968":"1907,077272","1969":"2178,03525","1970":"2467,476347","1971":"2718,207552","1972":"3180,005873","1973":"4176,272761","1974":"5301,542778","1975":"6260,191279","1976":"6744,696982","1977":"7074,35653","1978":"7634,482408","1979":"9339,177076","1980":"11232,27456","1981":"10934,56809","1982":"10945,27734","1983":"10505,83366","1984":"10841,56713","1985":"11405,93365","1986":"14962,25536","1987":"18580,65865","1988":"22056,70175","1989":"23983,84575","1990":"28380,54891","1991":"25503,21521","1992":"22337,48712","1993":"17617,03044","1994":"20305,58355","1995":"26273,4659","1996":"25777,6413","1997":"24676,49708","1998":"25989,4075","1999":"26178,79178","2000":"24253,25042","2001":"24913,24452","2002":"26834,02625","2003":"32816,16088","2004":"37636,11173","2005":"38969,17163","2006":"41120,67651","2007":"48288,5491","2008":"53401,31487","2009":"47107,15571","2010":"46202,41516","2011":"50790,72415","2012":"47415,55987","2013":"49638,07713","2014":"49914,61864","2015":"42405,39744","2016":"43090,24751","Country Name":"Finland","Country Code":"FIN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"285,5425005","1961":"287,3291439","1962":"291,5397068","1963":"296,7729354","1964":"310,8729969","1965":"317,0729473","1966":"316,1795868","1967":"333,309188","1968":"334,647453","1969":"357,4594487","1970":"422,4135104","1971":"466,0437579","1972":"583,3499301","1973":"768,7384555","1974":"987,9761702","1975":"1186,739879","1976":"1182,176627","1977":"1202,711764","1978":"1360,870262","1979":"1640,678329","1980":"1893,046665","1981":"1898,594889","1982":"1786,918614","1983":"1638,637327","1984":"1681,974016","1985":"1603,586714","1986":"1795,605327","1987":"1632,073424","1988":"1535,414063","1989":"1632,138291","1990":"1834,989572","1991":"1881,569901","1992":"2057,40669","1993":"2166,052726","1994":"2383,915146","1995":"2540,751518","1996":"2714,2535","1997":"2641,064749","1998":"2070,165847","1999":"2408,165466","2000":"2076,013308","2001":"2038,891729","2002":"2259,055796","2003":"2835,973972","2004":"3332,918533","2005":"3658,630832","2006":"3749,939813","2007":"4078,82327","2008":"4177,657789","2009":"3369,408247","2010":"3651,966784","2011":"4353,121392","2012":"4546,738504","2013":"4763,068956","2014":"5046,03728","2015":"4921,896209","2016":"5153,351544","Country Name":"Fiji","Country Code":"FJI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1338,299606","1961":"1440,55433","1962":"1585,917267","1963":"1752,964403","1964":"1919,266718","1965":"2042,240384","1966":"2189,670888","1967":"2346,362952","1968":"2532,314748","1969":"2725,217643","1970":"2862,469268","1971":"3173,840026","1972":"3857,37279","1973":"4965,854769","1974":"5317,61951","1975":"6672,511388","1976":"6846,352197","1977":"7513,344973","1978":"9248,441631","1979":"11170,46017","1980":"12712,6014","1981":"11110,55977","1982":"10505,73547","1983":"10005,15167","1984":"9432,292357","1985":"9775,339435","1986":"13557,14722","1987":"16324,39356","1988":"17696,51115","1989":"17704,95898","1990":"21795,23783","1991":"21782,4162","1992":"23937,05692","1993":"22503,26085","1994":"23625,529","1995":"27037,97213","1996":"27015,25896","1997":"24359,42506","1998":"25101,36874","1999":"24799,29601","2000":"22465,64184","2001":"22527,31775","2002":"24275,2426","2003":"29691,18158","2004":"33874,74255","2005":"34879,72633","2006":"36544,50853","2007":"41600,58397","2008":"45413,06571","2009":"41631,13141","2010":"40703,34279","2011":"43810,20088","2012":"40838,02444","2013":"42554,12205","2014":"42955,24287","2015":"36526,77011","2016":"36854,96828","Country Name":"France","Country Code":"FRA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"23737,41677","1999":"23982,88067","2000":"22479,57899","2001":"24300,3786","2002":"26553,74656","2003":"30993,07706","2004":"34979,0817","2005":"35847,39379","2006":"40719,72341","2007":"47024,22253","2008":"49772,86588","2009":"46521,79095","2010":"47398,11361","2011":"50788,93943","2012":"48422,00754","2013":"53612,71345","2014":"","2015":"","2016":"","Country Name":"Faroe Islands","Country Code":"FRO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"1320,062471","1984":"","1985":"","1986":"1275,867558","1987":"1296,378583","1988":"1355,12546","1989":"1436,906824","1990":"1528,064694","1991":"1682,203261","1992":"1756,185104","1993":"1908,903727","1994":"1909,350632","1995":"2065,004277","1996":"2019,91527","1997":"1906,880058","1998":"2029,289159","1999":"2046,639645","2000":"2170,92021","2001":"2240,021462","2002":"2257,773665","2003":"2293,579614","2004":"2247,795491","2005":"2352,683717","2006":"2393,845804","2007":"2435,246198","2008":"2501,384023","2009":"2669,400731","2010":"2838,530729","2011":"2998,874048","2012":"3148,074935","2013":"3044,546875","2014":"3057,943566","2015":"3016,011223","2016":"3068,507771","Country Name":"Micronesia, Fed. Sts.","Country Code":"FSM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"283,4004647","1961":"332,5047204","1962":"358,5609752","1963":"299,2266457","1964":"411,7685848","1965":"425,2950373","1966":"453,131711","1967":"490,3076981","1968":"520,3792451","1969":"550,2859345","1970":"548,7080134","1971":"634,3151226","1972":"702,1565946","1973":"1157,150818","1974":"2425,358419","1975":"3320,824694","1976":"4533,81438","1977":"4138,857814","1978":"3439,42595","1979":"4258,763988","1980":"5869,279449","1981":"5166,313923","1982":"4717,981684","1983":"4309,04665","1984":"4407,284354","1985":"4023,581632","1986":"3990,070881","1987":"3742,656537","1988":"4253,668367","1989":"4517,927977","1990":"6251,017385","1991":"5523,198654","1992":"5566,362537","1993":"4244,913331","1994":"3958,596186","1995":"4565,580499","1996":"5111,374331","1997":"4663,140106","1998":"3827,975793","1999":"3883,325188","2000":"4116,460693","2001":"3976,104887","2002":"4102,55271","2003":"4892,011618","2004":"5685,577736","2005":"6741,293948","2006":"7027,777345","2007":"8352,817101","2008":"10094,02746","2009":"7603,660223","2010":"8754,113376","2011":"10716,20258","2012":"9774,181017","2013":"9679,742995","2014":"9692,163874","2015":"7388,984144","2016":"7179,340661","Country Name":"Gabon","Country Code":"GAB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1380,306241","1961":"1452,544709","1962":"1513,651449","1963":"1592,614477","1964":"1729,399978","1965":"1850,954769","1966":"1959,62783","1967":"2023,627564","1968":"1896,386749","1969":"2032,34701","1970":"2347,544318","1971":"2649,801514","1972":"3030,432514","1973":"3426,276221","1974":"3665,862798","1975":"4299,745618","1976":"4138,167788","1977":"4681,439932","1978":"5976,938169","1979":"7804,762081","1980":"10032,06208","1981":"9599,306222","1982":"9146,077357","1983":"8691,518813","1984":"8179,194441","1985":"8652,216542","1986":"10611,11221","1987":"13118,58653","1988":"15987,16808","1989":"16239,2822","1990":"19095,467","1991":"19900,72665","1992":"20487,17079","1993":"18389,01957","1994":"19709,2381","1995":"22755,56212","1996":"23947,95875","1997":"26357,52719","1998":"27759,33421","1999":"28154,37126","2000":"27769,93125","2001":"27284,22404","2002":"29603,46576","2003":"34007,88876","2004":"39824,76181","2005":"41524,06554","2006":"44016,72641","2007":"49949,15488","2008":"46523,26545","2009":"38010,10045","2010":"38709,91166","2011":"41240,42486","2012":"41538,30726","2013":"42407,37101","2014":"46412,11727","2015":"43929,69081","2016":"39899,38839","Country Name":"United Kingdom","Country Code":"GBR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"1614,640122","1991":"1314,67067","1992":"757,2235485","1993":"550,0155426","1994":"517,0870879","1995":"569,0181381","1996":"670,4611048","1997":"774,6802033","1998":"805,2726845","1999":"628,8656516","2000":"691,9977101","2001":"733,9704142","2002":"779,3845935","2003":"928,0108227","2004":"1207,367228","2005":"1530,057521","2006":"1872,680416","2007":"2492,12878","2008":"3174,949001","2009":"2706,588512","2010":"2964,477034","2011":"3725,063221","2012":"4142,869175","2013":"4274,376857","2014":"4429,650075","2015":"3764,640912","2016":"3853,649904","Country Name":"Georgia","Country Code":"GEO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"182,9791912","1961":"189,7133803","1962":"195,1199885","1963":"210,9689785","1964":"230,4311999","1965":"266,3186458","1966":"269,4592356","1967":"216,8414258","1968":"202,7618857","1969":"233,651242","1970":"257,6518516","1971":"273,8227964","1972":"232,5399135","1973":"263,685964","1974":"301,3667987","1975":"285,8295247","1976":"275,8778954","1977":"312,9993132","1978":"353,7088731","1979":"381,0361958","1980":"411,5179166","1981":"379,7977778","1982":"351,3193892","1983":"341,0872166","1984":"358,396819","1985":"354,2199898","1986":"437,0782413","1987":"376,4318004","1988":"375,1812245","1989":"368,962397","1990":"402,5888817","1991":"438,6143193","1992":"414,7673408","1993":"375,3204353","1994":"333,4049392","1995":"385,7373195","1996":"403,5344405","1997":"391,35568","1998":"414,768461","1999":"417,7679907","2000":"263,1124679","2001":"273,6596668","2002":"309,4844703","2003":"373,2815537","2004":"423,1936389","2005":"498,1723904","2006":"922,9351677","2007":"1090,686718","2008":"1224,401554","2009":"1086,765038","2010":"1312,607557","2011":"1574,978653","2012":"1629,800222","2013":"1814,492297","2014":"1432,227943","2015":"1361,113905","2016":"1513,461034","Country Name":"Ghana","Country Code":"GHA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Gibraltar","Country Code":"GIB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"367,6243838","1987":"379,3634686","1988":"429,2252767","1989":"421,447937","1990":"441,4127933","1991":"472,9737936","1992":"485,9748491","1993":"457,7628488","1994":"448,4475642","1995":"469,2761014","1996":"475,7463919","1997":"453,801151","1998":"421,9982034","1999":"399,9739644","2000":"340,0516918","2001":"315,8398003","2002":"322,811171","2003":"370,1931781","2004":"386,3288283","2005":"303,424498","2006":"296,6803082","2007":"409,456775","2008":"437,4467238","2009":"436,6895539","2010":"438,7513346","2011":"459,2009012","2012":"502,3485646","2013":"540,1693204","2014":"561,0997387","2015":"554,0408766","2016":"508,1450784","Country Name":"Guinea","Country Code":"GIN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"108,3158256","1967":"112,1570719","1968":"96,73252937","1969":"103,6460073","1970":"116,9206138","1971":"121,0980781","1972":"124,6716181","1973":"153,4883772","1974":"189,5059533","1975":"221,0499974","1976":"209,1491166","1977":"250,2536952","1978":"302,6196058","1979":"353,9466887","1980":"398,8965498","1981":"349,7930893","1982":"333,304787","1983":"317,0447339","1984":"252,9422196","1985":"308,3268474","1986":"242,1717627","1987":"274,3683933","1988":"316,3194665","1989":"322,4463052","1990":"345,8558101","1991":"727,034661","1992":"729,0418881","1993":"748,7842096","1994":"719,9757073","1995":"737,1787914","1996":"773,4393371","1997":"712,3318781","1998":"723,7948296","1999":"681,5374179","2000":"635,5637584","2001":"541,0558913","2002":"440,9474786","2003":"359,6521781","2004":"413,8398773","2005":"432,1929061","2006":"439,3423674","2007":"519,0452794","2008":"607,9479735","2009":"549,317956","2010":"562,8517527","2011":"517,7942063","2012":"506,3853433","2013":"486,0795247","2014":"442,7466899","2015":"474,7165587","2016":"473,1904363","Country Name":"Gambia","Country Code":"GMB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"110,6077668","1971":"108,1437636","1972":"118,2791792","1973":"118,1761217","1974":"128,4556489","1975":"139,9999231","1976":"143,3215955","1977":"146,1336164","1978":"155,5708772","1979":"149,5817782","1980":"138,1697922","1981":"189,970092","1982":"198,787073","1983":"191,5174436","1984":"157,9235541","1985":"159,9275306","1986":"141,2992024","1987":"184,2234318","1988":"170,2919831","1989":"215,6183147","1990":"241,002485","1991":"247,9384212","1992":"212,9408099","1993":"217,6075323","1994":"211,5952576","1995":"223,3418401","1996":"233,3095607","1997":"227,638268","1998":"172,0601488","1999":"183,8530105","2000":"297,7519443","2001":"309,486749","2002":"321,4813204","2003":"360,5718585","2004":"393,3138244","2005":"424,9534585","2006":"418,9445004","2007":"481,0694976","2008":"583,5445622","2009":"544,2220779","2010":"543,9574108","2011":"692,6009989","2012":"607,7518833","2013":"610,5663047","2014":"642,6256154","2015":"596,8717189","2016":"620,2147647","Country Name":"Guinea-Bissau","Country Code":"GNB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"34,74142752","1963":"40,66082689","1964":"46,83051605","1965":"233,4148053","1966":"242,6035918","1967":"246,4471338","1968":"224,0372112","1969":"219,5247223","1970":"216,4051631","1971":"215,2942485","1972":"223,6245817","1973":"288,9578605","1974":"349,4832077","1975":"401,5278074","1976":"411,005218","1977":"421,5533677","1978":"","1979":"","1980":"198,3467376","1981":"136,010571","1982":"152,4158867","1983":"141,3227028","1984":"148,8405743","1985":"173,0823549","1986":"203,1981915","1987":"239,2422021","1988":"249,8835852","1989":"213,1317932","1990":"262,6694558","1991":"251,7022043","1992":"295,9634764","1993":"289,088409","1994":"206,936408","1995":"280,9695313","1996":"443,6325956","1997":"812,1715228","1998":"654,1473102","1999":"1052,852818","2000":"1702,684901","2001":"2283,879039","2002":"2711,170114","2003":"3577,176197","2004":"6085,348907","2005":"10850,63334","2006":"12732,02759","2007":"15761,83913","2008":"22742,38159","2009":"16530,20937","2010":"17136,44568","2011":"21451,88617","2012":"21557,6528","2013":"20246,99308","2014":"19002,59733","2015":"10347,31257","2016":"8333,238263","Country Name":"Eq. Guinea","Country Code":"GNQ","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"533,6863812","1961":"597,287321","1962":"630,6139413","1963":"701,6204178","1964":"784,9543484","1965":"888,9219979","1966":"981,6523945","1967":"1052,120993","1968":"1134,356151","1969":"1284,212316","1970":"1494,387855","1971":"1652,326599","1972":"1899,675273","1973":"2502,814358","1974":"2828,748432","1975":"3153,235306","1976":"3390,545484","1977":"3886,374253","1978":"4694,633683","1979":"5705,949274","1980":"5893,66181","1981":"5380,267683","1982":"5579,234772","1983":"5019,878653","1984":"4852,565728","1985":"4813,71118","1986":"5656,505356","1987":"6564,884503","1988":"7598,028053","1989":"7846,678164","1990":"9600,18513","1991":"10188,36978","1992":"11176,45844","1993":"10401,98299","1994":"11091,28386","1995":"12959,32432","1996":"13749,11515","1997":"13427,83249","1998":"13472,13764","1999":"13245,18946","2000":"12042,95373","2001":"12538,17883","2002":"14110,31339","2003":"18477,57841","2004":"21955,10409","2005":"22551,73574","2006":"24801,15781","2007":"28827,32636","2008":"31997,28201","2009":"29710,9703","2010":"26917,75898","2011":"25916,29353","2012":"22242,68193","2013":"21874,8195","2014":"21673,78107","2015":"18007,78991","2016":"18103,96932","Country Name":"Greece","Country Code":"GRC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"792,7625209","1978":"991,5730502","1979":"1154,416519","1980":"1246,002551","1981":"1276,905875","1982":"1347,451311","1983":"1373,168227","1984":"1478,411105","1985":"1678,862683","1986":"1873,216526","1987":"2163,509455","1988":"2410,286591","1989":"2759,682068","1990":"2888,347506","1991":"3118,148547","1992":"3191,016851","1993":"3151,540542","1994":"3270,578021","1995":"3413,022031","1996":"3640,138898","1997":"3878,39032","1998":"4401,421383","1999":"4751,575989","2000":"5117,589923","2001":"5109,958715","2002":"5292,232379","2003":"5773,073577","2004":"5836,177063","2005":"6754,512393","2006":"6764,722867","2007":"7322,596862","2008":"7946,944346","2009":"7395,088125","2010":"7365,666659","2011":"7410,408438","2012":"7583,187002","2013":"7955,615985","2014":"8569,776998","2015":"9212,192824","2016":"9469,219181","Country Name":"Grenada","Country Code":"GRD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"1498,276437","1971":"1876,503239","1972":"2196,711711","1973":"2860,280576","1974":"3432,706033","1975":"4257,949712","1976":"4844,676329","1977":"5713,954919","1978":"7235,549741","1979":"8480,694827","1980":"9483,173076","1981":"8544,058329","1982":"7813,690667","1983":"7988,170959","1984":"7198,702247","1985":"7760,828404","1986":"11271,32143","1987":"14554,38754","1988":"16398,01109","1989":"16813,68395","1990":"18326,80512","1991":"18315,1963","1992":"18768,93014","1993":"16797,45886","1994":"18123,96303","1995":"21665,7019","1996":"21422,35754","1997":"19145,49604","1998":"20496,66137","1999":"20170,43842","2000":"19004,10729","2001":"19275,47334","2002":"20652,87833","2003":"24801,65903","2004":"28497,52016","2005":"29088,82683","2006":"32035,08065","2007":"36232,68274","2008":"41022,99421","2009":"41277,46789","2010":"40532,5081","2011":"44212,44114","2012":"42398,63367","2013":"43967,15016","2014":"45317,11429","2015":"39569,10579","2016":"","Country Name":"Greenland","Country Code":"GRL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"247,8419862","1961":"248,3082085","1962":"256,1685067","1963":"274,789958","1964":"274,6197897","1965":"273,4040137","1966":"277,4102446","1967":"281,6528049","1968":"303,2034513","1969":"313,8589578","1970":"338,682043","1971":"343,3624889","1972":"353,6609113","1973":"420,8677982","1974":"504,3304624","1975":"566,6854427","1976":"661,4878984","1977":"810,0638887","1978":"875,495024","1979":"971,356509","1980":"1081,725043","1981":"1152,817804","1982":"1138,759741","1983":"1153,23768","1984":"1177,436451","1985":"1179,803556","1986":"857,009467","1987":"820,0383466","1988":"886,8008272","1989":"929,3140585","1990":"825,8073881","1991":"991,8622727","1992":"1075,428217","1993":"1147,026435","1994":"1276,332727","1995":"1408,03218","1996":"1472,276954","1997":"1633,972624","1998":"1742,081129","1999":"1608,69289","2000":"1655,596261","2001":"1568,376276","2002":"1701,771491","2003":"1753,349471","2004":"1872,737083","2005":"2077,83438","2006":"2256,56724","2007":"2489,955836","2008":"2794,221809","2009":"2635,753474","2010":"2825,52407","2011":"3187,845296","2012":"3299,605139","2013":"3452,828934","2014":"3687,763767","2015":"3923,573344","2016":"4146,744129","Country Name":"Guatemala","Country Code":"GTM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"21536,5039","2003":"22572,50466","2004":"24396,10624","2005":"26495,87758","2006":"26555,6452","2007":"27540,83913","2008":"29056,497","2009":"30025,56035","2010":"30700,43401","2011":"30862,11","2012":"32499,23425","2013":"33446,60951","2014":"34578,51609","2015":"35439,47045","2016":"","Country Name":"Guam","Country Code":"GUM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"297,6732991","1961":"315,3854595","1962":"321,5457671","1963":"282,3063385","1964":"305,3616112","1965":"327,1142227","1966":"344,1665235","1967":"370,1541723","1968":"334,8412728","1969":"358,3209366","1970":"379,8937205","1971":"395,2029189","1972":"395,2929468","1973":"420,6615817","1974":"588,1362199","1975":"663,4010019","1976":"602,6248473","1977":"590,0653705","1978":"658,4385652","1979":"683,3330327","1980":"773,1816708","1981":"729,6069588","1982":"616,9631589","1983":"628,1976888","1984":"564,526418","1985":"588,6134094","1986":"660,1415374","1987":"468,104341","1988":"551,1960875","1989":"509,3163682","1990":"533,5362054","1991":"452,3893535","1992":"492,2665978","1993":"586,9712339","1994":"713,2335202","1995":"816,5429329","1996":"925,8985582","1997":"985,046889","1998":"946,6703474","1999":"919,8665766","2000":"946,0599372","2001":"925,5825046","2002":"960,8674827","2003":"986,7958173","2004":"1045,58861","2005":"1098,455216","2006":"1945,630905","2007":"2327,058324","2008":"2576,124957","2009":"2716,35256","2010":"3026,281212","2011":"3439,597513","2012":"3785,935665","2013":"3944,178173","2014":"4030,802321","2015":"4136,689919","2016":"4456,553697","Country Name":"Guyana","Country Code":"GUY","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1405,023379","1961":"1464,813669","1962":"1561,665651","1963":"1660,091551","1964":"1790,431475","1965":"1921,174567","1966":"2084,339018","1967":"2212,644225","1968":"2376,032461","1969":"2579,780747","1970":"2809,875403","1971":"3086,207158","1972":"3543,755424","1973":"4247,613147","1974":"4743,108022","1975":"5238,386624","1976":"5660,422521","1977":"6357,425952","1978":"7551,453399","1979":"8658,387928","1980":"9593,518335","1981":"9663,127605","1982":"9497,067287","1983":"9735,164668","1984":"10086,51223","1985":"10532,91661","1986":"12694,79869","1987":"14601,23161","1988":"16331,79213","1989":"16982,09837","1990":"18946,60021","1991":"19872,37678","1992":"21245,61337","1993":"21273,48397","1994":"22637,05009","1995":"24920,7219","1996":"24969,71076","1997":"24396,63598","1998":"24321,11379","1999":"25391,17838","2000":"25755,80633","2001":"25340,82135","2002":"26235,64002","2003":"29221,5162","2004":"32304,08871","2005":"33920,88413","2006":"35531,33586","2007":"38531,31193","2008":"40584,10079","2009":"37756,6082","2010":"39310,39722","2011":"42219,06666","2012":"41991,62725","2013":"42192,35097","2014":"42780,34247","2015":"40078,05414","2016":"40677,68352","Country Name":"High income","Country Code":"HIC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"429,4428744","1961":"436,7544115","1962":"487,8211341","1963":"565,7278104","1964":"629,5915258","1965":"676,8055071","1966":"685,9266141","1967":"723,2392256","1968":"714,4829696","1969":"825,5234491","1970":"960,0319615","1971":"1106,469717","1972":"1384,738437","1973":"1893,181242","1974":"2144,607713","1975":"2252,111881","1976":"2850,01461","1977":"3429,420276","1978":"3923,943731","1979":"4569,453707","1980":"5700,412634","1981":"5991,320261","1982":"6133,784079","1983":"5595,235139","1984":"6208,226159","1985":"6542,931537","1986":"7435,030698","1987":"9071,332602","1988":"10609,74564","1989":"12097,77516","1990":"13485,54489","1991":"15465,85886","1992":"17976,42938","1993":"20395,51737","1994":"22502,57974","1995":"23497,49231","1996":"24818,15455","1997":"27330,03335","1998":"25808,97095","1999":"25091,6666","2000":"25756,66378","2001":"25230,21633","2002":"24665,89","2003":"23977,01945","2004":"24928,10037","2005":"26649,7508","2006":"28224,21506","2007":"30594,01784","2008":"31515,66277","2009":"30697,34038","2010":"32549,99823","2011":"35142,48793","2012":"36707,77423","2013":"38357,82676","2014":"40247,36691","2015":"42351,0246","2016":"43681,14058","Country Name":"Hong Kong SAR, China","Country Code":"HKG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"164,6443187","1961":"169,9097551","1962":"179,8759726","1963":"185,0492645","1964":"200,4346405","1965":"216,8149326","1966":"227,7407677","1967":"240,5472299","1968":"252,5845199","1969":"253,2685287","1970":"266,1357204","1971":"261,2463703","1972":"278,6150127","1973":"307,3431438","1974":"338,1543344","1975":"356,4563796","1976":"414,6214826","1977":"497,9368057","1978":"557,9646968","1979":"631,2619632","1980":"697,6075406","1981":"743,3551511","1982":"742,4583772","1983":"763,2680649","1984":"798,8183553","1985":"850,1142907","1986":"863,5745137","1987":"914,284269","1988":"849,0333116","1989":"740,2050067","1990":"615,2733629","1991":"601,6616065","1992":"651,5995242","1993":"644,9558303","1994":"618,1502584","1995":"685,0618746","1996":"687,4814199","1997":"773,4757317","1998":"840,1475797","1999":"845,1088226","2000":"1088,783165","2001":"1130,405046","2002":"1132,872001","2003":"1157,30427","2004":"1217,657961","2005":"1311,741714","2006":"1437,628785","2007":"1592,572182","2008":"1751,595857","2009":"1815,489496","2010":"1932,85829","2011":"2120,584798","2012":"2178,383025","2013":"2136,773905","2014":"2242,711912","2015":"2326,158506","2016":"2361,15762","Country Name":"Honduras","Country Code":"HND","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"108,1053535","1961":"108,4080854","1962":"115,4149626","1963":"136,3756894","1964":"118,4492798","1965":"135,2423964","1966":"143,8318368","1967":"137,2777507","1968":"139,9527631","1969":"152,201034","1970":"155,4070347","1971":"163,1960147","1972":"172,0961422","1973":"202,0195709","1974":"242,2708242","1975":"266,9783839","1976":"276,4378956","1977":"318,3860411","1978":"352,2715434","1979":"384,2172807","1980":"392,771299","1981":"382,5727443","1982":"372,0312903","1983":"341,6143177","1984":"332,2003377","1985":"339,3815571","1986":"378,6931688","1987":"405,8115294","1988":"393,2292424","1989":"367,9784144","1990":"364,260232","1991":"363,6577808","1992":"322,3147237","1993":"318,1821986","1994":"274,872295","1995":"305,1561507","1996":"310,6407849","1997":"317,066977","1998":"317,8146276","1999":"309,6578759","2000":"326,4889259","2001":"301,7222747","2002":"318,7052466","2003":"352,4254041","2004":"393,4305974","2005":"442,0727633","2006":"513,4694823","2007":"594,1940819","2008":"696,3124781","2009":"688,2895822","2010":"735,022349","2011":"799,4415613","2012":"837,8669905","2013":"882,5291294","2014":"912,5077355","2015":"877,1027627","2016":"861,5101555","Country Name":"Heavily indebted poor countries (HIPC)","Country Code":"HPC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"4794,937213","1996":"5268,805674","1997":"5210,430239","1998":"5650,332016","1999":"5135,473341","2000":"4919,628069","2001":"5245,421419","2002":"6053,716037","2003":"7805,881418","2004":"9365,742468","2005":"10224,24059","2006":"11363,41845","2007":"13546,69872","2008":"15893,86056","2009":"14157,14416","2010":"13505,74586","2011":"14539,18421","2012":"13235,97757","2013":"13574,74009","2014":"13467,46827","2015":"11579,66704","2016":"12090,66656","Country Name":"Croatia","Country Code":"HRV","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"479,5492678","1992":"305,5553692","1993":"249,4127466","1994":"282,4227011","1995":"359,7676569","1996":"365,0113863","1997":"411,608644","1998":"450,9186159","1999":"494,2324206","2000":"462,4806524","2001":"413,7383164","2002":"393,0163027","2003":"329,7820946","2004":"387,9429725","2005":"465,3101876","2006":"505,4706206","2007":"615,8198192","2008":"674,7564147","2009":"668,2976046","2010":"662,2795182","2011":"740,9358452","2012":"766,8437623","2013":"810,2656073","2014":"830,1148117","2015":"814,5463952","2016":"739,5954363","Country Name":"Haiti","Country Code":"HTI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"3340,349589","1992":"3724,05886","1993":"3862,530005","1994":"4161,029843","1995":"4481,414063","1996":"4513,344519","1997":"4584,646592","1998":"4739,817329","1999":"4793,609917","2000":"4623,406712","2001":"5270,805364","2002":"6650,644003","2003":"8396,253023","2004":"10259,52606","2005":"11161,72441","2006":"11398,76584","2007":"13842,60549","2008":"15669,25929","2009":"12967,16543","2010":"13025,53379","2011":"14048,87958","2012":"12834,32349","2013":"13613,60147","2014":"14117,97668","2015":"12365,62603","2016":"12664,84744","Country Name":"Hungary","Country Code":"HUN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"153,5851443","1961":"145,1804232","1962":"148,9619496","1963":"155,2734331","1964":"171,9781215","1965":"184,7518265","1966":"186,1174626","1967":"186,935332","1968":"193,157609","1969":"210,9844892","1970":"223,5811252","1971":"238,7417907","1972":"262,7287796","1973":"330,739977","1974":"408,667209","1975":"432,9806182","1976":"463,2663569","1977":"515,8604569","1978":"546,3754343","1979":"642,4056467","1980":"739,4367898","1981":"787,7390849","1982":"766,8649523","1983":"742,7817018","1984":"742,8070409","1985":"769,1444944","1986":"790,3844953","1987":"795,030213","1988":"848,9177833","1989":"892,8983762","1990":"992,9112066","1991":"1053,145807","1992":"1033,023701","1993":"1092,195185","1994":"1179,404913","1995":"1305,946764","1996":"1405,982221","1997":"1468,377276","1998":"1408,399159","1999":"1351,000344","2000":"1451,116723","2001":"1453,762199","2002":"1460,104861","2003":"1630,905481","2004":"1919,538846","2005":"2269,875443","2006":"2663,014106","2007":"3280,226277","2008":"3900,96705","2009":"3747,014583","2010":"4506,611248","2011":"5278,635447","2012":"5534,607982","2013":"5804,921096","2014":"5921,518242","2015":"5541,775122","2016":"5498,824674","Country Name":"IBRD only","Country Code":"IBD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"144,407181","1961":"138,0943828","1962":"142,2018494","1963":"149,2918574","1964":"162,1151366","1965":"174,7523493","1966":"177,1135009","1967":"177,401033","1968":"183,1270328","1969":"200,1839763","1970":"213,9845892","1971":"225,8827958","1972":"246,1103746","1973":"305,6637738","1974":"380,4362668","1975":"407,5542053","1976":"433,066389","1977":"479,3644636","1978":"509,5682854","1979":"596,0850588","1980":"685,4552826","1981":"724,3195177","1982":"702,0755361","1983":"672,0339917","1984":"667,7684472","1985":"689,1268874","1986":"705,9437353","1987":"712,6433307","1988":"755,8821333","1989":"788,7108199","1990":"870,8612435","1991":"917,8430083","1992":"896,4686642","1993":"938,4603941","1994":"1002,35485","1995":"1109,420564","1996":"1192,3209","1997":"1240,40434","1998":"1188,678812","1999":"1141,415449","2000":"1224,067068","2001":"1219,792202","2002":"1226,173503","2003":"1366,000762","2004":"1600,643645","2005":"1883,294225","2006":"2205,041879","2007":"2696,938891","2008":"3197,807687","2009":"3065,295447","2010":"3688,144248","2011":"4295,095344","2012":"4494,66547","2013":"4707,454464","2014":"4803,124945","2015":"4489,783682","2016":"4435,508344","Country Name":"IDA & IBRD total","Country Code":"IBT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"101,306488","1961":"104,4041247","1962":"109,9056288","1963":"120,7420403","1964":"115,2571659","1965":"127,3405411","1966":"134,5993285","1967":"132,5068721","1968":"136,044104","1969":"149,6653423","1970":"169,5162232","1971":"165,9201618","1972":"168,4540343","1973":"188,3268474","1974":"249,1806821","1975":"290,6762402","1976":"294,7581782","1977":"313,2004228","1978":"343,7316104","1979":"388,8592366","1980":"446,1295337","1981":"445,1290532","1982":"419,2808351","1983":"366,1100264","1984":"346,3372953","1985":"349,5736753","1986":"350,8409378","1987":"368,9696155","1988":"370,6945997","1989":"361,1768989","1990":"370,8854689","1991":"368,6549266","1992":"348,282157","1993":"327,3078845","1994":"305,0643448","1995":"344,9371814","1996":"371,0645672","1997":"373,7719777","1998":"363,228079","1999":"363,7945549","2000":"392,0735354","2001":"372,8312266","2002":"390,3159141","2003":"431,5323808","2004":"489,9351442","2005":"553,6705401","2006":"650,1280266","2007":"741,3040216","2008":"870,6148285","2009":"838,4160864","2010":"1052,003977","2011":"1166,3974","2012":"1229,469384","2013":"1306,866879","2014":"1383,761925","2015":"1315,992511","2016":"1268,101681","Country Name":"IDA total","Country Code":"IDA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"101,6931324","1961":"106,1383851","1962":"110,7321703","1963":"114,2702281","1964":"121,8398984","1965":"129,2936961","1966":"136,8133467","1967":"134,1630385","1968":"138,9585133","1969":"154,4728498","1970":"207,0980886","1971":"186,4882331","1972":"202,9697475","1973":"210,0343483","1974":"296,7356352","1975":"331,7477508","1976":"391,8016672","1977":"398,615168","1978":"418,9459425","1979":"500,0743232","1980":"624,0063683","1981":"623,5410455","1982":"569,7970649","1983":"460,2233505","1984":"419,1264989","1985":"406,5834646","1986":"383,6206821","1987":"411,8143089","1988":"428,6254122","1989":"426,0216136","1990":"440,1394388","1991":"440,9407947","1992":"434,2713374","1993":"384,1550024","1994":"376,1996908","1995":"435,0110123","1996":"473,46182","1997":"466,9912075","1998":"436,2153293","1999":"445,0420913","2000":"484,3964747","2001":"457,4777394","2002":"486,5985282","2003":"542,5271533","2004":"639,7830064","2005":"737,5824357","2006":"905,3952182","2007":"1011,967474","2008":"1177,022251","2009":"1070,764515","2010":"1545,425773","2011":"1730,249021","2012":"1859,123576","2013":"1975,033374","2014":"2096,193875","2015":"1917,199693","2016":"1754,204613","Country Name":"IDA blend","Country Code":"IDB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"53,5161517","1968":"65,02815283","1969":"74,57438754","1970":"79,68565735","1971":"79,15008665","1972":"90,84449531","1973":"130,9799744","1974":"202,4270418","1975":"233,0392936","1976":"278,1058483","1977":"333,5873079","1978":"365,8010591","1979":"356,8131282","1980":"491,4377788","1981":"566,4252915","1982":"583,5261716","1983":"512,8452045","1984":"525,2291405","1985":"516,8678062","1986":"474,780945","1987":"442,1481187","1988":"481,7127613","1989":"529,9316609","1990":"585,0010311","1991":"631,7004457","1992":"681,8428679","1993":"827,782351","1994":"912,0724734","1995":"1026,270493","1996":"1137,332724","1997":"1063,712266","1998":"463,9685753","1999":"671,107022","2000":"780,0920744","2001":"747,9817455","2002":"899,5556857","2003":"1064,509447","2004":"1148,569096","2005":"1260,928834","2006":"1586,20504","2007":"1855,093915","2008":"2160,527606","2009":"2254,445606","2010":"3113,480635","2011":"3634,276805","2012":"3687,953996","2013":"3620,663981","2014":"3491,595887","2015":"3336,106686","2016":"3570,294888","Country Name":"Indonesia","Country Code":"IDN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"103,745784","1961":"106,1612998","1962":"112,3256565","1963":"127,5990511","1964":"114,5474651","1965":"129,5845605","1966":"136,8917126","1967":"135,0662573","1968":"137,9949204","1969":"150,9128871","1970":"152,8646438","1971":"158,6777858","1972":"153,39618","1973":"180,9146355","1974":"228,6279249","1975":"274,7713488","1976":"246,5903581","1977":"271,8950802","1978":"308,8376608","1979":"333,753256","1980":"352,9197396","1981":"351,0684439","1982":"340,1384855","1983":"317,8159013","1984":"309,661898","1985":"321,6303736","1986":"336,4331933","1987":"349,0789756","1988":"342,3593408","1989":"329,0045277","1990":"336,3932017","1991":"332,4703565","1992":"304,4068358","1993":"299,3248859","1994":"269,2689847","1995":"299,3807381","1996":"319,1666771","1997":"326,9797771","1998":"327,3809343","1999":"323,557624","2000":"346,2416721","2001":"330,987459","2002":"342,7196365","2003":"376,7398515","2004":"415,7790737","2005":"462,6380645","2006":"523,4791082","2007":"607,3156304","2008":"719,5902548","2009":"726,4840066","2010":"803,2148764","2011":"881,0878458","2012":"909,3906558","2013":"966,8426708","2014":"1020,659246","2015":"1010,67792","2016":"1023,47332","Country Name":"IDA only","Country Code":"IDX","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"13054,47525","1996":"14526,08821","1997":"16663,41728","1998":"19366,13321","1999":"21784,8796","2000":"21551,77936","2001":"22059,72362","2002":"25688,4634","2003":"30366,03975","2004":"36608,45177","2005":"39033,70012","2006":"43482,35943","2007":"73153,32375","2008":"74203,13176","2009":"63635,79365","2010":"67690,56567","2011":"75117,9942","2012":"79028,04498","2013":"82356,82337","2014":"89941,64429","2015":"","2016":"","Country Name":"Isle of Man","Country Code":"IMN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"81,28476375","1961":"84,42643693","1962":"88,9149186","1963":"100,0485917","1964":"114,315161","1965":"118,0633825","1966":"89,05358349","1967":"95,33078294","1968":"98,83123469","1969":"106,4963794","1970":"111,2575706","1971":"117,3607381","1972":"121,6922886","1973":"142,2700813","1974":"161,7630106","1975":"156,380095","1976":"159,4077985","1977":"184,2728749","1978":"203,5587046","1979":"221,6879474","1980":"263,8407198","1981":"267,7110103","1982":"271,3335961","1983":"288,3071697","1984":"273,9018266","1985":"293,4886471","1986":"307,395346","1987":"337,0639962","1988":"350,6727391","1989":"342,7238981","1990":"363,9640873","1991":"300,0966366","1992":"313,8601101","1993":"298,2176638","1994":"342,7175187","1995":"370,1013553","1996":"396,0146123","1997":"411,3877208","1998":"409,1943859","1999":"437,5861178","2000":"438,8646304","2001":"447,0138966","2002":"466,2008042","2003":"541,1352279","2004":"621,3183767","2005":"707,008019","2006":"792,0259698","2007":"1018,166373","2008":"991,4846304","2009":"1090,317765","2010":"1345,770153","2011":"1461,671957","2012":"1446,98541","2013":"1452,195373","2014":"1573,118089","2015":"1613,188708","2016":"1709,387921","Country Name":"India","Country Code":"IND","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Not classified","Country Code":"INX","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"685,6147124","1961":"739,2764064","1962":"797,0062884","1963":"852,1353017","1964":"965,1354227","1965":"1023,773726","1966":"1074,506506","1967":"1152,004952","1968":"1124,516636","1969":"1291,34992","1970":"1487,985306","1971":"1705,617882","1972":"2082,523784","1973":"2426,667625","1974":"2519,417744","1975":"2976,342004","1976":"2922,471934","1977":"3430,464108","1978":"4404,340205","1979":"5435,334576","1980":"6378,743018","1981":"5992,076861","1982":"6166,733958","1983":"5921,094542","1984":"5697,659328","1985":"6017,683677","1986":"8120,197677","1987":"9591,393733","1988":"10726,47308","1989":"11186,87426","1990":"14045,18547","1991":"14101,14592","1992":"15729,93288","1993":"14671,56357","1994":"15918,6645","1995":"19177,41245","1996":"20856,2952","1997":"22540,26122","1998":"24271,20838","1999":"26308,17246","2000":"26241,91883","2001":"28223,55528","2002":"32539,01937","2003":"41107,15532","2004":"47631,06377","2005":"50886,82789","2006":"54326,09713","2007":"61388,17457","2008":"61235,40105","2009":"51983,78892","2010":"48538,58776","2011":"52567,52568","2012":"49231,36254","2013":"52034,76736","2014":"55503,32623","2015":"60664,1044","2016":"61606,48294","Country Name":"Ireland","Country Code":"IRL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"191,6808775","1961":"196,9246788","1962":"203,4363115","1963":"208,1308322","1964":"221,3191886","1965":"248,3386644","1966":"264,9767736","1967":"287,0791674","1968":"318,987576","1969":"350,9095745","1970":"384,9421794","1971":"468,961985","1972":"570,3695316","1973":"876,3092405","1974":"1453,77899","1975":"1581,892636","1976":"2017,184275","1977":"2315,382036","1978":"2168,155871","1979":"2426,454373","1980":"2440,305646","1981":"2498,887061","1982":"3007,133158","1983":"3582,651553","1984":"3568,505126","1985":"3805,943091","1986":"4244,98513","1987":"2617,511461","1988":"2318,538455","1989":"2199,757419","1990":"2219,842302","1991":"","1992":"","1993":"1080,561233","1994":"1202,868327","1995":"1591,716066","1996":"1955,146029","1997":"1816,586694","1998":"1725,756278","1999":"1749,827783","2000":"1657,169748","2001":"1890,991526","2002":"1892,036143","2003":"2231,342796","2004":"2638,679075","2005":"3121,844906","2006":"3631,243047","2007":"4685,121719","2008":"5452,489671","2009":"5414,456355","2010":"6273,378441","2011":"7842,434673","2012":"7680,600644","2013":"6607,068354","2014":"5424,309974","2015":"4957,581276","2016":"","Country Name":"Iran","Country Code":"IRN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"231,0256172","1961":"245,0319883","1962":"254,7013341","1963":"250,7870782","1964":"288,1634817","1965":"","1966":"","1967":"","1968":"312,8222774","1969":"313,8174456","1970":"330,8852017","1971":"376,8899272","1972":"388,1045433","1973":"468,8421103","1974":"1018,073913","1975":"1151,817729","1976":"1471,211339","1977":"1592,028539","1978":"1847,896567","1979":"2852,39336","1980":"3911,543003","1981":"2735,548508","1982":"2950,159183","1983":"2738,137352","1984":"3077,998472","1985":"3099,881525","1986":"2957,240514","1987":"3475,096661","1988":"3753,529911","1989":"3852,149758","1990":"10297,42767","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"1391,816923","2005":"1849,603911","2006":"2351,812429","2007":"3129,224922","2008":"4521,03247","2009":"3735,144836","2010":"4502,749048","2011":"5854,614497","2012":"6651,12242","2013":"6925,224046","2014":"6703,074737","2015":"4974,02693","2016":"4609,600694","Country Name":"Iraq","Country Code":"IRQ","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1414,982269","1961":"1418,12587","1962":"1562,23073","1963":"1831,705656","1964":"2297,920643","1965":"2723,52095","1966":"3215,694178","1967":"3125,649492","1968":"2354,480027","1969":"2039,196295","1970":"2597,387272","1971":"3278,648772","1972":"4047,619079","1973":"5481,730285","1974":"7098,028334","1975":"6506,866773","1976":"7645,18209","1977":"10038,54253","1978":"11328,46765","1979":"12743,83419","1980":"14942,814","1981":"15260,8281","1982":"13823,67322","1983":"11767,09307","1984":"12057,17284","1985":"12462,09879","1986":"16539,98028","1987":"22636,4869","1988":"24651,58933","1989":"22617,49166","1990":"25592,14715","1991":"27021,79826","1992":"27345,70609","1993":"23772,29122","1994":"24214,70973","1995":"26851,01722","1996":"27897,00172","1997":"28016,7524","1998":"30901,04929","1999":"32198,90858","2000":"31813,37344","2001":"28585,9254","2002":"31996,20172","2003":"39044,09099","2004":"46917,27216","2005":"56249,75055","2006":"56103,54115","2007":"68348,31817","2008":"55575,29196","2009":"40461,89251","2010":"41676,44527","2011":"46000,02017","2012":"44333,85018","2013":"47810,30888","2014":"52473,11356","2015":"50734,4436","2016":"59976,94257","Country Name":"Iceland","Country Code":"ISL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1229,174748","1961":"1436,384439","1962":"1094,635848","1963":"1257,811405","1964":"1375,892256","1965":"1429,314605","1966":"1513,883606","1967":"1468,123862","1968":"1647,877274","1969":"1852,392539","1970":"2107,487111","1971":"1906,728576","1972":"2381,273825","1973":"2956,680903","1974":"4141,619781","1975":"3770,815244","1976":"3498,407869","1977":"3982,839745","1978":"3785,270206","1979":"4700,475436","1980":"5643,29703","1981":"5879,321661","1982":"6087,656057","1983":"6685,159579","1984":"6261,999323","1985":"5698,473656","1986":"6909,105354","1987":"8120,218481","1988":"9881,42812","1989":"9871,574095","1990":"11264,01874","1991":"11956,0086","1992":"12838,4182","1993":"12530,99864","1994":"13830,287","1995":"18028,63557","1996":"19285,68194","1997":"19627,13822","1998":"19400,1012","1999":"19136,71157","2000":"21052,10432","2001":"20306,19646","2002":"18431,15696","2003":"18946,99942","2004":"19888,172","2005":"20611,17931","2006":"21905,01769","2007":"25008,6037","2008":"29657,44201","2009":"27795,87671","2010":"30661,99004","2011":"33657,15727","2012":"32569,59683","2013":"36393,66932","2014":"37582,84624","2015":"35729,37253","2016":"37292,61222","Country Name":"Israel","Country Code":"ISR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"804,4926233","1961":"887,3367446","1962":"990,2601522","1963":"1126,019337","1964":"1222,54454","1965":"1304,453817","1966":"1402,442354","1967":"1533,692877","1968":"1651,939377","1969":"1813,388126","1970":"2099,914303","1971":"2298,004545","1972":"2662,326357","1973":"3194,679293","1974":"3609,201208","1975":"4093,44662","1976":"4019,795878","1977":"4588,414364","1978":"5591,991448","1979":"6967,227798","1980":"8429,023181","1981":"7597,688826","1982":"7531,597653","1983":"7806,739036","1984":"7714,185232","1985":"7964,328666","1986":"11277,69171","1987":"14187,7743","1988":"15692,72629","1989":"16332,60955","1990":"20757,08875","1991":"21884,10445","1992":"23166,80415","1993":"18676,95264","1994":"19273,84424","1995":"20596,38865","1996":"23020,09914","1997":"21779,62444","1998":"22252,35771","1999":"21936,8226","2000":"20051,2426","2001":"20400,8109","2002":"22196,50736","2003":"27387,2258","2004":"31174,56118","2005":"31959,26215","2006":"33410,7482","2007":"37698,78573","2008":"40640,18465","2009":"36976,84512","2010":"35849,37364","2011":"38334,68477","2012":"34814,12436","2013":"35370,27441","2014":"35396,66517","2015":"30049,14755","2016":"30527,2682","Country Name":"Italy","Country Code":"ITA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"429,3258531","1961":"453,1294649","1962":"463,9596992","1963":"485,3192983","1964":"518,8897231","1965":"553,5269471","1966":"616,0536107","1967":"636,7080743","1968":"593,7027625","1969":"644,1433078","1970":"749,0616952","1971":"808,7460998","1972":"969,1036412","1973":"969,0941949","1974":"1188,716633","1975":"1410,642152","1976":"1443,254284","1977":"1561,950511","1978":"1255,874267","1979":"1137,077587","1980":"1238,721087","1981":"1355,608144","1982":"1473,401112","1983":"1591,831923","1984":"1027,986765","1985":"898,053974","1986":"1166,339014","1987":"1381,505722","1988":"1599,438627","1989":"1829,519238","1990":"1894,292759","1991":"1666,013637","1992":"1432,200524","1993":"1952,668478","1994":"1952,95094","1995":"2277,604676","1996":"2538,822628","1997":"2880,10168","1998":"3338,596274","1999":"3338,20084","2000":"3360,870402","2001":"3394,800708","2002":"3596,496282","2003":"3465,221998","2004":"3719,97351","2005":"4082,240762","2006":"4313,160082","2007":"4620,517913","2008":"4902,492378","2009":"4293,383274","2010":"4682,728424","2011":"5103,549487","2012":"5210,303363","2013":"5006,144952","2014":"4855,743789","2015":"4965,989857","2016":"4868,248263","Country Name":"Jamaica","Country Code":"JAM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"511,5619631","1966":"519,8892796","1967":"458,6365611","1968":"374,5471345","1969":"432,7207505","1970":"372,0937311","1971":"375,4231772","1972":"419,1839041","1973":"485,0369741","1974":"597,2837672","1975":"660,733679","1976":"805,9808147","1977":"963,4367714","1978":"1164,752385","1979":"1422,703959","1980":"1646,732099","1981":"1781,528401","1982":"1828,548057","1983":"1844,597166","1984":"1786,311321","1985":"1724,397465","1986":"2125,786205","1987":"2159,775695","1988":"1929,858724","1989":"1243,274348","1990":"1168,349421","1991":"1157,407168","1992":"1338,473803","1993":"1338,091387","1994":"1418,973205","1995":"1471,154136","1996":"1469,001548","1997":"1499,542259","1998":"1605,614581","1999":"1624,9791","2000":"1657,889256","2001":"1728,260509","2002":"1812,288374","2003":"1889,213962","2004":"2061,456882","2005":"2203,083787","2006":"2537,30049","2007":"2762,806354","2008":"3385,609665","2009":"3492,130906","2010":"3679,190275","2011":"3807,324145","2012":"3870,753211","2013":"3992,867107","2014":"4066,940775","2015":"4096,099275","2016":"4087,937517","Country Name":"Jordan","Country Code":"JOR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"478,9953402","1961":"563,5867598","1962":"633,6403152","1963":"717,8669152","1964":"835,6572525","1965":"919,7766882","1966":"1058,503561","1967":"1228,90921","1968":"1450,619652","1969":"1669,0982","1970":"2027,065881","1971":"2260,375947","1972":"2951,760875","1973":"3977,251086","1974":"4331,400905","1975":"4635,124304","1976":"5171,036494","1977":"6303,156494","1978":"8776,408455","1979":"9058,242022","1980":"9416,63028","1981":"10331,74147","1982":"9539,08031","1983":"10333,34008","1984":"10912,86325","1985":"11599,73837","1986":"17079,59571","1987":"20593,52364","1988":"24880,21486","1989":"24792,19323","1990":"25417,27939","1991":"28874,35896","1992":"31376,13786","1993":"35865,65593","1994":"39268,56687","1995":"43440,36787","1996":"38436,92631","1997":"35021,71909","1998":"31902,7671","1999":"36026,55608","2000":"38532,04088","2001":"33846,46564","2002":"32289,35054","2003":"34808,39092","2004":"37688,72234","2005":"37217,64873","2006":"35433,98896","2007":"35275,22843","2008":"39339,29757","2009":"40855,17564","2010":"44507,67639","2011":"48167,99727","2012":"48603,47665","2013":"40454,44746","2014":"38096,21151","2015":"34474,13736","2016":"38894,46773","Country Name":"Japan","Country Code":"JPN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"1647,463231","1991":"1512,485066","1992":"1515,104059","1993":"1433,461534","1994":"1320,321622","1995":"1288,239052","1996":"1350,333866","1997":"1445,569414","1998":"1468,701798","1999":"1130,113592","2000":"1229,000958","2001":"1490,926751","2002":"1658,031146","2003":"2068,123657","2004":"2874,288291","2005":"3771,278957","2006":"5291,57565","2007":"6771,414797","2008":"8513,564645","2009":"7165,27705","2010":"9070,649972","2011":"11634,42422","2012":"12387,18982","2013":"13890,85601","2014":"12806,56511","2015":"10509,98107","2016":"7510,077209","Country Name":"Kazakhstan","Country Code":"KAZ","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"97,62153058","1961":"94,83526489","1962":"100,6042667","1963":"104,0127363","1964":"108,5589446","1965":"104,9921623","1966":"118,5563545","1967":"121,3808113","1968":"128,8577307","1969":"134,1937363","1970":"142,4970893","1971":"152,5532193","1972":"174,3976141","1973":"199,6944931","1974":"228,7584182","1975":"241,6723212","1976":"248,2400422","1977":"309,353539","1978":"351,6367428","1979":"398,0367672","1980":"446,5744543","1981":"405,5509672","1982":"366,2749507","1983":"327,8176449","1984":"326,9364626","1985":"312,1960254","1986":"355,2313447","1987":"377,4184626","1988":"382,0224053","1989":"365,9747535","1990":"366,3008909","1991":"337,1221889","1992":"328,8393137","1993":"223,3348006","1994":"269,2487013","1995":"330,8043302","1996":"427,9512673","1997":"452,9848068","1998":"473,4327212","1999":"421,4328846","2000":"403,9797132","2001":"401,7763612","2002":"395,8493511","2003":"436,6875357","2004":"458,8843551","2005":"519,7999346","2006":"697,0066385","2007":"839,1081117","2008":"916,8992515","2009":"920,0816252","2010":"967,3400773","2011":"987,4453967","2012":"1155,020582","2013":"1229,114798","2014":"1335,06458","2015":"1349,970144","2016":"1455,359765","Country Name":"Kenya","Country Code":"KEN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"608,9451631","1991":"575,9551334","1992":"513,0359437","1993":"449,0657902","1994":"372,30781","1995":"364,2264974","1996":"394,8601215","1997":"376,4296133","1998":"345,1381316","1999":"258,04934","2000":"279,6205233","2001":"308,4087767","2002":"321,726538","2003":"380,5073624","2004":"433,2351189","2005":"476,55213","2006":"543,1107024","2007":"721,7686908","2008":"966,3936272","2009":"871,2243893","2010":"880,0377751","2011":"1123,883168","2012":"1177,974735","2013":"1282,437162","2014":"1279,769783","2015":"1121,082835","2016":"1077,036174","Country Name":"Kyrgyzstan","Country Code":"KGZ","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"111,3424797","1961":"109,4594743","1962":"109,4790454","1963":"117,8203826","1964":"123,6431914","1965":"134,304155","1966":"138,8486264","1967":"144,025565","1968":"157,2146035","1969":"142,2949629","1970":"102,7043272","1971":"135,8847756","1972":"69,25190618","1973":"94,38327605","1974":"78,1318239","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"254,1791425","1994":"270,6091637","1995":"323,0099928","1996":"319,3632544","1997":"304,837993","1998":"269,054641","1999":"295,9735957","2000":"300,6850949","2001":"321,2263004","2002":"339,0676984","2003":"362,4213785","2004":"408,6105184","2005":"474,2238766","2006":"539,8791529","2007":"631,675789","2008":"745,7877873","2009":"738,2326684","2010":"785,6928841","2011":"882,4901462","2012":"950,0244132","2013":"1028,419568","2014":"1098,687123","2015":"1163,18977","2016":"1269,907238","Country Name":"Cambodia","Country Code":"KHM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"279,3247009","1971":"293,6786637","1972":"358,4833967","1973":"591,5726014","1974":"1574,791732","1975":"998,4197102","1976":"734,4019419","1977":"682,0640633","1978":"784,0523451","1979":"728,4751211","1980":"652,4470339","1981":"687,9716636","1982":"665,9892668","1983":"612,5799417","1984":"657,152244","1985":"501,9319158","1986":"489,7213208","1987":"499,6764585","1988":"621,9008827","1989":"580,2952533","1990":"549,7643854","1991":"644,7108451","1992":"638,4725668","1993":"619,6545734","1994":"715,1671148","1995":"724,7913054","1996":"842,9591391","1997":"842,281248","1998":"801,1629805","1999":"832,0547943","2000":"796,7937634","2001":"734,9492461","2002":"826,585504","2003":"1015,038605","2004":"1130,602806","2005":"1214,556667","2006":"1151,555618","2007":"1357,632211","2008":"1413,30234","2009":"1297,285141","2010":"1493,16051","2011":"1692,613277","2012":"1763,815497","2013":"1724,361737","2014":"1684,504274","2015":"1424,483611","2016":"1449,058231","Country Name":"Kiribati","Country Code":"KIR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"241,5580352","1961":"243,8464108","1962":"246,0770348","1963":"253,9975535","1964":"268,7072874","1965":"276,220838","1966":"299,2075392","1967":"353,3629855","1968":"314,6416103","1969":"348,091536","1970":"363,1502729","1971":"441,055095","1972":"517,638612","1973":"545,9883197","1974":"710,8988362","1975":"753,5471881","1976":"681,6979771","1977":"1016,794866","1978":"1123,38758","1979":"1341,479317","1980":"1567,12438","1981":"1838,841145","1982":"1973,280188","1983":"2000,387417","1984":"2267,424326","1985":"2524,385309","1986":"3004,347058","1987":"3402,714073","1988":"4037,950173","1989":"4530,862082","1990":"5111,927424","1991":"5117,425279","1992":"5547,122132","1993":"5966,543995","1994":"6550,568977","1995":"6987,472119","1996":"7348,879786","1997":"8147,554671","1998":"8235,563259","1999":"8700,348672","2000":"9267,754945","2001":"10025,61636","2002":"10358,27279","2003":"9847,603546","2004":"10476,36357","2005":"11173,76056","2006":"12928,6329","2007":"13538,92858","2008":"14681,36684","2009":"14212,33957","2010":"13704,25445","2011":"14483,44351","2012":"13965,55811","2013":"14823,74859","2014":"15775,84594","2015":"16144,97781","2016":"16725,27965","Country Name":"St. Kitts and Nevis","Country Code":"KNA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"158,2366362","1961":"93,81620864","1962":"106,133999","1963":"146,2945903","1964":"123,5884555","1965":"108,7038232","1966":"133,449808","1967":"161,1157648","1968":"198,3656583","1969":"243,3344021","1970":"279,1251975","1971":"300,7648371","1972":"323,5961525","1973":"405,8829266","1974":"561,5671868","1975":"615,2014185","1976":"830,6991851","1977":"1050,898003","1978":"1398,478756","1979":"1773,526846","1980":"1704,469739","1981":"1870,338734","1982":"1977,641636","1983":"2180,494844","1984":"2390,673152","1985":"2457,327997","1986":"2803,368764","1987":"3510,99002","1988":"4686,137325","1989":"5736,903807","1990":"6516,305759","1991":"7523,477002","1992":"8001,540992","1993":"8740,945603","1994":"10205,80747","1995":"12332,97935","1996":"13137,90807","1997":"12131,8747","1998":"8085,323528","1999":"10409,32689","2000":"11947,57913","2001":"11252,90755","2002":"12782,52553","2003":"14209,38852","2004":"15907,66583","2005":"18639,52221","2006":"20888,38015","2007":"23060,70788","2008":"20430,63946","2009":"18291,9196","2010":"22086,95292","2011":"24079,78852","2012":"24358,78218","2013":"25890,01867","2014":"27811,36638","2015":"27105,07623","2016":"27538,80613","Country Name":"South Korea","Country Code":"KOR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"4429,171107","1966":"4556,463065","1967":"4217,380839","1968":"4194,569472","1969":"4007,258188","1970":"3848,569739","1971":"4843,548836","1972":"5208,495365","1973":"5952,861796","1974":"13478,76895","1975":"11731,55334","1976":"12056,15171","1977":"12217,22249","1978":"12626,99261","1979":"19040,04248","1980":"20868,74216","1981":"17364,39948","1982":"14277,62713","1983":"13203,17132","1984":"13103,55445","1985":"12330,47364","1986":"9750,902967","1987":"11512,05444","1988":"10148,91608","1989":"11594,13742","1990":"8776,741344","1991":"5407,969783","1992":"","1993":"","1994":"","1995":"16882,42146","1996":"19300,86144","1997":"17696,13876","1998":"14126,8751","1999":"15391,34574","2000":"18389,38433","2001":"16540,96761","2002":"17789,41981","2003":"22071,56961","2004":"26921,08278","2005":"35490,26132","2006":"42717,55725","2007":"45793,97614","2008":"55571,99806","2009":"37567,30121","2010":"38497,61696","2011":"48268,5912","2012":"51264,07134","2013":"48399,90581","2014":"42996,40812","2015":"28975,40108","2016":"","Country Name":"Kuwait","Country Code":"KWT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"355,790461","1961":"363,5768306","1962":"407,5017165","1963":"397,0525116","1964":"429,4032576","1965":"452,4889105","1966":"482,7617593","1967":"482,0441363","1968":"507,106224","1969":"551,3357385","1970":"583,6490294","1971":"632,4456723","1972":"697,8059417","1973":"887,9853472","1974":"1152,148703","1975":"1211,637281","1976":"1311,654581","1977":"1400,876202","1978":"1550,682721","1979":"1791,714606","1980":"2063,450106","1981":"2325,573272","1982":"2139,5115","1983":"1863,439933","1984":"1793,765179","1985":"1814,57744","1986":"1807,491195","1987":"1854,184886","1988":"2079,972153","1989":"2230,192986","1990":"2556,906409","1991":"3113,913285","1992":"2843,687983","1993":"3237,796608","1994":"3660,457023","1995":"3807,718564","1996":"4031,729443","1997":"4341,901082","1998":"4297,316403","1999":"3790,546047","2000":"4141,572963","2001":"3970,631986","2002":"3484,282366","2003":"3530,363931","2004":"4018,527774","2005":"4823,396534","2006":"5591,825327","2007":"6556,265271","2008":"7580,830903","2009":"7024,057155","2010":"8641,608853","2011":"9719,758004","2012":"9665,192518","2013":"9776,496851","2014":"9708,143056","2015":"8148,633593","2016":"7803,427624","Country Name":"Latin America & Caribbean (excluding high income)","Country Code":"LAC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"489,9487271","1985":"641,7386315","1986":"468,3241706","1987":"278,4193909","1988":"148,9844077","1989":"172,5414268","1990":"203,2559698","1991":"234,7193694","1992":"250,4922292","1993":"287,1875929","1994":"325,6292418","1995":"363,4716183","1996":"377,9712559","1997":"345,4969431","1998":"248,5413984","1999":"277,4951028","2000":"324,8450496","2001":"326,6408434","2002":"319,8270584","2003":"362,6252958","2004":"417,7516561","2005":"475,4164695","2006":"590,3013108","2007":"709,767087","2008":"899,4950787","2009":"948,1276421","2010":"1141,127115","2011":"1304,384015","2012":"1588,635866","2013":"1838,794779","2014":"2017,563344","2015":"2159,422978","2016":"2353,152875","Country Name":"Laos","Country Code":"LAO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"1241,684289","1989":"1015,464997","1990":"1050,117851","1991":"1617,278381","1992":"1965,341306","1993":"2597,600517","1994":"3226,98782","1995":"3863,26192","1996":"4457,96016","1997":"5093,290745","1998":"5538,680283","1999":"5509,346429","2000":"5334,903329","2001":"5253,122599","2002":"5436,595223","2003":"5425,66907","2004":"5424,22356","2005":"5339,441291","2006":"5372,065899","2007":"6014,271115","2008":"7012,775759","2009":"8400,268878","2010":"8763,826274","2011":"8734,900653","2012":"8787,946608","2013":"8406,285153","2014":"8161,4614","2015":"8046,632851","2016":"7914,004677","Country Name":"Lebanon","Country Code":"LBN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"170,0378376","1961":"160,631571","1962":"163,9171964","1963":"167,291564","1964":"178,813389","1965":"182,973602","1966":"190,565039","1967":"198,6575501","1968":"205,5867436","1969":"222,3334591","1970":"228,0925417","1971":"234,8669851","1972":"246,4318734","1973":"252,0590088","1974":"308,4039287","1975":"355,4121105","1976":"356,7994379","1977":"391,1740209","1978":"404,9332225","1979":"445,605324","1980":"452,6320834","1981":"432,4564639","1982":"425,1953638","1983":"391,540536","1984":"392,9797706","1985":"388,2667025","1986":"381,9383214","1987":"443,9935135","1988":"479,5643599","1989":"368,8908176","1990":"183,2892117","1991":"168,9101461","1992":"110,4942877","1993":"80,19005643","1994":"65,67687672","1995":"65,01141558","1996":"72,74622475","1997":"125,4627472","1998":"140,9609018","1999":"161,5641221","2000":"183,4149991","2001":"174,1815473","2002":"177,2851087","2003":"133,4945108","2004":"149,4452549","2005":"168,6480254","2006":"178,927099","2007":"210,3733292","2008":"232,061732","2009":"303,0667491","2010":"327,4205097","2011":"379,6895803","2012":"415,0361958","2013":"454,1222236","2014":"458,4651734","2015":"452,0380717","2016":"455,3707414","Country Name":"Liberia","Country Code":"LBR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"6514,321504","1991":"7040,701924","1992":"7284,747991","1993":"6446,933136","1994":"5892,462256","1995":"5161,683342","1996":"5537,183816","1997":"5999,026651","1998":"5244,88031","1999":"6821,312519","2000":"7145,628494","2001":"6269,580123","2002":"3705,442638","2003":"4676,967503","2004":"5806,083604","2005":"8171,361651","2006":"9344,987518","2007":"11308,56661","2008":"14396,04865","2009":"10296,97353","2010":"12120,56217","2011":"5602,549434","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Libya","Country Code":"LBY","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"774,1693001","1978":"891,2935512","1979":"1065,745279","1980":"1240,31775","1981":"1404,502827","1982":"1508,443799","1983":"1606,882661","1984":"1748,746963","1985":"1908,533595","1986":"2252,308786","1987":"2442,106629","1988":"2744,947497","1989":"3056,269022","1990":"3502,279151","1991":"3665,585596","1992":"3994,326163","1993":"4004,251784","1994":"4130,932519","1995":"4355,49576","1996":"4444,150393","1997":"4480,558044","1998":"4814,861237","1999":"5000,482141","2000":"4996,267719","2001":"4693,861534","2002":"4684,104534","2003":"5117,859195","2004":"5504,479","2005":"5810,177324","2006":"6424,257427","2007":"6877,518168","2008":"7014,985314","2009":"6905,251306","2010":"7196,041342","2011":"7367,020393","2012":"7428,806631","2013":"7503,428129","2014":"7857,276796","2015":"8076,113132","2016":"7744,445173","Country Name":"St. Lucia","Country Code":"LCA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"368,9795965","1961":"381,3557401","1962":"427,1458313","1963":"418,1238354","1964":"451,9510089","1965":"473,9443296","1966":"506,5755733","1967":"505,6634553","1968":"530,744887","1969":"579,815728","1970":"614,5547907","1971":"670,4089108","1972":"735,1792702","1973":"939,2095453","1974":"1190,628543","1975":"1219,715755","1976":"1325,020299","1977":"1425,658094","1978":"1580,06949","1979":"1839,054869","1980":"2133,719824","1981":"2404,115522","1982":"2200,683389","1983":"1913,341766","1984":"1848,47549","1985":"1863,82586","1986":"1859,476968","1987":"1919,370731","1988":"2148,465499","1989":"2304,319934","1990":"2630,056405","1991":"3177,436713","1992":"2943,67619","1993":"3332,014404","1994":"3761,0475","1995":"3943,297355","1996":"4172,208682","1997":"4494,236685","1998":"4457,309672","1999":"3964,232109","2000":"4310,139304","2001":"4143,036094","2002":"3664,97953","2003":"3724,372452","2004":"4246,385183","2005":"5075,116104","2006":"5877,191587","2007":"6845,634068","2008":"7859,904316","2009":"7299,886119","2010":"8943,0981","2011":"10047,17641","2012":"10021,23162","2013":"10154,67122","2014":"10052,77417","2015":"8492,733544","2016":"8156,590738","Country Name":"Latin America & Caribbean","Country Code":"LCN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"271,0561528","1986":"287,3746814","1987":"304,6018816","1988":"303,8527008","1989":"306,9907759","1990":"307,6786036","1991":"306,6098281","1992":"262,4794125","1993":"258,9276604","1994":"235,1451705","1995":"260,81825","1996":"280,7094593","1997":"289,6225178","1998":"284,0011413","1999":"280,1832331","2000":"309,9631717","2001":"287,6225438","2002":"302,668347","2003":"334,0258923","2004":"374,1523255","2005":"427,2983816","2006":"488,0415549","2007":"580,2359766","2008":"704,8066449","2009":"704,3832867","2010":"777,3871006","2011":"863,072041","2012":"894,7982602","2013":"946,7258037","2014":"1002,48533","2015":"971,1153341","2016":"960,0742711","Country Name":"Least developed countries: UN classification","Country Code":"LDC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"319,5989255","1981":"300,4492303","1982":"306,6543374","1983":"279,1509958","1984":"250,2468744","1985":"253,0429014","1986":"279,9761654","1987":"284,7015633","1988":"299,2586001","1989":"288,2280823","1990":"298,3206886","1991":"296,2090538","1992":"254,4888334","1993":"246,3770113","1994":"202,0288007","1995":"226,5790032","1996":"245,793197","1997":"247,3590907","1998":"243,4835919","1999":"237,291629","2000":"266,5891328","2001":"234,20173","2002":"246,0276433","2003":"262,7777854","2004":"291,323282","2005":"327,3206076","2006":"353,3552958","2007":"410,0263257","2008":"480,6615751","2009":"497,5484592","2010":"517,8028102","2011":"568,6102913","2012":"595,535809","2013":"624,7519405","2014":"656,1662413","2015":"625,6173857","2016":"615,0728017","Country Name":"Low income","Country Code":"LIC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"4236,930668","1971":"4827,792883","1972":"5640,464314","1973":"7354,102368","1974":"8441,047842","1975":"10514,99996","1976":"11389,02779","1977":"12418,01458","1978":"17503,33213","1979":"19773,67352","1980":"20671,99859","1981":"19511,08491","1982":"19690,37645","1983":"19579,08126","1984":"18607,87662","1985":"19410,75671","1986":"28315,83954","1987":"37869,33845","1988":"41351,0472","1989":"39426,9341","1990":"49447,46372","1991":"50987,77045","1992":"55300,46816","1993":"55921,13686","1994":"64156,70106","1995":"78761,7616","1996":"79937,21476","1997":"72190,79059","1998":"76641,0552","1999":"81116,43917","2000":"74624,55996","2001":"74005,01045","2002":"79035,53479","2003":"89469,75087","2004":"99848,61504","2005":"104994,0183","2006":"113983,1678","2007":"130267,2433","2008":"142973,8309","2009":"125945,0096","2010":"141165,0829","2011":"158283,0763","2012":"149295,646","2013":"173528,1505","2014":"179478,5848","2015":"","2016":"","Country Name":"Liechtenstein","Country Code":"LIE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"142,4690733","1961":"142,0463937","1962":"137,3318375","1963":"117,2436467","1964":"120,1272952","1965":"152,1246263","1966":"153,11396","1967":"158,8878938","1968":"150,2121863","1969":"160,4265604","1970":"183,5121135","1971":"186,7067455","1972":"198,5799198","1973":"219,6642732","1974":"269,0896165","1975":"280,9201353","1976":"261,8152553","1977":"294,3989085","1978":"192,6133796","1979":"232,4911161","1980":"272,9112294","1981":"297,4233283","1982":"315,8959338","1983":"336,9133126","1984":"387,8248632","1985":"377,6426614","1986":"398,2596881","1987":"408,9703849","1988":"420,5611753","1989":"414,8962463","1990":"470,3449569","1991":"520,0718006","1992":"553,6984499","1993":"583,1836437","1994":"654,1762064","1995":"720,9083524","1996":"763,192662","1997":"823,6595472","1998":"857,2576851","1999":"844,8266706","2000":"875,412178","2001":"837,6990787","2002":"873,1472436","2003":"989,4547732","2004":"1074,606092","2005":"1259,807591","2006":"1448,76101","2007":"1644,816372","2008":"2054,489192","2009":"2106,681584","2010":"2819,511161","2011":"3220,992615","2012":"3350,521375","2013":"3610,289374","2014":"3820,540994","2015":"3844,89123","2016":"3835,394817","Country Name":"Sri Lanka","Country Code":"LKA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"128,398549","1966":"113,7744945","1967":"118,5284327","1968":"124,094972","1969":"135,3172819","1970":"145,4072584","1971":"147,8081691","1972":"153,4025998","1973":"178,5765763","1974":"224,0525032","1975":"242,9356791","1976":"257,2478917","1977":"287,7309218","1978":"314,4918616","1979":"349,6141194","1980":"424,0349289","1981":"437,2168756","1982":"430,7558034","1983":"410,8721581","1984":"399,6440292","1985":"410,6866584","1986":"418,1642208","1987":"449,1248063","1988":"457,4749147","1989":"453,8650838","1990":"474,7281214","1991":"447,1853132","1992":"456,5937514","1993":"452,7705338","1994":"482,1808941","1995":"531,2633797","1996":"572,3890782","1997":"580,3062856","1998":"515,3213205","1999":"549,0421501","2000":"570,979543","2001":"566,4238161","2002":"597,9983104","2003":"673,9359037","2004":"757,8607268","2005":"858,4626762","2006":"1004,224862","2007":"1216,548349","2008":"1346,664903","2009":"1358,292","2010":"1690,438872","2011":"1882,938227","2012":"1944,648155","2013":"1998,736617","2014":"2072,763831","2015":"2031,866444","2016":"2075,14175","Country Name":"Lower middle income","Country Code":"LMC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"141,6402882","1961":"134,7813326","1962":"138,3572567","1963":"145,4784964","1964":"158,0065085","1965":"170,7748684","1966":"172,7294837","1967":"173,207726","1968":"178,9451121","1969":"195,3373979","1970":"208,8050628","1971":"220,0248581","1972":"240,3329957","1973":"297,1024993","1974":"371,5285229","1975":"402,4535077","1976":"426,7978203","1977":"470,8897742","1978":"500,8748312","1979":"583,638179","1980":"667,8532956","1981":"703,9816899","1982":"685,7943613","1983":"659,7496338","1984":"656,4654057","1985":"677,9429159","1986":"694,9665717","1987":"700,3466336","1988":"742,3585684","1989":"773,5048593","1990":"853,2970434","1991":"893,4429492","1992":"867,4765107","1993":"908,6249128","1994":"968,8647138","1995":"1066,261051","1996":"1143,790279","1997":"1190,991302","1998":"1136,714065","1999":"1093,308398","2000":"1176,746526","2001":"1170,895895","2002":"1177,574264","2003":"1312,896436","2004":"1536,315382","2005":"1806,23558","2006":"2117,59921","2007":"2592,322324","2008":"3073,486404","2009":"2962,932427","2010":"3574,057156","2011":"4169,553391","2012":"4375,093201","2013":"4583,844988","2014":"4681,736638","2015":"4386,288701","2016":"4334,007644","Country Name":"Low & middle income","Country Code":"LMY","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"40,6055353","1961":"41,20121369","1962":"47,45022254","1963":"52,3443123","1964":"56,71294337","1965":"58,77856641","1966":"59,54474769","1967":"60,99854123","1968":"61,97209163","1969":"65,1835009","1970":"66,53949492","1971":"72,53249117","1972":"75,17683253","1973":"110,2417192","1974":"134,2221287","1975":"129,9808487","1976":"125,1599688","1977":"159,652649","1978":"214,3876695","1979":"227,2663325","1980":"329,4064935","1981":"323,1311048","1982":"253,2020222","1983":"274,169492","1984":"231,0052214","1985":"182,4672962","1986":"212,5949474","1987":"264,0350126","1988":"303,4256081","1989":"314,3388169","1990":"371,84424","1991":"430,9096775","1992":"498,484481","1993":"491,4205424","1994":"506,9977797","1995":"568,8163773","1996":"529,3669633","1997":"551,2410622","1998":"506,9946023","1999":"493,2493736","2000":"474,8197876","2001":"437,8190184","2002":"407,8093905","2003":"603,636279","2004":"781,5145936","2005":"862,9463118","2006":"915,7757504","2007":"918,4327017","2008":"934,4208563","2009":"923,1360931","2010":"1173,260212","2011":"1352,384303","2012":"1281,50016","2013":"1196,01335","2014":"1174,839214","2015":"1073,828093","2016":"998,1343716","Country Name":"Lesotho","Country Code":"LSO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"155,5331847","1961":"143,3554823","1962":"148,477059","1963":"157,3043415","1964":"169,798884","1965":"185,2827667","1966":"200,8820277","1967":"198,264047","1968":"197,9803937","1969":"216,1467909","1970":"239,902797","1971":"260,9863117","1972":"293,1117343","1973":"364,788613","1974":"421,4444759","1975":"455,150895","1976":"488,7358937","1977":"558,9897844","1978":"574,0786739","1979":"676,1369711","1980":"755,8823419","1981":"790,2571276","1982":"796,5176261","1983":"726,1685392","1984":"753,9796729","1985":"794,3584758","1986":"832,2840647","1987":"863,6914765","1988":"936,6842771","1989":"1045,995406","1990":"1096,507891","1991":"1191,093589","1992":"1099,226168","1993":"1127,100834","1994":"1277,186627","1995":"1551,789086","1996":"1684,979864","1997":"1746,359648","1998":"1666,174637","1999":"1526,161638","2000":"1664,650429","2001":"1708,193987","2002":"1797,276054","2003":"2035,985998","2004":"2431,360183","2005":"2914,214444","2006":"3494,886953","2007":"4374,499333","2008":"5404,931182","2009":"5191,877256","2010":"6194,903862","2011":"7501,298523","2012":"7965,669246","2013":"8526,591957","2014":"8811,362469","2015":"8200,776001","2016":"8144,64578","Country Name":"Late-demographic dividend","Country Code":"LTE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"2168,796099","1996":"2328,153808","1997":"2830,737533","1998":"3166,895648","1999":"3113,546428","2000":"3297,354701","2001":"3530,147337","2002":"4146,987928","2003":"5505,535669","2004":"6706,966998","2005":"7863,162009","2006":"9240,642548","2007":"12297,91535","2008":"14961,56818","2009":"11837,39103","2010":"11984,86857","2011":"14357,73679","2012":"14341,08306","2013":"15712,82376","2014":"16554,97139","2015":"14252,42853","2016":"14879,6803","Country Name":"Lithuania","Country Code":"LTU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"2242,015817","1961":"2222,366366","1962":"2311,798849","1963":"2441,038555","1964":"2755,633117","1965":"2780,092719","1966":"2900,433218","1967":"2909,660629","1968":"3175,367369","1969":"3658,900683","1970":"4449,540387","1971":"4591,747503","1972":"5680,129895","1973":"7709,729387","1974":"9282,808109","1975":"9008,02789","1976":"9825,238266","1977":"10855,98186","1978":"13493,85258","1979":"15740,2875","1980":"17113,84225","1981":"14324,89197","1982":"13034,81166","1983":"12810,21883","1984":"12554,41718","1985":"12921,95842","1986":"18789,65708","1987":"23234,56658","1988":"26108,34396","1989":"27556,36359","1990":"34645,14324","1991":"37007,43875","1992":"40965,74432","1993":"41479,0872","1994":"45481,8922","1995":"52831,25237","1996":"52571,93499","1997":"47042,34711","1998":"47584,46439","1999":"51654,4028","2000":"48735,99549","2001":"48179,42085","2002":"52930,64115","2003":"65445,88503","2004":"75716,35108","2005":"80289,69641","2006":"89739,7117","2007":"106018,4928","2008":"114293,8433","2009":"103198,6693","2010":"104965,3061","2011":"115761,5077","2012":"106749,0136","2013":"113751,8005","2014":"119172,7418","2015":"101909,8223","2016":"102831,3215","Country Name":"Luxembourg","Country Code":"LUX","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"2329,270854","1996":"2429,591085","1997":"2682,316453","1998":"2977,148772","1999":"3151,325802","2000":"3352,731296","2001":"3572,80513","2002":"4132,349207","2003":"5134,905694","2004":"6351,080125","2005":"7558,742006","2006":"9667,9757","2007":"14044,01589","2008":"16348,53121","2009":"12219,37379","2010":"11326,21947","2011":"13702,68947","2012":"13822,80559","2013":"15032,22924","2014":"15725,01374","2015":"13666,58336","2016":"14118,06391","Country Name":"Latvia","Country Code":"LVA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"4499,887071","1983":"4296,932771","1984":"4751,216892","1985":"4756,409365","1986":"5132,276543","1987":"6297,127475","1988":"7071,973495","1989":"8060,218228","1990":"9364,909314","1991":"10558,21784","1992":"13460,88413","1993":"15189,98072","1994":"16578,06184","1995":"18139,19623","1996":"18097,40061","1997":"17957,94638","1998":"16451,33864","1999":"15505,27875","2000":"15702,85553","2001":"15547,87353","2002":"16312,63772","2003":"17809,59815","2004":"22453,19235","2005":"25058,53593","2006":"29979,85447","2007":"36402,56051","2008":"40667,88423","2009":"40881,38064","2010":"52374,79445","2011":"66813,34974","2012":"76496,36619","2013":"89524,84436","2014":"94004,38983","2015":"75573,48071","2016":"73186,96014","Country Name":"Macao SAR, China","Country Code":"MAC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"St. Martin (French part)","Country Code":"MAF","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"164,800779","1961":"158,9240913","1962":"181,1837031","1963":"196,5341123","1964":"201,2693656","1965":"206,4651522","1966":"196,3422037","1967":"202,9008861","1968":"212,810685","1969":"232,1985787","1970":"246,0880428","1971":"265,2671534","1972":"302,5983944","1973":"364,6223686","1974":"438,9164085","1975":"502,5448329","1976":"523,837337","1977":"589,7001079","1978":"689,3818559","1979":"808,5414825","1980":"1077,242942","1981":"860,4683258","1982":"835,1401895","1983":"748,8667871","1984":"667,3331806","1985":"659,8335018","1986":"838,4335711","1987":"918,6288626","1988":"1063,760775","1989":"1068,325714","1990":"1202,567531","1991":"1263,06008","1992":"1295,422632","1993":"1195,595322","1994":"1322,8704","1995":"1428,066182","1996":"1556,786387","1997":"1393,224149","1998":"1469,031945","1999":"1444,989055","2000":"1332,382358","2001":"1336,775376","2002":"1413,757176","2003":"1721,973863","2004":"1948,812275","2005":"2013,755559","2006":"2191,478567","2007":"2494,353552","2008":"2884,94776","2009":"2861,554005","2010":"2834,20472","2011":"3039,916016","2012":"2904,746728","2013":"3111,762887","2014":"3154,513484","2015":"2847,285569","2016":"2832,429777","Country Name":"Morocco","Country Code":"MAR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"12479,72526","1971":"13813,3005","1972":"16733,62161","1973":"21422,84116","1974":"22707,45604","1975":"28254,27607","1976":"28810,87301","1977":"31432,86944","1978":"38353,80593","1979":"45838,16228","1980":"51528,54723","1981":"44366,29456","1982":"41385,35591","1983":"38887,76583","1984":"36381,6974","1985":"37553,35795","1986":"52174,84206","1987":"63043,17823","1988":"68434,22839","1989":"68576,58472","1990":"84286,69635","1991":"83732,70145","1992":"91654,11901","1993":"85421,72583","1994":"89404,07332","1995":"101993,1224","1996":"101328,7946","1997":"90882,92188","1998":"93093,25854","1999":"91383,94049","2000":"82534,87377","2001":"82552,56745","2002":"89061,05067","2003":"108978,4897","2004":"123382,0149","2005":"126655,5981","2006":"135535,0024","2007":"170156,6944","2008":"192989,1895","2009":"152111,598","2010":"144246,3688","2011":"162009,8778","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Monaco","Country Code":"MCO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"476,9873795","1996":"462,1720076","1997":"528,177763","1998":"448,8413622","1999":"321,0267965","2000":"354,0037319","2001":"407,7302432","2002":"458,6778168","2003":"548,2896867","2004":"720,9409321","2005":"831,2052862","2006":"950,6482044","2007":"1230,434685","2008":"1695,972811","2009":"1525,526119","2010":"1631,535832","2011":"1970,571373","2012":"2046,536787","2013":"2243,979662","2014":"2244,763762","2015":"1832,499052","2016":"1900,201479","Country Name":"Moldova","Country Code":"MDA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"131,993036","1961":"133,8475815","1962":"138,1198491","1963":"138,4071657","1964":"142,6593399","1965":"144,484655","1966":"152,1078201","1967":"157,4763871","1968":"165,4784551","1969":"165,011573","1970":"169,0705601","1971":"177,49841","1972":"193,1285548","1973":"231,4361855","1974":"261,0353414","1975":"302,1494676","1976":"280,6790389","1977":"294,9339882","1978":"324,3844957","1979":"408,9374277","1980":"463,731466","1981":"400,7056031","1982":"381,8658013","1983":"369,4728714","1984":"300,5340906","1985":"283,9858034","1986":"314,7460511","1987":"240,9554524","1988":"223,0112764","1989":"221,682033","1990":"265,6761189","1991":"222,1537443","1992":"245,8643162","1993":"265,9345074","1994":"227,8369055","1995":"234,4940582","1996":"287,3565596","1997":"247,1294102","1998":"252,4652058","1999":"243,2527515","2000":"245,9390659","2001":"278,5557032","2002":"262,2859481","2003":"316,7998965","2004":"245,1235876","2005":"274,8197023","2006":"292,1507443","2007":"377,8482928","2008":"470,733254","2009":"415,6893226","2010":"412,7309341","2011":"454,963464","2012":"443,9061001","2013":"461,7230722","2014":"452,4631926","2015":"401,8575951","2016":"401,3188701","Country Name":"Madagascar","Country Code":"MDG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"268,1035209","1981":"273,1659313","1982":"282,0419145","1983":"327,9150538","1984":"598,5337551","1985":"670,5175128","1986":"722,6739964","1987":"695,4814816","1988":"803,3469679","1989":"875,0682067","1990":"986,646813","1991":"1076,952831","1992":"1217,322045","1993":"1331,928274","1994":"1452,589319","1995":"1564,662569","1996":"1719,016519","1997":"1925,089403","1998":"1992,975637","1999":"2104,427691","2000":"2182,997011","2001":"2980,067598","2002":"3020,307239","2003":"3432,247841","2004":"3853,333408","2005":"3488,493769","2006":"4428,522898","2007":"5002,862285","2008":"5828,621374","2009":"5970,16059","2010":"6330,79498","2011":"6497,550443","2012":"6541,070465","2013":"7112,33575","2014":"7716,204015","2015":"8395,785198","2016":"8601,632488","Country Name":"Maldives","Country Code":"MDV","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"247,3650618","1969":"268,5171311","1970":"291,4879242","1971":"327,6491859","1972":"388,0852897","1973":"509,0036589","1974":"904,9927851","1975":"961,8839385","1976":"1162,225382","1977":"1310,339581","1978":"1351,144797","1979":"1711,90611","1980":"2150,384385","1981":"2151,385112","1982":"2069,081893","1983":"2031,813363","1984":"1994,306346","1985":"1958,538613","1986":"1938,327157","1987":"1740,1781","1988":"1676,131253","1989":"1680,8642","1990":"2127,546548","1991":"2076,757456","1992":"2222,21638","1993":"2186,032137","1994":"2226,571564","1995":"2468,99064","1996":"2738,610281","1997":"2784,719464","1998":"2653,544563","1999":"2787,296728","2000":"3049,618085","2001":"3003,453331","2002":"2936,281032","2003":"3245,761013","2004":"3697,425576","2005":"4366,550494","2006":"5006,134326","2007":"5800,93976","2008":"7094,53171","2009":"6189,336927","2010":"7075,594877","2011":"8299,195131","2012":"8689,334404","2013":"8642,947677","2014":"8436,965314","2015":"7350,734343","2016":"7124,688573","Country Name":"Middle East & North Africa","Country Code":"MEA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"342,0162858","1961":"359,2909258","1962":"374,4455171","1963":"403,8241407","1964":"463,8963069","1965":"489,2026749","1966":"528,9433375","1967":"559,908945","1968":"600,5567266","1969":"644,8533769","1970":"683,1021901","1971":"729,74332","1972":"814,3407663","1973":"964,9220948","1974":"1218,120581","1975":"1445,712432","1976":"1421,56765","1977":"1271,655281","1978":"1552,365938","1979":"1987,017317","1980":"2802,110517","1981":"3522,683309","1982":"2392,765705","1983":"2006,385943","1984":"2317,639947","1985":"2384,584027","1986":"1639,850882","1987":"1742,339898","1988":"2231,183287","1989":"2664,069946","1990":"3077,745071","1991":"3611,444014","1992":"4093,393831","1993":"5562,475854","1994":"5710,055487","1995":"3655,597592","1996":"4153,147901","1997":"4939,823744","1998":"5079,972214","1999":"5777,231681","2000":"6720,902113","2001":"7031,378864","2002":"7106,082019","2003":"6751,998987","2004":"7199,059665","2005":"7986,798439","2006":"8767,920258","2007":"9330,341687","2008":"9689,052887","2009":"7748,123301","2010":"8959,581416","2011":"9834,472689","2012":"9820,532572","2013":"10298,86766","2014":"10452,27766","2015":"9143,128494","2016":"8201,306253","Country Name":"Mexico","Country Code":"MEX","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"972,6272223","1982":"1047,644764","1983":"1196,520692","1984":"1234,758349","1985":"1144,679519","1986":"1392,622625","1987":"1494,152255","1988":"1604,248462","1989":"1588,990265","1990":"1659,182206","1991":"1702,052604","1992":"1844,201871","1993":"1987,31218","1994":"2136,846268","1995":"2356,757816","1996":"2156,728468","1997":"2056,200186","1998":"2093,444391","1999":"2073,367384","2000":"2126,91386","2001":"2206,697584","2002":"2391,485486","2003":"2434,714867","2004":"2517,694051","2005":"2646,133897","2006":"2758,489189","2007":"2893,369359","2008":"2928,130147","2009":"2917,262997","2010":"3142,609442","2011":"3286,416581","2012":"3513,962364","2013":"3617,752354","2014":"3461,645053","2015":"3385,904065","2016":"3448,535786","Country Name":"Marshall Islands","Country Code":"MHL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"146,0669392","1961":"138,827152","1962":"142,1940056","1963":"148,2910576","1964":"163,6107016","1965":"176,2563299","1966":"177,8215529","1967":"178,8795057","1968":"184,9666073","1969":"201,9164295","1970":"216,2386066","1971":"227,7215524","1972":"248,8767127","1973":"308,3644578","1974":"386,6926198","1975":"418,4863282","1976":"445,1932398","1977":"490,979372","1978":"521,3986448","1979":"609,3497049","1980":"699,6224981","1981":"740,0111936","1982":"720,0153561","1983":"693,9134639","1984":"692,5704321","1985":"715,7938468","1986":"732,4971158","1987":"738,1820244","1988":"782,8962323","1989":"817,8604741","1990":"903,9327288","1991":"948,1266163","1992":"923,599823","1993":"969,6178124","1994":"1039,216712","1995":"1144,296926","1996":"1228,117273","1997":"1280,199741","1998":"1222,823455","1999":"1176,601337","2000":"1265,878091","2001":"1263,640602","2002":"1272,008169","2003":"1421,644249","2004":"1666,982598","2005":"1962,660489","2006":"2305,757559","2007":"2827,700659","2008":"3356,956416","2009":"3235,701169","2010":"3913,22049","2011":"4573,469083","2012":"4803,85864","2013":"5039,635738","2014":"5152,034291","2015":"4831,532381","2016":"4781,420377","Country Name":"Middle income","Country Code":"MIC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2240,139214","1991":"2355,260215","1992":"1164,914921","1993":"1285,362426","1994":"1706,244683","1995":"2243,474529","1996":"2222,813128","1997":"1868,030611","1998":"1774,822037","1999":"1814,512523","2000":"1854,145956","2001":"1815,920091","2002":"1961,203736","2003":"2408,80011","2004":"2762,561701","2005":"3037,754585","2006":"3325,613242","2007":"4036,140237","2008":"4793,292959","2009":"4543,890244","2010":"4542,904104","2011":"5064,041106","2012":"4698,689476","2013":"5211,4992","2014":"5469,217898","2015":"4834,136723","2016":"5237,14767","Country Name":"Macedonia","Country Code":"MKD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"48,27986548","1968":"59,46752756","1969":"57,99180012","1970":"60,47565","1971":"71,15470324","1972":"79,15748792","1973":"90,10019367","1974":"84,59764892","1975":"128,151032","1976":"142,3768854","1977":"156,402827","1978":"178,9854422","1979":"229,3402096","1980":"248,1889337","1981":"212,7326099","1982":"180,5381889","1983":"172,0320335","1984":"160,2528428","1985":"177,7599163","1986":"232,8253037","1987":"259,1339158","1988":"265,140308","1989":"262,5685977","1990":"316,8165941","1991":"314,8369994","1992":"319,191412","1993":"309,515078","1994":"222,5767979","1995":"281,7886811","1996":"282,081344","1997":"266,668047","1998":"281,3221274","1999":"322,53868","2000":"269,3483829","2001":"306,8473237","2002":"334,2024016","2003":"391,7912801","2004":"439,3572924","2005":"487,9402556","2006":"521,6425796","2007":"595,6368319","2008":"689,6784228","2009":"697,0153124","2010":"708,3707632","2011":"835,0889098","2012":"777,3476868","2013":"777,6059139","2014":"825,5729915","2015":"729,7205338","2016":"780,5071109","Country Name":"Mali","Country Code":"MLI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"828,4216803","1971":"874,0663356","1972":"975,7588009","1973":"1143,620203","1974":"1245,361225","1975":"1560,112154","1976":"1726,559448","1977":"2037,897337","1978":"2558,740255","1979":"3195,552586","1980":"3948,403126","1981":"3898,243037","1982":"3788,050632","1983":"3527,04","1984":"3332,885357","1985":"3322,421283","1986":"4194,653939","1987":"5083,669139","1988":"5814,364771","1989":"6040,609862","1990":"7191,923603","1991":"7558,277383","1992":"8220,245518","1993":"7296,310144","1994":"8000,518005","1995":"9114,358065","1996":"9397,800918","1997":"9679,882857","1998":"10183,67599","1999":"10648,9889","2000":"11039,05651","2001":"11021,78636","2002":"11843,93902","2003":"13689,98999","2004":"15109,05497","2005":"15835,34667","2006":"16671,5672","2007":"19375,5696","2008":"21928,70067","2009":"20675,58259","2010":"21087,79469","2011":"22821,8407","2012":"21930,80836","2013":"23930,18808","2014":"26180,92599","2015":"23819,4636","2016":"25058,17061","Country Name":"Malta","Country Code":"MLT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"193,1874804","2001":"138,9249275","2002":"143,7760051","2003":"219,782326","2004":"219,8156688","2005":"247,2427006","2006":"296,9007284","2007":"410,4500001","2008":"643,9513703","2009":"741,0777116","2010":"987,7365832","2011":"1186,423937","2012":"1171,508257","2013":"1168,803947","2014":"1262,893782","2015":"1194,590137","2016":"1275,017608","Country Name":"Myanmar","Country Code":"MMR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"1193,132504","1994":"1197,759578","1995":"1337,703877","1996":"1519,732759","1997":"1529,93285","1998":"1522,974294","1999":"1580,497972","2000":"1607,890245","2001":"1634,326636","2002":"1559,051733","2003":"1728,645041","2004":"1945,854198","2005":"2255,179123","2006":"2573,939569","2007":"3115,507626","2008":"3788,403802","2009":"3580,653159","2010":"4061,413671","2011":"4614,810531","2012":"4790,862173","2013":"4615,982237","2014":"4373,828063","2015":"3933,950105","2016":"","Country Name":"Middle East & North Africa (excluding high income)","Country Code":"MNA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"1627,042893","2001":"1909,583957","2002":"2106,243274","2003":"2789,10735","2004":"3380,199535","2005":"3674,617924","2006":"4383,595097","2007":"5957,145693","2008":"7325,703474","2009":"6698,079439","2010":"6682,281158","2011":"7318,742449","2012":"6586,719209","2013":"7186,429787","2014":"7378,345289","2015":"6461,192554","2016":"6701,00008","Country Name":"Montenegro","Country Code":"MNE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"1332,640563","1982":"1435,767097","1983":"1495,015749","1984":"1121,664164","1985":"1137,690354","1986":"1465,448402","1987":"1485,539626","1988":"1533,445039","1989":"1670,69287","1990":"1172,443066","1991":"1072,635835","1992":"587,3013993","1993":"339,5199868","1994":"405,9718115","1995":"631,9148653","1996":"580,9110949","1997":"505,602916","1998":"477,3497294","1999":"445,0069434","2000":"474,2133361","2001":"524,0145924","2002":"571,501883","2003":"646,0561295","2004":"797,8377432","2005":"998,8226671","2006":"1334,651896","2007":"1634,081431","2008":"2139,625631","2009":"1717,898761","2010":"2650,353659","2011":"3769,595255","2012":"4368,082248","2013":"4385,379355","2014":"4181,583321","2015":"3944,180039","2016":"3686,451698","Country Name":"Mongolia","Country Code":"MNG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"18672,83277","2003":"18376,79096","2004":"18427,42488","2005":"16644,70382","2006":"16048,50214","2007":"15761,26225","2008":"16350,05485","2009":"14279,55599","2010":"14681,02308","2011":"13628,08166","2012":"13980,41625","2013":"14434,82123","2014":"15348,46148","2015":"16819,9066","2016":"","Country Name":"Northern Mariana Islands","Country Code":"MNP","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"297,6188829","1981":"291,5253917","1982":"291,0872128","1983":"255,6884981","1984":"262,6598689","1985":"343,1994566","1986":"402,5654505","1987":"180,7958247","1988":"161,0123545","1989":"177,1997292","1990":"189,6245382","1991":"240,1242747","1992":"162,8269598","1993":"163,6143937","1994":"161,7048809","1995":"160,0176177","1996":"216,8754283","1997":"253,1096478","1998":"284,373291","1999":"301,539472","2000":"277,6486591","2001":"256,4414872","2002":"262,8840551","2003":"283,8911588","2004":"336,3318145","2005":"369,1545359","2006":"385,7567141","2007":"422,1461573","2008":"503,1277109","2009":"463,852618","2010":"419,2258149","2011":"526,5313517","2012":"566,0513873","2013":"605,9856081","2014":"623,2871141","2015":"528,3125597","2016":"382,0693304","Country Name":"Mozambique","Country Code":"MOZ","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"107,9150268","1961":"121,9696783","1962":"122,2522703","1963":"121,5762944","1964":"157,6110412","1965":"174,0960887","1966":"176,4789416","1967":"181,7203477","1968":"194,4430503","1969":"178,9259649","1970":"182,2149847","1971":"191,9356585","1972":"217,5880401","1973":"266,1606145","1974":"321,3321701","1975":"358,1858428","1976":"383,4616262","1977":"384,1278677","1978":"375,8763759","1979":"432,0871251","1980":"462,191764","1981":"473,732776","1982":"461,6351803","1983":"471,3744343","1984":"422,4385469","1985":"385,9978943","1986":"441,1599122","1987":"486,2807331","1988":"497,8557003","1989":"496,7178639","1990":"502,2317528","1991":"692,3496476","1992":"683,833774","1993":"568,2107979","1994":"581,9098343","1995":"608,1869747","1996":"601,7734654","1997":"567,2228466","1998":"539,4253598","1999":"534,7159444","2000":"477,4761024","2001":"464,229758","2002":"460,9542322","2003":"528,5806613","2004":"602,547286","2005":"697,7451989","2006":"944,1304851","2007":"1013,31028","2008":"1167,535689","2009":"1046,838051","2010":"1203,383675","2011":"1393,261593","2012":"1364,283745","2013":"1450,578038","2014":"1326,668802","2015":"1158,256469","2016":"1077,556136","Country Name":"Mauritania","Country Code":"MRT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"779,9071319","1977":"897,6704136","1978":"1092,267744","1979":"1280,392446","1980":"1176,498054","1981":"1170,05342","1982":"1091,099714","1983":"1093,009079","1984":"1032,312731","1985":"1058,904835","1986":"1428,532921","1987":"1822,977964","1988":"2054,643747","1989":"2084,257805","1990":"2506,179312","1991":"2669,3277","1992":"2973,206977","1993":"2973,797821","1994":"3197,331024","1995":"3599,555202","1996":"3899,435192","1997":"3646,630626","1998":"3593,234081","1999":"3651,232286","2000":"3861,032414","2001":"3792,182152","2002":"3957,512906","2003":"4623,347642","2004":"5229,876738","2005":"5116,045424","2006":"5695,969327","2007":"6574,654338","2008":"8030,063005","2009":"7318,12641","2010":"8000,376432","2011":"9197,026972","2012":"9291,227619","2013":"9637,00265","2014":"10153,93822","2015":"9252,110724","2016":"9627,595785","Country Name":"Mauritius","Country Code":"MUS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"45,03408933","1961":"47,18352826","1962":"48,38765973","1963":"49,28056241","1964":"49,13441001","1965":"56,53576519","1966":"62,62444518","1967":"63,30653807","1968":"56,09236569","1969":"59,27165168","1970":"63,10547274","1971":"77,27056811","1972":"83,5631249","1973":"88,91486015","1974":"106,7102187","1975":"115,8547358","1976":"122,8864353","1977":"143,271619","1978":"163,4249423","1979":"176,7856638","1980":"200,8187573","1981":"195,6022859","1982":"181,9882484","1983":"183,6299775","1984":"175,1796248","1985":"156,8899624","1986":"155,2294352","1987":"145,696775","1988":"159,7700814","1989":"174,8498276","1990":"199,287272","1991":"228,5552393","1992":"184,9518703","1993":"212,246564","1994":"120,6292554","1995":"141,0275216","1996":"225,626776","1997":"256,5280662","1998":"163,5335889","1999":"160,7988768","2000":"153,2594872","2001":"146,7615397","2002":"290,9798977","2003":"260,1052517","2004":"274,2256294","2005":"280,3673842","2006":"297,6971211","2007":"320,2227274","2008":"372,842678","2009":"420,7379657","2010":"458,8681744","2011":"512,1254051","2012":"374,5018802","2013":"332,9223039","2014":"354,7253961","2015":"362,6575444","2016":"300,7948251","Country Name":"Malawi","Country Code":"MWI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"234,9168929","1961":"225,9164441","1962":"230,2479322","1963":"279,7084079","1964":"289,0049804","1965":"310,3277629","1966":"321,0974731","1967":"317,4289184","1968":"323,4082024","1969":"347,3786592","1970":"357,6618643","1971":"383,6748013","1972":"445,3511803","1973":"661,0192698","1974":"799,9231515","1975":"764,5550632","1976":"886,2154728","1977":"1027,274198","1978":"1246,535891","1979":"1576,029369","1980":"1774,73631","1981":"1769,126939","1982":"1852,330981","1983":"2047,882636","1984":"2234,356477","1985":"2000,145978","1986":"1728,543559","1987":"1947,442371","1988":"2071,45488","1989":"2215,3645","1990":"2440,591801","1991":"2652,144224","1992":"3111,976879","1993":"3431,370186","1994":"3726,340667","1995":"4328,000018","1996":"4797,291371","1997":"4637,320481","1998":"3263,520983","1999":"3493,465229","2000":"4045,170471","2001":"3915,115046","2002":"4167,364387","2003":"4463,675893","2004":"4955,477743","2005":"5593,822995","2006":"6222,982955","2007":"7269,17114","2008":"8513,629541","2009":"7326,744435","2010":"9071,356987","2011":"10405,12062","2012":"10779,49641","2013":"10882,27842","2014":"11183,96191","2015":"9643,644683","2016":"9502,568396","Country Name":"Malaysia","Country Code":"MYS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"2942,62887","1961":"2990,766281","1962":"3153,88605","1963":"3281,351235","1964":"3478,085861","1965":"3727,140165","1966":"4040,87901","1967":"4227,761864","1968":"4575,14811","1969":"4906,852508","1970":"5140,490459","1971":"5525,142965","1972":"6017,694952","1973":"6657,814444","1974":"7222,982749","1975":"7787,748573","1976":"8627,878194","1977":"9414,663527","1978":"10441,60877","1979":"11531,25921","1980":"12454,59512","1981":"13827,11833","1982":"14242,80861","1983":"15347,14153","1984":"16809,36509","1985":"17855,70724","1986":"18651,91897","1987":"19720,68569","1988":"21224,34569","1989":"22694,96805","1990":"23696,37127","1991":"24131,30752","1992":"25021,26256","1993":"25822,08039","1994":"26988,83444","1995":"27968,72921","1996":"29189,84619","1997":"30604,98659","1998":"31761,24161","1999":"33397,98091","2000":"35242,0642","2001":"35942,43627","2002":"36794,85361","2003":"38550,0799","2004":"40948,23418","2005":"43514,08192","2006":"45849,04082","2007":"47723,72747","2008":"48232,31001","2009":"46394,38485","2010":"48289,7003","2011":"50024,8203","2012":"51560,70464","2013":"52755,77925","2014":"54187,49409","2015":"54918,08328","2016":"55927,85589","Country Name":"North America","Country Code":"NAC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"2404,416189","1981":"2184,335068","1982":"2014,538154","1983":"2134,995392","1984":"1764,477192","1985":"1407,100937","1986":"1522,089666","1987":"1854,312603","1988":"1924,062118","1989":"1873,137121","1990":"1982,325243","1991":"2055,440991","1992":"2278,046521","1993":"2063,14806","1994":"2263,400295","1995":"2381,645435","1996":"2311,96379","1997":"2332,383578","1998":"2113,442775","1999":"2055,364975","2000":"2057,995057","2001":"1834,294086","2002":"1713,047594","2003":"2482,36862","2004":"3288,257373","2005":"3573,146387","2006":"3881,209535","2007":"4202,510968","2008":"4029,065061","2009":"4153,497885","2010":"5191,583081","2011":"5600,971392","2012":"5749,404752","2013":"5488,131712","2014":"5421,343953","2015":"4737,669906","2016":"4140,461932","Country Name":"Namibia","Country Code":"NAM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"1763,475067","1966":"1756,219653","1967":"1865,665999","1968":"2165,901146","1969":"2529,89264","1970":"3203,711446","1971":"3446,952794","1972":"4031,016039","1973":"4220,1935","1974":"4865,650375","1975":"6163,380119","1976":"5957,541117","1977":"6158,946739","1978":"6152,782529","1979":"7561,192276","1980":"8443,107052","1981":"6817,832529","1982":"6208,782634","1983":"5540,234973","1984":"5249,0536","1985":"5534,631413","1986":"7634,3344","1987":"9271,735404","1988":"12665,66323","1989":"13092,26473","1990":"14800,02869","1991":"15133,16224","1992":"16261,29693","1993":"16640,80235","1994":"16037,02524","1995":"18721,05644","1996":"18257,21505","1997":"16341,58735","1998":"15387,86958","1999":"14611,8328","2000":"12579,59511","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"New Caledonia","Country Code":"NCL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"132,6521624","1961":"139,3414016","1962":"148,1921633","1963":"158,7212096","1964":"153,2662561","1965":"172,0477428","1966":"174,3640208","1967":"160,5992848","1968":"150,3875647","1969":"142,7046327","1970":"144,0903774","1971":"149,5470627","1972":"155,7817761","1973":"193,0607806","1974":"203,5721367","1975":"202,2621329","1976":"199,5377624","1977":"235,1988025","1978":"313,916162","1979":"362,5118996","1980":"418,8620682","1981":"352,1887256","1982":"318,0155637","1983":"276,1299894","1984":"217,435793","1985":"208,299141","1986":"267,5517063","1987":"304,890163","1988":"302,4243608","1989":"280,5468546","1990":"309,5864642","1991":"281,3964667","1992":"274,2860354","1993":"181,6903803","1994":"170,8094085","1995":"198,4528096","1996":"202,4214038","1997":"181,2955353","1998":"196,7250241","1999":"184,3464766","2000":"158,4055972","2001":"165,2507247","2002":"177,8208384","2003":"215,8050408","2004":"232,5661574","2005":"250,0383731","2006":"258,0463873","2007":"292,55962","2008":"354,8185998","2009":"341,2894618","2010":"348,151511","2011":"375,5819866","2012":"391,5155024","2013":"416,1400838","2014":"430,6046498","2015":"358,9970301","2016":"363,2269739","Country Name":"Niger","Country Code":"NER","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"92,96180015","1961":"96,98043004","1962":"104,3885334","1963":"107,5421085","1964":"113,170338","1965":"117,1902853","1966":"124,309273","1967":"99,40683273","1968":"97,20214781","1969":"121,2460377","1970":"224,107455","1971":"160,253709","1972":"209,2374936","1973":"252,2502423","1974":"402,8734797","1975":"438,3362614","1976":"556,660776","1977":"536,1150956","1978":"527,1466422","1979":"661,9842826","1980":"873,960732","1981":"809,1471723","1982":"663,4249788","1983":"446,1433411","1984":"349,7129563","1985":"345,3275643","1986":"241,4572479","1987":"273,4705815","1988":"257,2923062","1989":"260,9869968","1990":"322,8411826","1991":"280,3020315","1992":"292,361272","1993":"153,6467192","1994":"171,6697463","1995":"264,2956342","1996":"315,9670713","1997":"315,5522291","1998":"274,9873911","1999":"300,6090075","2000":"379,1193264","2001":"351,7996666","2002":"459,4572117","2003":"512,650719","2004":"648,8150852","2005":"807,8938738","2006":"1019,743286","2007":"1136,829645","2008":"1383,893354","2009":"1097,661422","2010":"2327,32067","2011":"2527,942003","2012":"2755,297787","2013":"2996,964302","2014":"3221,678128","2015":"2655,157977","2016":"2177,98517","Country Name":"Nigeria","Country Code":"NGA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"126,1366951","1961":"131,4055526","1962":"140,6217175","1963":"150,7088641","1964":"170,8059106","1965":"274,6701407","1966":"285,460204","1967":"300,0944511","1968":"308,3594164","1969":"321,5506251","1970":"323,8342756","1971":"334,2848392","1972":"345,4592015","1973":"415,8849067","1974":"560,8352847","1975":"568,6710637","1976":"640,6976642","1977":"753,1954205","1978":"698,8733558","1979":"483,9027083","1980":"673,6639992","1981":"732,4357002","1982":"717,5512272","1983":"777,6046366","1984":"858,0547122","1985":"723,5779033","1986":"760,0141401","1987":"991,8285506","1988":"662,9544558","1989":"249,8442755","1990":"243,5612606","1991":"351,3981713","1992":"413,9194976","1993":"396,797132","1994":"854,5499049","1995":"897,7158111","1996":"916,5187095","1997":"917,1288401","1998":"951,8733523","1999":"981,0204892","2000":"1016,020743","2001":"1043,600758","2002":"1010,147277","2003":"1015,565314","2004":"1091,505157","2005":"1175,116225","2006":"1240,992617","2007":"1344,301871","2008":"1518,805386","2009":"1464,497754","2010":"1526,497938","2011":"1682,957924","2012":"1792,038045","2013":"1847,198049","2014":"1975,464707","2015":"2095,966488","2016":"2151,382047","Country Name":"Nicaragua","Country Code":"NIC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1068,784587","1961":"1159,392357","1962":"1240,677894","1963":"1328,036649","1964":"1541,947365","1965":"1708,096356","1966":"1835,801424","1967":"1991,360686","1968":"2185,248659","1969":"2446,335454","1970":"2889,714799","1971":"3335,493613","1972":"4052,06603","1973":"5277,350026","1974":"6358,772384","1975":"7241,886068","1976":"7824,532711","1977":"9049,812484","1978":"11036,70732","1979":"12635,19573","1980":"13615,83707","1981":"11373,41269","1982":"10931,33842","1983":"10544,0459","1984":"9849,821967","1985":"9799,443038","1986":"13607,92719","1987":"16496,29599","1988":"17518,02876","1989":"17175,64537","1990":"21019,12567","1991":"21454,86289","1992":"23598,95076","1993":"22827,30004","1994":"24331,75402","1995":"28884,71352","1996":"28698,66602","1997":"26404,98673","1998":"27533,60679","1999":"27951,73429","2000":"25921,12794","2001":"26584,12169","2002":"28817,32321","2003":"35245,16407","2004":"39954,64222","2005":"41577,16009","2006":"44453,97119","2007":"51241,31562","2008":"56928,82048","2009":"51900,34009","2010":"50338,25483","2011":"53540,60536","2012":"49474,70561","2013":"51574,48942","2014":"52157,40687","2015":"44292,88473","2016":"45294,78","Country Name":"Netherlands","Country Code":"NLD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1441,75566","1961":"1560,324931","1962":"1667,24743","1963":"1775,582655","1964":"1937,884614","1965":"2164,468823","1966":"2317,194884","1967":"2514,043772","1968":"2662,117492","1969":"2875,235844","1970":"3306,219476","1971":"3736,348737","1972":"4413,575692","1973":"5689,588807","1974":"6811,527337","1975":"8204,451512","1976":"8927,201627","1977":"10266,12067","1978":"11462,64159","1979":"13046,53722","1980":"15772,24091","1981":"15512,5067","1982":"15224,89391","1983":"14927,51748","1984":"14989,48577","1985":"15753,55277","1986":"18883,2658","1987":"22505,89771","1988":"24207,28147","1989":"24281,09614","1990":"28242,94374","1991":"28596,933","1992":"30523,98506","1993":"27963,66522","1994":"29315,84191","1995":"34875,19739","1996":"37321,44339","1997":"36628,51742","1998":"34788,77856","1999":"36371,39579","2000":"38146,71539","2001":"38549,58934","2002":"43061,15038","2003":"50111,65445","2004":"57570,26916","2005":"66775,3944","2006":"74114,69715","2007":"85128,65759","2008":"96880,50961","2009":"80017,77681","2010":"87646,75346","2011":"100574,9861","2012":"101563,7027","2013":"102910,435","2014":"97005,49856","2015":"74505,24654","2016":"70812,47742","Country Name":"Norway","Country Code":"NOR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"50,51514045","1961":"52,04188062","1962":"55,28503689","1963":"47,09394715","1964":"46,2425117","1965":"67,37087014","1966":"81,62208929","1967":"74,40019184","1968":"66,95083825","1969":"67,05299289","1970":"72,17706561","1971":"72,09916683","1972":"81,93164703","1973":"76,15393652","1974":"93,39845199","1975":"118,2508817","1976":"106,6574596","1977":"99,26570379","1978":"112,6407628","1979":"127,087889","1980":"130,5794725","1981":"149,2282657","1982":"153,4820036","1983":"153,1933431","1984":"157,8986466","1985":"156,656353","1986":"166,7014708","1987":"169,1704562","1988":"195,0920171","1989":"192,7037175","1990":"193,4761241","1991":"203,7653978","1992":"172,0062101","1993":"180,109746","1994":"194,8890676","1995":"205,6938414","1996":"206,4330066","1997":"219,684466","1998":"212,4689465","1999":"215,9805921","2000":"231,4255004","2001":"248,6183539","2002":"246,3075621","2003":"253,7200412","2004":"287,4001056","2005":"317,089198","2006":"348,6314534","2007":"393,8843518","2008":"473,8444409","2009":"480,7200909","2010":"592,1835216","2011":"692,1166842","2012":"681,7925868","2013":"688,6172788","2014":"706,2386977","2015":"743,7653489","2016":"729,5325011","Country Name":"Nepal","Country Code":"NPL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"2028,063733","2008":"3914,956935","2009":"4416,728353","2010":"4912,599558","2011":"7233,946609","2012":"10099,422","2013":"10036,18321","2014":"9872,638314","2015":"8052,888385","2016":"7821,298918","Country Name":"Nauru","Country Code":"NRU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"2312,949992","1961":"2343,292213","1962":"2448,628633","1963":"2622,220271","1964":"2813,546976","1965":"2151,294927","1966":"2191,312542","1967":"2188,399139","1968":"1885,156152","1969":"2077,895543","1970":"","1971":"2773,323107","1972":"3294,648943","1973":"4323,196535","1974":"4610,570426","1975":"4171,76974","1976":"4373,840998","1977":"4950,588205","1978":"5936,98526","1979":"6667,816472","1980":"7467,478059","1981":"7813,887543","1982":"7656,475732","1983":"7598,106618","1984":"6713,599457","1985":"7600,72277","1986":"9427,716616","1987":"12331,29492","1988":"13758,95945","1989":"13312,38559","1990":"13663,2011","1991":"12230,07345","1992":"11792,98869","1993":"13094,19063","1994":"15280,48144","1995":"17400,42018","1996":"18794,43604","1997":"17474,02032","1998":"14738,44557","1999":"15322,08851","2000":"13641,10272","2001":"13882,85683","2002":"16874,31232","2003":"21913,70817","2004":"25420,39935","2005":"27750,89515","2006":"26670,86452","2007":"32509,73471","2008":"31287,77865","2009":"28200,94193","2010":"33691,34837","2011":"38426,55081","2012":"39970,25624","2013":"42889,88141","2014":"44503,24673","2015":"38201,89037","2016":"39426,6235","Country Name":"New Zealand","Country Code":"NZL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1358,103332","1961":"1405,491286","1962":"1497,391842","1963":"1592,291025","1964":"1717,341815","1965":"1841,155745","1966":"1997,827539","1967":"2119,910614","1968":"2275,022964","1969":"2467,250676","1970":"2677,289174","1971":"2930,202349","1972":"3360,851989","1973":"4017,515194","1974":"4452,47402","1975":"4934,859284","1976":"5299,786211","1977":"5921,221529","1978":"7045,398103","1979":"8064,296643","1980":"8871,431483","1981":"8952,930956","1982":"8743,961066","1983":"8963,920561","1984":"9306,072372","1985":"9744,677148","1986":"11722,03401","1987":"13465,81505","1988":"15077,54339","1989":"15670,02691","1990":"17507,44991","1991":"18352,91061","1992":"19553,80472","1993":"19674,84488","1994":"20839,32391","1995":"22776,57727","1996":"22802,31332","1997":"22287,05771","1998":"22355,6878","1999":"23329,94051","2000":"23659,63502","2001":"23275,07485","2002":"24115,43005","2003":"26830,12608","2004":"29656,76368","2005":"31126,9115","2006":"32576,88491","2007":"35346,18822","2008":"37121,26365","2009":"34481,87088","2010":"35889,11989","2011":"38363,45357","2012":"38044,64842","2013":"38252,27732","2014":"38738,82896","2015":"36280,54091","2016":"36741,36108","Country Name":"OECD members","Country Code":"OED","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"101,2586931","1966":"105,557345","1967":"162,323339","1968":"277,9071874","1969":"342,4750102","1970":"354,0772092","1971":"401,8977815","1972":"472,5216013","1973":"598,5617338","1974":"1954,892436","1975":"2377,09138","1976":"2760,526606","1977":"2803,382615","1978":"2653,274002","1979":"3419,281382","1980":"5181,799286","1981":"5947,236986","1982":"5855,867794","1983":"5828,050235","1984":"6164,145278","1985":"6677,380582","1986":"4691,19435","1987":"4822,12278","1988":"4997,399384","1989":"5382,717069","1990":"6448,131243","1991":"5988,83521","1992":"6278,636662","1993":"6029,169254","1994":"6013,166677","1995":"6261,719017","1996":"6830,596669","1997":"7039,577431","1998":"6254,953411","1999":"6967,059664","2000":"8601,185906","2001":"8476,610511","2002":"8629,101774","2003":"9069,810206","2004":"10129,28886","2005":"12376,97936","2006":"14408,0505","2007":"15805,13226","2008":"22075,03536","2009":"16784,34616","2010":"19280,74739","2011":"20986,00036","2012":"22134,91006","2013":"21268,7564","2014":"20458,45226","2015":"16627,36433","2016":"14982,35792","Country Name":"Oman","Country Code":"OMN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"280,8914624","1971":"326,664843","1972":"387,4678002","1973":"549,7393458","1974":"992,4115851","1975":"1085,242882","1976":"1322,548511","1977":"1460,569128","1978":"1579,94976","1979":"2008,999999","1980":"2728,280217","1981":"2680,735314","1982":"2475,32303","1983":"2281,433775","1984":"2241,58836","1985":"2075,903931","1986":"2046,194932","1987":"2365,27185","1988":"2589,829085","1989":"2645,789006","1990":"3094,183866","1991":"3118,353802","1992":"3337,888998","1993":"3120,187038","1994":"3212,709976","1995":"3618,697658","1996":"3755,993834","1997":"3847,834565","1998":"3704,792772","1999":"3913,026878","2000":"4355,718915","2001":"4251,123457","2002":"4500,521096","2003":"5469,794626","2004":"6640,15467","2005":"7878,109342","2006":"9035,957783","2007":"10775,76204","2008":"12831,72149","2009":"10740,19843","2010":"12186,30734","2011":"14720,79199","2012":"15017,67629","2013":"15316,03511","2014":"15452,42229","2015":"12555,74778","2016":"11965,56091","Country Name":"Other small states","Country Code":"OSS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"82,5472458","1961":"88,17241935","1962":"89,83771215","1963":"93,98868739","1964":"103,5360362","1965":"115,7377622","1966":"123,902569","1967":"138,1543862","1968":"146,9792196","1969":"152,6805029","1970":"172,6107392","1971":"177,6271771","1972":"151,7667702","1973":"100,3002884","1974":"135,2384426","1975":"169,7912357","1976":"193,8360824","1977":"213,2045555","1978":"243,460837","1979":"260,7990451","1980":"303,4489557","1981":"348,2239075","1982":"368,2144528","1983":"332,4759569","1984":"349,1223981","1985":"337,726019","1986":"334,8475502","1987":"339,0848412","1988":"379,13579","1989":"384,086429","1990":"371,5726219","1991":"410,4740209","1992":"427,5727635","1993":"440,9293265","1994":"433,2885836","1995":"493,661508","1996":"502,7867074","1997":"483,6529366","1998":"470,2489295","1999":"465,0757661","2000":"533,8624114","2001":"510,6568157","2002":"499,8600033","2003":"563,594342","2004":"649,8048233","2005":"711,4699463","2006":"873,7702727","2007":"950,4327931","2008":"1039,312088","2009":"1006,603999","2010":"1040,142268","2011":"1226,215314","2012":"1261,208967","2013":"1272,441061","2014":"1316,980966","2015":"1431,244865","2016":"1468,192946","Country Name":"Pakistan","Country Code":"PAK","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"474,1258217","1961":"513,2890616","1962":"542,3615633","1963":"583,4445276","1964":"608,1266905","1965":"648,4622242","1966":"686,0911919","1967":"742,1273799","1968":"775,6495804","1969":"827,1744468","1970":"889,2300989","1971":"974,9232782","1972":"1040,786362","1973":"1157,590476","1974":"1287,911752","1975":"1395,42581","1976":"1444,696568","1977":"1489,894335","1978":"1721,694229","1979":"1918,076369","1980":"2332,021482","1981":"2577,617944","1982":"2782,161002","1983":"2791,671155","1984":"2848,950175","1985":"2947,590611","1986":"2996,523014","1987":"2945,07659","1988":"2492,079094","1989":"2446,163181","1990":"2603,781289","1991":"2803,871581","1992":"3122,003689","1993":"3339,838168","1994":"3489,065313","1995":"3494,436934","1996":"3529,78532","1997":"3741,242759","1998":"3974,650657","1999":"4082,614583","2000":"4060,299035","2001":"4046,372833","2002":"4126,140671","2003":"4267,13578","2004":"4591,892776","2005":"4916,54886","2006":"5348,518399","2007":"6068,086607","2008":"6973,92804","2009":"7429,628274","2010":"7937,259931","2011":"9270,723171","2012":"10589,82713","2013":"11685,97983","2014":"12593,73704","2015":"13134,04367","2016":"13680,23601","Country Name":"Panama","Country Code":"PAN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"255,6183698","1961":"280,1533375","1962":"308,5978735","1963":"328,5083821","1964":"386,216477","1965":"445,1243163","1966":"511,9706338","1967":"505,1467462","1968":"454,1875372","1969":"494,5838639","1970":"557,0935265","1971":"604,887642","1972":"653,0061525","1973":"760,980742","1974":"934,3079462","1975":"1108,156436","1976":"1019,680967","1977":"910,2853279","1978":"757,7294725","1979":"943,1428303","1980":"1044,639888","1981":"1216,753014","1982":"1195,754399","1983":"929,5399992","1984":"921,4682401","1985":"846,7057699","1986":"762,354475","1987":"1012,252687","1988":"738,3780955","1989":"1052,913452","1990":"1210,005978","1991":"1555,980937","1992":"1589,441715","1993":"1516,466712","1994":"1900,224535","1995":"2217,784681","1996":"2260,637733","1997":"2342,06999","1998":"2202,461226","1999":"1963,410567","2000":"1996,719689","2001":"1981,243653","2002":"2059,192958","2003":"2180,250997","2004":"2448,143899","2005":"2754,780029","2006":"3171,498056","2007":"3611,21047","2008":"4208,878011","2009":"4166,093387","2010":"5022,493191","2011":"5771,565878","2012":"6387,785281","2013":"6583,116248","2014":"6491,05245","2015":"6030,343259","2016":"6045,650077","Country Name":"Peru","Country Code":"PER","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"254,4270713","1961":"267,1477741","1962":"156,6821543","1963":"168,0169674","1964":"175,9311979","1965":"187,1130075","1966":"199,9355679","1967":"207,4273438","1968":"224,6232985","1969":"241,702003","1970":"186,7687599","1971":"201,0337488","1972":"211,4010317","1973":"258,3627432","1974":"343,2416776","1975":"360,6713782","1976":"402,6632806","1977":"450,1249996","1978":"506,0851717","1979":"596,3952749","1980":"684,6543822","1981":"731,7250081","1982":"741,7871342","1983":"645,4602926","1984":"594,0255763","1985":"565,7634673","1986":"535,2358351","1987":"579,2011114","1988":"643,8152509","1989":"704,9820782","1990":"715,3105853","1991":"715,1419199","1992":"814,0752868","1993":"815,7221676","1994":"939,1559312","1995":"1061,347868","1996":"1159,589292","1997":"1127,003716","1998":"966,708438","1999":"1087,237365","2000":"1038,910977","2001":"957,2807441","2002":"1000,068135","2003":"1010,553196","2004":"1079,03715","2005":"1194,697155","2006":"1391,772325","2007":"1672,685433","2008":"1919,466195","2009":"1825,341521","2010":"2129,499242","2011":"2352,518156","2012":"2581,818554","2013":"2760,289146","2014":"2842,938353","2015":"2878,33837","2016":"2951,071929","Country Name":"Philippines","Country Code":"PHL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"5095,970308","1991":"5419,090087","1992":"5187,555052","1993":"4644,902705","1994":"4970,070213","1995":"5520,025503","1996":"6116,273812","1997":"6246,923798","1998":"6333,405312","1999":"6011,176439","2000":"7786,179922","2001":"8245,722531","2002":"8352,917135","2003":"8116,751269","2004":"8851,747122","2005":"9710,640008","2006":"9729,162502","2007":"9743,487771","2008":"9793,355745","2009":"9163,307443","2010":"8978,993649","2011":"9704,35458","2012":"10318,91319","2013":"10932,12237","2014":"11894,37755","2015":"13500,5637","2016":"13626,00567","Country Name":"Palau","Country Code":"PLW","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"114,636032","1961":"119,316939","1962":"124,6888138","1963":"128,9990429","1964":"139,6452719","1965":"153,9032989","1966":"170,7971238","1967":"188,3630032","1968":"201,847992","1969":"223,6666994","1970":"255,3967011","1971":"276,8295839","1972":"322,8759942","1973":"475,9359465","1974":"523,6326971","1975":"471,3403919","1976":"511,2219412","1977":"539,785109","1978":"623,3364259","1979":"713,7768393","1980":"770,4656712","1981":"735,0569773","1982":"677,6681298","1983":"712,9910052","1984":"690,9848221","1985":"638,6171017","1986":"679,7059451","1987":"786,4138776","1988":"891,5438456","1989":"843,2600915","1990":"746,5073779","1991":"856,2844885","1992":"965,2661878","1993":"1069,551098","1994":"1153,448535","1995":"947,2521533","1996":"1026,490809","1997":"957,6510705","1998":"716,1785447","1999":"640,286085","2000":"631,9468526","2001":"539,0041528","2002":"511,6650773","2003":"588,3582595","2004":"637,3616215","2005":"770,5773486","2006":"854,3469021","2007":"956,6608952","2008":"1178,702469","2009":"1166,66337","2010":"1366,879112","2011":"1770,867119","2012":"2071,318741","2013":"2029,953604","2014":"2182,716565","2015":"","2016":"","Country Name":"Papua New Guinea","Country Code":"PNG","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"1731,209531","1991":"2235,541089","1992":"2459,020685","1993":"2497,195241","1994":"2874,825311","1995":"3682,791215","1996":"4140,983541","1997":"4116,926243","1998":"4510,413117","1999":"4389,976415","2000":"4492,727604","2001":"4981,198619","2002":"5196,932921","2003":"5693,52416","2004":"6681,178818","2005":"8021,251569","2006":"9040,770206","2007":"11260,31852","2008":"14001,44688","2009":"11527,59323","2010":"12599,52486","2011":"13893,18768","2012":"13145,10484","2013":"13780,54911","2014":"14341,6705","2015":"12565,9876","2016":"12372,41706","Country Name":"Poland","Country Code":"POL","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"55,37003532","1961":"55,93039774","1962":"59,72728347","1963":"68,08478074","1964":"61,79228031","1965":"68,01999146","1966":"72,95589222","1967":"67,08783583","1968":"68,94369063","1969":"76,39321033","1970":"91,07547231","1971":"86,75351839","1972":"97,92168731","1973":"116,9176097","1974":"162,7184187","1975":"179,784428","1976":"205,5018114","1977":"221,1773952","1978":"238,6128998","1979":"292,9321011","1980":"348,1749116","1981":"304,5250745","1982":"286,4471208","1983":"238,1047556","1984":"228,8655645","1985":"231,4472096","1986":"232,2754507","1987":"258,0337895","1988":"258,4378454","1989":"256,5227572","1990":"401,5447548","1991":"388,7737032","1992":"344,3944979","1993":"303,6895183","1994":"270,0664354","1995":"321,3285853","1996":"348,4510849","1997":"353,9014741","1998":"340,7964678","1999":"336,6894579","2000":"382,1614781","2001":"352,1240285","2002":"404,0754068","2003":"453,8188228","2004":"534,1355541","2005":"642,9702167","2006":"779,9945704","2007":"927,8713845","2008":"1150,58626","2009":"1017,574209","2010":"1359,964472","2011":"1527,562896","2012":"1630,96372","2013":"1731,064103","2014":"1796,558788","2015":"1517,467971","2016":"1358,75149","Country Name":"Pre-demographic dividend","Country Code":"PRE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"717,5148431","1961":"777,2150274","1962":"854,744805","1963":"931,751666","1964":"1006,434446","1965":"1110,832691","1966":"1207,811824","1967":"1335,274112","1968":"1480,693176","1969":"1661,866885","1970":"1852,354673","1971":"2044,319906","1972":"2246,476714","1973":"2432,414219","1974":"2614,500941","1975":"2738,243153","1976":"2946,461953","1977":"3208,771356","1978":"3567,752629","1979":"4024,50942","1980":"4502,838428","1981":"4920,722937","1982":"5115,008514","1983":"5217,722729","1984":"5730,117009","1985":"6008,054486","1986":"6443,482051","1987":"6937,548121","1988":"7535,74227","1989":"8063,212243","1990":"8652,507492","1991":"9064,018517","1992":"9659,3389","1993":"10212,27676","1994":"10876,41882","1995":"11579,185","1996":"12173,16369","1997":"12817,64496","1998":"14304,40737","1999":"15220,97924","2000":"16192,1296","2001":"18243,71775","2002":"18972,76853","2003":"19820,20729","2004":"20988,99233","2005":"21959,32271","2006":"22935,94115","2007":"23664,88235","2008":"24898,33884","2009":"25768,73605","2010":"26435,74019","2011":"27278,87489","2012":"27811,54815","2013":"28703,74835","2014":"","2015":"","2016":"","Country Name":"Puerto Rico","Country Code":"PRI","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"North Korea","Country Code":"PRK","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"360,4992985","1961":"382,729947","1962":"407,8528436","1963":"432,5117296","1964":"468,7810816","1965":"520,9106594","1966":"575,0076807","1967":"646,8227201","1968":"719,0804919","1969":"795,7593714","1970":"934,17398","1971":"1064,642774","1972":"1302,394334","1973":"1748,161417","1974":"2000,614788","1975":"2127,847009","1976":"2173,49813","1977":"2267,594372","1978":"2457,554963","1979":"2755,89577","1980":"3368,69837","1981":"3246,294619","1982":"3080,252695","1983":"2735,760315","1984":"2522,995844","1985":"2705,459217","1986":"3862,328626","1987":"4804,338875","1988":"5624,25058","1989":"6056,977177","1990":"7885,394019","1991":"8959,867208","1992":"10811,63064","1993":"9535,594849","1994":"9978,301937","1995":"11782,52148","1996":"12185,06389","1997":"11578,44151","1998":"12202,69141","1999":"12474,81808","2000":"11502,39681","2001":"11729,14616","2002":"12882,28897","2003":"15772,7334","2004":"18045,5881","2005":"18784,9485","2006":"19821,44463","2007":"22780,05845","2008":"24815,60884","2009":"23063,97161","2010":"22538,65408","2011":"23196,18375","2012":"20577,40264","2013":"21618,73534","2014":"22077,53613","2015":"19220,00681","2016":"19813,30825","Country Name":"Portugal","Country Code":"PRT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"184,3185998","1966":"189,1562671","1967":"197,2081038","1968":"202,9062528","1969":"212,5243189","1970":"221,8005609","1971":"240,2213197","1972":"268,5259195","1973":"334,459431","1974":"440,4658893","1975":"484,3811572","1976":"538,4506835","1977":"651,48519","1978":"780,1070546","1979":"1013,133662","1980":"1287,421199","1981":"1595,472111","1982":"1505,159772","1983":"1511,178695","1984":"1139,995821","1985":"807,836239","1986":"910,5167692","1987":"972,4304763","1988":"1022,105067","1989":"1120,874848","1990":"1351,578137","1991":"1615,476618","1992":"1614,674104","1993":"1596,144879","1994":"1692,238533","1995":"1903,469193","1996":"2009,650315","1997":"2000,911081","1998":"1773,239886","1999":"1614,903106","2000":"1545,626423","2001":"1417,260582","2002":"1148,229882","2003":"1174,779347","2004":"1408,527976","2005":"1507,145691","2006":"1809,710539","2007":"2312,192926","2008":"3059,992184","2009":"2599,596259","2010":"3225,591754","2011":"3988,011894","2012":"3855,537735","2013":"4479,905858","2014":"4712,822736","2015":"4109,367724","2016":"4080,204644","Country Name":"Paraguay","Country Code":"PRY","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"1201,581542","1995":"1326,562857","1996":"1317,466751","1997":"1389,164971","1998":"1465,046057","1999":"1499,492177","2000":"1476,17185","2001":"1335,553195","2002":"1156,217473","2003":"1257,69857","2004":"1337,565724","2005":"1455,187875","2006":"1441,4617","2007":"1575,5634","2008":"1855,45702","2009":"1963,201519","2010":"2338,719877","2011":"2664,951385","2012":"2787,169738","2013":"2992,200995","2014":"2960,778004","2015":"2865,805109","2016":"2943,404534","Country Name":"Palestine","Country Code":"PSE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"874,3263729","1976":"859,0327585","1977":"878,3135125","1978":"998,0370513","1979":"1197,350658","1980":"1340,86422","1981":"1351,198191","1982":"1289,112165","1983":"1206,318011","1984":"1294,657263","1985":"1203,027908","1986":"1285,829053","1987":"1246,71588","1988":"1290,772009","1989":"1331,390268","1990":"1414,368215","1991":"1480,813008","1992":"1596,082079","1993":"1653,285863","1994":"1872,931159","1995":"1991,514266","1996":"2107,561844","1997":"2077,155422","1998":"1763,4219","1999":"1897,741827","2000":"1755,740409","2001":"1699,980205","2002":"1767,866656","2003":"2051,46672","2004":"2344,207487","2005":"2544,067974","2006":"2641,331369","2007":"2859,239552","2008":"3040,740789","2009":"2643,564012","2010":"2891,657505","2011":"3383,344674","2012":"3570,319075","2013":"3641,374476","2014":"3769,465088","2015":"3635,985916","2016":"3720,736631","Country Name":"Pacific island small states","Country Code":"PSS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1384,191256","1961":"1442,466822","1962":"1539,295931","1963":"1637,465154","1964":"1766,654495","1965":"1897,86863","1966":"2060,039984","1967":"2189,794149","1968":"2353,778796","1969":"2555,852256","1970":"2783,976166","1971":"3057,177544","1972":"3512,742795","1973":"4204,813074","1974":"4652,13321","1975":"5168,357761","1976":"5570,648675","1977":"6254,061972","1978":"7462,885286","1979":"8519,477095","1980":"9371,109061","1981":"9416,796142","1982":"9315,214927","1983":"9610,999504","1984":"9995,11554","1985":"10487,57406","1986":"12735,87953","1987":"14670,57735","1988":"16429,39469","1989":"17072,71255","1990":"19047,62671","1991":"19951,32138","1992":"21261,21033","1993":"21291,60366","1994":"22655,71478","1995":"24966,55255","1996":"24966,22808","1997":"24368,83628","1998":"24354,60633","1999":"25443,90409","2000":"25752,40005","2001":"25390,1767","2002":"26348,92713","2003":"29412,72902","2004":"32514,17329","2005":"34047,35587","2006":"35617,43545","2007":"38627,86706","2008":"40561,49962","2009":"37991,20564","2010":"39432,99023","2011":"42211,56319","2012":"41960,15789","2013":"42131,00068","2014":"42728,42811","2015":"40163,05084","2016":"40873,19473","Country Name":"Post-demographic dividend","Country Code":"PST","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"1889,32329","1966":"2229,453077","1967":"2209,203022","1968":"2510,882289","1969":"2273,541058","1970":"2299,072349","1971":"2594,748601","1972":"2754,869881","1973":"3524,584843","1974":"4390,509508","1975":"5284,987291","1976":"5434,486177","1977":"5712,014542","1978":"7030,40784","1979":"8248,912226","1980":"8978,771876","1981":"8192,193355","1982":"7996,013641","1983":"8066,367292","1984":"8092,862528","1985":"8602,718996","1986":"12780,86751","1987":"13750,73884","1988":"14164,12542","1989":"13572,37772","1990":"16036,32668","1991":"16173,80608","1992":"17334,65411","1993":"17733,08887","1994":"16647,55161","1995":"18505,8033","1996":"18034,67151","1997":"15943,53269","1998":"16530,46203","1999":"16299,56415","2000":"14530,7772","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"French Polynesia","Country Code":"PYF","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"2755,732617","1971":"3246,416836","1972":"3909,019418","1973":"5581,262562","1974":"15623,55715","1975":"15283,36587","1976":"18893,1023","1977":"19828,55013","1978":"21093,95143","1979":"27436,16","1980":"34986,45788","1981":"34904,18371","1982":"27385,77057","1983":"20898,29135","1984":"19634,78591","1985":"16582,08439","1986":"12698,20459","1987":"12895,80856","1988":"13605,83296","1989":"14047,05239","1990":"15448,66548","1991":"14120,29449","1992":"15430,65926","1993":"14268,49837","1994":"14542,54286","1995":"15849,31879","1996":"17344,95693","1997":"21132,8714","1998":"18631,78792","1999":"21763,45098","2000":"29986,29015","2001":"28430,63635","2002":"29990,65492","2003":"34176,98183","2004":"41818,35256","2005":"51488,49529","2006":"60256,55926","2007":"67005,61258","2008":"82967,37228","2009":"61478,23813","2010":"70306,22784","2011":"85948,07046","2012":"88564,82298","2013":"88304,87958","2014":"86852,71019","2015":"66346,52267","2016":"59330,85999","Country Name":"Qatar","Country Code":"QAT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"1673,838364","1988":"1769,889931","1989":"1817,902101","1990":"1680,705623","1991":"1260,749045","1992":"1102,103785","1993":"1158,132516","1994":"1323,104325","1995":"1660,272768","1996":"1643,88046","1997":"1589,014061","1998":"1864,991387","1999":"1610,13437","2000":"1668,162731","2001":"1839,72945","2002":"2124,873613","2003":"2774,955806","2004":"3552,92452","2005":"4676,315183","2006":"5828,745662","2007":"8214,185378","2008":"10136,47356","2009":"8220,108329","2010":"8297,483621","2011":"9200,277825","2012":"8558,397606","2013":"9585,266593","2014":"10020,27733","2015":"8958,788593","2016":"9474,130604","Country Name":"Romania","Country Code":"ROU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"3428,762018","1990":"3485,112202","1991":"3485,056","1992":"3095,659779","1993":"2929,462119","1994":"2663,394599","1995":"2665,739722","1996":"2643,897696","1997":"2737,556662","1998":"1834,846937","1999":"1330,751464","2000":"1771,586602","2001":"2100,362386","2002":"2375,059044","2003":"2975,132778","2004":"4102,372294","2005":"5323,473877","2006":"6920,194398","2007":"9101,253085","2008":"11635,26037","2009":"8562,809598","2010":"10674,98771","2011":"14212,06087","2012":"15154,45687","2013":"15543,67653","2014":"14125,9061","2015":"9329,298351","2016":"8748,364504","Country Name":"Russia","Country Code":"RUS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"40,5668808","1961":"40,71966185","1962":"40,97549469","1963":"41,25077506","1964":"41,11680653","1965":"46,02629686","1966":"37,51811581","1967":"46,67794649","1968":"48,81972736","1969":"51,83225388","1970":"58,56907835","1971":"57,6352521","1972":"61,86656584","1973":"70,87357551","1974":"72,97683736","1975":"131,1886273","1976":"141,7386124","1977":"160,6524117","1978":"188,5430884","1979":"223,2950275","1980":"244,0837716","1981":"264,7326691","1982":"256,3600095","1983":"260,8016911","1984":"269,8807083","1985":"280,3261183","1986":"303,497286","1987":"320,468218","1988":"340,7443648","1989":"333,2888859","1990":"352,4401342","1991":"271,0814379","1992":"302,7561645","1993":"312,9451551","1994":"125,4994918","1995":"218,2047893","1996":"226,0501885","1997":"283,8776235","1998":"281,7841627","1999":"239,3781268","2000":"216,172747","2001":"201,0569654","2002":"196,5097078","2003":"212,6619491","2004":"236,9114381","2005":"287,0931877","2006":"342,3656294","2007":"404,8533039","2008":"500,6687264","2009":"539,1538211","2010":"563,4910487","2011":"617,3107648","2012":"678,0796973","2013":"688,8768557","2014":"706,5699517","2015":"710,3483907","2016":"702,8356016","Country Name":"Rwanda","Country Code":"RWA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"81,37675555","1961":"85,00595424","1962":"88,80056596","1963":"97,74604868","1964":"109,5037864","1965":"115,1182707","1966":"94,66842506","1967":"101,9109815","1968":"104,5759315","1969":"112,2369957","1970":"118,8653508","1971":"123,4950767","1972":"121,2404765","1973":"135,4834244","1974":"160,3910927","1975":"168,1686883","1976":"160,2998999","1977":"181,0155954","1978":"201,1618678","1979":"220,0262127","1980":"259,0457437","1981":"268,2238511","1982":"270,9926929","1983":"280,0955833","1984":"272,4006631","1985":"289,3783267","1986":"299,4703518","1987":"324,994788","1988":"341,473736","1989":"337,0416145","1990":"354,9068303","1991":"308,9629513","1992":"321,0641291","1993":"311,3505132","1994":"345,7815771","1995":"376,4093935","1996":"403,655818","1997":"415,1972237","1998":"413,0086438","1999":"434,1847164","2000":"443,3858408","2001":"446,7641742","2002":"461,4072817","2003":"529,4439209","2004":"603,4967986","2005":"680,0542073","2006":"765,3266456","2007":"953,7910318","2008":"956,5931121","2009":"1035,974166","2010":"1252,12462","2011":"1373,649425","2012":"1370,346004","2013":"1386,542422","2014":"1496,713766","2015":"1550,86325","2016":"1639,712259","Country Name":"South Asia","Country Code":"SAS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"777,3157482","1969":"801,0849372","1970":"921,3459441","1971":"1177,652912","1972":"1511,466643","1973":"2226,270427","1974":"6433,037132","1975":"6296,303434","1976":"8186,319712","1977":"9012,611634","1978":"9247,361643","1979":"12185,65301","1980":"16892,3634","1981":"17777,35338","1982":"13870,19442","1983":"10980,39996","1984":"9581,511759","1985":"7877,544967","1986":"6270,231994","1987":"5899,619098","1988":"5823,475825","1989":"6051,332708","1990":"7204,728651","1991":"7838,784024","1992":"7888,209563","1993":"7445,115493","1994":"7382,132167","1995":"7650,739369","1996":"8293,220703","1997":"8508,518663","1998":"7382,160601","1999":"7968,548574","2000":"9126,954277","2001":"8643,494004","2002":"8655,311531","2003":"9567,458285","2004":"11138,80746","2005":"13739,82945","2006":"15334,66994","2007":"16472,16605","2008":"20037,83234","2009":"16094,2931","2010":"19259,58726","2011":"23770,74739","2012":"25303,09462","2013":"24934,38614","2014":"24575,40304","2015":"20732,86172","2016":"20028,64821","Country Name":"Saudi Arabia","Country Code":"SAU","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"124,5121699","1961":"131,6563444","1962":"139,2145506","1963":"137,8104114","1964":"137,7195382","1965":"139,5521285","1966":"139,1537337","1967":"146,3789542","1968":"148,3752968","1969":"158,6177351","1970":"175,0014424","1971":"185,0111696","1972":"194,737835","1973":"234,0104983","1974":"291,7454205","1975":"344,2048067","1976":"415,3639181","1977":"501,1829391","1978":"427,1772381","1979":"486,3441341","1980":"388,2763193","1981":"503,817753","1982":"449,1122742","1983":"386,7864673","1984":"441,4189599","1985":"547,3697657","1986":"676,1246783","1987":"840,9127315","1988":"625,7902214","1989":"605,5297646","1990":"478,8012635","1991":"427,8063438","1992":"257,651551","1993":"316,9027309","1994":"444,5573291","1995":"467,8137011","1996":"296,8743719","1997":"374,1136199","1998":"350,4396796","1999":"323,5717952","2000":"361,0305843","2001":"377,5254454","2002":"412,1517561","2003":"477,7384078","2004":"565,0569459","2005":"679,7539949","2006":"893,8793645","2007":"1115,6952","2008":"1291,528826","2009":"1226,884381","2010":"1476,478087","2011":"1666,857757","2012":"1892,894352","2013":"1955,660799","2014":"2176,898029","2015":"2513,884661","2016":"2415,038162","Country Name":"Sudan","Country Code":"SDN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"247,2362843","1961":"253,8448354","1962":"253,1622673","1963":"254,5812965","1964":"262,3083829","1965":"259,5349106","1966":"259,9335292","1967":"252,512317","1968":"257,7011573","1969":"238,0010047","1970":"240,7120873","1971":"241,1144022","1972":"282,9383403","1973":"315,5603269","1974":"345,3047803","1975":"452,9278733","1976":"447,5827379","1977":"447,2047499","1978":"487,4974941","1979":"592,2565125","1980":"626,4086987","1981":"552,4494566","1982":"525,278119","1983":"454,7498512","1984":"430,1788977","1985":"456,7956078","1986":"626,6468411","1987":"731,1842411","1988":"701,3463752","1989":"670,3961344","1990":"756,6085301","1991":"721,1150526","1992":"747,8320019","1993":"686,4979804","1994":"455,4885004","1995":"557,7842575","1996":"564,4959826","1997":"508,0726031","1998":"534,0979161","1999":"533,2851225","2000":"473,4500338","2001":"481,2870397","2002":"513,026227","2003":"642,7663113","2004":"733,0581811","2005":"773,8698713","2006":"809,8038296","2007":"950,3978522","2008":"1100,336708","2009":"1020,566464","2010":"1001,631377","2011":"1080,253021","2012":"1036,405018","2013":"1048,912351","2014":"1052,443873","2015":"908,7256145","2016":"958,0737379","Country Name":"Senegal","Country Code":"SEN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"427,8804072","1961":"448,9591838","1962":"471,8805129","1963":"510,9871891","1964":"485,3032598","1965":"516,2929285","1966":"566,5374796","1967":"625,7196767","1968":"708,2651095","1969":"812,2669633","1970":"925,2873894","1971":"1070,824033","1972":"1263,659334","1973":"1684,341085","1974":"2339,570287","1975":"2489,784619","1976":"2758,664549","1977":"2845,883449","1978":"3193,330882","1979":"3899,574157","1980":"4926,958023","1981":"5595,239935","1982":"6075,595318","1983":"6629,942539","1984":"7223,398287","1985":"6995,101303","1986":"6793,544937","1987":"7531,250196","1988":"8902,412337","1989":"10380,28028","1990":"11864,28021","1991":"14505,02039","1992":"16144,00819","1993":"18302,4304","1994":"21578,46053","1995":"24936,83083","1996":"26263,01627","1997":"26386,45745","1998":"21824,03558","1999":"21795,69696","2000":"23792,60707","2001":"21577,07823","2002":"22016,83279","2003":"23573,62804","2004":"27405,27136","2005":"29869,85398","2006":"33579,85948","2007":"39223,58187","2008":"39721,04818","2009":"38577,55822","2010":"46569,67951","2011":"53166,67581","2012":"54431,16199","2013":"56029,18914","2014":"56336,07234","2015":"53629,73746","2016":"52960,71419","Country Name":"Singapore","Country Code":"SGP","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"173,3976652","1968":"187,3270106","1969":"184,7064497","1970":"","1971":"301,1628692","1972":"235,26757","1973":"308,1818624","1974":"453,7027042","1975":"385,727708","1976":"414,1701949","1977":"447,9579837","1978":"515,5497405","1979":"678,6551988","1980":"731,6141882","1981":"785,4497097","1982":"764,5088991","1983":"707,8642144","1984":"962,3072806","1985":"857,8508246","1986":"755,7717013","1987":"831,7778856","1988":"1053,295567","1989":"1095,741051","1990":"970,0969308","1991":"998,7594523","1992":"1147,975764","1993":"1210,534609","1994":"1330,822932","1995":"1445,706999","1996":"1529,664872","1997":"1494,733483","1998":"1206,157561","1999":"1200,917702","2000":"1054,518572","2001":"944,81684","2002":"784,9562874","2003":"744,7657423","2004":"818,442619","2005":"880,8748508","2006":"948,6592511","2007":"1046,931125","2008":"1205,791067","2009":"1158,282672","2010":"1272,448025","2011":"1642,837974","2012":"1858,689868","2013":"1880,5159","2014":"2009,652622","2015":"1922,041388","2016":"2005,483643","Country Name":"Solomon Is.","Country Code":"SLB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"140,1802576","1961":"140,7496641","1962":"145,0358419","1963":"145,3239316","1964":"152,6969054","1965":"145,3041394","1966":"149,4356759","1967":"136,5934372","1968":"127,0369549","1969":"154,6541006","1970":"161,3553428","1971":"152,7979583","1972":"166,027807","1973":"200,8668508","1974":"221,5534527","1975":"226,9084962","1976":"194,2227287","1977":"220,6768401","1978":"299,3610492","1979":"337,5880383","1980":"327,0554572","1981":"323,5822466","1982":"367,4369585","1983":"275,7475662","1984":"293,9536593","1985":"225,5242065","1986":"125,2879807","1987":"173,8203992","1988":"254,054421","1989":"219,5508736","1990":"150,6511518","1991":"179,8336359","1992":"156,9951224","1993":"178,4905888","1994":"212,884373","1995":"203,6948791","1996":"219,9124669","1997":"197,4746069","1998":"154,4397334","1999":"150,8369725","2000":"139,3147734","2001":"227,7790471","2002":"249,9395402","2003":"263,7618312","2004":"263,1045817","2005":"287,6891942","2006":"322,313468","2007":"358,8274716","2008":"406,3759178","2009":"394,5932439","2010":"405,1284018","2011":"445,052005","2012":"561,8984239","2013":"710,8186998","2014":"708,4394757","2015":"587,5038233","2016":"496,0494634","Country Name":"Sierra Leone","Country Code":"SLE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"274,470795","1966":"282,4935851","1967":"288,5006684","1968":"290,3493416","1969":"293,7268575","1970":"308,8157728","1971":"315,0246231","1972":"327,2249038","1973":"364,3765302","1974":"410,9516387","1975":"454,2757669","1976":"549,1647591","1977":"679,368258","1978":"708,0811931","1979":"769,4727275","1980":"780,2206604","1981":"738,331138","1982":"719,2954936","1983":"731,5707829","1984":"753,6604472","1985":"771,8271031","1986":"756,0044683","1987":"783,1954479","1988":"818,4902037","1989":"843,0897331","1990":"913,5898416","1991":"997,060633","1992":"1102,654634","1993":"1267,446109","1994":"1458,193003","1995":"1693,157242","1996":"1818,694711","1997":"1943,990272","1998":"2078,043077","1999":"2139,793967","2000":"2238,401016","2001":"2338,772244","2002":"2408,4125","2003":"2519,737387","2004":"2632,709942","2005":"2835,281237","2006":"3062,951768","2007":"3304,838107","2008":"3507,347674","2009":"3366,482133","2010":"3474,392445","2011":"3736,58713","2012":"3827,786267","2013":"3895,664491","2014":"3988,771871","2015":"4127,11775","2016":"4223,584579","Country Name":"El Salvador","Country Code":"SLV","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"31494,45969","2000":"28226,26167","2001":"29364,06718","2002":"31291,81786","2003":"39411,15762","2004":"45637,00667","2005":"47038,87156","2006":"49604,9215","2007":"56295,40528","2008":"62596,94756","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"San Marino","Country Code":"SMR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"407,5432354","2014":"417,8900143","2015":"426,0098537","2016":"434,2088097","Country Name":"Somalia","Country Code":"SOM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"2196,618467","1996":"2749,966439","1997":"3178,831484","1998":"2416,069077","1999":"2441,430389","2000":"870,1365252","2001":"1634,875061","2002":"2149,909404","2003":"2832,490652","2004":"3331,228766","2005":"3528,131008","2006":"4129,758741","2007":"5458,121718","2008":"6701,773913","2009":"5821,305397","2010":"5411,877404","2011":"6423,291783","2012":"5659,380204","2013":"6353,826383","2014":"6200,173221","2015":"5237,255334","2016":"5348,294064","Country Name":"Serbia","Country Code":"SRB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"132,9426807","1961":"134,8940792","1962":"142,7747589","1963":"159,8160279","1964":"152,1620604","1965":"165,4198668","1966":"174,1941103","1967":"167,8919991","1968":"175,0873934","1969":"195,6686425","1970":"224,3362692","1971":"222,3377693","1972":"243,9237203","1973":"303,557413","1974":"387,2139909","1975":"414,3082441","1976":"437,5621917","1977":"468,9578574","1978":"503,7616509","1979":"589,3366308","1980":"719,2965082","1981":"705,1507135","1982":"640,1771443","1983":"579,1834527","1984":"535,9032844","1985":"485,3290718","1986":"522,787408","1987":"598,8876684","1988":"612,4774536","1989":"623,0586417","1990":"606,7025602","1991":"608,1159695","1992":"581,5886801","1993":"537,1239866","1994":"509,8793709","1995":"574,3742723","1996":"578,4610782","1997":"582,636423","1998":"535,1661763","1999":"525,2565253","2000":"548,5327859","2001":"497,3747222","2002":"519,1009552","2003":"646,0609227","2004":"782,265914","2005":"895,6734748","2006":"1018,584714","2007":"1153,309068","2008":"1281,631213","2009":"1197,224029","2010":"1551,020025","2011":"1699,119933","2012":"1734,32711","2013":"1776,493064","2014":"1812,549458","2015":"1590,962126","2016":"1448,747819","Country Name":"Sub-Saharan Africa (excluding high income)","Country Code":"SSA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"1678,711862","2009":"1264,789908","2010":"1562,239346","2011":"1706,090713","2012":"958,4550081","2013":"1186,101325","2014":"1151,861715","2015":"758,7205782","2016":"","Country Name":"S. Sudan","Country Code":"SSD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"132,9649035","1961":"134,9121394","1962":"142,7941762","1963":"159,8350251","1964":"152,1884443","1965":"165,4415929","1966":"174,2152325","1967":"167,913997","1968":"175,1032926","1969":"195,6785253","1970":"224,3440807","1971":"222,357999","1972":"243,9679168","1973":"303,6048214","1974":"387,2567126","1975":"414,3555264","1976":"437,6039615","1977":"469,0360644","1978":"503,8922292","1979":"589,5652935","1980":"719,5410576","1981":"705,4098747","1982":"640,4232243","1983":"579,4319512","1984":"536,1641264","1985":"485,6345327","1986":"523,1654127","1987":"599,3290262","1988":"612,9773101","1989":"623,5852178","1990":"607,343277","1991":"608,7486941","1992":"582,3189803","1993":"537,9126389","1994":"510,6709502","1995":"575,1720716","1996":"579,227298","1997":"583,4792889","1998":"536,0646987","1999":"526,1543305","2000":"549,3909631","2001":"498,2282104","2002":"520,0356543","2003":"646,9667935","2004":"783,3131814","2005":"896,7842796","2006":"1019,774251","2007":"1154,47109","2008":"1282,662213","2009":"1198,094706","2010":"1551,967062","2011":"1700,137272","2012":"1735,385865","2013":"1777,807485","2014":"1813,83434","2015":"1592,244427","2016":"1449,997358","Country Name":"Sub-Saharan Africa","Country Code":"SSF","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"456,7002222","1971":"504,5754713","1972":"584,6799497","1973":"715,2161498","1974":"1091,914071","1975":"1220,744385","1976":"1371,022953","1977":"1530,373404","1978":"1616,252696","1979":"1970,604392","1980":"2562,063473","1981":"2594,983269","1982":"2530,530566","1983":"2397,145449","1984":"2327,382735","1985":"2193,999374","1986":"2107,224498","1987":"2358,545647","1988":"2547,946221","1989":"2600,663065","1990":"2951,553922","1991":"2958,565225","1992":"3097,999744","1993":"2982,382415","1994":"3094,773386","1995":"3446,378135","1996":"3614,343079","1997":"3767,85359","1998":"3729,017655","1999":"3938,900542","2000":"4311,261094","2001":"4255,741778","2002":"4488,778947","2003":"5277,667103","2004":"6250,22889","2005":"7324,764905","2006":"8344,693053","2007":"9802,691753","2008":"11565,24452","2009":"9695,860806","2010":"10919,52311","2011":"12973,13789","2012":"13270,05071","2013":"13526,30097","2014":"13642,35546","2015":"11407,0247","2016":"10883,09281","Country Name":"Small states","Country Code":"SST","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"510,0216381","2002":"555,8185378","2003":"649,3402153","2004":"693,3045683","2005":"810,860157","2006":"843,8009447","2007":"894,0927988","2008":"1126,462102","2009":"1099,571046","2010":"1129,754961","2011":"1304,326189","2012":"1380,949959","2013":"1619,532678","2014":"1821,878734","2015":"1624,603963","2016":"1756,06147","Country Name":"Sao Tome and Principe","Country Code":"STP","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"323,6586358","1961":"329,9931587","1962":"337,8731295","1963":"349,7303897","1964":"374,1520819","1965":"417,8810282","1966":"501,5639062","1967":"565,7859849","1968":"613,232592","1969":"636,3671057","1970":"665,6826648","1971":"726,3373436","1972":"774,5257511","1973":"828,8447755","1974":"1009,58918","1975":"1282,213901","1976":"1398,866517","1977":"1775,411793","1978":"2034,820186","1979":"2162,236797","1980":"2191,153243","1981":"2446,982729","1982":"2513,927347","1983":"2418,833835","1984":"2350,405266","1985":"2350,795488","1986":"2364,22929","1987":"2553,993963","1988":"2966,087621","1989":"1358,024691","1990":"952,9489143","1991":"1079,67901","1992":"957,0373945","1993":"997,1051873","1994":"1385,449143","1995":"1563,969017","1996":"1912,360173","1997":"2038,818609","1998":"2047,404454","1999":"1896,013914","2000":"1888,61829","2001":"1598,077512","2002":"2232,513244","2003":"2603,139009","2004":"3006,48773","2005":"3595,088055","2006":"5207,90002","2007":"5761,39536","2008":"6858,163158","2009":"7443,850178","2010":"8303,31332","2011":"8318,97692","2012":"9272,413453","2013":"9484,568098","2014":"9564,406383","2015":"8818,982566","2016":"6484,432731","Country Name":"Suriname","Country Code":"SUR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"2395,564582","1991":"2680,041026","1992":"2908,810832","1993":"3089,438276","1994":"3755,727737","1995":"4799,151051","1996":"5177,748864","1997":"5138,148679","1998":"5533,588845","1999":"5636,579532","2000":"5402,929754","2001":"5708,082659","2002":"6524,861878","2003":"8696,913242","2004":"10654,79371","2005":"11669,41975","2006":"13139,03218","2007":"16057,73314","2008":"18650,35912","2009":"16512,98197","2010":"16600,61359","2011":"18187,15744","2012":"17274,6423","2013":"18191,61279","2014":"18595,15111","2015":"16089,74846","2016":"16495,98768","Country Name":"Slovakia","Country Code":"SVK","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"10690,66523","1996":"10801,42843","1997":"10447,93571","1998":"11165,27633","1999":"11441,99702","2000":"10227,73677","2001":"10479,29634","2002":"11814,09994","2003":"14880,47154","2004":"17260,90151","2005":"18169,18091","2006":"19726,1265","2007":"23841,31792","2008":"27501,81027","2009":"24633,79785","2010":"23437,47202","2011":"24985,24827","2012":"22486,47167","2013":"23150,31799","2014":"24020,67286","2015":"20729,86383","2016":"21304,57016","Country Name":"Slovenia","Country Code":"SVN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1983,106544","1961":"2147,229311","1962":"2315,846527","1963":"2492,545346","1964":"2758,943466","1965":"3007,597978","1966":"3240,611037","1967":"3490,550337","1968":"3683,313694","1969":"3972,002749","1970":"4669,438672","1971":"5060,342739","1972":"5942,148771","1973":"7198,271657","1974":"7975,850516","1975":"9974,657321","1976":"10715,03809","1977":"11287,19913","1978":"12442,57512","1979":"14667,40312","1980":"16856,76109","1981":"15366,66859","1982":"13545,25912","1983":"12430,45893","1984":"12914,33068","1985":"13474,16135","1986":"17727,49533","1987":"21485,29387","1988":"24188,76594","1989":"25300,39512","1990":"30162,31577","1991":"31374,11699","1992":"32338,50395","1993":"24080,89967","1994":"25747,24169","1995":"29914,33175","1996":"32587,2641","1997":"29897,79263","1998":"30143,62746","1999":"30577,08177","2000":"29283,00505","2001":"26969,24457","2002":"29571,70446","2003":"36961,42537","2004":"42442,22045","2005":"43085,35315","2006":"46256,4716","2007":"53324,37937","2008":"55746,84238","2009":"46207,0592","2010":"52076,25591","2011":"59593,28711","2012":"57134,07707","2013":"60283,24522","2014":"59180,19898","2015":"50585,25847","2016":"51599,86887","Country Name":"Sweden","Country Code":"SWE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"100,4546687","1961":"120,3660327","1962":"125,6086968","1963":"144,7681512","1964":"169,8942409","1965":"179,4900074","1966":"191,5795605","1967":"181,7385228","1968":"189,0330318","1969":"243,1291725","1970":"251,5828166","1971":"297,5661504","1972":"310,7410615","1973":"456,0620709","1974":"527,0302488","1975":"557,61997","1976":"511,1251738","1977":"552,6956727","1978":"600,142673","1979":"704,0187202","1980":"898,285823","1981":"919,9497077","1982":"840,9650581","1983":"843,5656607","1984":"727,1958126","1985":"512,0161264","1986":"611,7138445","1987":"761,8758664","1988":"864,5281119","1989":"836,952679","1990":"1294,100335","1991":"1305,456157","1992":"1418,011062","1993":"1468,799","1994":"1507,042512","1995":"1768,314513","1996":"1632,530935","1997":"1709,868987","1998":"1536,930273","1999":"1480,338095","2000":"1637,450067","2001":"1437,634951","2002":"1324,996228","2003":"2020,994049","2004":"2529,633557","2005":"2873,862141","2006":"2937,360723","2007":"3047,48798","2008":"2842,438422","2009":"3032,517125","2010":"3690,239336","2011":"3934,273025","2012":"3851,501547","2013":"3598,705972","2014":"3464,035169","2015":"3136,92511","2016":"2775,153908","Country Name":"Swaziland","Country Code":"SWZ","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Sint Maarten (Dutch part)","Country Code":"SXM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"288,0581594","1961":"270,2796606","1962":"287,0447884","1963":"308,1952644","1964":"332,3050031","1965":"328,484901","1966":"337,6462466","1967":"333,2338125","1968":"314,3510648","1969":"314,1798528","1970":"343,8811821","1971":"401,6080395","1972":"546,9510613","1973":"648,5319241","1974":"744,5069419","1975":"806,2326445","1976":"814,474738","1977":"1044,353068","1978":"1376,546579","1979":"2030,135903","1980":"2329,353358","1981":"2419,034419","1982":"2296,307729","1983":"2280,451551","1984":"2338,075652","1985":"2588,552804","1986":"3165,945038","1987":"3638,988011","1988":"4128,118232","1989":"4407,20094","1990":"5302,843727","1991":"5314,663128","1992":"6128,445569","1993":"6559,129994","1994":"6555,504407","1995":"6748,931109","1996":"6583,201018","1997":"7280,989621","1998":"7715,918147","1999":"7747,612159","2000":"7578,851053","2001":"7663,13708","2002":"8331,261997","2003":"8524,961236","2004":"10176,65871","2005":"11092,51074","2006":"12014,39987","2007":"12154,82994","2008":"11122,86207","2009":"9706,95606","2010":"10804,68447","2011":"12189,09516","2012":"12845,17363","2013":"15687,34795","2014":"15570,77892","2015":"15390,04064","2016":"15075,71944","Country Name":"Seychelles","Country Code":"SYC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"187,5373743","1961":"200,1833569","1962":"227,7886639","1963":"238,4373061","1964":"257,5784123","1965":"273,9622218","1966":"241,7122448","1967":"275,2673093","1968":"295,4494159","1969":"365,6937642","1970":"337,0395839","1971":"394,1421481","1972":"449,9439294","1973":"460,295068","1974":"708,4212256","1975":"905,9500887","1976":"979,3277657","1977":"954,7632405","1978":"1112,612528","1979":"1151,175406","1980":"1462,630341","1981":"1677,126244","1982":"1699,532805","1983":"1769,740953","1984":"1700,476019","1985":"1540,436791","1986":"1208,004425","1987":"999,5919067","1988":"902,5495583","1989":"815,6485164","1990":"988,9486722","1991":"1013,001286","1992":"1005,041364","1993":"1009,716411","1994":"725,6085921","1995":"794,445153","1996":"934,5505657","1997":"955,7091761","1998":"974,2751917","1999":"991,1204287","2000":"1177,629268","2001":"1258,421953","2002":"1263,013455","2003":"1253,391403","2004":"1408,852738","2005":"1577,457182","2006":"1762,246107","2007":"2058,035209","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Syria","Country Code":"SYR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Turks and Caicos Islands","Country Code":"TCA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"104,4721012","1961":"109,1296064","1962":"114,5821737","1963":"116,777461","1964":"120,8214734","1965":"125,9758594","1966":"128,3431507","1967":"130,9610115","1968":"129,7326181","1969":"132,170943","1970":"128,7938591","1971":"134,6898749","1972":"153,4499975","1973":"165,624471","1974":"163,1531037","1975":"211,5002694","1976":"207,5736383","1977":"219,8784403","1978":"256,9214321","1979":"227,1841247","1980":"228,9434367","1981":"190,2181764","1982":"176,9533405","1983":"172,3751507","1984":"185,5258783","1985":"202,8994616","1986":"203,6671801","1987":"215,1272438","1988":"265,4919945","1989":"248,554947","1990":"291,8661593","1991":"305,2216778","1992":"296,3964872","1993":"223,2061727","1994":"174,2195487","1995":"206,5386927","1996":"221,9742723","1997":"206,1441026","1998":"224,8661479","1999":"190,8359826","2000":"166,0231785","2001":"197,3156442","2002":"220,8054821","2003":"292,5914364","2004":"454,6765879","2005":"660,2421396","2006":"712,1847694","2007":"801,683884","2008":"929,7702391","2009":"804,4559039","2010":"896,5697341","2011":"989,2363633","2012":"973,4702574","2013":"986,0103177","2014":"1025,998515","2015":"777,2487051","2016":"664,2956519","Country Name":"Chad","Country Code":"TCD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"90,53616653","1961":"79,5624877","1962":"71,98068671","1963":"76,01905665","1964":"86,04558891","1965":"97,99098283","1966":"104,368309","1967":"98,55161222","1968":"96,90787899","1969":"105,9118997","1970":"114,893355","1971":"120,2514335","1972":"133,0592693","1973":"163,6239782","1974":"180,6125374","1975":"199,1392433","1976":"198,5972326","1977":"225,8308043","1978":"215,1974627","1979":"245,3678241","1980":"278,836848","1981":"292,9956939","1982":"302,3793263","1983":"312,0759721","1984":"333,5388528","1985":"359,7512917","1986":"352,7443664","1987":"342,3036824","1988":"373,0630215","1989":"396,4853491","1990":"418,2172245","1991":"447,1179865","1992":"494,1577405","1993":"535,4204626","1994":"635,8142871","1995":"774,9826451","1996":"879,3528458","1997":"899,9955752","1998":"815,4928684","1999":"887,4905585","2000":"968,5214203","2001":"1020,76888","2002":"1119,702935","2003":"1256,545766","2004":"1445,187261","2005":"1657,843989","2006":"1979,475163","2007":"2485,188667","2008":"3123,026903","2009":"3364,163251","2010":"4051,163864","2011":"4916,688093","2012":"5445,490242","2013":"5968,388494","2014":"6371,731391","2015":"6583,822474","2016":"6655,845797","Country Name":"East Asia & Pacific (IDA & IBRD countries)","Country Code":"TEA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"2256,46913","1990":"2382,853175","1991":"2342,889513","1992":"2186,695256","1993":"2148,838961","1994":"1928,638436","1995":"2114,192146","1996":"2179,085174","1997":"2248,695346","1998":"2171,930347","1999":"1882,380469","2000":"2048,81101","2001":"2085,762993","2002":"2343,828673","2003":"2885,633179","2004":"3728,200514","2005":"4665,841647","2006":"5638,320889","2007":"7227,061174","2008":"8921,348113","2009":"7039,934838","2010":"8234,343255","2011":"9920,94204","2012":"10254,67411","2013":"10770,39824","2014":"10263,52515","2015":"7942,031387","2016":"7573,197663","Country Name":"Europe & Central Asia (IDA & IBRD countries)","Country Code":"TEC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"76,63845417","1961":"79,12013307","1962":"81,99474913","1963":"87,79197513","1964":"99,93788939","1965":"109,6201848","1966":"121,8335574","1967":"124,8793956","1968":"124,3495722","1969":"131,5698685","1970":"120,0538809","1971":"131,0987358","1972":"149,3505629","1973":"176,4737398","1974":"237,8140162","1975":"256,1026754","1976":"251,3233693","1977":"308,681615","1978":"319,9199531","1979":"337,4301441","1980":"417,6685258","1981":"342,2239169","1982":"281,8639162","1983":"253,0358123","1984":"228,6925986","1985":"234,3563261","1986":"315,3702223","1987":"359,5481768","1988":"384,9456179","1989":"367,0137728","1990":"430,0114381","1991":"412,722312","1992":"426,0809921","1993":"303,4487827","1994":"236,0011558","1995":"306,3583371","1996":"333,189857","1997":"330,5621437","1998":"339,2473068","1999":"326,6040699","2000":"260,3932935","2001":"260,6394652","2002":"280,8032123","2003":"310,4370144","2004":"349,9937253","2005":"372,1721837","2006":"377,336029","2007":"420,7604743","2008":"513,391914","2009":"499,6468713","2010":"487,9238913","2011":"562,3393592","2012":"563,6894247","2013":"579,434805","2014":"620,1318489","2015":"551,1308346","2016":"578,4616936","Country Name":"Togo","Country Code":"TGO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"100,7675964","1961":"107,4979324","1962":"113,7825016","1963":"118,1432447","1964":"125,9378949","1965":"137,9180399","1966":"161,0056836","1967":"166,9245459","1968":"174,78713","1969":"186,8806541","1970":"192,125665","1971":"194,2582535","1972":"209,3565565","1973":"269,8517747","1974":"332,1171748","1975":"351,5475169","1976":"391,4830109","1977":"445,3194956","1978":"528,5062578","1979":"589,750884","1980":"682,7734555","1981":"720,8917652","1982":"742,6752585","1983":"797,8852163","1984":"817,8274615","1985":"747,4941323","1986":"813,2003615","1987":"936,4587224","1988":"1123,011814","1989":"1294,932165","1990":"1508,285774","1991":"1715,638125","1992":"1926,987525","1993":"2208,345294","1994":"2490,311547","1995":"2845,410314","1996":"3042,903989","1997":"2467,492895","1998":"1845,466238","1999":"2032,992147","2000":"2007,564826","2001":"1893,145377","2002":"2096,054617","2003":"2358,930629","2004":"2659,839108","2005":"2893,651356","2006":"3368,952576","2007":"3972,206475","2008":"4378,687406","2009":"4212,054902","2010":"5075,302176","2011":"5491,159981","2012":"5859,915622","2013":"6171,262444","2014":"5941,84071","2015":"5814,863134","2016":"5907,913432","Country Name":"Thailand","Country Code":"THA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"497,6401257","1991":"469,3306256","1992":"346,9480225","1993":"294,3618314","1994":"236,9919764","1995":"213,6313201","1996":"178,4572911","1997":"155,3419848","1998":"219,2285699","1999":"177,6921724","2000":"138,4366033","2001":"170,8159721","2002":"189,3878519","2003":"236,3014438","2004":"309,2801834","2005":"337,359236","2006":"404,2872665","2007":"520,035956","2008":"706,0914128","2009":"666,3458569","2010":"738,3475227","2011":"834,5412953","2012":"954,7205253","2013":"1040,214412","2014":"1104,459019","2015":"918,6771543","2016":"795,8438644","Country Name":"Tajikistan","Country Code":"TJK","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"684,2208844","1988":"861,7841338","1989":"838,5665772","1990":"865,7896521","1991":"846,6461572","1992":"820,6842727","1993":"792,6684621","1994":"622,3710799","1995":"589,9056142","1996":"554,9547151","1997":"562,5765411","1998":"590,3934846","1999":"548,7268759","2000":"643,1750108","2001":"774,4763388","2002":"967,9017468","2003":"1283,885977","2004":"1453,917166","2005":"1704,51475","2006":"2136,66815","2007":"2600,371428","2008":"3904,467675","2009":"4036,459223","2010":"4439,203","2011":"5649,978486","2012":"6675,262954","2013":"7304,420525","2014":"7962,365824","2015":"6432,668768","2016":"6389,334143","Country Name":"Turkmenistan","Country Code":"TKM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"363,5813989","1961":"375,1451571","1962":"420,3944971","1963":"410,2804005","1964":"443,3976988","1965":"464,2546546","1966":"495,9040605","1967":"493,3898059","1968":"516,810379","1969":"564,0108859","1970":"597,0652807","1971":"649,1803579","1972":"710,6154734","1973":"914,6637064","1974":"1169,936997","1975":"1194,445703","1976":"1299,705565","1977":"1400,619153","1978":"1546,41941","1979":"1804,857074","1980":"2104,332616","1981":"2379,780975","1982":"2165,136984","1983":"1863,402556","1984":"1786,699629","1985":"1803,332218","1986":"1792,173933","1987":"1847,489996","1988":"2074,341061","1989":"2231,939836","1990":"2560,016704","1991":"3132,412739","1992":"2892,472977","1993":"3287,774657","1994":"3710,789946","1995":"3888,742297","1996":"4130,719935","1997":"4453,296351","1998":"4402,272132","1999":"3882,099981","2000":"4225,979123","2001":"4037,644295","2002":"3538,16105","2003":"3589,91297","2004":"4114,148202","2005":"4949,774375","2006":"5749,539527","2007":"6729,166791","2008":"7761,299012","2009":"7181,893559","2010":"8861,671986","2011":"9983,455283","2012":"9948,465947","2013":"10075,95338","2014":"9965,700218","2015":"8379,778256","2016":"8044,149284","Country Name":"Latin America & the Caribbean (IDA & IBRD countries)","Country Code":"TLA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"422,208633","2001":"506,4249869","2002":"480,6105052","2003":"471,4565823","2004":"467,5438297","2005":"478,331859","2006":"441,53226","2007":"524,8959363","2008":"643,719101","2009":"757,3114436","2010":"849,8626972","2011":"1014,56179","2012":"1117,77724","2013":"1107,765674","2014":"1153,515708","2015":"1161,760935","2016":"","Country Name":"Timor-Leste","Country Code":"TLS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"1192,709171","1994":"1197,600297","1995":"1337,664779","1996":"1521,704418","1997":"1531,253179","1998":"1523,379716","1999":"1581,148778","2000":"1609,105126","2001":"1637,432987","2002":"1563,378652","2003":"1733,7548","2004":"1952,553442","2005":"2264,048491","2006":"2586,569248","2007":"3132,797973","2008":"3810,35475","2009":"3599,124188","2010":"4081,234025","2011":"4637,487581","2012":"4814,396667","2013":"4634,991034","2014":"4390,410203","2015":"3946,376618","2016":"","Country Name":"Middle East & North Africa (IDA & IBRD countries)","Country Code":"TMN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"367,9397578","1976":"336,5274045","1977":"378,0872461","1978":"454,9655408","1979":"483,9328495","1980":"572,6459023","1981":"666,0247753","1982":"662,5480201","1983":"649,049459","1984":"684,6439179","1985":"639,2415709","1986":"724,3704457","1987":"865,2645942","1988":"1126,657308","1989":"1120,256771","1990":"1193,486507","1991":"1386,730109","1992":"1435,309233","1993":"1447,972527","1994":"2022,016874","1995":"2108,19574","1996":"2278,570599","1997":"2193,384592","1998":"1942,523265","1999":"2015,41817","2000":"2063,207236","2001":"1837,977391","2002":"1842,404421","2003":"2029,714718","2004":"2284,307858","2005":"2594,74999","2006":"2892,522663","2007":"2932,315883","2008":"3392,64743","2009":"3070,846563","2010":"3547,590975","2011":"4045,018866","2012":"4501,542462","2013":"4266,557174","2014":"4192,349758","2015":"4093,775387","2016":"3688,874636","Country Name":"Tonga","Country Code":"TON","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"81,37675555","1961":"85,00595424","1962":"88,80056596","1963":"97,74604868","1964":"109,5037864","1965":"115,1182707","1966":"94,66842506","1967":"101,9109815","1968":"104,5759315","1969":"112,2369957","1970":"118,8653508","1971":"123,4950767","1972":"121,2404765","1973":"135,4834244","1974":"160,3910927","1975":"168,1686883","1976":"160,2998999","1977":"181,0155954","1978":"201,1618678","1979":"220,0262127","1980":"259,0457437","1981":"268,2238511","1982":"270,9926929","1983":"280,0955833","1984":"272,4006631","1985":"289,3783267","1986":"299,4703518","1987":"324,994788","1988":"341,473736","1989":"337,0416145","1990":"354,9068303","1991":"308,9629513","1992":"321,0641291","1993":"311,3505132","1994":"345,7815771","1995":"376,4093935","1996":"403,655818","1997":"415,1972237","1998":"413,0086438","1999":"434,1847164","2000":"443,3858408","2001":"446,7641742","2002":"461,4072817","2003":"529,4439209","2004":"603,4967986","2005":"680,0542073","2006":"765,3266456","2007":"953,7910318","2008":"956,5931121","2009":"1035,974166","2010":"1252,12462","2011":"1373,649425","2012":"1370,346004","2013":"1386,542422","2014":"1496,713766","2015":"1550,86325","2016":"1639,712259","Country Name":"South Asia (IDA & IBRD)","Country Code":"TSA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"132,9649035","1961":"134,9121394","1962":"142,7941762","1963":"159,8350251","1964":"152,1884443","1965":"165,4415929","1966":"174,2152325","1967":"167,913997","1968":"175,1032926","1969":"195,6785253","1970":"224,3440807","1971":"222,357999","1972":"243,9679168","1973":"303,6048214","1974":"387,2567126","1975":"414,3555264","1976":"437,6039615","1977":"469,0360644","1978":"503,8922292","1979":"589,5652935","1980":"719,5410576","1981":"705,4098747","1982":"640,4232243","1983":"579,4319512","1984":"536,1641264","1985":"485,6345327","1986":"523,1654127","1987":"599,3290262","1988":"612,9773101","1989":"623,5852178","1990":"607,343277","1991":"608,7486941","1992":"582,3189803","1993":"537,9126389","1994":"510,6709502","1995":"575,1720716","1996":"579,227298","1997":"583,4792889","1998":"536,0646987","1999":"526,1543305","2000":"549,3909631","2001":"498,2282104","2002":"520,0356543","2003":"646,9667935","2004":"783,3131814","2005":"896,7842796","2006":"1019,774251","2007":"1154,47109","2008":"1282,662213","2009":"1198,094706","2010":"1551,967062","2011":"1700,137272","2012":"1735,385865","2013":"1777,807485","2014":"1813,83434","2015":"1592,244427","2016":"1449,997358","Country Name":"Sub-Saharan Africa (IDA & IBRD countries)","Country Code":"TSS","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"631,3298594","1961":"675,9744022","1962":"703,7534216","1963":"759,8688427","1964":"788,1247323","1965":"807,2721814","1966":"786,7521201","1967":"822,9550356","1968":"814,7353962","1969":"830,8382595","1970":"868,7696421","1971":"937,668546","1972":"1118,339209","1973":"1331,986683","1974":"2048,067557","1975":"2414,920141","1976":"2437,859973","1977":"3018,642425","1978":"3379,451083","1979":"4304,534246","1980":"5745,680796","1981":"6341,703581","1982":"7264,26625","1983":"6818,225729","1984":"6712,050613","1985":"6299,207438","1986":"4049,187446","1987":"4014,04712","1988":"3732,15885","1989":"3562,107229","1990":"4147,638923","1991":"4315,696945","1992":"4395,644513","1993":"3752,380464","1994":"3956,758089","1995":"4246,382404","1996":"4577,004528","1997":"4551,321854","1998":"4786,92537","1999":"5383,552427","2000":"6430,947262","2001":"6935,721451","2002":"7049,626612","2003":"8804,518666","2004":"10290,51914","2005":"12323,12705","2006":"14095,96337","2007":"16530,18044","2008":"21188,11857","2009":"14508,8796","2010":"16683,94578","2011":"19053,97067","2012":"19152,05301","2013":"19607,83283","2014":"19325,24283","2015":"17321,83373","2016":"15377,09881","Country Name":"Trinidad and Tobago","Country Code":"TTO","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"218,0360187","1966":"224,42662","1967":"229,168376","1968":"250,8518741","1969":"260,5787663","1970":"284,4120916","1971":"325,7911711","1972":"423,1599478","1973":"505,2003941","1974":"641,5930846","1975":"765,7901581","1976":"779,676264","1977":"863,7901651","1978":"985,6534984","1979":"1158,411974","1980":"1373,100667","1981":"1287,77428","1982":"1207,818259","1983":"1204,86443","1984":"1158,103282","1985":"1148,6381","1986":"1200,856062","1987":"1260,524063","1988":"1282,645675","1989":"1254,770903","1990":"1492,878809","1991":"1553,251774","1992":"1801,334534","1993":"1662,963364","1994":"1745,357659","1995":"1978,376789","1996":"2116,167296","1997":"2210,786913","1998":"2295,237988","1999":"2389,036036","2000":"2213,914088","2001":"2254,933126","2002":"2346,05937","2003":"2761,969249","2004":"3112,835029","2005":"3194,562243","2006":"3371,71231","2007":"3778,184171","2008":"4310,093026","2009":"4129,977335","2010":"4140,15177","2011":"4256,91279","2012":"4137,554021","2013":"4199,470253","2014":"4271,681702","2015":"3828,091589","2016":"3688,646375","Country Name":"Tunisia","Country Code":"TUN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"509,4241118","1961":"285,0127089","1962":"309,4469034","1963":"350,6632227","1964":"369,5837863","1965":"385,6409757","1966":"445,2504915","1967":"482,378394","1968":"526,2139967","1969":"571,6182737","1970":"489,930775","1971":"455,1053041","1972":"558,421564","1973":"686,4906344","1974":"927,8001104","1975":"1136,376695","1976":"1275,958161","1977":"1427,373253","1978":"1549,646128","1979":"2079,222784","1980":"1564,24898","1981":"1579,075709","1982":"1402,408081","1983":"1310,256988","1984":"1246,825842","1985":"1368,402906","1986":"1510,678089","1987":"1705,89612","1988":"1745,366939","1989":"2021,861437","1990":"2794,353551","1991":"2735,710807","1992":"2842,373598","1993":"3180,192011","1994":"2270,340362","1995":"2897,870208","1996":"3053,950828","1997":"3144,389453","1998":"4496,503169","1999":"4108,127878","2000":"4316,553895","2001":"3119,637106","2002":"3660,00507","2003":"4718,501291","2004":"6040,72953","2005":"7384,354661","2006":"8034,869161","2007":"9709,490246","2008":"10850,68975","2009":"9036,499911","2010":"10672,05693","2011":"11341,13395","2012":"11720,30843","2013":"12542,93565","2014":"12127,22522","2015":"10979,52569","2016":"10787,60934","Country Name":"Turkey","Country Code":"TUR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"980,1674709","1991":"1034,482041","1992":"1069,595946","1993":"1051,85266","1994":"1184,638255","1995":"1194,576939","1996":"1332,63248","1997":"1369,074641","1998":"1370,904026","1999":"1464,648593","2000":"1458,817097","2001":"1387,357543","2002":"1603,631992","2003":"1866,599625","2004":"2176,564747","2005":"2178,02921","2006":"2259,333279","2007":"2638,911845","2008":"2929,42164","2009":"2595,639908","2010":"3021,889528","2011":"3698,910096","2012":"3718,018711","2013":"3542,135089","2014":"3415,813158","2015":"2970,027974","2016":"3083,615251","Country Name":"Tuvalu","Country Code":"TUV","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"219,3718195","1989":"184,3396842","1990":"172,0447984","1991":"193,7400952","1992":"173,8913828","1993":"155,5982751","1994":"159,6357424","1995":"180,4650233","1996":"216,9327932","1997":"249,931287","1998":"296,3409541","1999":"299,7867537","2000":"306,7238273","2001":"304,339284","2002":"308,0565528","2003":"323,0721066","2004":"345,189237","2005":"442,2528543","2006":"471,5273761","2007":"528,063562","2008":"651,2624387","2009":"658,7579527","2010":"701,6045501","2011":"733,4128065","2012":"820,1562898","2013":"901,7314303","2014":"950,3743138","2015":"872,2940933","2016":"879,193814","Country Name":"Tanzania","Country Code":"TZA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"62,31512232","1961":"63,01516135","1962":"62,0168215","1963":"68,93525117","1964":"76,04460973","1965":"110,410491","1966":"111,6357548","1967":"112,7704925","1968":"116,9643281","1969":"127,5858262","1970":"133,397787","1971":"145,8568846","1972":"149,333189","1973":"165,995495","1974":"199,3733886","1975":"217,9295761","1976":"219,6891102","1977":"255,9937787","1978":"204,7891352","1979":"175,638812","1980":"99,17574668","1981":"103,424469","1982":"163,4350927","1983":"163,1080547","1984":"255,0816699","1985":"240,3056389","1986":"258,8819615","1987":"399,448706","1988":"400,2409497","1989":"313,2169534","1990":"246,8273307","1991":"184,126852","1992":"153,1911684","1993":"167,0748918","1994":"200,4472479","1995":"280,0845471","1996":"285,0934669","1997":"286,7169623","1998":"291,9864072","1999":"257,7477999","2000":"257,6303609","2001":"234,9840775","2002":"240,2423229","2003":"237,9995917","2004":"288,0236949","2005":"315,7880227","2006":"336,4593923","2007":"401,8508631","2008":"449,6928183","2009":"647,0107732","2010":"594,9972557","2011":"584,3962137","2012":"647,704741","2013":"662,4922903","2014":"719,172669","2015":"693,8963829","2016":"615,3088032","Country Name":"Uganda","Country Code":"UGA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"1249,443278","1988":"1449,962499","1989":"1597,534644","1990":"1569,739433","1991":"1489,689635","1992":"1417,868805","1993":"1258,136333","1994":"1012,105192","1995":"935,9680914","1996":"872,7091855","1997":"991,2301007","1998":"835,2602988","1999":"635,7662418","2000":"635,7089635","2001":"780,7380243","2002":"879,4750486","2003":"1048,522488","2004":"1367,352433","2005":"1828,717626","2006":"2303,018831","2007":"3068,608998","2008":"3891,037823","2009":"2545,480341","2010":"2965,142365","2011":"3569,757027","2012":"3855,42128","2013":"4029,715504","2014":"3104,658296","2015":"2124,662666","2016":"2185,728031","Country Name":"Ukraine","Country Code":"UKR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"185,737764","1961":"168,8019448","1962":"174,977144","1963":"178,8659578","1964":"197,3091332","1965":"215,1924875","1966":"230,6845082","1967":"228,5144744","1968":"234,8761072","1969":"256,4836262","1970":"274,1753089","1971":"293,3663216","1972":"327,8477396","1973":"416,54462","1974":"522,6653858","1975":"565,9469741","1976":"604,0969613","1977":"663,8856839","1978":"698,3064211","1979":"834,1324408","1980":"938,9692091","1981":"1005,629858","1982":"975,4059576","1983":"945,9001702","1984":"955,9418757","1985":"992,3399272","1986":"1019,502014","1987":"1001,500895","1988":"1083,855146","1989":"1159,910447","1990":"1308,193196","1991":"1424,68652","1992":"1371,07988","1993":"1469,545711","1994":"1582,399023","1995":"1746,830325","1996":"1877,797664","1997":"1978,99524","1998":"1934,690514","1999":"1813,335956","2000":"1976,979164","2001":"1983,63792","2002":"1974,360024","2003":"2207,994505","2004":"2632,100117","2005":"3145,45915","2006":"3712,462278","2007":"4584,694068","2008":"5567,030705","2009":"5317,838418","2010":"6399,65448","2011":"7605,957484","2012":"8050,145902","2013":"8516,527381","2014":"8696,988523","2015":"8076,64872","2016":"7937,288209","Country Name":"Upper middle income","Country Code":"UMC","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"489,350136","1961":"601,7011432","1962":"656,71224","1963":"584,2907629","1964":"741,2430179","1965":"701,7047182","1966":"664,438377","1967":"580,9698363","1968":"574,3441917","1969":"717,1386388","1970":"760,5859821","1971":"996,0926613","1972":"775,9933854","1973":"1404,741987","1974":"1448,339145","1975":"1250,200808","1976":"1290,604566","1977":"1440,152554","1978":"1707,34191","1979":"2479,671356","1980":"3485,52603","1981":"3764,293025","1982":"3106,948545","1983":"1715,939043","1984":"1620,720614","1985":"1571,103059","1986":"1939,966701","1987":"2415,598758","1988":"2676,197626","1989":"2731,95053","1990":"2989,991172","1991":"3577,910095","1992":"4082,012424","1993":"4720,394249","1994":"5458,06481","1995":"5984,13519","1996":"6316,26994","1997":"7327,934445","1998":"7711,07657","1999":"7247,398162","2000":"6871,897677","2001":"6281,377047","2002":"4088,768855","2003":"3622,052284","2004":"4117,308853","2005":"5220,951116","2006":"5877,876078","2007":"7009,697046","2008":"9062,312164","2009":"9415,170386","2010":"11938,212","2011":"14166,49908","2012":"15092,06819","2013":"16881,20568","2014":"16737,89827","2015":"15524,84247","2016":"15220,56603","Country Name":"Uruguay","Country Code":"URY","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"3007,123445","1961":"3066,562869","1962":"3243,843078","1963":"3374,515171","1964":"3573,941185","1965":"3827,52711","1966":"4146,316646","1967":"4336,426587","1968":"4695,92339","1969":"5032,144743","1970":"5246,883717","1971":"5623,443978","1972":"6109,925868","1973":"6741,332364","1974":"7242,441105","1975":"7820,065471","1976":"8611,401839","1977":"9471,306172","1978":"10587,28576","1979":"11695,55442","1980":"12597,66751","1981":"13993,16674","1982":"14438,97628","1983":"15561,4264","1984":"17134,28602","1985":"18269,42217","1986":"19115,05291","1987":"20100,85889","1988":"21483,23306","1989":"22922,43709","1990":"23954,47935","1991":"24405,16481","1992":"25492,95165","1993":"26464,85251","1994":"27776,63553","1995":"28782,17502","1996":"30068,23092","1997":"31572,69023","1998":"32949,19776","1999":"34620,9289","2000":"36449,85512","2001":"37273,6181","2002":"38166,03784","2003":"39677,19835","2004":"41921,80976","2005":"44307,92058","2006":"46437,06712","2007":"48061,53766","2008":"48401,42734","2009":"47001,55535","2010":"48373,87882","2011":"49790,66548","2012":"51450,1223","2013":"52787,02695","2014":"54598,55069","2015":"56207,03675","2016":"57466,78711","Country Name":"United States","Country Code":"USA","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"651,4192097","1991":"652,8074753","1992":"603,3520153","1993":"596,9835856","1994":"576,4471105","1995":"585,9323642","1996":"600,5981578","1997":"623,0026524","1998":"623,2161328","1999":"702,4807441","2000":"558,221144","2001":"456,7034892","2002":"383,3494997","2003":"396,129969","2004":"465,1198869","2005":"546,7768502","2006":"654,2838373","2007":"830,4076942","2008":"1082,286025","2009":"1213,265328","2010":"1377,08214","2011":"1564,966945","2012":"1740,468298","2013":"1907,551233","2014":"2050,448414","2015":"2137,576852","2016":"2110,647872","Country Name":"Uzbekistan","Country Code":"UZB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"161,4171612","1961":"170,4351408","1962":"174,5652833","1963":"162,8692849","1964":"173,485175","1965":"175,7381346","1966":"185,3606023","1967":"180,4866638","1968":"173,2251476","1969":"186,0002681","1970":"203,9755893","1971":"219,2874911","1972":"298,3408389","1973":"322,5656685","1974":"348,1538772","1975":"347,6290878","1976":"339,3226578","1977":"505,413759","1978":"616,8805347","1979":"713,8906554","1980":"819,2660398","1981":"1006,979311","1982":"1113,060009","1983":"1187,129392","1984":"1301,546143","1985":"1394,007329","1986":"1528,989778","1987":"1658,047798","1988":"1884,120895","1989":"2005,388293","1990":"2235,851907","1991":"2363,604259","1992":"2573,577689","1993":"2648,74195","1994":"2676,788664","1995":"2922,702886","1996":"3067,219095","1997":"3219,973334","1998":"3461,943365","1999":"3621,794106","2000":"3672,635267","2001":"3982,297759","2002":"4270,924902","2003":"4446,758618","2004":"4808,215911","2005":"5064,451065","2006":"5609,649007","2007":"5977,544681","2008":"6370,437886","2009":"6177,610514","2010":"6231,770232","2011":"6183,676822","2012":"6338,117781","2013":"6597,211381","2014":"6656,298315","2015":"6739,605825","2016":"7030,057145","Country Name":"St. Vincent and the Grenadines","Country Code":"VCT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"1072,431997","1961":"1070,486695","1962":"1140,082877","1963":"1185,483577","1964":"961,4560693","1965":"966,5691753","1966":"981,254312","1967":"983,6976731","1968":"1042,404857","1969":"1049,802313","1970":"1108,821243","1971":"1225,124339","1972":"1295,970593","1973":"1540,423109","1974":"2230,688944","1975":"2342,909352","1976":"2633,8634","1977":"2991,495363","1978":"3196,112637","1979":"3727,183122","1980":"4367,726156","1981":"4781,633082","1982":"4730,037384","1983":"4726,401906","1984":"3288,346054","1985":"3309,090212","1986":"3272,04241","1987":"2459,285157","1988":"3089,402595","1989":"2172,431028","1990":"2367,74317","1991":"2545,191095","1992":"2810,225907","1993":"2733,526919","1994":"2601,957589","1995":"3375,891496","1996":"3013,841754","1997":"3714,533682","1998":"3874,981721","1999":"4077,496123","2000":"4783,530592","2001":"4926,311339","2002":"3655,97562","2003":"3232,524276","2004":"4271,372404","2005":"5432,688675","2006":"6735,797588","2007":"8318,803399","2008":"11227,23138","2009":"11536,14939","2010":"13545,20584","2011":"10741,57638","2012":"12755,00008","2013":"12237,22406","2014":"","2015":"","2016":"","Country Name":"Venezuela","Country Code":"VEN","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"British Virgin Islands","Country Code":"VGB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"756,25","1961":"753,6656891","1962":"1016,528926","1963":"1069,767442","1964":"1302,663438","1965":"1511,363636","1966":"1778,012685","1967":"2271,653543","1968":"3183,150183","1969":"3605,802048","1970":"3476,190476","1971":"3619,71831","1972":"4040,789474","1973":"4185,714286","1974":"4393,333333","1975":"4253,191489","1976":"4583,333333","1977":"4965,591398","1978":"5342,708333","1979":"6319,792","1980":"7503,092784","1981":"8385,714286","1982":"8162,745098","1983":"8816,345846","1984":"9124,074074","1985":"9256,074766","1986":"9723,943662","1987":"10828,30249","1988":"11527,27334","1989":"13047,57313","1990":"15050,54714","1991":"15945,49982","1992":"16752,27713","1993":"18728,24343","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"30210,33565","2003":"31947,07869","2004":"35192,21862","2005":"41154,05653","2006":"41819,87001","2007":"44711,09539","2008":"39685,87463","2009":"39388,23133","2010":"40831,11408","2011":"40072,22264","2012":"38898,12396","2013":"35937,63426","2014":"34789,28674","2015":"36350,82163","2016":"","Country Name":"Virgin Islands (U.S.)","Country Code":"VIR","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"239,4286849","1986":"437,1295335","1987":"593,6535764","1988":"401,8749146","1989":"97,15788496","1990":"98,03186907","1991":"142,9658898","1992":"144,1486585","1993":"189,2605154","1994":"229,9548047","1995":"288,020278","1996":"337,0500631","1997":"361,2544884","1998":"360,600798","1999":"374,4764199","2000":"433,3337078","2001":"448,8822788","2002":"477,1058763","2003":"530,8618505","2004":"606,9043783","2005":"699,4997775","2006":"796,6715738","2007":"919,2092656","2008":"1164,612525","2009":"1232,369674","2010":"1333,583524","2011":"1542,670436","2012":"1754,547974","2013":"1907,564382","2014":"2052,319084","2015":"2107,012927","2016":"2185,690282","Country Name":"Vietnam","Country Code":"VNM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"1059,325238","1980":"980,8978599","1981":"832,7408112","1982":"808,2072211","1983":"886,3152203","1984":"1066,579832","1985":"951,3293863","1986":"892,1616137","1987":"961,1323787","1988":"1065,865286","1989":"1011,432843","1990":"1080,222889","1991":"1252,636231","1992":"1263,455261","1993":"1176,870452","1994":"1335,259799","1995":"1390,329687","1996":"1427,10248","1997":"1462,238195","1998":"1472,957091","1999":"1477,841822","2000":"1469,849149","2001":"1362,601731","2002":"1353,934819","2003":"1580,502724","2004":"1787,947023","2005":"1886,433359","2006":"2047,097823","2007":"2393,367265","2008":"2697,961375","2009":"2643,441423","2010":"2965,802434","2011":"3275,091684","2012":"3158,58688","2013":"3167,343056","2014":"3148,365103","2015":"2805,83414","2016":"2860,566475","Country Name":"Vanuatu","Country Code":"VUT","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"450,3980513","1961":"462,3273798","1962":"488,1389654","1963":"514,8089031","1964":"552,6793296","1965":"590,0670803","1966":"627,0115961","1967":"653,7258519","1968":"691,22195","1969":"745,5208414","1970":"802,4621824","1971":"868,0874255","1972":"981,0380313","1973":"1172,252966","1974":"1326,054114","1975":"1449,422939","1976":"1549,169185","1977":"1722,066542","1978":"1992,191305","1979":"2274,334922","1980":"2516,174576","1981":"2537,247359","1982":"2470,332387","1983":"2482,895346","1984":"2533,28543","1985":"2618,524602","1986":"3046,20816","1987":"3405,187751","1988":"3746,677264","1989":"3865,469727","1990":"4272,515663","1991":"4450,75965","1992":"4653,435427","1993":"4662,404444","1994":"4931,828265","1995":"5401,382849","1996":"5441,278112","1997":"5344,883594","1998":"5256,606181","1999":"5380,217274","2000":"5482,634801","2001":"5378,820313","2002":"5514,318267","2003":"6114,832188","2004":"6800,556902","2005":"7271,05608","2006":"7775,611044","2007":"8651,148313","2008":"9371,487885","2009":"8775,391659","2010":"9509,365934","2011":"10443,93997","2012":"10539,39198","2013":"10709,47343","2014":"10850,22273","2015":"10130,18172","2016":"10150,78828","Country Name":"World","Country Code":"WLD","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"770,1355858","1983":"706,2760353","1984":"685,5780864","1985":"597,2103716","1986":"628,5982405","1987":"693,8106521","1988":"824,0319749","1989":"758,5810301","1990":"772,2070276","1991":"765,4818829","1992":"799,0761694","1993":"796,1562446","1994":"1309,916028","1995":"1321,519135","1996":"1459,041298","1997":"1657,833377","1998":"1557,867761","1999":"1489,647875","2000":"1540,689023","2001":"1555,474051","2002":"1631,417027","2003":"1907,209417","2004":"2351,033814","2005":"2571,262348","2006":"2807,963899","2007":"3022,543121","2008":"3509,820223","2009":"3035,112838","2010":"3453,487434","2011":"3942,009827","2012":"4234,554443","2013":"4219,065123","2014":"4178,973369","2015":"4149,363444","2016":"4027,76137","Country Name":"Samoa","Country Code":"WSM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"1087,762401","2001":"1490,361033","2002":"1587,505829","2003":"1969,562713","2004":"2135,332847","2005":"2190,552079","2006":"2371,662079","2007":"2788,479464","2008":"3254,860674","2009":"3209,694109","2010":"3283,211938","2011":"3712,613666","2012":"3586,15377","2013":"3877,031087","2014":"4054,721339","2015":"3574,481782","2016":"3661,429847","Country Name":"Kosovo","Country Code":"XKX","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"468,3780079","1991":"468,3739664","1992":"485,0556996","1993":"382,9763204","1994":"283,6347307","1995":"277,9769717","1996":"364,1212046","1997":"416,7870194","1998":"374,3573128","1999":"439,6972109","2000":"539,1043652","2001":"535,8330521","2002":"565,2083683","2003":"605,1647335","2004":"693,0835669","2005":"813,9643857","2006":"901,7599875","2007":"995,6284828","2008":"1203,720733","2009":"1093,812918","2010":"1309,23196","2011":"1349,42025","2012":"1421,171575","2013":"1580,181601","2014":"1647,033657","2015":"1401,903319","2016":"990,334774","Country Name":"Yemen","Country Code":"YEM","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"435,4500279","1961":"446,6566075","1962":"463,7962379","1963":"500,9698083","1964":"537,2748776","1965":"572,0300613","1966":"607,853043","1967":"660,9703783","1968":"696,811705","1969":"765,2986466","1970":"818,4881681","1971":"880,0079189","1972":"899,8018668","1973":"1201,332915","1974":"1469,851984","1975":"1483,137714","1976":"1388,84767","1977":"1505,001582","1978":"1688,835271","1979":"2032,637576","1980":"2853,928189","1981":"3004,789816","1982":"2701,523815","1983":"2826,705708","1984":"2728,787432","1985":"2098,305925","1986":"2434,013951","1987":"3116,813223","1988":"3362,111093","1989":"3584,101364","1990":"3140,590346","1991":"3288,289972","1992":"3481,407858","1993":"3389,987934","1994":"3445,701083","1995":"3752,649192","1996":"3496,972929","1997":"3555,004676","1998":"3161,120278","1999":"3088,863784","2000":"3037,22503","2001":"2681,7081","2002":"2518,398261","2003":"3775,608275","2004":"4863,51688","2005":"5414,634326","2006":"5631,703485","2007":"6125,039984","2008":"5786,59972","2009":"5888,602084","2010":"7362,76139","2011":"8049,954224","2012":"7548,163698","2013":"6876,953821","2014":"6479,625659","2015":"5769,77258","2016":"5273,59388","Country Name":"South Africa","Country Code":"ZAF","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"234,1661943","1961":"221,7284006","1962":"213,8942288","1963":"214,8529543","1964":"243,1053205","1965":"303,8825323","1966":"343,9120552","1967":"360,7702445","1968":"410,4862606","1969":"486,6926866","1970":"437,3064687","1971":"390,7129365","1972":"427,4629014","1973":"490,0663813","1974":"651,0935354","1975":"527,4432638","1976":"534,4810763","1977":"466,9372508","1978":"511,3883716","1979":"584,2668045","1980":"650,2547871","1981":"635,4669774","1982":"633,5176231","1983":"493,1820867","1984":"406,5202518","1985":"327,9925996","1986":"231,7708056","1987":"307,3370215","1988":"488,6288522","1989":"511,7399456","1990":"409,2579854","1991":"410,0718753","1992":"376,4574375","1993":"377,5723176","1994":"411,0389997","1995":"416,6613811","1996":"382,9151113","1997":"445,1711797","1998":"355,5380307","1999":"332,461627","2000":"341,9055625","2001":"378,2736238","2002":"377,1305244","2003":"429,1583434","2004":"530,2772217","2005":"691,3178164","2006":"1030,154199","2007":"1104,587985","2008":"1369,068249","2009":"1139,110233","2010":"1463,213573","2011":"1644,619672","2012":"1734,930612","2013":"1850,793359","2014":"1738,088202","2015":"1313,889646","2016":"1178,387905","Country Name":"Zambia","Country Code":"ZMB","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"},{"1960":"280,9945858","1961":"283,315869","1962":"279,4409888","1963":"280,566213","1964":"285,0531738","1965":"297,3634374","1966":"281,4908005","1967":"297,2318752","1968":"304,9821589","1969":"348,935805","1970":"364,0543603","1971":"407,1457497","1972":"483,7049037","1973":"577,8467216","1974":"672,555267","1975":"714,8055964","1976":"684,5540003","1977":"671,247912","1978":"649,1842978","1979":"747,9942905","1980":"932,2596107","1981":"1077,96535","1982":"1105,958801","1983":"967,1758497","1984":"761,445387","1985":"651,039658","1986":"692,6673021","1987":"725,3857544","1988":"813,6753821","1989":"836,787602","1990":"862,5865882","1991":"827,4869403","1992":"631,990604","1993":"601,8668765","1994":"619,8351382","1995":"628,1849247","1996":"742,5726729","1997":"728,4008356","1998":"538,2848555","1999":"568,4439527","2000":"547,3588785","2001":"548,0587312","2002":"507,3480034","2003":"453,3511552","2004":"454,3606654","2005":"444,7605075","2006":"414,796232","2007":"396,9982166","2008":"325,6785703","2009":"605,824121","2010":"713,6035062","2011":"839,0927936","2012":"955,648466","2013":"1011,227396","2014":"1027,407462","2015":"1018,693083","2016":"1008,597331","Country Name":"Zimbabwe","Country Code":"ZWE","Indicator Name":"GDP per capita (current US$)","Indicator Code":"NY.GDP.PCAP.CD"}]

/***/ }),
/* 914 */
/***/ (function(module, exports) {

module.exports = [{"1960":"65,56936585","1961":"65,98802439","1962":"66,36553659","1963":"66,71397561","1964":"67,04429268","1965":"67,3697561","1966":"67,699","1967":"68,03468293","1968":"68,37714634","1969":"68,72841463","1970":"69,08614634","1971":"69,44609756","1972":"69,79914634","1973":"70,13965854","1974":"70,46529268","1975":"70,77780488","1976":"71,08082927","1977":"71,37770732","1978":"71,66978049","1979":"71,95285366","1980":"72,22014634","1981":"72,46234146","1982":"72,67319512","1983":"72,84902439","1984":"72,9897561","1985":"73,09797561","1986":"73,17936585","1987":"73,24270732","1988":"73,2962439","1989":"73,3444878","1990":"73,38997561","1991":"73,43312195","1992":"73,4717561","1993":"73,50531707","1994":"73,5357561","1995":"73,56360976","1996":"73,58995122","1997":"73,61634146","1998":"73,64485366","1999":"73,6794878","2000":"73,72419512","2001":"73,78443902","2002":"73,86217073","2003":"73,95882927","2004":"74,07190244","2005":"74,19990244","2006":"74,33882927","2007":"74,4827561","2008":"74,62768293","2009":"74,77114634","2010":"74,91063415","2011":"75,04765854","2012":"75,18319512","2013":"75,31973171","2014":"75,45678049","2015":"75,59434146","2016":"","Country Name":"Aruba","Country Code":"ABW","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"32,33756098","1961":"32,78697561","1962":"33,22892683","1963":"33,66690244","1964":"34,10190244","1965":"34,53490244","1966":"34,96692683","1967":"35,39892683","1968":"35,83241463","1969":"36,26939024","1970":"36,71282927","1971":"37,1617561","1972":"37,62017073","1973":"38,08858537","1974":"38,571","1975":"39,06943902","1976":"39,58539024","1977":"40,11985366","1978":"40,67682927","1979":"41,25880488","1980":"41,8752439","1981":"42,53360976","1982":"43,23590244","1983":"43,98009756","1984":"44,76219512","1985":"45,57921951","1986":"46,42765854","1987":"47,29656098","1988":"48,17046341","1989":"49,03136585","1990":"49,85780488","1991":"50,6277561","1992":"51,3327561","1993":"51,97026829","1994":"52,54382927","1995":"53,06241463","1996":"53,54353659","1997":"54,00970732","1998":"54,48290244","1999":"54,97514634","2000":"55,49892683","2001":"56,06070732","2002":"56,65353659","2003":"57,26587805","2004":"57,89121951","2005":"58,51558537","2006":"59,12595122","2007":"59,70885366","2008":"60,25673171","2009":"60,76460976","2010":"61,23546341","2011":"61,6742439","2012":"62,09297561","2013":"62,50160976","2014":"62,90268293","2015":"63,29819512","2016":"","Country Name":"Afghanistan","Country Code":"AFG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"33,22602439","1961":"33,5477561","1962":"33,888","1963":"34,24473171","1964":"34,61746341","1965":"35,00221951","1966":"35,3965122","1967":"35,79785366","1968":"36,20226829","1969":"36,60721951","1970":"37,01421951","1971":"37,4257561","1972":"37,84331707","1973":"38,26185366","1974":"38,67531707","1975":"39,07212195","1976":"39,44119512","1977":"39,77246341","1978":"40,0614878","1979":"40,30778049","1980":"40,51092683","1981":"40,67558537","1982":"40,81436585","1983":"40,93782927","1984":"41,05302439","1985":"41,16134146","1986":"41,26070732","1987":"41,3514878","1988":"41,44160976","1989":"41,54358537","1990":"41,6694878","1991":"41,82846341","1992":"42,03465854","1993":"42,30309756","1994":"42,65029268","1995":"43,09812195","1996":"43,66595122","1997":"44,35514634","1998":"45,15958537","1999":"46,07078049","2000":"47,0767561","2001":"48,16263415","2002":"49,30156098","2003":"50,46612195","2004":"51,63285366","2005":"52,78770732","2006":"53,92712195","2007":"55,0475122","2008":"56,13929268","2009":"57,181","2010":"58,14112195","2011":"58,9912439","2012":"59,71843902","2013":"60,3217561","2014":"60,80673171","2015":"61,18934146","2016":"","Country Name":"Angola","Country Code":"AGO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"62,25436585","1961":"63,27346341","1962":"64,16285366","1963":"64,88709756","1964":"65,43819512","1965":"65,82739024","1966":"66,08931707","1967":"66,28721951","1968":"66,47495122","1969":"66,68160976","1970":"66,93258537","1971":"67,23887805","1972":"67,58595122","1973":"67,95795122","1974":"68,34834146","1975":"68,74121951","1976":"69,1155122","1977":"69,45617073","1978":"69,7542439","1979":"70,00965854","1980":"70,23597561","1981":"70,45446341","1982":"70,68512195","1983":"70,93739024","1984":"71,20653659","1985":"71,47121951","1986":"71,69756098","1987":"71,86195122","1988":"71,95329268","1989":"71,97858537","1990":"71,95878049","1991":"71,92626829","1992":"71,91797561","1993":"71,96480488","1994":"72,08073171","1995":"72,27626829","1996":"72,5514878","1997":"72,88395122","1998":"73,25063415","1999":"73,63553659","2000":"74,01402439","2001":"74,36292683","2002":"74,67065854","2003":"74,93470732","2004":"75,15709756","2005":"75,35702439","2006":"75,5612439","2007":"75,79492683","2008":"76,07265854","2009":"76,39487805","2010":"76,74790244","2011":"77,10846341","2012":"77,44826829","2013":"77,74709756","2014":"77,99839024","2015":"78,20314634","2016":"","Country Name":"Albania","Country Code":"ALB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Andorra","Country Code":"AND","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,81504508","1961":"47,39723206","1962":"47,97776787","1963":"48,56087439","1964":"49,14739471","1965":"49,7326573","1966":"50,30677928","1967":"50,86400174","1968":"51,40391625","1969":"51,93273186","1970":"52,46108727","1971":"53,00429598","1972":"53,57234795","1973":"54,16648165","1974":"54,78034283","1975":"55,40528375","1976":"56,03012295","1977":"56,64595166","1978":"57,25188409","1979":"57,8557942","1980":"58,46915408","1981":"59,10246046","1982":"59,75807979","1983":"60,4301399","1984":"61,10408176","1985":"61,75848361","1986":"62,37332608","1987":"62,93641318","1988":"63,44054214","1989":"63,88703262","1990":"64,31927281","1991":"64,68753688","1992":"64,98154247","1993":"65,34564806","1994":"65,71336137","1995":"66,12496448","1996":"66,48417504","1997":"66,82631","1998":"67,1432097","1999":"67,43459739","2000":"67,70347437","2001":"67,95668321","2002":"68,20217114","2003":"68,44820923","2004":"68,69853756","2005":"68,95180524","2006":"69,20331866","2007":"69,44569144","2008":"69,6716377","2009":"69,87929924","2010":"70,07136083","2011":"70,25569431","2012":"70,44067505","2013":"70,63137828","2014":"70,82758949","2015":"71,02843854","2016":"","Country Name":"Arab World","Country Code":"ARB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"52,28870732","1961":"53,33404878","1962":"54,3764878","1963":"55,415","1964":"56,44607317","1965":"57,46119512","1966":"58,44934146","1967":"59,40046341","1968":"60,30604878","1969":"61,16207317","1970":"61,96704878","1971":"62,72243902","1972":"63,43629268","1973":"64,11409756","1974":"64,76085366","1975":"65,37856098","1976":"65,9682439","1977":"66,52887805","1978":"67,06346341","1979":"67,57302439","1980":"68,05804878","1981":"68,52053659","1982":"68,95997561","1983":"69,37787805","1984":"69,7752439","1985":"70,15456098","1986":"70,51534146","1987":"70,85807317","1988":"71,1857561","1989":"71,49941463","1990":"71,80202439","1991":"72,09412195","1992":"72,37719512","1993":"72,65326829","1994":"72,92429268","1995":"73,19226829","1996":"73,45863415","1997":"73,72390244","1998":"73,9875122","1999":"74,25002439","2000":"74,50946341","2001":"74,76687805","2002":"75,01831707","2003":"75,26382927","2004":"75,50141463","2005":"75,72853659","2006":"75,94419512","2007":"76,14834146","2008":"76,34041463","2009":"76,52243902","2010":"76,69487805","2011":"76,85978049","2012":"77,01914634","2013":"77,175","2014":"77,32936585","2015":"77,4842439","2016":"","Country Name":"United Arab Emirates","Country Code":"ARE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"65,21553659","1961":"65,3385122","1962":"65,43260976","1963":"65,50939024","1964":"65,58241463","1965":"65,66868293","1966":"65,7822439","1967":"65,93002439","1968":"66,1134878","1969":"66,33509756","1970":"66,59082927","1971":"66,87312195","1972":"67,16795122","1973":"67,46531707","1974":"67,75865854","1975":"68,04795122","1976":"68,33670732","1977":"68,62943902","1978":"68,92663415","1979":"69,22431707","1980":"69,5144878","1981":"69,78665854","1982":"70,03531707","1983":"70,257","1984":"70,45419512","1985":"70,63139024","1986":"70,79907317","1987":"70,9677561","1988":"71,14590244","1989":"71,33753659","1990":"71,54365854","1991":"71,76329268","1992":"71,98895122","1993":"72,21565854","1994":"72,44139024","1995":"72,66512195","1996":"72,88734146","1997":"73,10804878","1998":"73,32768293","1999":"73,54426829","2000":"73,75580488","2001":"73,96031707","2002":"74,15578049","2003":"74,34126829","2004":"74,51878049","2005":"74,68831707","2006":"74,85141463","2007":"75,01156098","2008":"75,17129268","2009":"75,33109756","2010":"75,49202439","2011":"75,65356098","2012":"75,8147561","2013":"75,97456098","2014":"76,134","2015":"76,29302439","2016":"","Country Name":"Argentina","Country Code":"ARG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"65,86346341","1961":"66,28439024","1962":"66,70985366","1963":"67,13785366","1964":"67,56541463","1965":"67,99153659","1966":"68,41473171","1967":"68,8304878","1968":"69,22926829","1969":"69,60004878","1970":"69,92426829","1971":"70,18287805","1972":"70,36734146","1973":"70,47965854","1974":"70,52634146","1975":"70,53192683","1976":"70,52941463","1977":"70,54290244","1978":"70,58297561","1979":"70,64126829","1980":"70,68453659","1981":"70,66160976","1982":"70,5355122","1983":"70,29014634","1984":"69,93568293","1985":"69,5","1986":"69,02429268","1987":"68,56756098","1988":"68,18209756","1989":"67,8995122","1990":"67,74878049","1991":"67,74268293","1992":"67,86260976","1993":"68,08565854","1994":"68,39860976","1995":"68,7895122","1996":"69,24312195","1997":"69,73885366","1998":"70,24817073","1999":"70,74534146","2000":"71,19965854","2001":"71,58197561","2002":"71,88839024","2003":"72,12097561","2004":"72,28473171","2005":"72,39878049","2006":"72,4912439","2007":"72,5932439","2008":"72,72590244","2009":"72,8987561","2010":"73,10929268","2011":"73,34597561","2012":"73,58621951","2013":"73,81192683","2014":"74,01958537","2015":"74,20619512","2016":"","Country Name":"Armenia","Country Code":"ARM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"American Samoa","Country Code":"ASM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"61,78273171","1961":"62,19541463","1962":"62,59853659","1963":"62,99258537","1964":"63,37858537","1965":"63,75607317","1966":"64,12556098","1967":"64,48807317","1968":"64,84212195","1969":"65,18919512","1970":"65,52934146","1971":"65,86202439","1972":"66,18826829","1973":"66,508","1974":"66,82178049","1975":"67,13007317","1976":"67,43339024","1977":"67,7307561","1978":"68,02263415","1979":"68,30953659","1980":"68,59197561","1981":"68,86895122","1982":"69,14092683","1983":"69,40792683","1984":"69,67046341","1985":"69,9285122","1986":"70,18256098","1987":"70,43263415","1988":"70,67973171","1989":"70,92282927","1990":"71,16295122","1991":"71,40058537","1992":"71,63470732","1993":"71,86585366","1994":"72,093","1995":"72,31768293","1996":"72,53885366","1997":"72,75756098","1998":"72,97378049","1999":"73,18602439","2000":"73,39729268","2001":"73,60709756","2002":"73,81543902","2003":"74,02178049","2004":"74,22614634","2005":"74,42543902","2006":"74,61914634","2007":"74,80473171","2008":"74,98219512","2009":"75,15153659","2010":"75,31329268","2011":"75,46953659","2012":"75,62180488","2013":"75,77365854","2014":"75,92409756","2015":"76,07563415","2016":"","Country Name":"Antigua and Barbuda","Country Code":"ATG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"70,81707317","1961":"70,97317073","1962":"70,94243902","1963":"70,91170732","1964":"70,88097561","1965":"70,8502439","1966":"70,8195122","1967":"70,86926829","1968":"70,91902439","1969":"70,96878049","1970":"71,01853659","1971":"71,06829268","1972":"71,45756098","1973":"71,84682927","1974":"72,23609756","1975":"72,62536585","1976":"73,01463415","1977":"73,34439024","1978":"73,67414634","1979":"74,00390244","1980":"74,33365854","1981":"74,66341463","1982":"74,90487805","1983":"75,14634146","1984":"75,38780488","1985":"75,62926829","1986":"75,87073171","1987":"76,15170732","1988":"76,43268293","1989":"76,71365854","1990":"76,99463415","1991":"77,27560976","1992":"77,37804878","1993":"77,87804878","1994":"77,87804878","1995":"77,82926829","1996":"78,07804878","1997":"78,4804878","1998":"78,63170732","1999":"78,93170732","2000":"79,23414634","2001":"79,63414634","2002":"79,93658537","2003":"80,23902439","2004":"80,4902439","2005":"80,84146341","2006":"81,04146341","2007":"81,29268293","2008":"81,39512195","2009":"81,54390244","2010":"81,69512195","2011":"81,89512195","2012":"82,04634146","2013":"82,14878049","2014":"82,3","2015":"82,45121951","2016":"","Country Name":"Australia","Country Code":"AUS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,58560976","1961":"69,57731707","1962":"69,3095122","1963":"69,44365854","1964":"69,92195122","1965":"69,72219512","1966":"70,04585366","1967":"69,91780488","1968":"70,05756098","1969":"69,83317073","1970":"69,91463415","1971":"70,11463415","1972":"70,46341463","1973":"71,01463415","1974":"71,01219512","1975":"71,11463415","1976":"71,56585366","1977":"71,91463415","1978":"72,01219512","1979":"72,31219512","1980":"72,46341463","1981":"72,81219512","1982":"72,96097561","1983":"73,01219512","1984":"73,61219512","1985":"73,81463415","1986":"74,31707317","1987":"74,76829268","1988":"75,21707317","1989":"75,26585366","1990":"75,56829268","1991":"75,61707317","1992":"75,81707317","1993":"76,06829268","1994":"76,4195122","1995":"76,66829268","1996":"76,87073171","1997":"77,3195122","1998":"77,67073171","1999":"77,87560976","2000":"78,12682927","2001":"78,57560976","2002":"78,67804878","2003":"78,63170732","2004":"79,1804878","2005":"79,33170732","2006":"79,8804878","2007":"80,1804878","2008":"80,43170732","2009":"80,33170732","2010":"80,5804878","2011":"80,98292683","2012":"80,93658537","2013":"81,13658537","2014":"81,4902439","2015":"81,84390244","2016":"","Country Name":"Austria","Country Code":"AUT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,78085366","1961":"60,99639024","1962":"61,20292683","1963":"61,4074878","1964":"61,61258537","1965":"61,82221951","1966":"62,03639024","1967":"62,25009756","1968":"62,45782927","1969":"62,65758537","1970":"62,84339024","1971":"63,00919512","1972":"63,15402439","1973":"63,27836585","1974":"63,38221951","1975":"63,46909756","1976":"63,5425122","1977":"63,61146341","1978":"63,67995122","1979":"63,75595122","1980":"63,84804878","1981":"63,96778049","1982":"64,11263415","1983":"64,27802439","1984":"64,45480488","1985":"64,61707317","1986":"64,73387805","1987":"64,78953659","1988":"64,78265854","1989":"64,7245122","1990":"64,64721951","1991":"64,59458537","1992":"64,60580488","1993":"64,7062439","1994":"64,90109756","1995":"65,17473171","1996":"65,49436585","1997":"65,82126829","1998":"66,1277561","1999":"66,40985366","2000":"66,68158537","2001":"66,9724878","2002":"67,31060976","2003":"67,71256098","2004":"68,17343902","2005":"68,67709756","2006":"69,19904878","2007":"69,70621951","2008":"70,171","2009":"70,5784878","2010":"70,91860976","2011":"71,18963415","2012":"71,40568293","2013":"71,58141463","2014":"71,7247561","2015":"71,84519512","2016":"","Country Name":"Azerbaijan","Country Code":"AZE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,23604878","1961":"41,54546341","1962":"41,86039024","1963":"42,17780488","1964":"42,49221951","1965":"42,79014634","1966":"43,05507317","1967":"43,28002439","1968":"43,46797561","1969":"43,62743902","1970":"43,78192683","1971":"43,95992683","1972":"44,18495122","1973":"44,47146341","1974":"44,81846341","1975":"45,21890244","1976":"45,65321951","1977":"46,09241463","1978":"46,51297561","1979":"46,90243902","1980":"47,26231707","1981":"47,60468293","1982":"47,93909756","1983":"48,26312195","1984":"48,56229268","1985":"48,78917073","1986":"48,8847561","1987":"48,82804878","1988":"48,6294878","1989":"48,32502439","1990":"48,00012195","1991":"47,76268293","1992":"47,69865854","1993":"47,8544878","1994":"48,23468293","1995":"48,79719512","1996":"49,46004878","1997":"50,11880488","1998":"50,6925122","1999":"51,15019512","2000":"51,48792683","2001":"51,7287561","2002":"51,93319512","2003":"52,15221951","2004":"52,40380488","2005":"52,70536585","2006":"53,06378049","2007":"53,46646341","2008":"53,90187805","2009":"54,36202439","2010":"54,837","2011":"55,31441463","2012":"55,78287805","2013":"56,2345122","2014":"56,66331707","2015":"57,06934146","2016":"","Country Name":"Burundi","Country Code":"BDI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,70195122","1961":"70,52097561","1962":"70,2195122","1963":"70,05146341","1964":"70,75512195","1965":"70,62536585","1966":"70,70634146","1967":"71,01292683","1968":"70,69317073","1969":"70,76487805","1970":"70,97195122","1971":"71,0604878","1972":"71,40512195","1973":"71,63536585","1974":"71,98585366","1975":"71,97121951","1976":"72,1197561","1977":"72,77390244","1978":"72,69804878","1979":"73,19365854","1980":"73,20707317","1981":"73,62170732","1982":"73,88804878","1983":"73,86902439","1984":"74,40487805","1985":"74,5202439","1986":"74,73170732","1987":"75,36585366","1988":"75,56585366","1989":"75,63268293","1990":"76,05195122","1991":"76,19219512","1992":"76,35121951","1993":"76,34536585","1994":"76,69170732","1995":"76,84073171","1996":"77,18731707","1997":"77,37073171","1998":"77,47317073","1999":"77,6195122","2000":"77,72195122","2001":"77,97317073","2002":"78,07560976","2003":"78,12926829","2004":"78,87804878","2005":"78,9804878","2006":"79,3804878","2007":"79,78292683","2008":"79,6804878","2009":"79,98292683","2010":"80,18292683","2011":"80,58536585","2012":"80,38536585","2013":"80,58780488","2014":"81,28780488","2015":"81,28780488","2016":"","Country Name":"Belgium","Country Code":"BEL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"37,28641463","1961":"37,73885366","1962":"38,19370732","1963":"38,65390244","1964":"39,12239024","1965":"39,59953659","1966":"40,08621951","1967":"40,58041463","1968":"41,08214634","1969":"41,58995122","1970":"42,10746341","1971":"42,6372439","1972":"43,179","1973":"43,72985366","1974":"44,28446341","1975":"44,82890244","1976":"45,34570732","1977":"45,82834146","1978":"46,27934146","1979":"46,70578049","1980":"47,12973171","1981":"47,57931707","1982":"48,07753659","1983":"48,63792683","1984":"49,26143902","1985":"49,95160976","1986":"50,70395122","1987":"51,49085366","1988":"52,27814634","1989":"53,03460976","1990":"53,71395122","1991":"54,26785366","1992":"54,67817073","1993":"54,94580488","1994":"55,0797561","1995":"55,11012195","1996":"55,08012195","1997":"55,04558537","1998":"55,05470732","1999":"55,13558537","2000":"55,3107561","2001":"55,58917073","2002":"55,94865854","2003":"56,36209756","2004":"56,81492683","2005":"57,28560976","2006":"57,74912195","2007":"58,18897561","2008":"58,59070732","2009":"58,94680488","2010":"59,25926829","2011":"59,53660976","2012":"59,79785366","2013":"60,0565122","2014":"60,31812195","2015":"60,58468293","2016":"","Country Name":"Benin","Country Code":"BEN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"34,47790244","1961":"34,93863415","1962":"35,40587805","1963":"35,87965854","1964":"36,35895122","1965":"36,8377561","1966":"37,30904878","1967":"37,76831707","1968":"38,21653659","1969":"38,65773171","1970":"39,09687805","1971":"39,5385122","1972":"39,99517073","1973":"40,48034146","1974":"41,00658537","1975":"41,60639024","1976":"42,31329268","1977":"43,1302439","1978":"44,03978049","1979":"45,01339024","1980":"45,99756098","1981":"46,92831707","1982":"47,74963415","1983":"48,422","1984":"48,92436585","1985":"49,25121951","1986":"49,41753659","1987":"49,47226829","1988":"49,46290244","1989":"49,41987805","1990":"49,36560976","1991":"49,31646341","1992":"49,27795122","1993":"49,25965854","1994":"49,27770732","1995":"49,34031707","1996":"49,45080488","1997":"49,60587805","1998":"49,80665854","1999":"50,06065854","2000":"50,38285366","2001":"50,78860976","2002":"51,28165854","2003":"51,85726829","2004":"52,5072439","2005":"53,21843902","2006":"53,9752439","2007":"54,75565854","2008":"55,53570732","2009":"56,29487805","2010":"57,01468293","2011":"57,68112195","2012":"58,29582927","2013":"58,86036585","2014":"59,37529268","2015":"59,84465854","2016":"","Country Name":"Burkina Faso","Country Code":"BFA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,82982927","1961":"46,45792683","1962":"47,08346341","1963":"47,69143902","1964":"48,25339024","1965":"48,68646341","1966":"48,89182927","1967":"48,83404878","1968":"48,53312195","1969":"48,04846341","1970":"47,52285366","1971":"47,13704878","1972":"47,03329268","1973":"47,2934878","1974":"47,92663415","1975":"48,86580488","1976":"49,9812439","1977":"51,09768293","1978":"52,08034146","1979":"52,87729268","1980":"53,47704878","1981":"53,91702439","1982":"54,29256098","1983":"54,67956098","1984":"55,10443902","1985":"55,58065854","1986":"56,10519512","1987":"56,65907317","1988":"57,22587805","1989":"57,80614634","1990":"58,40856098","1991":"59,04026829","1992":"59,70734146","1993":"60,40729268","1994":"61,13202439","1995":"61,87236585","1996":"62,61256098","1997":"63,33887805","1998":"64,03819512","1999":"64,70241463","2000":"65,32512195","2001":"65,90446341","2002":"66,44965854","2003":"66,96736585","2004":"67,46260976","2005":"67,94129268","2006":"68,41026829","2007":"68,87390244","2008":"69,33368293","2009":"69,79117073","2010":"70,24204878","2011":"70,68056098","2012":"71,10090244","2013":"71,4977561","2014":"71,87165854","2015":"72,22160976","2016":"","Country Name":"Bangladesh","Country Code":"BGD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,24756098","1961":"70,19560976","1962":"69,49195122","1963":"70,30926829","1964":"71,12121951","1965":"71,29390244","1966":"71,22341463","1967":"70,41390244","1968":"71,22512195","1969":"70,43","1970":"71,25634146","1971":"70,87365854","1972":"70,8995122","1973":"71,34219512","1974":"71,20804878","1975":"71,0497561","1976":"71,39487805","1977":"70,81609756","1978":"71,18463415","1979":"71,30829268","1980":"71,15756098","1981":"71,57195122","1982":"71,18609756","1983":"71,38634146","1984":"71,4997561","1985":"71,22804878","1986":"71,73073171","1987":"71,52682927","1988":"71,60439024","1989":"71,72243902","1990":"71,64146341","1991":"71,56097561","1992":"71,49439024","1993":"71,34682927","1994":"71,20878049","1995":"71,05341463","1996":"70,89731707","1997":"70,35121951","1998":"71,06097561","1999":"71,41219512","2000":"71,66341463","2001":"71,76829268","2002":"71,86585366","2003":"72,06585366","2004":"72,56341463","2005":"72,56097561","2006":"72,61219512","2007":"72,66341463","2008":"72,96341463","2009":"73,41219512","2010":"73,51219512","2011":"74,16341463","2012":"74,31463415","2013":"74,86097561","2014":"74,46585366","2015":"74,46585366","2016":"","Country Name":"Bulgaria","Country Code":"BGR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"52,09243902","1961":"53,46056098","1962":"54,81929268","1963":"56,14709756","1964":"57,42587805","1965":"58,64007317","1966":"59,78260976","1967":"60,858","1968":"61,86973171","1969":"62,81729268","1970":"63,69919512","1971":"64,51797561","1972":"65,27770732","1973":"65,98641463","1974":"66,64660976","1975":"67,26382927","1976":"67,84004878","1977":"68,37778049","1978":"68,87897561","1979":"69,34512195","1980":"69,77719512","1981":"70,17265854","1982":"70,5315122","1983":"70,85470732","1984":"71,14678049","1985":"71,41273171","1986":"71,65658537","1987":"71,88336585","1988":"72,09909756","1989":"72,30880488","1990":"72,51597561","1991":"72,72260976","1992":"72,92719512","1993":"73,1292439","1994":"73,3302439","1995":"73,53073171","1996":"73,7322439","1997":"73,93429268","1998":"74,13436585","1999":"74,33297561","2000":"74,52802439","2001":"74,71797561","2002":"74,90078049","2003":"75,07690244","2004":"75,24536585","2005":"75,40717073","2006":"75,56339024","2007":"75,71456098","2008":"75,86326829","2009":"76,01002439","2010":"76,15531707","2011":"76,29963415","2012":"76,44295122","2013":"76,58521951","2014":"76,72546341","2015":"76,86519512","2016":"","Country Name":"Bahrain","Country Code":"BHR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"62,72904878","1961":"63,0725122","1962":"63,40802439","1963":"63,73704878","1964":"64,05909756","1965":"64,37468293","1966":"64,68378049","1967":"64,98739024","1968":"65,28502439","1969":"65,57668293","1970":"65,86385366","1971":"66,14556098","1972":"66,42226829","1973":"66,693","1974":"66,9587561","1975":"67,22002439","1976":"67,47631707","1977":"67,72812195","1978":"67,97495122","1979":"68,21878049","1980":"68,45860976","1981":"68,69541463","1982":"68,92968293","1983":"69,16046341","1984":"69,3872439","1985":"69,61060976","1986":"69,82909756","1987":"70,04278049","1988":"70,24965854","1989":"70,44778049","1990":"70,63065854","1991":"70,79180488","1992":"70,92963415","1993":"71,04814634","1994":"71,15480488","1995":"71,26256098","1996":"71,39043902","1997":"71,54987805","1998":"71,74787805","1999":"71,98436585","2000":"72,25429268","2001":"72,54509756","2002":"72,84126829","2003":"73,12729268","2004":"73,39465854","2005":"73,63936585","2006":"73,85946341","2007":"74,06146341","2008":"74,25095122","2009":"74,42841463","2010":"74,59690244","2011":"74,75792683","2012":"74,91397561","2013":"75,06653659","2014":"75,21763415","2015":"75,36878049","2016":"","Country Name":"Bahamas","Country Code":"BHS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,27073171","1961":"60,93604878","1962":"61,56290244","1963":"62,15826829","1964":"62,73009756","1965":"63,28941463","1966":"63,84329268","1967":"64,39626829","1968":"64,94982927","1969":"65,5044878","1970":"66,06214634","1971":"66,62173171","1972":"67,17565854","1973":"67,71339024","1974":"68,22692683","1975":"68,70026829","1976":"69,11690244","1977":"69,47292683","1978":"69,76795122","1979":"70,00758537","1980":"70,21358537","1981":"70,4177561","1982":"70,63717073","1983":"70,87868293","1984":"71,13256098","1985":"71,35207317","1986":"71,47436585","1987":"71,46343902","1988":"71,31678049","1989":"71,06370732","1990":"70,78029268","1991":"70,56939024","1992":"70,51414634","1993":"70,66521951","1994":"71,02609756","1995":"71,56317073","1996":"72,20685366","1997":"72,8577561","1998":"73,43731707","1999":"73,91063415","2000":"74,26221951","2001":"74,50192683","2002":"74,67558537","2003":"74,82236585","2004":"74,95597561","2005":"75,08753659","2006":"75,22295122","2007":"75,3595122","2008":"75,498","2009":"75,64141463","2010":"75,79373171","2011":"75,95346341","2012":"76,12014634","2013":"76,29034146","2014":"76,46356098","2015":"76,64029268","2016":"","Country Name":"Bosnia and Herz.","Country Code":"BIH","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,70809756","1961":"68,21265854","1962":"68,63582927","1963":"68,99207317","1964":"69,28992683","1965":"69,53741463","1966":"69,73460976","1967":"69,88165854","1968":"69,98263415","1969":"70,04514634","1970":"70,0792439","1971":"70,093","1972":"70,09241463","1973":"70,08243902","1974":"70,06807317","1975":"70,04826829","1976":"70,01590244","1977":"69,96741463","1978":"69,90631707","1979":"69,84163415","1980":"69,80202439","1981":"69,81917073","1982":"69,90821951","1983":"70,06465854","1984":"70,27192683","1985":"70,99268293","1986":"71,5495122","1987":"70,9902439","1988":"71,34146341","1989":"71,48292683","1990":"70,83658537","1991":"70,37804878","1992":"70,02195122","1993":"68,97073171","1994":"68,76829268","1995":"68,46097561","1996":"68,51219512","1997":"68,46097561","1998":"68,40731707","1999":"67,90731707","2000":"68,91219512","2001":"68,50731707","2002":"68,05609756","2003":"68,55365854","2004":"68,95609756","2005":"68,85121951","2006":"69,40487805","2007":"70,20731707","2008":"70,45609756","2009":"70,40731707","2010":"70,40487805","2011":"70,55365854","2012":"71,96585366","2013":"72,47073171","2014":"72,97073171","2015":"73,62439024","2016":"","Country Name":"Belarus","Country Code":"BLR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"59,96136585","1961":"60,51278049","1962":"61,07434146","1963":"61,64604878","1964":"62,22482927","1965":"62,80612195","1966":"63,38534146","1967":"63,95439024","1968":"64,50770732","1969":"65,03919512","1970":"65,54626829","1971":"66,02631707","1972":"66,48090244","1973":"66,91209756","1974":"67,324","1975":"67,7187561","1976":"68,10209756","1977":"68,47814634","1978":"68,84702439","1979":"69,2087561","1980":"69,56636585","1981":"69,9197561","1982":"70,26426829","1983":"70,58926829","1984":"70,88317073","1985":"71,13136585","1986":"71,31734146","1987":"71,43058537","1988":"71,46560976","1989":"71,4184878","1990":"71,28373171","1991":"71,05441463","1992":"70,74660976","1993":"70,38239024","1994":"69,98629268","1995":"69,58878049","1996":"69,21980488","1997":"68,90185366","1998":"68,65390244","1999":"68,4895122","2000":"68,41887805","2001":"68,44412195","2002":"68,54436585","2003":"68,69712195","2004":"68,88482927","2005":"69,08536585","2006":"69,27597561","2007":"69,4434878","2008":"69,57970732","2009":"69,68356098","2010":"69,76202439","2011":"69,83017073","2012":"69,90865854","2013":"70,01307317","2014":"70,1475122","2015":"70,31097561","2016":"","Country Name":"Belize","Country Code":"BLZ","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"68,89780488","1966":"","1967":"","1968":"","1969":"","1970":"70,29","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"72,30463415","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"74,0295122","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"77,88536585","2001":"77,88536585","2002":"78,08780488","2003":"78,33414634","2004":"78,48536585","2005":"78,68536585","2006":"78,88780488","2007":"78,93414634","2008":"79,23658537","2009":"79,38843902","2010":"79,28853659","2011":"81,15268293","2012":"81,67780488","2013":"80,57243902","2014":"80,79731707","2015":"81,01219512","2016":"","Country Name":"Bermuda","Country Code":"BMU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"42,11831707","1961":"42,43343902","1962":"42,75704878","1963":"43,08914634","1964":"43,43021951","1965":"43,77978049","1966":"44,13780488","1967":"44,50480488","1968":"44,8797561","1969":"45,26368293","1970":"45,65556098","1971":"46,05539024","1972":"46,46321951","1973":"46,8785122","1974":"47,30229268","1975":"47,73302439","1976":"48,17173171","1977":"48,61890244","1978":"49,07302439","1979":"49,53460976","1980":"50,00414634","1981":"50,48214634","1982":"50,96809756","1983":"51,46153659","1984":"51,96292683","1985":"52,47080488","1986":"52,98565854","1987":"53,50797561","1988":"54,03526829","1989":"54,56904878","1990":"55,10729268","1991":"55,65002439","1992":"56,1982439","1993":"56,74943902","1994":"57,30512195","1995":"57,86329268","1996":"58,42495122","1997":"58,98860976","1998":"59,55426829","1999":"60,12141463","2000":"60,69004878","2001":"61,25919512","2002":"61,82882927","2003":"62,39897561","2004":"62,96863415","2005":"63,53978049","2006":"64,11495122","2007":"64,69363415","2008":"65,27282927","2009":"65,84656098","2010":"66,40580488","2011":"66,94160976","2012":"67,44695122","2013":"67,91736585","2014":"68,35031707","2015":"68,74980488","2016":"","Country Name":"Bolivia","Country Code":"BOL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"54,21302439","1961":"54,7267561","1962":"55,24470732","1963":"55,76092683","1964":"56,2715122","1965":"56,77543902","1966":"57,27326829","1967":"57,7645122","1968":"58,2462439","1969":"58,71356098","1970":"59,15558537","1971":"59,56246341","1972":"59,9292439","1973":"60,25543902","1974":"60,5445122","1975":"60,80292683","1976":"61,04107317","1977":"61,27178049","1978":"61,50695122","1979":"61,75497561","1980":"62,02029268","1981":"62,30387805","1982":"62,6022439","1983":"62,91146341","1984":"63,23207317","1985":"63,56256098","1986":"63,90046341","1987":"64,24582927","1988":"64,59821951","1989":"64,96119512","1990":"65,34031707","1991":"65,74268293","1992":"66,17180488","1993":"66,62768293","1994":"67,10682927","1995":"67,60168293","1996":"68,10473171","1997":"68,60585366","1998":"69,09504878","1999":"69,56721951","2000":"70,01639024","2001":"70,44256098","2002":"70,84921951","2003":"71,24043902","2004":"71,61819512","2005":"71,986","2006":"72,34934146","2007":"72,70973171","2008":"73,06865854","2009":"73,42309756","2010":"73,76956098","2011":"74,1005122","2012":"74,41043902","2013":"74,69634146","2014":"74,9582439","2015":"75,19912195","2016":"","Country Name":"Brazil","Country Code":"BRA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,73804878","1961":"61,21509756","1962":"61,69617073","1963":"62,18226829","1964":"62,67287805","1965":"63,16102439","1966":"63,63863415","1967":"64,09873171","1968":"64,53526829","1969":"64,94578049","1970":"65,3312439","1971":"65,69517073","1972":"66,04407317","1973":"66,3824878","1974":"66,71439024","1975":"67,04080488","1976":"67,36221951","1977":"67,67714634","1978":"67,98456098","1979":"68,28446341","1980":"68,57736585","1981":"68,86378049","1982":"69,14368293","1983":"69,41660976","1984":"69,68402439","1985":"69,94495122","1986":"70,20136585","1987":"70,45178049","1988":"70,69668293","1989":"70,93658537","1990":"71,17195122","1991":"71,40334146","1992":"71,63121951","1993":"71,85409756","1994":"72,0724878","1995":"72,28439024","1996":"72,48880488","1997":"72,68421951","1998":"72,87065854","1999":"73,04858537","2000":"73,2195122","2001":"73,38392683","2002":"73,54631707","2003":"73,70717073","2004":"73,86802439","2005":"74,03034146","2006":"74,19363415","2007":"74,35741463","2008":"74,52170732","2009":"74,6854878","2010":"74,84880488","2011":"75,01014634","2012":"75,17002439","2013":"75,32795122","2014":"75,48390244","2015":"75,63790244","2016":"","Country Name":"Barbados","Country Code":"BRB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"62,50036585","1961":"63,04895122","1962":"63,57590244","1963":"64,07619512","1964":"64,54831707","1965":"64,99229268","1966":"65,41212195","1967":"65,81439024","1968":"66,20514634","1969":"66,58841463","1970":"66,96519512","1971":"67,3355122","1972":"67,69885366","1973":"68,05368293","1974":"68,40053659","1975":"68,73939024","1976":"69,0712439","1977":"69,39609756","1978":"69,71343902","1979":"70,02480488","1980":"70,32965854","1981":"70,6275122","1982":"70,91936585","1983":"71,20621951","1984":"71,48607317","1985":"71,75992683","1986":"72,02878049","1987":"72,29263415","1988":"72,5504878","1989":"72,80334146","1990":"73,05119512","1991":"73,29504878","1992":"73,53339024","1993":"73,7672439","1994":"73,99709756","1995":"74,22295122","1996":"74,44431707","1997":"74,66217073","1998":"74,87553659","1999":"75,08541463","2000":"75,29478049","2001":"75,50765854","2002":"75,72302439","2003":"75,93887805","2004":"76,14921951","2005":"76,34158537","2006":"76,50043902","2007":"76,61934146","2008":"76,6957561","2009":"76,73670732","2010":"76,75419512","2011":"76,76719512","2012":"76,79519512","2013":"76,85121951","2014":"76,94173171","2015":"77,0667561","2016":"","Country Name":"Brunei","Country Code":"BRN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"34,52339024","1961":"34,88673171","1962":"35,28817073","1963":"35,73221951","1964":"36,21790244","1965":"36,74321951","1966":"37,30109756","1967":"37,87946341","1968":"38,46731707","1969":"39,05565854","1970":"39,6345122","1971":"40,19397561","1972":"40,73507317","1973":"41,26287805","1974":"41,78334146","1975":"42,30943902","1976":"42,85863415","1977":"43,44382927","1978":"44,0724878","1979":"44,74656098","1980":"45,45902439","1981":"46,19841463","1982":"46,9487561","1983":"47,69658537","1984":"48,43641463","1985":"49,1682439","1986":"49,89558537","1987":"50,62643902","1988":"51,36629268","1989":"52,11568293","1990":"52,87207317","1991":"53,63046341","1992":"54,38587805","1993":"55,13878049","1994":"55,88917073","1995":"56,64753659","1996":"57,42234146","1997":"58,22109756","1998":"59,04478049","1999":"59,88890244","2000":"60,74843902","2001":"61,61443902","2002":"62,47387805","2003":"63,31129268","2004":"64,11470732","2005":"64,86965854","2006":"65,56521951","2007":"66,20039024","2008":"66,77765854","2009":"67,2994878","2010":"67,77429268","2011":"68,21095122","2012":"68,62490244","2013":"69,02507317","2014":"69,41797561","2015":"69,80712195","2016":"","Country Name":"Bhutan","Country Code":"BTN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"50,54773171","1961":"50,90763415","1962":"51,25502439","1963":"51,59341463","1964":"51,9287561","1965":"52,27253659","1966":"52,63570732","1967":"53,0282439","1968":"53,45763415","1969":"53,92787805","1970":"54,44346341","1971":"55,00841463","1972":"55,61273171","1973":"56,245","1974":"56,89473171","1975":"57,5504878","1976":"58,20431707","1977":"58,84526829","1978":"59,46029268","1979":"60,03592683","1980":"60,56563415","1981":"61,04987805","1982":"61,48609756","1983":"61,86473171","1984":"62,17070732","1985":"62,39290244","1986":"62,52617073","1987":"62,55702439","1988":"62,46402439","1989":"62,22078049","1990":"61,7615122","1991":"61,01243902","1992":"59,96226829","1993":"58,64173171","1994":"57,11290244","1995":"55,45497561","1996":"53,76402439","1997":"52,15941463","1998":"50,76239024","1999":"49,66821951","2000":"48,98258537","2001":"48,78319512","2002":"49,04378049","2003":"49,71356098","2004":"50,74636585","2005":"52,07031707","2006":"53,59368293","2007":"55,20960976","2008":"56,81946341","2009":"58,35465854","2010":"59,78092683","2011":"61,09809756","2012":"62,3472439","2013":"63,55065854","2014":"64,69439024","2015":"65,75109756","2016":"","Country Name":"Botswana","Country Code":"BWA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"36,48263415","1961":"36,89570732","1962":"37,31878049","1963":"37,76034146","1964":"38,22536585","1965":"38,72585366","1966":"39,2727561","1967":"39,86856098","1968":"40,5127561","1969":"41,20236585","1970":"41,93541463","1971":"42,70895122","1972":"43,5085122","1973":"44,31612195","1974":"45,1137561","1975":"45,88339024","1976":"46,61043902","1977":"47,28436585","1978":"47,89317073","1979":"48,42490244","1980":"48,87012195","1981":"49,22392683","1982":"49,49243902","1983":"49,67921951","1984":"49,78485366","1985":"49,80785366","1986":"49,74570732","1987":"49,60187805","1988":"49,38380488","1989":"49,09846341","1990":"48,74687805","1991":"48,32858537","1992":"47,85056098","1993":"47,32878049","1994":"46,78217073","1995":"46,22717073","1996":"45,6742439","1997":"45,14080488","1998":"44,6497561","1999":"44,22946341","2000":"43,91429268","2001":"43,73358537","2002":"43,69631707","2003":"43,8054878","2004":"44,05763415","2005":"44,44282927","2006":"44,94321951","2007":"45,52646341","2008":"46,16317073","2009":"46,83492683","2010":"47,53270732","2011":"48,25697561","2012":"49,01214634","2013":"49,79565854","2014":"50,59104878","2015":"51,37785366","2016":"","Country Name":"Central African Rep.","Country Code":"CAF","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"71,13317073","1961":"71,34609756","1962":"71,36707317","1963":"71,38073171","1964":"71,77634146","1965":"71,87219512","1966":"72,00439024","1967":"72,20780488","1968":"72,35341463","1969":"72,50146341","1970":"72,7004878","1971":"73,02926829","1972":"72,93390244","1973":"73,16268293","1974":"73,23756098","1975":"73,52170732","1976":"73,85609756","1977":"74,21560976","1978":"74,5297561","1979":"74,86634146","1980":"75,07804878","1981":"75,47853659","1982":"75,6804878","1983":"76,03634146","1984":"76,31756098","1985":"76,30341463","1986":"76,44","1987":"76,7395122","1988":"76,80926829","1989":"77,06560976","1990":"77,37707317","1991":"77,55341463","1992":"77,32073171","1993":"77,68512195","1994":"77,86195122","1995":"77,97756098","1996":"78,2304878","1997":"78,4804878","1998":"78,66243902","1999":"78,88292683","2000":"79,23658537","2001":"79,48780488","2002":"79,5902439","2003":"79,83902439","2004":"80,14146341","2005":"80,29268293","2006":"80,29268293","2007":"80,54390244","2008":"80,69512195","2009":"80,94634146","2010":"81,19756098","2011":"81,44878049","2012":"81,5835122","2013":"81,77204878","2014":"81,95304878","2015":"82,12902439","2016":"","Country Name":"Canada","Country Code":"CAN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,821395","1961":"68,26204417","1962":"68,006775","1963":"68,69586971","1964":"69,05227637","1965":"69,27682155","1966":"69,52700823","1967":"69,27273545","1968":"69,53605835","1969":"69,2757977","1970":"69,4469708","1971":"69,48512898","1972":"69,92536773","1973":"70,06769668","1974":"70,30587387","1975":"70,17440548","1976":"70,31914111","1977":"70,24224081","1978":"70,147839","1979":"70,23935481","1980":"69,89021292","1981":"70,37146956","1982":"70,45513367","1983":"70,38961098","1984":"70,34901758","1985":"70,31275699","1986":"70,56492213","1987":"70,61176532","1988":"70,86171837","1989":"70,73196965","1990":"70,65636732","1991":"70,57260774","1992":"70,73234787","1993":"70,84622957","1994":"70,86952676","1995":"71,02589323","1996":"71,33546524","1997":"71,51758933","1998":"71,89811827","1999":"72,18473465","2000":"72,71969035","2001":"73,09799286","2002":"73,24431357","2003":"73,38382869","2004":"73,73940392","2005":"73,84004668","2006":"74,09472478","2007":"74,25238333","2008":"74,57753902","2009":"74,9318257","2010":"75,29534873","2011":"75,88847488","2012":"75,9934886","2013":"76,35516299","2014":"76,68547642","2015":"77,0269071","2016":"","Country Name":"Central Europe and the Baltics","Country Code":"CEB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"71,31341463","1961":"71,64487805","1962":"71,19609756","1963":"71,18756098","1964":"72,07780488","1965":"72,20170732","1966":"72,33560976","1967":"72,63658537","1968":"72,5902439","1969":"72,61268293","1970":"73,0202439","1971":"73,13073171","1972":"73,64439024","1973":"73,94097561","1974":"74,28707317","1975":"74,66560976","1976":"74,78536585","1977":"75,23804878","1978":"75,18731707","1979":"75,46609756","1980":"75,45926829","1981":"75,69317073","1982":"76,03390244","1983":"76,03121951","1984":"76,60853659","1985":"76,73365854","1986":"76,89902439","1987":"77,19756098","1988":"77,22658537","1989":"77,42121951","1990":"77,24243902","1991":"77,51463415","1992":"77,80609756","1993":"78,08536585","1994":"78,35","1995":"78,41707317","1996":"78,89609756","1997":"79,0795122","1998":"79,32439024","1999":"79,5804878","2000":"79,6804878","2001":"80,1804878","2002":"80,38536585","2003":"80,53658537","2004":"81,08780488","2005":"81,23658537","2006":"81,4902439","2007":"81,74146341","2008":"81,99268293","2009":"82,04390244","2010":"82,24634146","2011":"82,69512195","2012":"82,69756098","2013":"82,79756098","2014":"83,19756098","2015":"83,19756098","2016":"","Country Name":"Switzerland","Country Code":"CHE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"70,63978049","1961":"70,73441463","1962":"70,83009756","1963":"70,93331707","1964":"71,04758537","1965":"71,17192683","1966":"71,29934146","1967":"71,42185366","1968":"71,53597561","1969":"71,64070732","1970":"71,73904878","1971":"71,836","1972":"71,93804878","1973":"72,05017073","1974":"72,17736585","1975":"72,32460976","1976":"72,49390244","1977":"72,6852439","1978":"72,89312195","1979":"73,11602439","1980":"73,34495122","1981":"73,57392683","1982":"73,79592683","1983":"74,00646341","1984":"74,20653659","1985":"74,39812195","1986":"74,58773171","1987":"74,78182927","1988":"74,98546341","1989":"75,19858537","1990":"75,4182439","1991":"75,63692683","1992":"75,84968293","1993":"76,053","1994":"76,24739024","1995":"76,43685366","1996":"76,62787805","1997":"76,827","1998":"77,03965854","1999":"77,26834146","2000":"77,514","2001":"77,77663415","2002":"78,05168293","2003":"78,33317073","2004":"78,61609756","2005":"78,894","2006":"79,16192683","2007":"79,41541463","2008":"79,6524878","2009":"79,87114634","2010":"80,07134146","2011":"80,25302439","2012":"80,42212195","2013":"80,58112195","2014":"80,735","2015":"80,88526829","2016":"","Country Name":"Channel Islands","Country Code":"CHI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"57,2635122","1961":"57,65941463","1962":"58,07302439","1963":"58,50780488","1964":"58,9652439","1965":"59,44982927","1966":"59,96102439","1967":"60,50029268","1968":"61,06412195","1969":"61,65246341","1970":"62,26382927","1971":"62,89919512","1972":"63,55453659","1973":"64,22592683","1974":"64,90731707","1975":"65,59573171","1976":"66,28863415","1977":"66,98207317","1978":"67,67004878","1979":"68,34309756","1980":"68,98980488","1981":"69,60021951","1982":"70,16890244","1983":"70,69585366","1984":"71,17904878","1985":"71,62346341","1986":"72,03604878","1987":"72,42770732","1988":"72,80734146","1989":"73,17790244","1990":"73,54378049","1991":"73,90346341","1992":"74,25341463","1993":"74,59065854","1994":"74,91473171","1995":"75,22765854","1996":"75,5314878","1997":"75,82529268","1998":"76,11014634","1999":"76,38509756","2000":"76,64470732","2001":"76,88702439","2002":"77,10802439","2003":"77,30768293","2004":"77,487","2005":"77,64743902","2006":"77,79095122","2007":"77,923","2008":"78,05002439","2009":"78,1765122","2010":"78,30892683","2011":"78,4527561","2012":"78,60953659","2013":"78,78026829","2014":"78,9644878","2015":"79,16068293","2016":"","Country Name":"Chile","Country Code":"CHL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"43,77836585","1961":"44,09870732","1962":"44,82421951","1963":"46,0057561","1964":"47,61746341","1965":"49,56673171","1966":"51,70614634","1967":"53,84980488","1968":"55,83956098","1969":"57,594","1970":"59,071","1971":"60,2852439","1972":"61,32365854","1973":"62,25831707","1974":"63,1094878","1975":"63,89004878","1976":"64,60646341","1977":"65,25443902","1978":"65,83612195","1979":"66,35858537","1980":"66,82695122","1981":"67,24280488","1982":"67,60821951","1983":"67,92673171","1984":"68,20636585","1985":"68,45107317","1986":"68,66480488","1987":"68,85092683","1988":"69,01641463","1989":"69,17126829","1990":"69,3214878","1991":"69,47307317","1992":"69,62912195","1993":"69,79821951","1994":"69,98695122","1995":"70,21046341","1996":"70,48139024","1997":"70,80026829","1998":"71,16407317","1999":"71,5662439","2000":"71,99558537","2001":"72,43690244","2002":"72,873","2003":"73,28773171","2004":"73,67207317","2005":"74,01756098","2006":"74,32282927","2007":"74,59407317","2008":"74,83992683","2009":"75,06343902","2010":"75,26609756","2011":"75,45382927","2012":"75,62804878","2013":"75,79517073","2014":"75,95719512","2015":"76,11709756","2016":"","Country Name":"China","Country Code":"CHN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"36,87241463","1961":"37,56307317","1962":"38,23382927","1963":"38,88017073","1964":"39,50509756","1965":"40,12441463","1966":"40,76192683","1967":"41,43695122","1968":"42,161","1969":"42,93209756","1970":"43,74343902","1971":"44,57982927","1972":"45,41602439","1973":"46,23121951","1974":"47,00946341","1975":"47,74221951","1976":"48,42487805","1977":"49,06165854","1978":"49,65590244","1979":"50,20404878","1980":"50,70907317","1981":"51,1744878","1982":"51,60290244","1983":"51,98839024","1984":"52,3224878","1985":"52,59412195","1986":"52,79168293","1987":"52,90417073","1988":"52,91819512","1989":"52,82743902","1990":"52,60692683","1991":"52,23273171","1992":"51,71160976","1993":"51,0675122","1994":"50,33609756","1995":"49,56065854","1996":"48,7902439","1997":"48,07504878","1998":"47,46402439","1999":"46,99256098","2000":"46,69743902","2001":"46,59731707","2002":"46,67253659","2003":"46,8942439","2004":"47,24458537","2005":"47,69641463","2006":"48,21882927","2007":"48,78029268","2008":"49,35146341","2009":"49,91136585","2010":"50,45070732","2011":"50,97234146","2012":"51,49017073","2013":"52,01604878","2014":"52,54707317","2015":"53,0782439","2016":"","Country Name":"Cote d'Ivoire","Country Code":"CIV","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,5237561","1961":"41,96534146","1962":"42,40595122","1963":"42,84356098","1964":"43,27865854","1965":"43,71517073","1966":"44,1585122","1967":"44,61363415","1968":"45,08456098","1969":"45,57178049","1970":"46,07690244","1971":"46,6","1972":"47,13570732","1973":"47,67758537","1974":"48,21965854","1975":"48,75592683","1976":"49,28385366","1977":"49,79782927","1978":"50,29080488","1979":"50,75426829","1980":"51,18368293","1981":"51,5765122","1982":"51,93031707","1983":"52,23860976","1984":"52,49046341","1985":"52,66943902","1986":"52,75858537","1987":"52,753","1988":"52,65265854","1989":"52,46360976","1990":"52,18385366","1991":"51,81087805","1992":"51,36763415","1993":"50,88802439","1994":"50,41192683","1995":"49,99326829","1996":"49,68539024","1997":"49,51921951","1998":"49,51373171","1999":"49,67490244","2000":"49,99973171","2001":"50,46782927","2002":"51,0317561","2003":"51,64409756","2004":"52,27387805","2005":"52,889","2006":"53,46787805","2007":"54,00790244","2008":"54,51063415","2009":"54,97263415","2010":"55,40114634","2011":"55,80892683","2012":"56,21768293","2013":"56,64197561","2014":"57,08780488","2015":"57,5575122","2016":"","Country Name":"Cameroon","Country Code":"CMR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,01804878","1961":"41,23353659","1962":"41,4515122","1963":"41,678","1964":"41,918","1965":"42,1804878","1966":"42,4724878","1967":"42,79197561","1968":"43,13346341","1969":"43,48895122","1970":"43,84292683","1971":"44,17690244","1972":"44,47639024","1973":"44,73736585","1974":"44,96036585","1975":"45,15685366","1976":"45,34536585","1977":"45,54536585","1978":"45,77087805","1979":"46,02487805","1980":"46,30287805","1981":"46,59287805","1982":"46,88036585","1983":"47,15234146","1984":"47,40731707","1985":"47,6527561","1986":"47,90370732","1987":"48,17014634","1988":"48,45158537","1989":"48,73702439","1990":"48,99297561","1991":"49,17492683","1992":"49,26141463","1993":"49,25341463","1994":"49,17241463","1995":"49,06592683","1996":"48,99695122","1997":"49,02446341","1998":"49,19243902","1999":"49,51741463","2000":"50,00287805","2001":"50,62934146","2002":"51,34680488","2003":"52,10678049","2004":"52,87926829","2005":"53,63729268","2006":"54,36334146","2007":"55,05392683","2008":"55,70602439","2009":"56,31260976","2010":"56,87017073","2011":"57,38117073","2012":"57,85807317","2013":"58,31239024","2014":"58,74860976","2015":"59,17321951","2016":"","Country Name":"Dem. Rep. Congo","Country Code":"COD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,58112195","1961":"49,23004878","1962":"49,84395122","1963":"50,41885366","1964":"50,95229268","1965":"51,44136585","1966":"51,88865854","1967":"52,29821951","1968":"52,67658537","1969":"53,02870732","1970":"53,35856098","1971":"53,67002439","1972":"53,966","1973":"54,24941463","1974":"54,52319512","1975":"54,79482927","1976":"55,06734146","1977":"55,34180488","1978":"55,61273171","1979":"55,87463415","1980":"56,1225122","1981":"56,35034146","1982":"56,54807317","1983":"56,70573171","1984":"56,81085366","1985":"56,85295122","1986":"56,82156098","1987":"56,7132439","1988":"56,53004878","1989":"56,27253659","1990":"55,93231707","1991":"55,49946341","1992":"54,9865122","1993":"54,41741463","1994":"53,82207317","1995":"53,22690244","1996":"52,65726829","1997":"52,14402439","1998":"51,72902439","1999":"51,45314634","2000":"51,37734146","2001":"51,55653659","2002":"51,99678049","2003":"52,68217073","2004":"53,58673171","2005":"54,6655122","2006":"55,86007317","2007":"57,09446341","2008":"58,30080488","2009":"59,43214634","2010":"60,45260976","2011":"61,3502439","2012":"62,14907317","2013":"62,87009756","2014":"63,51531707","2015":"64,09073171","2016":"","Country Name":"Congo","Country Code":"COG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"56,7167561","1961":"57,24773171","1962":"57,73921951","1963":"58,2007561","1964":"58,64126829","1965":"59,06217073","1966":"59,46334146","1967":"59,84021951","1968":"60,19578049","1969":"60,53704878","1970":"60,87319512","1971":"61,21139024","1972":"61,56078049","1973":"61,92839024","1974":"62,32160976","1975":"62,75214634","1976":"63,23212195","1977":"63,75826829","1978":"64,31897561","1979":"64,90034146","1980":"65,47817073","1981":"66,02492683","1982":"66,52007317","1983":"66,94741463","1984":"67,29953659","1985":"67,57429268","1986":"67,77680488","1987":"67,92919512","1988":"68,05473171","1989":"68,17097561","1990":"68,29719512","1991":"68,45131707","1992":"68,64021951","1993":"68,86563415","1994":"69,12958537","1995":"69,42692683","1996":"69,74836585","1997":"70,075","1998":"70,39495122","1999":"70,70056098","2000":"70,98870732","2001":"71,26039024","2002":"71,52173171","2003":"71,77690244","2004":"72,02495122","2005":"72,26443902","2006":"72,49243902","2007":"72,70753659","2008":"72,91021951","2009":"73,1015122","2010":"73,28290244","2011":"73,45836585","2012":"73,63078049","2013":"73,80365854","2014":"73,97895122","2015":"74,15619512","2016":"","Country Name":"Colombia","Country Code":"COL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,44243902","1961":"41,83953659","1962":"42,2377561","1963":"42,635","1964":"43,03270732","1965":"43,43426829","1966":"43,84560976","1967":"44,27119512","1968":"44,71204878","1969":"45,16821951","1970":"45,63178049","1971":"46,09336585","1972":"46,54758537","1973":"46,99153659","1974":"47,43073171","1975":"47,87570732","1976":"48,34292683","1977":"48,84529268","1978":"49,38919512","1979":"49,97412195","1980":"50,596","1981":"51,24434146","1982":"51,90312195","1983":"52,55736585","1984":"53,19756098","1985":"53,81919512","1986":"54,42229268","1987":"55,00936585","1988":"55,58092683","1989":"56,1305122","1990":"56,65360976","1991":"57,14521951","1992":"57,59934146","1993":"58,01346341","1994":"58,38258537","1995":"58,69717073","1996":"58,94717073","1997":"59,13558537","1998":"59,27092683","1999":"59,36568293","2000":"59,43890244","2001":"59,51014634","2002":"59,59892683","2003":"59,72080488","2004":"59,8887561","2005":"60,11078049","2006":"60,39182927","2007":"60,71936585","2008":"61,07934146","2009":"61,4602439","2010":"61,84707317","2011":"62,22480488","2012":"62,58146341","2013":"62,90907317","2014":"63,20214634","2015":"63,46068293","2016":"","Country Name":"Comoros","Country Code":"COM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,85641463","1961":"49,04797561","1962":"49,3225122","1963":"49,6905122","1964":"50,152","1965":"50,68697561","1966":"51,26292683","1967":"51,84736585","1968":"52,42231707","1969":"52,98873171","1970":"53,57817073","1971":"54,23807317","1972":"55,0004878","1973":"55,87387805","1974":"56,83729268","1975":"57,8422439","1976":"58,8232439","1977":"59,71785366","1978":"60,48004878","1979":"61,09582927","1980":"61,57019512","1981":"61,93014634","1982":"62,23163415","1983":"62,51863415","1984":"62,81363415","1985":"63,12512195","1986":"63,45160976","1987":"63,77909756","1988":"64,09958537","1989":"64,41758537","1990":"64,73658537","1991":"65,06160976","1992":"65,39814634","1993":"65,75468293","1994":"66,13821951","1995":"66,5687561","1996":"67,06726829","1997":"67,63473171","1998":"68,25914634","1999":"68,918","2000":"69,57380488","2001":"70,18004878","2002":"70,6987561","2003":"71,10792683","2004":"71,39853659","2005":"71,57558537","2006":"71,66004878","2007":"71,69141463","2008":"71,70668293","2009":"71,72839024","2010":"71,77453659","2011":"71,85417073","2012":"71,96282927","2013":"72,09653659","2014":"72,25431707","2015":"72,43517073","2016":"","Country Name":"Cabo Verde","Country Code":"CPV","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,57619512","1961":"61,28856098","1962":"61,98378049","1963":"62,6497561","1964":"63,2794878","1965":"63,86892683","1966":"64,42058537","1967":"64,94602439","1968":"65,45631707","1969":"65,9594878","1970":"66,46260976","1971":"66,97170732","1972":"67,48931707","1973":"68,01746341","1974":"68,55917073","1975":"69,11941463","1976":"69,70319512","1977":"70,306","1978":"70,91931707","1979":"71,53219512","1980":"72,13019512","1981":"72,69790244","1982":"73,22334146","1983":"73,69707317","1984":"74,11460976","1985":"74,47343902","1986":"74,77604878","1987":"75,03539024","1988":"75,26287805","1989":"75,4684878","1990":"75,65868293","1991":"75,84192683","1992":"76,02021951","1993":"76,19753659","1994":"76,37634146","1995":"76,55860976","1996":"76,74180488","1997":"76,92241463","1998":"77,09692683","1999":"77,26436585","2000":"77,42268293","2001":"77,57087805","2002":"77,70946341","2003":"77,84046341","2004":"77,96536585","2005":"78,08665854","2006":"78,20682927","2007":"78,32885366","2008":"78,45529268","2009":"78,58919512","2010":"78,73263415","2011":"78,88773171","2012":"79,0545122","2013":"79,23156098","2014":"79,41685366","2015":"79,60890244","2016":"","Country Name":"Costa Rica","Country Code":"CRI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"62,31391112","1961":"62,81041207","1962":"63,26690918","1963":"63,67989749","1964":"64,05037324","1965":"64,38004677","1966":"64,67348861","1967":"64,94080884","1968":"65,19297874","1969":"65,43850928","1970":"65,68501669","1971":"65,93870798","1972":"66,2004456","1973":"66,46866457","1974":"66,74300821","1975":"67,02158255","1976":"67,30163038","1977":"67,5780533","1978":"67,84579722","1979":"68,10194709","1980":"68,34167584","1981":"68,5598691","1982":"68,7534296","1983":"68,92224754","1984":"69,06351553","1985":"69,17908514","1986":"69,27328455","1987":"69,36010366","1988":"69,4217325","1989":"69,48598996","1990":"69,54564377","1991":"69,59994429","1992":"69,68632934","1993":"69,69160508","1994":"69,73590347","1995":"69,78507577","1996":"69,84222589","1997":"69,97797487","1998":"69,99144565","1999":"70,08838497","2000":"70,20481065","2001":"70,34451498","2002":"70,57733424","2003":"70,69096869","2004":"70,89277722","2005":"71,10984222","2006":"71,33804014","2007":"71,57113456","2008":"71,80228804","2009":"72,02570117","2010":"72,23522802","2011":"72,42698876","2012":"72,60250775","2013":"72,76324049","2014":"72,91101405","2015":"73,04810113","2016":"","Country Name":"Caribbean small states","Country Code":"CSS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"63,90465854","1961":"64,51643902","1962":"65,13821951","1963":"65,76802439","1964":"66,40180488","1965":"67,03156098","1966":"67,6492439","1967":"68,24785366","1968":"68,82087805","1969":"69,36580488","1970":"69,88309756","1971":"70,37829268","1972":"70,85639024","1973":"71,32095122","1974":"71,7694878","1975":"72,19760976","1976":"72,59885366","1977":"72,96626829","1978":"73,29582927","1979":"73,58453659","1980":"73,8317561","1981":"74,03636585","1982":"74,20326829","1983":"74,33939024","1984":"74,4477561","1985":"74,52892683","1986":"74,58153659","1987":"74,60770732","1988":"74,61804878","1989":"74,62309756","1990":"74,64380488","1991":"74,70056098","1992":"74,80329268","1993":"74,95892683","1994":"75,16397561","1995":"75,409","1996":"75,67563415","1997":"75,94197561","1998":"76,19307317","1999":"76,42587805","2000":"76,64480488","2001":"76,86521951","2002":"77,10246341","2003":"77,36395122","2004":"77,64468293","2005":"77,93214634","2006":"78,20595122","2007":"78,44970732","2008":"78,65153659","2009":"78,8115122","2010":"78,93665854","2011":"79,04053659","2012":"79,14212195","2013":"79,25634146","2014":"79,38970732","2015":"79,54370732","2016":"","Country Name":"Cuba","Country Code":"CUB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"74,7097561","2007":"75,36341463","2008":"75,3097561","2009":"76,15609756","2010":"","2011":"77,47317073","2012":"","2013":"","2014":"77,82439024","2015":"","2016":"","Country Name":"Curacao","Country Code":"CUW","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Cayman Islands","Country Code":"CYM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,59392683","1961":"69,92782927","1962":"70,2512439","1963":"70,56468293","1964":"70,86912195","1965":"71,16507317","1966":"71,45253659","1967":"71,731","1968":"72,0024878","1969":"72,26597561","1970":"72,52297561","1971":"72,77297561","1972":"73,01697561","1973":"73,25446341","1974":"73,48546341","1975":"73,71043902","1976":"73,93041463","1977":"74,14487805","1978":"74,35385366","1979":"74,55782927","1980":"74,75680488","1981":"74,95129268","1982":"75,1407561","1983":"75,3252439","1984":"75,50621951","1985":"75,68270732","1986":"75,85617073","1987":"76,02512195","1988":"76,19107317","1989":"76,35402439","1990":"76,51395122","1991":"76,67139024","1992":"76,82631707","1993":"76,97826829","1994":"77,12770732","1995":"77,27465854","1996":"77,41909756","1997":"77,56102439","1998":"77,70092683","1999":"77,83780488","2000":"77,97168293","2001":"78,10056098","2002":"78,22395122","2003":"78,34534146","2004":"78,4657561","2005":"78,59012195","2006":"78,72336585","2007":"78,8695122","2008":"79,02904878","2009":"79,202","2010":"79,38495122","2011":"79,57302439","2012":"79,76178049","2013":"79,94478049","2014":"80,12204878","2015":"80,29104878","2016":"","Country Name":"Cyprus","Country Code":"CYP","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"70,34878049","1961":"70,51268293","1962":"69,78682927","1963":"70,30439024","1964":"70,4595122","1965":"70,16317073","1966":"70,38487805","1967":"70,26414634","1968":"69,84073171","1969":"69,36707317","1970":"69,4402439","1971":"69,67707317","1972":"70,17658537","1973":"70,02268293","1974":"70,08658537","1975":"70,41463415","1976":"70,53268293","1977":"70,57341463","1978":"70,64390244","1979":"70,7495122","1980":"70,27804878","1981":"70,72219512","1982":"70,80780488","1983":"70,59146341","1984":"70,83756098","1985":"71,04634146","1986":"70,99731707","1987":"71,44560976","1988":"71,64146341","1989":"71,67560976","1990":"71,38390244","1991":"71,89829268","1992":"72,27170732","1993":"72,76780488","1994":"72,97268293","1995":"73,07487805","1996":"73,71463415","1997":"73,82487805","1998":"74,51463415","1999":"74,66829268","2000":"74,96829268","2001":"75,17317073","2002":"75,22195122","2003":"75,17073171","2004":"75,72195122","2005":"75,92439024","2006":"76,52439024","2007":"76,72439024","2008":"76,97560976","2009":"77,07804878","2010":"77,42439024","2011":"77,87317073","2012":"78,07560976","2013":"78,17560976","2014":"78,82439024","2015":"79,47317073","2016":"","Country Name":"Czechia","Country Code":"CZE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,31002439","1961":"69,508","1962":"69,69153659","1963":"69,85960976","1964":"70,01370732","1965":"70,15182927","1966":"70,27141463","1967":"70,374","1968":"70,46509756","1969":"70,55068293","1970":"70,63978049","1971":"70,74287805","1972":"70,867","1973":"71,01668293","1974":"71,19541463","1975":"71,40173171","1976":"71,63414634","1977":"71,88368293","1978":"72,14329268","1979":"72,40853659","1980":"72,67790244","1981":"72,95039024","1982":"73,227","1983":"73,50519512","1984":"73,78292683","1985":"74,05463415","1986":"74,31373171","1987":"74,55968293","1988":"74,7924878","1989":"75,01314634","1990":"75,2277561","1991":"75,3195122","1992":"75,8195122","1993":"75,87073171","1994":"76,27073171","1995":"76,42195122","1996":"76,67317073","1997":"77,07317073","1998":"77,47560976","1999":"77,72682927","2000":"77,92682927","2001":"78,32926829","2002":"78,22926829","2003":"78,3804878","2004":"78,6804878","2005":"78,93170732","2006":"79,13170732","2007":"79,53414634","2008":"79,73658537","2009":"79,83658537","2010":"79,98780488","2011":"80,43658537","2012":"80,53902439","2013":"80,4902439","2014":"81,0902439","2015":"81,0902439","2016":"","Country Name":"Germany","Country Code":"DEU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"44,02126829","1961":"44,45134146","1962":"44,87443902","1963":"45,29104878","1964":"45,70863415","1965":"46,14714634","1966":"46,6335122","1967":"47,18165854","1968":"47,79163415","1969":"48,45292683","1970":"49,13609756","1971":"49,8017561","1972":"50,4154878","1973":"50,95485366","1974":"51,41390244","1975":"51,80360976","1976":"52,14997561","1977":"52,48690244","1978":"52,83987805","1979":"53,21736585","1980":"53,61734146","1981":"54,02885366","1982":"54,43241463","1983":"54,811","1984":"55,15863415","1985":"55,47273171","1986":"55,75673171","1987":"56,01665854","1988":"56,25592683","1989":"56,47360976","1990":"56,66317073","1991":"56,81614634","1992":"56,92958537","1993":"57,00358537","1994":"57,04365854","1995":"57,05341463","1996":"57,03841463","1997":"57,01119512","1998":"56,98773171","1999":"56,98146341","2000":"57,01034146","2001":"57,0882439","2002":"57,22056098","2003":"57,41121951","2004":"57,66363415","2005":"57,98429268","2006":"58,37768293","2007":"58,83187805","2008":"59,32841463","2009":"59,84885366","2010":"60,36673171","2011":"60,85458537","2012":"61,29546341","2013":"61,67736585","2014":"61,99431707","2015":"62,24982927","2016":"","Country Name":"Djibouti","Country Code":"DJI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"71,46341463","1983":"","1984":"","1985":"","1986":"","1987":"71,96341463","1988":"","1989":"","1990":"","1991":"","1992":"73,95121951","1993":"","1994":"","1995":"","1996":"","1997":"75,95121951","1998":"","1999":"","2000":"","2001":"","2002":"76,59756098","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Dominica","Country Code":"DMA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"72,17658537","1961":"72,43829268","1962":"72,3197561","1963":"72,4004878","1964":"72,48512195","1965":"72,37073171","1966":"72,44414634","1967":"72,92219512","1968":"73,12146341","1969":"73,22097561","1970":"73,34341463","1971":"73,41463415","1972":"73,43902439","1973":"73,68219512","1974":"73,80829268","1975":"74,07512195","1976":"73,7397561","1977":"74,63243902","1978":"74,39292683","1979":"74,21926829","1980":"74,10170732","1981":"74,2304878","1982":"74,55121951","1983":"74,4204878","1984":"74,56219512","1985":"74,42756098","1986":"74,5797561","1987":"74,69121951","1988":"74,77170732","1989":"74,7997561","1990":"74,80536585","1991":"75,15780488","1992":"75,19414634","1993":"75,11682927","1994":"75,37512195","1995":"75,21268293","1996":"75,59146341","1997":"75,94512195","1998":"76,13902439","1999":"76,34146341","2000":"76,59268293","2001":"76,79268293","2002":"76,89512195","2003":"77,14390244","2004":"77,49268293","2005":"77,84390244","2006":"78,09512195","2007":"78,19512195","2008":"78,44634146","2009":"78,59756098","2010":"79,1","2011":"79,8","2012":"80,05121951","2013":"80,3","2014":"80,7","2015":"81,1","2016":"","Country Name":"Denmark","Country Code":"DNK","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"51,84526829","1961":"52,5782439","1962":"53,2992439","1963":"54,00678049","1964":"54,70031707","1965":"55,37882927","1966":"56,04426829","1967":"56,69509756","1968":"57,33034146","1969":"57,9465122","1970":"58,53968293","1971":"59,10490244","1972":"59,63926829","1973":"60,14326829","1974":"60,61692683","1975":"61,06219512","1976":"61,48104878","1977":"61,87890244","1978":"62,26514634","1979":"62,64726829","1980":"63,03568293","1981":"63,43936585","1982":"63,86282927","1983":"64,30807317","1984":"64,77763415","1985":"65,27253659","1986":"65,79578049","1987":"66,33892683","1988":"66,88856098","1989":"67,43270732","1990":"67,95041463","1991":"68,42221951","1992":"68,83712195","1993":"69,19063415","1994":"69,48326829","1995":"69,7205122","1996":"69,91634146","1997":"70,09173171","1998":"70,26365854","1999":"70,44214634","2000":"70,63373171","2001":"70,83892683","2002":"71,05180488","2003":"71,26682927","2004":"71,48353659","2005":"71,70039024","2006":"71,91582927","2007":"72,12885366","2008":"72,33836585","2009":"72,54439024","2010":"72,74487805","2011":"72,94134146","2012":"73,13529268","2013":"73,3272439","2014":"73,51619512","2015":"73,70368293","2016":"","Country Name":"Dominican Rep.","Country Code":"DOM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,13512195","1961":"46,59031707","1962":"47,045","1963":"47,49619512","1964":"47,94190244","1965":"48,37609756","1966":"48,79080488","1967":"49,1875122","1968":"49,57270732","1969":"49,95590244","1970":"50,34363415","1971":"50,74392683","1972":"51,17180488","1973":"51,64570732","1974":"52,18807317","1975":"52,8362439","1976":"53,6305122","1977":"54,57826829","1978":"55,66753659","1979":"56,87487805","1980":"58,16402439","1981":"59,4867561","1982":"60,78634146","1983":"62,00895122","1984":"63,11712195","1985":"64,0737561","1986":"64,85719512","1987":"65,48714634","1988":"65,98943902","1989":"66,38204878","1990":"66,69302439","1991":"66,955","1992":"67,20065854","1993":"67,46060976","1994":"67,75536585","1995":"68,09836585","1996":"68,49102439","1997":"68,91470732","1998":"69,35731707","1999":"69,81429268","2000":"70,28568293","2001":"70,77202439","2002":"71,27039024","2003":"71,77431707","2004":"72,27582927","2005":"72,76141463","2006":"73,21956098","2007":"73,64270732","2008":"74,02531707","2009":"74,36785366","2010":"74,66978049","2011":"74,93756098","2012":"75,18119512","2013":"75,41217073","2014":"75,63502439","2015":"75,85529268","2016":"","Country Name":"Algeria","Country Code":"DZA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,79142241","1961":"46,23054954","1962":"46,94102483","1963":"47,96071583","1964":"49,29708631","1965":"50,8745795","1966":"52,57702614","1967":"54,27004836","1968":"55,83431564","1969":"57,21255687","1970":"58,37877212","1971":"59,34961083","1972":"60,19343524","1973":"60,96961044","1974":"61,69630577","1975":"62,38529831","1976":"63,04245387","1977":"63,65948687","1978":"64,23179398","1979":"64,75742378","1980":"65,23456131","1981":"65,66478005","1982":"66,05420349","1983":"66,40503908","1984":"66,72265175","1985":"67,01127597","1986":"67,27344326","1987":"67,51078248","1988":"67,72661479","1989":"67,92710928","1990":"68,11578977","1991":"68,29662015","1992":"68,4725263","1993":"68,65180253","1994":"68,84120727","1995":"69,05324829","1996":"69,29920442","1997":"69,58074132","1998":"69,89600888","1999":"70,24031714","2000":"70,60518589","2001":"70,9794859","2002":"71,34890817","2003":"71,70133477","2004":"72,03046105","2005":"72,33093737","2006":"72,60227707","2007":"72,84951298","2008":"73,0791793","2009":"73,29302018","2010":"73,49142801","2011":"73,67786798","2012":"73,85301007","2013":"74,02096864","2014":"74,18315026","2015":"74,34183078","2016":"","Country Name":"East Asia & Pacific (excluding high income)","Country Code":"EAP","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,20893539","1961":"45,87690621","1962":"46,48536385","1963":"47,03341624","1964":"47,63546317","1965":"48,23058869","1966":"48,86780753","1967":"49,43210438","1968":"49,97815463","1969":"50,50989386","1970":"51,03330912","1971":"51,55660496","1972":"52,08328491","1973":"52,62355573","1974":"53,1715722","1975":"53,72577232","1976":"54,28120514","1977":"54,82424089","1978":"55,34911824","1979":"55,84862155","1980":"56,3208174","1981":"56,76815751","1982":"57,1989915","1983":"57,62414784","1984":"58,0476299","1985":"58,47261889","1986":"58,8980971","1987":"59,32492653","1988":"59,74766665","1989":"60,17479017","1990":"60,60637794","1991":"61,03442227","1992":"61,46235919","1993":"61,89042382","1994":"62,31003431","1995":"62,71538435","1996":"63,10402764","1997":"63,47222181","1998":"63,82330163","1999":"64,1605838","2000":"64,48632873","2001":"64,80645448","2002":"65,12485909","2003":"65,4486726","2004":"65,78092766","2005":"66,12373922","2006":"66,48080127","2007":"66,84743896","2008":"67,22026197","2009":"67,59412376","2010":"67,96134772","2011":"68,31537718","2012":"68,6518555","2013":"68,96753962","2014":"69,25956118","2015":"69,52779013","2016":"","Country Name":"Early-demographic dividend","Country Code":"EAR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,50726334","1961":"49,03312009","1962":"49,69890205","1963":"50,66936459","1964":"51,86160069","1965":"53,22666389","1966":"54,75638521","1967":"56,24142335","1968":"57,61301566","1969":"58,85006212","1970":"59,89738412","1971":"60,81505775","1972":"61,60786558","1973":"62,30317557","1974":"63,00067569","1975":"63,66998946","1976":"64,27816325","1977":"64,85845826","1978":"65,38141538","1979":"65,87131412","1980":"66,28406753","1981":"66,69938511","1982":"67,08773103","1983":"67,40482835","1984":"67,73332347","1985":"68,02174848","1986":"68,29414064","1987":"68,54422252","1988":"68,73354822","1989":"68,94763202","1990":"69,12473569","1991":"69,31499036","1992":"69,47818442","1993":"69,65718925","1994":"69,85754964","1995":"70,03843242","1996":"70,31463412","1997":"70,59491886","1998":"70,88988671","1999":"71,21479122","2000":"71,58823191","2001":"71,9586512","2002":"72,3114633","2003":"72,64714063","2004":"72,97226476","2005":"73,24534325","2006":"73,52981308","2007":"73,77415388","2008":"73,9964901","2009":"74,22364835","2010":"74,40240092","2011":"74,56343354","2012":"74,75706322","2013":"74,93611876","2014":"75,10255302","2015":"75,25604166","2016":"","Country Name":"East Asia & Pacific","Country Code":"EAS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"63,40092718","1961":"63,91764602","1962":"64,30948525","1963":"64,67206529","1964":"64,96867205","1965":"65,19249753","1966":"65,36155446","1967":"65,48041497","1968":"65,62389288","1969":"65,71050394","1970":"65,95408157","1971":"66,15753044","1972":"66,20274655","1973":"66,31274393","1974":"66,41760473","1975":"66,24856363","1976":"66,23612385","1977":"66,24645356","1978":"66,30955509","1979":"66,25109664","1980":"66,371389","1981":"66,58614281","1982":"66,91746789","1983":"67,03311645","1984":"67,02721101","1985":"67,44040242","1986":"68,19542998","1987":"68,3655404","1988":"68,439801","1989":"68,39974113","1990":"68,28254058","1991":"68,04072926","1992":"67,39843073","1993":"66,55607951","1994":"66,31737217","1995":"66,37251874","1996":"66,86327282","1997":"67,46454968","1998":"67,79277136","1999":"67,65326145","2000":"67,70962707","2001":"67,89474142","2002":"67,91869714","2003":"68,04772231","2004":"68,37862056","2005":"68,51023381","2006":"69,13089943","2007":"69,63226537","2008":"69,9237441","2009":"70,5178809","2010":"70,81947315","2011":"71,38026786","2012":"71,70260198","2013":"72,09297156","2014":"72,29512938","2015":"72,46689195","2016":"","Country Name":"Europe & Central Asia (excluding high income)","Country Code":"ECA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,03190806","1961":"67,39443044","1962":"67,4865921","1963":"67,7544795","1964":"68,14980743","1965":"68,29945539","1966":"68,50787797","1967":"68,63021625","1968":"68,69892196","1969":"68,70431314","1970":"68,98144705","1971":"69,11780646","1972":"69,32189949","1973":"69,41708704","1974":"69,62081909","1975":"69,59553272","1976":"69,69645499","1977":"69,86911375","1978":"69,95874531","1979":"70,07804932","1980":"70,18254458","1981":"70,44788466","1982":"70,7390572","1983":"70,80858218","1984":"70,95897425","1985":"71,17163925","1986":"71,65686593","1987":"71,87418713","1988":"72,00247445","1989":"72,06604191","1990":"72,07005811","1991":"71,98034663","1992":"71,91104473","1993":"71,59384533","1994":"71,66236491","1995":"71,76142325","1996":"72,14795516","1997":"72,55454967","1998":"72,86176742","1999":"72,9114291","2000":"73,06551171","2001":"73,34110523","2002":"73,42830099","2003":"73,53952199","2004":"73,97261847","2005":"74,13432567","2006":"74,62863946","2007":"74,98461502","2008":"75,24121523","2009":"75,63329431","2010":"75,92165795","2011":"76,43333756","2012":"76,57856007","2013":"76,89108021","2014":"77,20707533","2015":"77,3948729","2016":"","Country Name":"Europe & Central Asia","Country Code":"ECS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"53,215","1961":"53,82029268","1962":"54,38753659","1963":"54,91019512","1964":"55,38729268","1965":"55,82082927","1966":"56,21934146","1967":"56,59982927","1968":"56,97731707","1969":"57,3637561","1970":"57,77012195","1971":"58,20439024","1972":"58,6664878","1973":"59,15541463","1974":"59,67219512","1975":"60,21285366","1976":"60,77346341","1977":"61,34656098","1978":"61,92519512","1979":"62,50690244","1980":"63,09219512","1981":"63,68404878","1982":"64,28543902","1983":"64,89631707","1984":"65,51219512","1985":"66,12753659","1986":"66,73731707","1987":"67,33404878","1988":"67,91321951","1989":"68,46834146","1990":"68,99536585","1991":"69,49326829","1992":"69,96358537","1993":"70,40882927","1994":"70,82904878","1995":"71,22682927","1996":"71,60473171","1997":"71,96431707","1998":"72,30814634","1999":"72,6352439","2000":"72,94417073","2001":"73,23043902","2002":"73,492","2003":"73,72780488","2004":"73,94231707","2005":"74,13846341","2006":"74,32073171","2007":"74,49656098","2008":"74,67039024","2009":"74,84868293","2010":"75,03339024","2011":"75,2294878","2012":"75,43297561","2013":"75,64339024","2014":"75,85973171","2015":"76,0815122","2016":"","Country Name":"Ecuador","Country Code":"ECU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,01370732","1961":"48,58158537","1962":"49,1065122","1963":"49,60195122","1964":"50,07539024","1965":"50,52039024","1966":"50,9204878","1967":"51,2682439","1968":"51,56868293","1969":"51,84178049","1970":"52,1224878","1971":"52,4552439","1972":"52,86995122","1973":"53,38358537","1974":"53,99660976","1975":"54,6935122","1976":"55,44182927","1977":"56,20012195","1978":"56,93643902","1979":"57,63931707","1980":"58,31326829","1981":"58,97685366","1982":"59,65307317","1983":"60,35390244","1984":"61,07236585","1985":"61,78643902","1986":"62,46658537","1987":"63,08880488","1988":"63,64004878","1989":"64,12080488","1990":"64,54958537","1991":"64,95585366","1992":"65,37014634","1993":"65,81095122","1994":"66,27880488","1995":"66,76068293","1996":"67,23209756","1997":"67,66407317","1998":"68,03609756","1999":"68,34368293","2000":"68,58831707","2001":"68,78302439","2002":"68,94826829","2003":"69,10407317","2004":"69,26041463","2005":"69,42434146","2006":"69,59834146","2007":"69,77943902","2008":"69,96309756","2009":"70,15078049","2010":"70,34141463","2011":"70,53490244","2012":"70,72819512","2013":"70,9202439","2014":"71,10956098","2015":"71,29565854","2016":"","Country Name":"Egypt","Country Code":"EGY","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,27443172","1961":"69,64522119","1962":"69,60384255","1963":"69,77348602","1964":"70,23344249","1965":"70,31972801","1966":"70,59662222","1967":"70,73679573","1968":"70,78703304","1969":"70,79380626","1970":"71,15819909","1971":"71,26616306","1972":"71,60569853","1973":"71,7009337","1974":"72,02675971","1975":"72,17018349","1976":"72,43568836","1977":"72,79099654","1978":"73,01212044","1979":"73,33531204","1980":"73,52954874","1981":"73,81226838","1982":"74,15513504","1983":"74,22964735","1984":"74,5877958","1985":"74,75747874","1986":"75,05683728","1987":"75,34799303","1988":"75,53559952","1989":"75,76143111","1990":"75,91135472","1991":"76,0249673","1992":"76,37998653","1993":"76,48663006","1994":"76,79491752","1995":"76,95558286","1996":"77,21810915","1997":"77,58125395","1998":"77,79683219","1999":"78,02088693","2000":"78,2747802","2001":"78,5969981","2002":"78,68434716","2003":"78,70705859","2004":"79,27857754","2005":"79,4261586","2006":"79,85600402","2007":"80,09975244","2008":"80,3027801","2009":"80,50339184","2010":"80,74663191","2011":"81,23265042","2012":"81,22695026","2013":"81,51281991","2014":"81,9348744","2015":"82,07022116","2016":"","Country Name":"Euro area","Country Code":"EMU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"38,40421951","1961":"39,06070732","1962":"39,67934146","1963":"40,24558537","1964":"40,75446341","1965":"41,20785366","1966":"41,61765854","1967":"42,00329268","1968":"42,38221951","1969":"42,76195122","1970":"43,14709756","1971":"43,53678049","1972":"43,92612195","1973":"44,30821951","1974":"44,68260976","1975":"45,0457561","1976":"45,39604878","1977":"45,73139024","1978":"46,05119512","1979":"46,35692683","1980":"46,64714634","1981":"46,92095122","1982":"47,18190244","1983":"47,43502439","1984":"47,68821951","1985":"47,94834146","1986":"48,22114634","1987":"48,513","1988":"48,83136585","1989":"49,18426829","1990":"49,58192683","1991":"50,03409756","1992":"50,54056098","1993":"51,09497561","1994":"51,68982927","1995":"52,308","1996":"52,92919512","1997":"53,53763415","1998":"54,12665854","1999":"54,69726829","2000":"55,26504878","2001":"55,85673171","2002":"56,49309756","2003":"57,18478049","2004":"57,92485366","2005":"58,69778049","2006":"59,47592683","2007":"60,23012195","2008":"60,93770732","2009":"61,58712195","2010":"62,17585366","2011":"62,71192683","2012":"63,21292683","2013":"63,69490244","2014":"64,16339024","2015":"64,62439024","2016":"","Country Name":"Eritrea","Country Code":"ERI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,10926829","1961":"69,4804878","1962":"69,51902439","1963":"69,68121951","1964":"70,3997561","1965":"70,80926829","1966":"71,05512195","1967":"71,25292683","1968":"71,53780488","1969":"71,05756098","1970":"72,02731707","1971":"71,6302439","1972":"72,81804878","1973":"72,61073171","1974":"72,9697561","1975":"73,31878049","1976":"73,64268293","1977":"74,13195122","1978":"74,29560976","1979":"74,81878049","1980":"75,34926829","1981":"75,52853659","1982":"76,13414634","1983":"75,90902439","1984":"76,29536585","1985":"76,2595122","1986":"76,5104878","1987":"76,72804878","1988":"76,74707317","1989":"76,81365854","1990":"76,83756098","1991":"76,97121951","1992":"77,41","1993":"77,54658537","1994":"77,90146341","1995":"77,98073171","1996":"78,1204878","1997":"78,60414634","1998":"78,66585366","1999":"78,71707317","2000":"78,96585366","2001":"79,36829268","2002":"79,56829268","2003":"79,6195122","2004":"79,87073171","2005":"80,17073171","2006":"80,82195122","2007":"80,87317073","2008":"81,17560976","2009":"81,47560976","2010":"81,62682927","2011":"82,47560976","2012":"82,42682927","2013":"83,07804878","2014":"83,22926829","2015":"83,3804878","2016":"","Country Name":"Spain","Country Code":"ESP","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,90290244","1961":"68,36080488","1962":"68,74102439","1963":"69,05356098","1964":"69,30992683","1965":"69,51763415","1966":"69,68119512","1967":"69,80212195","1968":"69,88292683","1969":"69,92809756","1970":"69,93709756","1971":"69,90534146","1972":"69,83282927","1973":"69,72458537","1974":"69,59021951","1975":"69,44131707","1976":"69,29002439","1977":"69,14695122","1978":"69,02626829","1979":"68,93858537","1980":"68,90563415","1981":"68,97804878","1982":"69,12682927","1983":"69,37560976","1984":"69,27804878","1985":"69,3804878","1986":"70,08536585","1987":"70,64390244","1988":"70,69756098","1989":"70,03902439","1990":"69,47560976","1991":"69,37317073","1992":"68,86341463","1993":"67,9097561","1994":"66,5","1995":"67,54390244","1996":"69,61219512","1997":"69,8097561","1998":"69,35853659","1999":"70,06341463","2000":"70,41707317","2001":"70,25853659","2002":"70,90487805","2003":"71,31707317","2004":"71,9097561","2005":"72,56829268","2006":"72,69146341","2007":"72,81463415","2008":"73,77073171","2009":"74,82439024","2010":"75,42926829","2011":"76,22926829","2012":"76,32682927","2013":"77,14146341","2014":"77,03414634","2015":"77,13170732","2016":"","Country Name":"Estonia","Country Code":"EST","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"38,40570732","1961":"39,06863415","1962":"39,69865854","1963":"40,27780488","1964":"40,79756098","1965":"41,25546341","1966":"41,65597561","1967":"42,01504878","1968":"42,34417073","1969":"42,64929268","1970":"42,93441463","1971":"43,2034878","1972":"43,45502439","1973":"43,68353659","1974":"43,88402439","1975":"44,03402439","1976":"44,10607317","1977":"44,09368293","1978":"44,00736585","1979":"43,87260976","1980":"43,73990244","1981":"43,66965854","1982":"43,70787805","1983":"43,8814878","1984":"44,196","1985":"44,62990244","1986":"45,14368293","1987":"45,67841463","1988":"46,19212195","1989":"46,66631707","1990":"47,09956098","1991":"47,50536585","1992":"47,9132439","1993":"48,34721951","1994":"48,81278049","1995":"49,3045122","1996":"49,80943902","1997":"50,31856098","1998":"50,83178049","1999":"51,36058537","2000":"51,93382927","2001":"52,58590244","2002":"53,33868293","2003":"54,19963415","2004":"55,16121951","2005":"56,20892683","2006":"57,31882927","2007":"58,45002439","2008":"59,56112195","2009":"60,62219512","2010":"61,60185366","2011":"62,47663415","2012":"63,24858537","2013":"63,92417073","2014":"64,50690244","2015":"65,00829268","2016":"","Country Name":"Ethiopia","Country Code":"ETH","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,28001103","1961":"69,58992525","1962":"69,51523472","1963":"69,75998878","1964":"70,22675171","1965":"70,33756939","1966":"70,56807979","1967":"70,67799709","1968":"70,72413968","1969":"70,67961123","1970":"70,9987369","1971":"71,10690889","1972":"71,41506951","1973":"71,53536139","1974":"71,82612302","1975":"71,92200316","1976":"72,126573","1977":"72,41030231","1978":"72,52527743","1979":"72,76932014","1980":"72,864058","1981":"73,20324436","1982":"73,4647457","1983":"73,52789452","1984":"73,80297659","1985":"73,8772265","1986":"74,145246","1987":"74,38837975","1988":"74,57808029","1989":"74,74395043","1990":"74,86874481","1991":"74,96888851","1992":"75,28795006","1993":"75,39463683","1994":"75,69062967","1995":"75,81526525","1996":"76,06731014","1997":"76,36092239","1998":"76,59578319","1999":"76,82523695","2000":"77,15861119","2001":"77,4931243","2002":"77,60584482","2003":"77,69345183","2004":"78,19296345","2005":"78,36481648","2006":"78,73895726","2007":"78,96821226","2008":"79,1830529","2009":"79,44111941","2010":"79,72474962","2011":"80,23976651","2012":"80,25109831","2013":"80,53255827","2014":"80,92222407","2015":"81,1263925","2016":"","Country Name":"European Union","Country Code":"EUU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"40,6471208","1961":"41,16525888","1962":"41,70494577","1963":"42,27178073","1964":"42,8652681","1965":"43,47905478","1966":"44,10172967","1967":"44,71805393","1968":"45,31579227","1969":"45,88941314","1970":"46,43722956","1971":"46,96317834","1972":"47,47360936","1973":"47,9708885","1974":"48,45191706","1975":"48,91192495","1976":"49,34412196","1977":"49,74749949","1978":"50,12784717","1979":"50,49469058","1980":"50,85947069","1981":"51,34010681","1982":"51,7233543","1983":"52,1161274","1984":"52,51358476","1985":"52,90574806","1986":"53,28271743","1987":"53,63741662","1988":"53,95070628","1989":"54,22792847","1990":"54,56766767","1991":"54,76914991","1992":"54,93995465","1993":"55,09191155","1994":"55,23413005","1995":"55,37533534","1996":"55,5239572","1997":"55,68644914","1998":"55,8612383","1999":"56,05042408","2000":"56,29497812","2001":"56,57882164","2002":"56,90567768","2003":"57,27242531","2004":"57,67298618","2005":"58,09931901","2006":"58,54249191","2007":"58,98984074","2008":"59,42891472","2009":"59,85070682","2010":"60,25124564","2011":"60,63189366","2012":"61,00012177","2013":"61,35995106","2014":"61,71015899","2015":"62,04935535","2016":"","Country Name":"Fragile and conflict affected situations","Country Code":"FCS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,8197561","1961":"68,84414634","1962":"68,57780488","1963":"69,01268293","1964":"69,22097561","1965":"68,97780488","1966":"69,47707317","1967":"69,66658537","1968":"69,61634146","1969":"69,50341463","1970":"70,1795122","1971":"70,01756098","1972":"70,70731707","1973":"71,22365854","1974":"71,13487805","1975":"71,67365854","1976":"71,81292683","1977":"72,3502439","1978":"72,89707317","1979":"73,15536585","1980":"73,44","1981":"73,74658537","1982":"74,29804878","1983":"74,20097561","1984":"74,51902439","1985":"74,22292683","1986":"74,56","1987":"74,59195122","1988":"74,57707317","1989":"74,79219512","1990":"74,81317073","1991":"75,22756098","1992":"75,45536585","1993":"75,70512195","1994":"76,39560976","1995":"76,4095122","1996":"76,69341463","1997":"76,87853659","1998":"77,09073171","1999":"77,29121951","2000":"77,46585366","2001":"77,96585366","2002":"78,1195122","2003":"78,36829268","2004":"78,71463415","2005":"78,81707317","2006":"79,21463415","2007":"79,26341463","2008":"79,56829268","2009":"79,7195122","2010":"79,87073171","2011":"80,47073171","2012":"80,62682927","2013":"80,97560976","2014":"81,1804878","2015":"81,38536585","2016":"","Country Name":"Finland","Country Code":"FIN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"55,9584878","1961":"56,39273171","1962":"56,81746341","1963":"57,23217073","1964":"57,63885366","1965":"58,03602439","1966":"58,42619512","1967":"58,80834146","1968":"59,1824878","1969":"59,54860976","1970":"59,9062439","1971":"60,25239024","1972":"60,58802439","1973":"60,91214634","1974":"61,22621951","1975":"61,53217073","1976":"61,83297561","1977":"62,12958537","1978":"62,42397561","1979":"62,71765854","1980":"63,00863415","1981":"63,29646341","1982":"63,57817073","1983":"63,85334146","1984":"64,11997561","1985":"64,37909756","1986":"64,62970732","1987":"64,87329268","1988":"65,11134146","1989":"65,34385366","1990":"65,57085366","1991":"65,79331707","1992":"66,0112439","1993":"66,22414634","1994":"66,43353659","1995":"66,63890244","1996":"66,8402439","1997":"67,03756098","1998":"67,23085366","1999":"67,42012195","2000":"67,60585366","2001":"67,788","2002":"67,96709756","2003":"68,14314634","2004":"68,31768293","2005":"68,49178049","2006":"68,668","2007":"68,84590244","2008":"69,02702439","2009":"69,20885366","2010":"69,39085366","2011":"69,5695122","2012":"69,74373171","2013":"69,91143902","2014":"70,07112195","2015":"70,22426829","2016":"","Country Name":"Fiji","Country Code":"FJI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,86829268","1961":"70,11707317","1962":"70,31463415","1963":"70,51463415","1964":"70,66341463","1965":"70,81219512","1966":"70,96097561","1967":"71,16097561","1968":"71,3097561","1969":"71,45853659","1970":"71,65853659","1971":"71,90731707","1972":"72,10731707","1973":"72,35609756","1974":"72,60487805","1975":"72,85365854","1976":"73,10243902","1977":"73,35121951","1978":"73,60243902","1979":"73,85121951","1980":"74,05121951","1981":"74,3","1982":"74,5","1983":"74,8","1984":"75","1985":"75,3","1986":"75,6","1987":"75,8","1988":"76,1","1989":"76,34878049","1990":"76,6","1991":"76,84878049","1992":"77,1","1993":"77,3","1994":"77,64878049","1995":"77,75121951","1996":"77,95365854","1997":"78,30487805","1998":"78,60487805","1999":"78,75609756","2000":"79,05609756","2001":"79,15853659","2002":"79,26097561","2003":"79,11463415","2004":"80,16341463","2005":"80,16341463","2006":"80,81219512","2007":"81,11219512","2008":"81,21463415","2009":"81,41463415","2010":"81,66341463","2011":"82,11463415","2012":"81,96829268","2013":"82,2195122","2014":"82,67073171","2015":"82,67073171","2016":"","Country Name":"France","Country Code":"FRA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"74,49756098","1974":"","1975":"","1976":"","1977":"","1978":"75,98536585","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"75,26585366","1987":"75,46585366","1988":"75,71463415","1989":"75,91463415","1990":"76,11463415","1991":"76,36341463","1992":"76,61463415","1993":"76,91463415","1994":"77,16585366","1995":"77,36585366","1996":"77,61707317","1997":"77,82195122","1998":"78,02682927","1999":"78,23170732","2000":"78,43658537","2001":"78,64146341","2002":"78,84390244","2003":"78,94390244","2004":"79,14146341","2005":"79,2902439","2006":"79,58780488","2007":"79,83658537","2008":"80,13658537","2009":"80,38780488","2010":"80,63902439","2011":"80,93902439","2012":"81,1902439","2013":"81,44146341","2014":"81,48536585","2015":"81,63414634","2016":"","Country Name":"Faroe Islands","Country Code":"FRO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"57,58658537","1961":"57,98558537","1962":"58,38358537","1963":"58,78158537","1964":"59,17958537","1965":"59,57858537","1966":"59,98158537","1967":"60,38758537","1968":"60,79758537","1969":"61,21158537","1970":"61,63358537","1971":"62,07058537","1972":"62,52058537","1973":"62,97558537","1974":"63,42658537","1975":"63,85458537","1976":"64,23958537","1977":"64,56758537","1978":"64,83358537","1979":"65,03658537","1980":"65,18358537","1981":"65,28958537","1982":"65,37358537","1983":"65,45358537","1984":"65,53958537","1985":"65,63658537","1986":"65,74558537","1987":"65,85858537","1988":"65,97258537","1989":"66,08458537","1990":"66,19758537","1991":"66,31012195","1992":"66,42265854","1993":"66,53570732","1994":"66,6482439","1995":"66,7597561","1996":"66,86770732","1997":"66,97160976","1998":"67,07290244","1999":"67,17263415","2000":"67,2752439","2001":"67,38631707","2002":"67,50834146","2003":"67,64231707","2004":"67,78626829","2005":"67,93460976","2006":"68,08131707","2007":"68,21834146","2008":"68,34219512","2009":"68,45241463","2010":"68,55056098","2011":"68,64221951","2012":"68,73397561","2013":"68,83085366","2014":"68,93490244","2015":"69,04663415","2016":"","Country Name":"Micronesia, Fed. Sts.","Country Code":"FSM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"39,57012195","1961":"39,92804878","1962":"40,374","1963":"40,92495122","1964":"41,58541463","1965":"42,34439024","1966":"43,17936585","1967":"44,05234146","1968":"44,93331707","1969":"45,80380488","1970":"46,65526829","1971":"47,4867561","1972":"48,31073171","1973":"49,13470732","1974":"49,95868293","1975":"50,78514634","1976":"51,61460976","1977":"52,44707317","1978":"53,28102439","1979":"54,11297561","1980":"54,94895122","1981":"55,79792683","1982":"56,65495122","1983":"57,506","1984":"58,32909756","1985":"59,0927561","1986":"59,76095122","1987":"60,31068293","1988":"60,72746341","1989":"61,00531707","1990":"61,1457561","1991":"61,16178049","1992":"61,08543902","1993":"60,94721951","1994":"60,76868293","1995":"60,55785366","1996":"60,31329268","1997":"60,038","1998":"59,74895122","1999":"59,47404878","2000":"59,25180488","2001":"59,12119512","2002":"59,10558537","2003":"59,21785366","2004":"59,46378049","2005":"59,84256098","2006":"60,33987805","2007":"60,92212195","2008":"61,55280488","2009":"62,20502439","2010":"62,85653659","2011":"63,48868293","2012":"64,09534146","2013":"64,67087805","2014":"65,20302439","2015":"65,68441463","2016":"","Country Name":"Gabon","Country Code":"GAB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"71,12682927","1961":"70,87804878","1962":"70,92682927","1963":"70,82682927","1964":"71,62439024","1965":"71,62439024","1966":"71,57317073","1967":"72,12439024","1968":"71,72439024","1969":"71,72195122","1970":"71,97317073","1971":"72,27317073","1972":"72,12439024","1973":"72,32439024","1974":"72,52439024","1975":"72,72439024","1976":"72,77560976","1977":"73,22439024","1978":"73,17560976","1979":"73,27560976","1980":"73,67560976","1981":"74,02682927","1982":"74,17804878","1983":"74,37804878","1984":"74,77804878","1985":"74,62926829","1986":"74,92926829","1987":"75,2804878","1988":"75,3804878","1989":"75,58292683","1990":"75,8804878","1991":"76,08292683","1992":"76,43414634","1993":"76,38536585","1994":"76,88536585","1995":"76,83658537","1996":"77,08780488","1997":"77,21097561","1998":"77,1902439","1999":"77,3902439","2000":"77,74146341","2001":"77,99268293","2002":"78,14390244","2003":"78,44634146","2004":"78,74634146","2005":"79,04878049","2006":"79,24878049","2007":"79,44878049","2008":"79,6","2009":"80,05121951","2010":"80,40243902","2011":"80,95121951","2012":"80,90487805","2013":"81,00487805","2014":"81,30487805","2015":"81,60487805","2016":"","Country Name":"United Kingdom","Country Code":"GBR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"63,43185366","1961":"63,83185366","1962":"64,23434146","1963":"64,63882927","1964":"65,04180488","1965":"65,43678049","1966":"65,8187561","1967":"66,1822439","1968":"66,52573171","1969":"66,84921951","1970":"67,15921951","1971":"67,46619512","1972":"67,77717073","1973":"68,09112195","1974":"68,40258537","1975":"68,69456098","1976":"68,94358537","1977":"69,13565854","1978":"69,26629268","1979":"69,3394878","1980":"69,3762439","1981":"69,40402439","1982":"69,44929268","1983":"69,52804878","1984":"69,6412439","1985":"69,77485366","1986":"69,90080488","1987":"69,99263415","1988":"70,03534146","1989":"70,03246341","1990":"69,99960976","1991":"69,96082927","1992":"69,94773171","1993":"69,98234146","1994":"70,07568293","1995":"70,2357561","1996":"70,46604878","1997":"70,74746341","1998":"71,05790244","1999":"71,3817561","2000":"71,69339024","2001":"71,97068293","2002":"72,19856098","2003":"72,3695122","2004":"72,48104878","2005":"72,53519512","2006":"72,5424878","2007":"72,52507317","2008":"72,50312195","2009":"72,48973171","2010":"72,49804878","2011":"72,53617073","2012":"72,60363415","2013":"72,69846341","2014":"72,82063415","2015":"72,96612195","2016":"","Country Name":"Georgia","Country Code":"GEO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,83146341","1961":"46,26670732","1962":"46,68253659","1963":"47,07843902","1964":"47,45336585","1965":"47,80763415","1966":"48,14097561","1967":"48,4552439","1968":"48,75641463","1969":"49,04807317","1970":"49,33497561","1971":"49,62195122","1972":"49,91229268","1973":"50,20729268","1974":"50,5095122","1975":"50,81395122","1976":"51,11546341","1977":"51,40982927","1978":"51,69729268","1979":"51,98178049","1980":"52,27178049","1981":"52,57831707","1982":"52,91043902","1983":"53,27368293","1984":"53,6704878","1985":"54,10970732","1986":"54,60268293","1987":"55,13731707","1988":"55,69363415","1989":"56,24717073","1990":"56,75163415","1991":"57,15726829","1992":"57,43678049","1993":"57,57980488","1994":"57,59482927","1995":"57,50270732","1996":"57,34078049","1997":"57,1642439","1998":"57,02392683","1999":"56,95370732","2000":"56,98509756","2001":"57,13860976","2002":"57,39992683","2003":"57,75014634","2004":"58,17534146","2005":"58,65202439","2006":"59,15121951","2007":"59,64387805","2008":"60,10602439","2009":"60,52363415","2010":"60,89373171","2011":"61,22078049","2012":"61,52431707","2013":"61,82031707","2014":"62,11378049","2015":"62,4072439","2016":"","Country Name":"Ghana","Country Code":"GHA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Gibraltar","Country Code":"GIB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"34,88639024","1961":"35,08112195","1962":"35,26039024","1963":"35,42517073","1964":"35,58092683","1965":"35,73160976","1966":"35,88160976","1967":"36,03843902","1968":"36,21158537","1969":"36,41007317","1970":"36,6434878","1971":"36,92043902","1972":"37,242","1973":"37,6092439","1974":"38,02468293","1975":"38,48326829","1976":"38,97695122","1977":"39,49963415","1978":"40,05026829","1979":"40,63080488","1980":"41,25878049","1981":"41,95570732","1982":"42,73117073","1983":"43,58319512","1984":"44,49636585","1985":"45,45473171","1986":"46,43534146","1987":"47,40519512","1988":"48,32931707","1989":"49,17819512","1990":"49,91885366","1991":"50,52734146","1992":"51,00409756","1993":"51,35553659","1994":"51,58758537","1995":"51,69670732","1996":"51,68387805","1997":"51,57802439","1998":"51,42246341","1999":"51,26453659","2000":"51,17380488","2001":"51,22285366","2002":"51,44453659","2003":"51,85046341","2004":"52,43390244","2005":"53,15692683","2006":"53,9562439","2007":"54,7575122","2008":"55,50158537","2009":"56,16356098","2010":"56,7432439","2011":"57,26065854","2012":"57,76112195","2013":"58,27960976","2014":"58,82490244","2015":"59,39895122","2016":"","Country Name":"Guinea","Country Code":"GIN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"32,04221951","1961":"32,32563415","1962":"32,66109756","1963":"33,06209756","1964":"33,53763415","1965":"34,09319512","1966":"34,7322439","1967":"35,44326829","1968":"36,2112439","1969":"37,02417073","1970":"37,87056098","1971":"38,73741463","1972":"39,6137561","1973":"40,49012195","1974":"41,35697561","1975":"42,21036585","1976":"43,05326829","1977":"43,88868293","1978":"44,72009756","1979":"45,54202439","1980":"46,35095122","1981":"47,14485366","1982":"47,9182439","1983":"48,66163415","1984":"49,36802439","1985":"50,01943902","1986":"50,60043902","1987":"51,1075122","1988":"51,54319512","1989":"51,91695122","1990":"52,24573171","1991":"52,5515122","1992":"52,85621951","1993":"53,17934146","1994":"53,52990244","1995":"53,91095122","1996":"54,31858537","1997":"54,73787805","1998":"55,15682927","1999":"55,57041463","2000":"55,97802439","2001":"56,381","2002":"56,78121951","2003":"57,17863415","2004":"57,57173171","2005":"57,95658537","2006":"58,32831707","2007":"58,68456098","2008":"59,02295122","2009":"59,3435122","2010":"59,64573171","2011":"59,93056098","2012":"60,20139024","2013":"60,46217073","2014":"60,71385366","2015":"60,95743902","2016":"","Country Name":"Gambia","Country Code":"GMB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"37,84043902","1961":"38,14329268","1962":"38,46721951","1963":"38,81370732","1964":"39,18126829","1965":"39,56587805","1966":"39,96002439","1967":"40,35717073","1968":"40,75085366","1969":"41,1395122","1970":"41,52168293","1971":"41,89990244","1972":"42,27917073","1973":"42,66246341","1974":"43,05168293","1975":"43,44873171","1976":"43,85692683","1977":"44,27319512","1978":"44,69602439","1979":"45,12046341","1980":"45,53860976","1981":"45,94363415","1982":"46,32973171","1983":"46,69453659","1984":"47,03963415","1985":"47,368","1986":"47,68802439","1987":"48,00760976","1988":"48,33470732","1989":"48,67239024","1990":"49,02429268","1991":"49,3935122","1992":"49,7752439","1993":"50,16107317","1994":"50,54409756","1995":"50,9124878","1996":"51,24897561","1997":"51,54790244","1998":"51,80702439","1999":"52,03046341","2000":"52,22704878","2001":"52,41156098","2002":"52,602","2003":"52,81217073","2004":"53,05104878","2005":"53,32190244","2006":"53,6232439","2007":"53,94780488","2008":"54,28668293","2009":"54,63819512","2010":"55,00053659","2011":"55,37365854","2012":"55,75778049","2013":"56,14965854","2014":"56,54821951","2015":"56,95039024","2016":"","Country Name":"Guinea-Bissau","Country Code":"GNB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"36,73304878","1961":"37,0324878","1962":"37,33241463","1963":"37,63182927","1964":"37,93173171","1965":"38,23163415","1966":"38,53156098","1967":"38,83204878","1968":"39,13304878","1969":"39,43558537","1970":"39,73114634","1971":"40,01370732","1972":"40,2822439","1973":"40,54473171","1974":"40,81368293","1975":"41,11607317","1976":"41,48687805","1977":"41,94260976","1978":"42,48531707","1979":"43,1024878","1980":"43,76370732","1981":"44,4254878","1982":"45,04539024","1983":"45,59390244","1984":"46,06302439","1985":"46,45719512","1986":"46,79785366","1987":"47,12143902","1988":"47,45841463","1989":"47,82129268","1990":"48,22160976","1991":"48,65992683","1992":"49,12529268","1993":"49,60580488","1994":"50,0934878","1995":"50,58085366","1996":"51,05995122","1997":"51,52321951","1998":"51,96460976","1999":"52,38060976","2000":"52,76414634","2001":"53,11170732","2002":"53,4292439","2003":"53,72370732","2004":"54,00202439","2005":"54,27956098","2006":"54,57021951","2007":"54,88297561","2008":"55,22187805","2009":"55,58497561","2010":"55,95895122","2011":"56,32602439","2012":"56,66834146","2013":"56,978","2014":"57,25553659","2015":"57,50839024","2016":"","Country Name":"Eq. Guinea","Country Code":"GNQ","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,16390244","1961":"68,54863415","1962":"68,89226829","1963":"69,18570732","1964":"69,42943902","1965":"69,638","1966":"69,83746341","1967":"70,05246341","1968":"70,30256098","1969":"70,58929268","1970":"70,90363415","1971":"71,22656098","1972":"71,535","1973":"71,81485366","1974":"72,06463415","1975":"72,29370732","1976":"72,51956098","1977":"72,76165854","1978":"73,03107317","1979":"73,32936585","1980":"73,64714634","1981":"73,9694878","1982":"74,279","1983":"74,56585366","1984":"74,82912195","1985":"75,0785122","1986":"75,32970732","1987":"75,59814634","1988":"75,8912439","1989":"76,68780488","1990":"76,93902439","1991":"77,13658537","1992":"77,38292683","1993":"77,3902439","1994":"77,63902439","1995":"77,58536585","1996":"77,68536585","1997":"78,13658537","1998":"77,83902439","1999":"77,98780488","2000":"77,88780488","2001":"78,38780488","2002":"78,64146341","2003":"78,84146341","2004":"79,03902439","2005":"79,23902439","2006":"79,43902439","2007":"79,43902439","2008":"79,93902439","2009":"80,18780488","2010":"80,38780488","2011":"80,73170732","2012":"80,63414634","2013":"81,28536585","2014":"81,43658537","2015":"81,58780488","2016":"","Country Name":"Greece","Country Code":"GRC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"59,81592683","1961":"60,2495122","1962":"60,66958537","1963":"61,07617073","1964":"61,4707561","1965":"61,85282927","1966":"62,22292683","1967":"62,58153659","1968":"62,92817073","1969":"63,26429268","1970":"63,59043902","1971":"63,90709756","1972":"64,2137561","1973":"64,51192683","1974":"64,80058537","1975":"65,0822439","1976":"65,35541463","1977":"65,61958537","1978":"65,87726829","1979":"66,12695122","1980":"66,36965854","1981":"66,60536585","1982":"66,83558537","1983":"67,05929268","1984":"67,27802439","1985":"67,4907561","1986":"67,6984878","1987":"67,90073171","1988":"68,0974878","1989":"68,2897561","1990":"68,47502439","1991":"68,65380488","1992":"68,82560976","1993":"68,99139024","1994":"69,15419512","1995":"69,3175122","1996":"69,48631707","1997":"69,66163415","1998":"69,84746341","1999":"70,04429268","2000":"70,25160976","2001":"70,46792683","2002":"70,69073171","2003":"70,91602439","2004":"71,14280488","2005":"71,37258537","2006":"71,60690244","2007":"71,8467561","2008":"72,09014634","2009":"72,33407317","2010":"72,572","2011":"72,79641463","2012":"73,00329268","2013":"73,18909756","2014":"73,35334146","2015":"73,49953659","2016":"","Country Name":"Grenada","Country Code":"GRD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"63,41463415","1979":"63,95487805","1980":"63,4497561","1981":"63,07487805","1982":"63,19268293","1983":"63,3","1984":"63,46658537","1985":"63,83365854","1986":"64,24878049","1987":"64,65414634","1988":"64,58243902","1989":"64,66756098","1990":"65,06829268","1991":"65,03170732","1992":"65,19609756","1993":"65,58536585","1994":"65,90097561","1995":"65,64414634","1996":"65,76731707","1997":"65,79804878","1998":"66,15707317","1999":"66,40341463","2000":"66,96341463","2001":"67,60780488","2002":"68,16268293","2003":"68,43536585","2004":"68,80682927","2005":"69,22073171","2006":"69,51926829","2007":"69,98268293","2008":"70,21341463","2009":"70,46780488","2010":"70,85707317","2011":"71,06243902","2012":"71,29902439","2013":"71,8304878","2014":"","2015":"","2016":"","Country Name":"Greenland","Country Code":"GRL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,70146341","1961":"47,21931707","1962":"47,75017073","1963":"48,296","1964":"48,85682927","1965":"49,43665854","1966":"50,0354878","1967":"50,64882927","1968":"51,27017073","1969":"51,89297561","1970":"52,50473171","1971":"53,09490244","1972":"53,65643902","1973":"54,18534146","1974":"54,68160976","1975":"55,14573171","1976":"55,5847561","1977":"56,00768293","1978":"56,42707317","1979":"56,84992683","1980":"57,28273171","1981":"57,73102439","1982":"58,19429268","1983":"58,67202439","1984":"59,16421951","1985":"59,66987805","1986":"60,18297561","1987":"60,70102439","1988":"61,22004878","1989":"61,73960976","1990":"62,26378049","1991":"62,79914634","1992":"63,34826829","1993":"63,91168293","1994":"64,48692683","1995":"65,0665122","1996":"65,64441463","1997":"66,21209756","1998":"66,76146341","1999":"67,28346341","2000":"67,77102439","2001":"68,21658537","2002":"68,62112195","2003":"68,99109756","2004":"69,3314878","2005":"69,65434146","2006":"69,97568293","2007":"70,30558537","2008":"70,65104878","2009":"71,01260976","2010":"71,38621951","2011":"71,75885366","2012":"72,11846341","2013":"72,45402439","2014":"72,76202439","2015":"73,04297561","2016":"","Country Name":"Guatemala","Country Code":"GTM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"61,22634146","1961":"61,72529268","1962":"62,21919512","1963":"62,707","1964":"63,1862439","1965":"63,65741463","1966":"64,11902439","1967":"64,57158537","1968":"65,01414634","1969":"65,44670732","1970":"65,86731707","1971":"66,2754878","1972":"66,67073171","1973":"67,05304878","1974":"67,42243902","1975":"67,77890244","1976":"68,12241463","1977":"68,45443902","1978":"68,7754878","1979":"69,0875122","1980":"69,39053659","1981":"69,68653659","1982":"69,97553659","1983":"70,25853659","1984":"70,53553659","1985":"70,80653659","1986":"71,06804878","1987":"71,32007317","1988":"71,56458537","1989":"71,80409756","1990":"72,04409756","1991":"72,28760976","1992":"72,54007317","1993":"72,80453659","1994":"73,08395122","1995":"73,38131707","1996":"73,69917073","1997":"74,034","1998":"74,38229268","1999":"74,7384878","2000":"75,0975122","2001":"75,45121951","2002":"75,79507317","2003":"76,12512195","2004":"76,43897561","2005":"76,74034146","2006":"77,03246341","2007":"77,32104878","2008":"77,6102439","2009":"77,89902439","2010":"78,18285366","2011":"78,45656098","2012":"78,71439024","2013":"78,95363415","2014":"79,17373171","2015":"79,37763415","2016":"","Country Name":"Guam","Country Code":"GUM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,27873171","1961":"60,46209756","1962":"60,647","1963":"60,83090244","1964":"61,01229268","1965":"61,18717073","1966":"61,3484878","1967":"61,4932439","1968":"61,61939024","1969":"61,72739024","1970":"61,81821951","1971":"61,89582927","1972":"61,96670732","1973":"62,03485366","1974":"62,10380488","1975":"62,17560976","1976":"62,24980488","1977":"62,32595122","1978":"62,40258537","1979":"62,47973171","1980":"62,55482927","1981":"62,62782927","1982":"62,69668293","1983":"62,76290244","1984":"62,82807317","1985":"62,89529268","1986":"62,96821951","1987":"63,0495122","1988":"63,14221951","1989":"63,24790244","1990":"63,36756098","1991":"63,50217073","1992":"63,64909756","1993":"63,8047561","1994":"63,96704878","1995":"64,13346341","1996":"64,30092683","1997":"64,46646341","1998":"64,62804878","1999":"64,78363415","2000":"64,93119512","2001":"65,06970732","2002":"65,20065854","2003":"65,32507317","2004":"65,44292683","2005":"65,5532439","2006":"65,65653659","2007":"65,75382927","2008":"65,84660976","2009":"65,93682927","2010":"66,02641463","2011":"66,11878049","2012":"66,21587805","2013":"66,31765854","2014":"66,42614634","2015":"66,53936585","2016":"","Country Name":"Guyana","Country Code":"GUY","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,49768302","1961":"68,88238199","1962":"68,86181651","1963":"69,07639931","1964":"69,48212938","1965":"69,59550566","1966":"69,8646857","1967":"70,0951615","1968":"70,03958101","1969":"70,244661","1970":"70,57131954","1971":"70,85170039","1972":"71,146475","1973":"71,31718823","1974":"71,72938357","1975":"72,07650821","1976":"72,33505321","1977":"72,68659961","1978":"72,84431609","1979":"73,16995204","1980":"73,19688133","1981":"73,55457584","1982":"73,88072691","1983":"73,98390736","1984":"74,26842492","1985":"74,389937","1986":"74,63667134","1987":"74,91192282","1988":"75,02565139","1989":"75,27442384","1990":"75,4316392","1991":"75,60488009","1992":"75,86152449","1993":"75,9429343","1994":"76,22719931","1995":"76,29244528","1996":"76,66644073","1997":"76,99918603","1998":"77,18360612","1999":"77,33820884","2000":"77,61678269","2001":"77,91327513","2002":"78,05537314","2003":"78,1797977","2004":"78,60094158","2005":"78,69842454","2006":"79,00269464","2007":"79,23508611","2008":"79,38339134","2009":"79,66030739","2010":"79,84218174","2011":"80,08194663","2012":"80,19796792","2013":"80,3808347","2014":"80,61483831","2015":"80,74130969","2016":"","Country Name":"High income","Country Code":"HIC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"66,96168293","1961":"67,5487561","1962":"68,10597561","1963":"68,62585366","1964":"69,10436585","1965":"69,54287805","1966":"69,94621951","1967":"70,32578049","1968":"70,69053659","1969":"71,04456098","1970":"71,3865122","1971":"71,45853659","1972":"71,45609756","1973":"72,1097561","1974":"72,61219512","1975":"73,36829268","1976":"72,8195122","1977":"73,3195122","1978":"73,57560976","1979":"73,67317073","1980":"74,67317073","1981":"75,32439024","1982":"75,42926829","1983":"75,27560976","1984":"76,02926829","1985":"76,43414634","1986":"76,68536585","1987":"76,88292683","1988":"77,08292683","1989":"77,02926829","1990":"77,3804878","1991":"77,88292683","1992":"77,67804878","1993":"78,03170732","1994":"78,52926829","1995":"78,68292683","1996":"79,62682927","1997":"80,12682927","1998":"80,13170732","1999":"80,38292683","2000":"80,87804878","2001":"81,42439024","2002":"81,47804878","2003":"81,32926829","2004":"81,7804878","2005":"81,5804878","2006":"82,37560976","2007":"82,32682927","2008":"82,37560976","2009":"82,77560976","2010":"82,97804878","2011":"83,42195122","2012":"83,4804878","2013":"83,83170732","2014":"83,9804878","2015":"84,27804878","2016":"","Country Name":"Hong Kong SAR, China","Country Code":"HKG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,28831707","1961":"46,96387805","1962":"47,63295122","1963":"48,289","1964":"48,92797561","1965":"49,54736585","1966":"50,14765854","1967":"50,73739024","1968":"51,32463415","1969":"51,91487805","1970":"52,51514634","1971":"53,13295122","1972":"53,77082927","1973":"54,4307561","1974":"55,1152439","1975":"55,82329268","1976":"56,55490244","1977":"57,30304878","1978":"58,06373171","1979":"58,83292683","1980":"59,61212195","1981":"60,40585366","1982":"61,21207317","1983":"62,02480488","1984":"62,83153659","1985":"63,6137561","1986":"64,35095122","1987":"65,03014634","1988":"65,64529268","1989":"66,19443902","1990":"66,68904878","1991":"67,14363415","1992":"67,57919512","1993":"68,0087561","1994":"68,43680488","1995":"68,85839024","1996":"69,2615122","1997":"69,63070732","1998":"69,95897561","1999":"70,24580488","2000":"70,49419512","2001":"70,71212195","2002":"70,91104878","2003":"71,10295122","2004":"71,29282927","2005":"71,48217073","2006":"71,67297561","2007":"71,85926829","2008":"72,04102439","2009":"72,21829268","2010":"72,39504878","2011":"72,57278049","2012":"72,754","2013":"72,93970732","2014":"73,12990244","2015":"73,32460976","2016":"","Country Name":"Honduras","Country Code":"HND","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"39,56002424","1961":"39,99429806","1962":"40,42101924","1963":"40,83879763","1964":"41,24783421","1965":"41,65044818","1966":"42,04997928","1967":"42,45000831","1968":"42,85284182","1969":"43,25918413","1970":"43,66914946","1971":"44,08237946","1972":"44,49555314","1973":"44,90456403","1974":"45,3057577","1975":"45,69443373","1976":"46,06579403","1977":"46,41893179","1978":"46,7556363","1979":"47,07794541","1980":"47,39086608","1981":"47,70031152","1982":"48,00871345","1983":"48,31450628","1984":"48,6132226","1985":"48,89121214","1986":"49,13138937","1987":"49,32270435","1988":"49,4632659","1989":"49,56447694","1990":"49,6498445","1991":"49,7474975","1992":"49,87892587","1993":"50,04950521","1994":"50,25155713","1995":"50,47994173","1996":"50,73718656","1997":"51,02843185","1998":"51,36011198","1999":"51,73955294","2000":"52,17742899","2001":"52,68462429","2002":"53,26292762","2003":"53,90680985","2004":"54,60455923","2005":"55,34084123","2006":"56,09826368","2007":"56,85666492","2008":"57,59680361","2009":"58,30389402","2010":"58,96646682","2011":"59,57860688","2012":"60,14651181","2013":"60,67593748","2014":"61,16724084","2015":"61,6223619","2016":"","Country Name":"Heavily indebted poor countries (HIPC)","Country Code":"HPC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"64,60865854","1961":"65,0155122","1962":"65,4082439","1963":"65,78787805","1964":"66,15443902","1965":"66,51204878","1966":"66,86278049","1967":"67,20873171","1968":"67,54892683","1969":"67,88136585","1970":"68,2004878","1971":"68,50163415","1972":"68,77873171","1973":"69,0292439","1974":"69,25270732","1975":"70,00195122","1976":"70,45536585","1977":"70,74439024","1978":"70,53878049","1979":"70,42731707","1980":"70,17536585","1981":"70,34439024","1982":"70,48268293","1983":"70,27487805","1984":"70,21853659","1985":"70,88609756","1986":"71,41902439","1987":"71,4702439","1988":"71,48829268","1989":"71,84463415","1990":"72,1704878","1991":"72,18536585","1992":"71,24146341","1993":"71,52243902","1994":"71,80341463","1995":"72,08439024","1996":"72,36536585","1997":"72,49512195","1998":"72,31707317","1999":"72,64195122","2000":"72,80780488","2001":"74,51292683","2002":"74,71731707","2003":"74,61390244","2004":"75,5202439","2005":"75,24463415","2006":"75,83682927","2007":"75,70560976","2008":"75,91219512","2009":"76,16829268","2010":"76,47560976","2011":"76,77560976","2012":"76,92439024","2013":"77,12682927","2014":"77,47804878","2015":"77,27560976","2016":"","Country Name":"Croatia","Country Code":"HRV","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"42,10009756","1961":"42,68395122","1962":"43,26380488","1963":"43,83619512","1964":"44,39858537","1965":"44,94204878","1966":"45,45860976","1967":"45,94229268","1968":"46,39107317","1969":"46,80839024","1970":"47,19965854","1971":"47,57670732","1972":"47,9484878","1973":"48,32346341","1974":"48,70417073","1975":"49,08726829","1976":"49,46495122","1977":"49,82787805","1978":"50,17365854","1979":"50,50429268","1980":"50,8282439","1981":"51,15685366","1982":"51,50046341","1983":"51,86390244","1984":"52,24760976","1985":"52,64753659","1986":"53,05368293","1987":"53,45463415","1988":"53,84295122","1989":"54,21368293","1990":"54,56931707","1991":"54,91441463","1992":"55,25595122","1993":"55,59846341","1994":"55,9405122","1995":"56,27565854","1996":"56,59495122","1997":"56,89290244","1998":"57,16902439","1999":"57,42626829","2000":"57,67604878","2001":"57,92978049","2002":"58,19936585","2003":"58,4952439","2004":"58,82092683","2005":"59,17946341","2006":"59,56992683","2007":"59,98241463","2008":"60,40653659","2009":"60,83378049","2010":"61,25319512","2011":"61,6552439","2012":"62,03436585","2013":"62,388","2014":"62,71314634","2015":"63,01078049","2016":"","Country Name":"Haiti","Country Code":"HTI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,00317073","1961":"68,93609756","1962":"67,86585366","1963":"68,87414634","1964":"69,38097561","1965":"69,07121951","1966":"69,82243902","1967":"69,40707317","1968":"69,2302439","1969":"69,31463415","1970":"69,16463415","1971":"69,05243902","1972":"69,66463415","1973":"69,51804878","1974":"69,24804878","1975":"69,29","1976":"69,57317073","1977":"69,84804878","1978":"69,39390244","1979":"69,61536585","1980":"69,06170732","1981":"69,13926829","1982":"69,35780488","1983":"68,97365854","1984":"69,02585366","1985":"68,97219512","1986":"69,17341463","1987":"69,65121951","1988":"70,02341463","1989":"69,46170732","1990":"69,31560976","1991":"69,37707317","1992":"69,11707317","1993":"69,10121951","1994":"69,4697561","1995":"69,79170732","1996":"70,32878049","1997":"70,70243902","1998":"70,55780488","1999":"70,67707317","2000":"71,24634146","2001":"72,24878049","2002":"72,34878049","2003":"72,3","2004":"72,64878049","2005":"72,64878049","2006":"73,09756098","2007":"73,15121951","2008":"73,70243902","2009":"73,90487805","2010":"74,20731707","2011":"74,85853659","2012":"75,06341463","2013":"75,56585366","2014":"75,76341463","2015":"75,96097561","2016":"","Country Name":"Hungary","Country Code":"HUN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,70265292","1961":"49,22257484","1962":"49,82189119","1963":"50,56037846","1964":"51,42589335","1965":"52,39917456","1966":"53,41364678","1967":"54,41298911","1968":"55,37913092","1969":"56,2386121","1970":"57,03577204","1971":"57,73800924","1972":"58,3833155","1973":"58,99345971","1974":"59,58388459","1975":"60,10004125","1976":"60,61482743","1977":"61,0900851","1978":"61,53563939","1979":"61,93452938","1980":"62,30634018","1981":"62,67836604","1982":"63,03209745","1983":"63,34142538","1984":"63,62460498","1985":"63,95170105","1986":"64,32376352","1987":"64,62442033","1988":"64,91579857","1989":"65,18222417","1990":"65,44175898","1991":"65,69053252","1992":"65,89395483","1993":"66,08293835","1994":"66,33513452","1995":"66,62247192","1996":"66,96143127","1997":"67,31870138","1998":"67,65182869","1999":"67,93842026","2000":"68,25188245","2001":"68,57579036","2002":"68,87857596","2003":"69,18160353","2004":"69,49764255","2005":"69,78631275","2006":"70,11443797","2007":"70,42523948","2008":"70,71417844","2009":"71,02548525","2010":"71,30696304","2011":"71,60250652","2012":"71,86153187","2013":"72,11589743","2014":"72,34335635","2015":"72,55544022","2016":"","Country Name":"IBRD only","Country Code":"IBD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"47,57393809","1961":"48,08493572","1962":"48,66748763","1963":"49,36993551","1964":"50,17558881","1965":"51,06658868","1966":"51,98613351","1967":"52,88408063","1968":"53,74627262","1969":"54,51347786","1970":"55,22475555","1971":"55,85669311","1972":"56,44261128","1973":"57,00309754","1974":"57,5511925","1975":"58,04183368","1976":"58,53539563","1977":"58,99810271","1978":"59,43611293","1979":"59,83340437","1980":"60,20401954","1981":"60,57245028","1982":"60,92080148","1983":"61,22812833","1984":"61,50919293","1985":"61,8200682","1986":"62,16043037","1987":"62,43603289","1988":"62,69605093","1989":"62,93158369","1990":"63,1554121","1991":"63,37235277","1992":"63,54476098","1993":"63,71087907","1994":"63,93012328","1995":"64,18125386","1996":"64,4775484","1997":"64,7960531","1998":"65,09081405","1999":"65,35849501","2000":"65,65701","2001":"65,96854865","2002":"66,27287383","2003":"66,58788359","2004":"66,92221269","2005":"67,24279352","2006":"67,59903674","2007":"67,94414797","2008":"68,27134744","2009":"68,61169322","2010":"68,92197931","2011":"69,23511107","2012":"69,51357594","2013":"69,78210044","2014":"70,02402922","2015":"70,24842028","2016":"","Country Name":"IDA & IBRD total","Country Code":"IBT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,91443581","1961":"42,45695791","1962":"42,99796734","1963":"43,53546537","1964":"44,0650523","1965":"44,57448927","1966":"45,04963584","1967":"45,48176099","1968":"45,86893974","1969":"46,2152367","1970":"46,5342606","1971":"46,84638838","1972":"47,17126783","1973":"47,52332553","1974":"47,90977937","1975":"48,33527767","1976":"48,79802749","1977":"49,28272062","1978":"49,77066423","1979":"50,24660852","1980":"50,6995155","1981":"51,16092976","1982":"51,56665859","1983":"51,94660996","1984":"52,30500353","1985":"52,63223263","1986":"52,92142871","1987":"53,17486924","1988":"53,38724525","1989":"53,58440901","1990":"53,75863343","1991":"53,92904626","1992":"54,10707812","1993":"54,29316899","1994":"54,49396091","1995":"54,71476594","1996":"54,9578887","1997":"55,21930105","1998":"55,49669156","1999":"55,80369169","2000":"56,14469728","2001":"56,52928924","2002":"56,95905102","2003":"57,43449649","2004":"57,94934697","2005":"58,49378303","2006":"59,0573118","2007":"59,62749611","2008":"60,18825967","2009":"60,72666354","2010":"61,23310031","2011":"61,7024605","2012":"62,13760262","2013":"62,54378434","2014":"62,92237258","2015":"63,27507351","2016":"","Country Name":"IDA total","Country Code":"IDA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"43,59949247","1961":"44,25751788","1962":"44,89538345","1963":"45,50961745","1964":"46,10031489","1965":"46,66844352","1966":"47,21748066","1967":"47,75072439","1968":"48,27099568","1969":"48,77843794","1970":"49,27189389","1971":"49,75099565","1972":"50,2138146","1973":"50,65984016","1974":"51,08890083","1975":"51,50489701","1976":"51,91261757","1977":"52,31369282","1978":"52,7082592","1979":"53,09382888","1980":"53,46431402","1981":"53,81079925","1982":"54,13147609","1983":"54,40207284","1984":"54,63524376","1985":"54,82129405","1986":"54,96057908","1987":"55,06438167","1988":"55,12553363","1989":"55,16434621","1990":"55,18087968","1991":"55,16998515","1992":"55,14628218","1993":"55,10175933","1994":"55,05991846","1995":"55,02693458","1996":"55,01355808","1997":"55,02964654","1998":"55,06911502","1999":"55,15151863","2000":"55,29236981","2001":"55,49982799","2002":"55,77811628","2003":"56,11098554","2004":"56,50454897","2005":"56,94700671","2006":"57,42841891","2007":"57,93395003","2008":"58,44613306","2009":"58,94992619","2010":"59,4382176","2011":"59,89242819","2012":"60,30603558","2013":"60,68853703","2014":"61,03881152","2015":"61,35832808","2016":"","Country Name":"IDA blend","Country Code":"IDB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,64031707","1961":"49,26980488","1962":"49,88580488","1963":"50,48829268","1964":"51,07929268","1965":"51,66278049","1966":"52,24131707","1967":"52,81685366","1968":"53,39041463","1969":"53,96246341","1970":"54,53146341","1971":"55,09487805","1972":"55,64914634","1973":"56,19229268","1974":"56,72080488","1975":"57,23570732","1976":"57,73660976","1977":"58,225","1978":"58,70095122","1979":"59,16343902","1980":"59,60990244","1981":"60,03526829","1982":"60,43946341","1983":"60,82295122","1984":"61,1877561","1985":"61,53839024","1986":"61,88141463","1987":"62,22143902","1988":"62,5634878","1989":"62,90863415","1990":"63,25990244","1991":"63,61629268","1992":"63,97426829","1993":"64,32829268","1994":"64,67385366","1995":"65,00187805","1996":"65,30582927","1997":"65,58217073","1998":"65,82939024","1999":"66,04946341","2000":"66,24687805","2001":"66,43012195","2002":"66,6082439","2003":"66,78880488","2004":"66,97487805","2005":"67,16856098","2006":"67,3684878","2007":"67,56973171","2008":"67,76829268","2009":"67,96314634","2010":"68,15273171","2011":"68,33741463","2012":"68,51758537","2013":"68,69512195","2014":"68,8684878","2015":"69,03863415","2016":"","Country Name":"Indonesia","Country Code":"IDN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,11123052","1961":"41,59918532","1962":"42,09428053","1963":"42,59535409","1964":"43,09605753","1965":"43,57794052","1966":"44,01856497","1967":"44,40335412","1968":"44,72786519","1969":"44,99756065","1970":"45,23263984","1971":"45,46316242","1972":"45,71909734","1973":"46,02200305","1974":"46,38286634","1975":"46,80702461","1976":"47,28983551","1977":"47,80821437","1978":"48,33471225","1979":"48,84818679","1980":"49,33531445","1981":"49,85238362","1982":"50,29453156","1983":"50,7245491","1984":"51,14121254","1985":"51,53543499","1986":"51,89671263","1987":"52,222652","1988":"52,509572","1989":"52,78569056","1990":"53,03928504","1991":"53,30192788","1992":"53,58254014","1993":"53,88589439","1994":"54,20950063","1995":"54,55819064","1996":"54,93001221","1997":"55,31415872","1998":"55,71023902","1999":"56,12885621","2000":"56,56886657","2001":"57,0404785","2002":"57,54413118","2003":"58,0884918","2004":"58,6617343","2005":"59,25516537","2006":"59,85814685","2007":"60,4595565","2008":"61,04404418","2009":"61,59966225","2010":"62,11612449","2011":"62,59424284","2012":"63,04081966","2013":"63,45961686","2014":"63,8531217","2015":"64,22299397","2016":"","Country Name":"IDA only","Country Code":"IDX","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"76,52926829","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"77,96585366","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Isle of Man","Country Code":"IMN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,1695122","1961":"41,78902439","1962":"42,41643902","1963":"43,0522439","1964":"43,69695122","1965":"44,35156098","1966":"45,01558537","1967":"45,68702439","1968":"46,36239024","1969":"47,04065854","1970":"47,7197561","1971":"48,39912195","1972":"49,07721951","1973":"49,74956098","1974":"50,41170732","1975":"51,0552439","1976":"51,67680488","1977":"52,2704878","1978":"52,83490244","1979":"53,36609756","1980":"53,86058537","1981":"54,31341463","1982":"54,7294878","1983":"55,11619512","1984":"55,48346341","1985":"55,84370732","1986":"56,21229268","1987":"56,59970732","1988":"57,01339024","1989":"57,45582927","1990":"57,92653659","1991":"58,42253659","1992":"58,92941463","1993":"59,43678049","1994":"59,93770732","1995":"60,4247561","1996":"60,89297561","1997":"61,34290244","1998":"61,77502439","1999":"62,19085366","2000":"62,59339024","2001":"62,98563415","2002":"63,37453659","2003":"63,76497561","2004":"64,15839024","2005":"64,56009756","2006":"64,97090244","2007":"65,3897561","2008":"65,81065854","2009":"66,23017073","2010":"66,63992683","2011":"67,03165854","2012":"67,40007317","2013":"67,73934146","2014":"68,05002439","2015":"68,33260976","2016":"","Country Name":"India","Country Code":"IND","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Not classified","Country Code":"INX","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,7965122","1961":"69,97826829","1962":"70,13407317","1963":"70,27292683","1964":"70,40129268","1965":"70,52314634","1966":"70,63843902","1967":"70,74514634","1968":"70,84429268","1969":"70,93787805","1970":"71,03143902","1971":"71,12853659","1972":"71,2322439","1973":"71,34556098","1974":"71,47202439","1975":"71,61660976","1976":"71,78278049","1977":"71,969","1978":"72,17373171","1979":"72,39346341","1980":"72,6232439","1981":"72,85609756","1982":"73,08807317","1983":"73,31368293","1984":"73,53146341","1985":"73,74236585","1986":"73,95141463","1987":"74,16253659","1988":"74,37770732","1989":"74,59590244","1990":"74,80909756","1991":"75,00526829","1992":"75,18095122","1993":"75,33612195","1994":"75,47680488","1995":"75,61756098","1996":"75,83170732","1997":"75,98536585","1998":"76,1804878","1999":"76,08292683","2000":"76,53658537","2001":"77,13414634","2002":"77,63414634","2003":"78,13902439","2004":"78,53902439","2005":"78,94390244","2006":"79,24146341","2007":"79,64146341","2008":"80,09512195","2009":"80,1902439","2010":"80,74390244","2011":"80,74634146","2012":"80,84634146","2013":"81","2014":"81,34878049","2015":"81,50243902","2016":"","Country Name":"Ireland","Country Code":"IRL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"44,9455122","1961":"45,50895122","1962":"46,06580488","1963":"46,61807317","1964":"47,16980488","1965":"47,72814634","1966":"48,3007561","1967":"48,89221951","1968":"49,51058537","1969":"50,15834146","1970":"50,86397561","1971":"51,66158537","1972":"52,54446341","1973":"53,47880488","1974":"54,41046341","1975":"55,2124878","1976":"55,73092683","1977":"55,89641463","1978":"55,71121951","1979":"55,23958537","1980":"54,64043902","1981":"54,12787805","1982":"53,89909756","1983":"54,09290244","1984":"54,75387805","1985":"55,87141463","1986":"57,36365854","1987":"59,05031707","1988":"60,76182927","1989":"62,40190244","1990":"63,88287805","1991":"65,14534146","1992":"66,2035122","1993":"67,07821951","1994":"67,77139024","1995":"68,30592683","1996":"68,72214634","1997":"69,07631707","1998":"69,41556098","1999":"69,76595122","2000":"70,13719512","2001":"70,52165854","2002":"70,89843902","2003":"71,25385366","2004":"71,59363415","2005":"71,93070732","2006":"72,28363415","2007":"72,66321951","2008":"73,07309756","2009":"73,50919512","2010":"73,95619512","2011":"74,39460976","2012":"74,80282927","2013":"75,16541463","2014":"75,47819512","2015":"75,74263415","2016":"","Country Name":"Iran","Country Code":"IRN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,03068293","1961":"49,23163415","1962":"50,41836585","1963":"51,58941463","1964":"52,73682927","1965":"53,84312195","1966":"54,88641463","1967":"55,84880488","1968":"56,71790244","1969":"57,49234146","1970":"58,18768293","1971":"58,83058537","1972":"59,44102439","1973":"60,022","1974":"60,56114634","1975":"60,99665854","1976":"61,24819512","1977":"61,28153659","1978":"61,10631707","1979":"60,77339024","1980":"60,39402439","1981":"60,11004878","1982":"60,03868293","1983":"60,25141463","1984":"60,76682927","1985":"61,5495122","1986":"62,52002439","1987":"63,5485122","1988":"64,52429268","1989":"65,39443902","1990":"66,1317561","1991":"66,74095122","1992":"67,26443902","1993":"67,73543902","1994":"68,1527561","1995":"68,51026829","1996":"68,79729268","1997":"69,00678049","1998":"69,13856098","1999":"69,19592683","2000":"69,17931707","2001":"69,09","2002":"68,94202439","2003":"68,75731707","2004":"68,56012195","2005":"68,38168293","2006":"68,25502439","2007":"68,19653659","2008":"68,21431707","2009":"68,31246341","2010":"68,48217073","2011":"68,70473171","2012":"68,9507561","2013":"69,19546341","2014":"69,42560976","2015":"69,63460976","2016":"","Country Name":"Iraq","Country Code":"IRQ","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"73,42317073","1961":"73,50341463","1962":"73,72195122","1963":"73,04292683","1964":"73,54170732","1965":"73,86878049","1966":"73,3004878","1967":"73,78317073","1968":"74,00585366","1969":"73,77634146","1970":"73,93390244","1971":"73,5704878","1972":"74,45585366","1973":"74,45097561","1974":"74,51170732","1975":"75,57878049","1976":"76,97219512","1977":"76,37365854","1978":"76,64926829","1979":"76,77317073","1980":"76,84658537","1981":"76,52146341","1982":"77,03780488","1983":"76,84560976","1984":"77,57658537","1985":"77,60243902","1986":"77,99073171","1987":"77,33902439","1988":"77,08292683","1989":"78,14097561","1990":"78,03634146","1991":"77,99195122","1992":"78,7602439","1993":"78,93463415","1994":"79,24707317","1995":"77,98439024","1996":"78,77780488","1997":"78,88536585","1998":"79,60243902","1999":"79,35121951","2000":"79,65365854","2001":"80,6902439","2002":"80,50243902","2003":"80,96341463","2004":"80,99756098","2005":"81,50243902","2006":"81,15853659","2007":"81,45365854","2008":"81,6097561","2009":"81,75121951","2010":"81,89756098","2011":"82,35853659","2012":"82,91707317","2013":"82,06097561","2014":"82,86097561","2015":"82,86097561","2016":"","Country Name":"Iceland","Country Code":"ISL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"72,00658537","1962":"72,11219512","1963":"","1964":"","1965":"","1966":"72,28560976","1967":"71,5097561","1968":"71,05658537","1969":"70,9704878","1970":"71,21341463","1971":"71,71902439","1972":"71,07804878","1973":"71,69341463","1974":"71,66170732","1975":"72,04512195","1976":"72,95609756","1977":"72,95853659","1978":"73,20731707","1979":"73,50731707","1980":"73,87560976","1981":"74,26097561","1982":"74,1097561","1983":"74,45853659","1984":"74,80731707","1985":"75,20731707","1986":"74,95609756","1987":"75,25853659","1988":"74,43658537","1989":"76,30731707","1990":"76,60731707","1991":"76,75853659","1992":"76,50487805","1993":"77,15365854","1994":"77,40243902","1995":"77,45121951","1996":"78,10487805","1997":"78","1998":"78,14878049","1999":"78,65853659","2000":"78,95365854","2001":"79,40731707","2002":"79,45121951","2003":"79,64878049","2004":"80,14634146","2005":"80,15121951","2006":"80,55365854","2007":"80,50487805","2008":"80,95121951","2009":"81,40487805","2010":"81,60243902","2011":"81,65609756","2012":"81,70487805","2013":"82,05609756","2014":"82,15365854","2015":"82,05121951","2016":"","Country Name":"Israel","Country Code":"ISR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,12390244","1961":"69,7602439","1962":"69,1497561","1963":"69,24804878","1964":"70,31170732","1965":"70,17170732","1966":"70,92609756","1967":"70,95658537","1968":"70,78","1969":"70,81195122","1970":"71,55878049","1971":"71,80682927","1972":"72,07536585","1973":"72,02634146","1974":"72,73439024","1975":"72,64731707","1976":"72,99195122","1977":"73,36463415","1978":"73,69317073","1979":"74,00268293","1980":"73,94317073","1981":"74,35390244","1982":"74,81463415","1983":"74,6402439","1984":"75,3895122","1985":"75,47073171","1986":"75,77073171","1987":"76,2195122","1988":"76,37073171","1989":"76,8195122","1990":"76,97073171","1991":"77,0195122","1992":"77,4195122","1993":"77,72195122","1994":"77,92195122","1995":"78,17073171","1996":"78,52195122","1997":"78,82439024","1998":"78,97560976","1999":"79,42439024","2000":"79,77804878","2001":"80,12682927","2002":"80,22926829","2003":"79,98292683","2004":"80,7804878","2005":"80,78292683","2006":"81,28292683","2007":"81,43414634","2008":"81,48536585","2009":"81,63658537","2010":"82,03658537","2011":"82,18780488","2012":"82,23902439","2013":"82,6902439","2014":"83,0902439","2015":"83,4902439","2016":"","Country Name":"Italy","Country Code":"ITA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"64,30807317","1961":"64,87602439","1962":"65,39663415","1963":"65,87139024","1964":"66,30529268","1965":"66,69978049","1966":"67,05734146","1967":"67,38241463","1968":"67,68346341","1969":"67,96992683","1970":"68,25180488","1971":"68,54009756","1972":"68,83926829","1973":"69,15185366","1974":"69,47834146","1975":"69,81770732","1976":"70,16646341","1977":"70,51509756","1978":"70,85160976","1979":"71,166","1980":"71,44629268","1981":"71,681","1982":"71,86612195","1983":"72,00163415","1984":"72,08802439","1985":"72,1302439","1986":"72,13570732","1987":"72,11536585","1988":"72,0837561","1989":"72,04892683","1990":"72,01597561","1991":"71,98753659","1992":"71,96273171","1993":"71,94365854","1994":"71,93536585","1995":"71,94239024","1996":"71,96819512","1997":"72,01570732","1998":"72,08685366","1999":"72,18465854","2000":"72,31317073","2001":"72,47695122","2002":"72,67502439","2003":"72,90292683","2004":"73,15560976","2005":"73,42802439","2006":"73,71512195","2007":"74,00878049","2008":"74,30043902","2009":"74,58253659","2010":"74,8464878","2011":"75,0852439","2012":"75,29982927","2013":"75,49026829","2014":"75,65853659","2015":"75,80668293","2016":"","Country Name":"Jamaica","Country Code":"JAM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"52,68526829","1961":"53,4715122","1962":"54,25131707","1963":"55,02519512","1964":"55,79265854","1965":"56,55217073","1966":"57,30326829","1967":"58,04397561","1968":"58,77278049","1969":"59,48768293","1970":"60,19021951","1971":"60,88134146","1972":"61,56107317","1973":"62,22839024","1974":"62,88080488","1975":"63,51280488","1976":"64,11790244","1977":"64,69358537","1978":"65,23787805","1979":"65,74926829","1980":"66,23129268","1981":"66,68795122","1982":"67,1247561","1983":"67,54570732","1984":"67,95026829","1985":"68,33839024","1986":"68,70656098","1987":"69,04970732","1988":"69,36680488","1989":"69,65736585","1990":"69,92085366","1991":"70,15731707","1992":"70,37226829","1993":"70,5687561","1994":"70,7512439","1995":"70,92573171","1996":"71,09568293","1997":"71,26356098","1998":"71,43287805","1999":"71,60509756","2000":"71,7797561","2001":"71,95636585","2002":"72,1324878","2003":"72,30460976","2004":"72,4737561","2005":"72,63890244","2006":"72,80156098","2007":"72,96219512","2008":"73,12229268","2009":"73,28085366","2010":"73,43839024","2011":"73,59390244","2012":"73,74690244","2013":"73,89692683","2014":"74,04495122","2015":"74,19102439","2016":"","Country Name":"Jordan","Country Code":"JOR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,66609756","1961":"68,31","1962":"68,59487805","1963":"69,65804878","1964":"70,13243902","1965":"70,20195122","1966":"70,98658537","1967":"71,27658537","1968":"71,61121951","1969":"71,83878049","1970":"71,9502439","1971":"72,88292683","1972":"73,50658537","1973":"73,75756098","1974":"74,39390244","1975":"75,05731707","1976":"75,45682927","1977":"75,89829268","1978":"76,03829268","1979":"76,33756098","1980":"76,09170732","1981":"76,41439024","1982":"76,92292683","1983":"76,96146341","1984":"77,36536585","1985":"77,6504878","1986":"78,06463415","1987":"78,48365854","1988":"78,39926829","1989":"78,81804878","1990":"78,83682927","1991":"79,10073171","1992":"79,15390244","1993":"79,29365854","1994":"79,68707317","1995":"79,53634146","1996":"80,2002439","1997":"80,42414634","1998":"80,50146341","1999":"80,57073171","2000":"81,07609756","2001":"81,41707317","2002":"81,56341463","2003":"81,76","2004":"82,0302439","2005":"81,92512195","2006":"82,32195122","2007":"82,50707317","2008":"82,58756098","2009":"82,93146341","2010":"82,84268293","2011":"82,59121951","2012":"83,09609756","2013":"83,33195122","2014":"83,58780488","2015":"83,84365854","2016":"","Country Name":"Japan","Country Code":"JPN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"58,36758537","1961":"58,78158537","1962":"59,19907317","1963":"59,61856098","1964":"60,03604878","1965":"60,44902439","1966":"60,852","1967":"61,2394878","1968":"61,60897561","1969":"61,95646341","1970":"62,27646341","1971":"62,56495122","1972":"62,82495122","1973":"63,06043902","1974":"63,27992683","1975":"63,49236585","1976":"63,7097561","1977":"63,94058537","1978":"64,19190244","1979":"64,46673171","1980":"66,62439024","1981":"66,70609756","1982":"66,78780488","1983":"67,66219512","1984":"68,53658537","1985":"68,53658537","1986":"68,91341463","1987":"69,2902439","1988":"68,84878049","1989":"68,2902439","1990":"68,33658537","1991":"67,98292683","1992":"67,73170732","1993":"66,72682927","1994":"65,67317073","1995":"64,9195122","1996":"64,1097561","1997":"64,46341463","1998":"64,56097561","1999":"65,5195122","2000":"65,51707317","2001":"65,76829268","2002":"65,96829268","2003":"65,86585366","2004":"65,88780488","2005":"65,9097561","2006":"66,16097561","2007":"66,50487805","2008":"67,02195122","2009":"68,42926829","2010":"68,29536585","2011":"68,98","2012":"69,61","2013":"70,45","2014":"71,62","2015":"72","2016":"","Country Name":"Kazakhstan","Country Code":"KAZ","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,36241463","1961":"47,013","1962":"47,6522439","1963":"48,26926829","1964":"48,86060976","1965":"49,42826829","1966":"49,98168293","1967":"50,53273171","1968":"51,09180488","1969":"51,65987805","1970":"52,23646341","1971":"52,81509756","1972":"53,38982927","1973":"53,95317073","1974":"54,50412195","1975":"55,04765854","1976":"55,5957561","1977":"56,15087805","1978":"56,70743902","1979":"57,24939024","1980":"57,75814634","1981":"58,21263415","1982":"58,58985366","1983":"58,8707561","1984":"59,04039024","1985":"59,08473171","1986":"58,9967561","1987":"58,78753659","1988":"58,47121951","1989":"58,05792683","1990":"57,54682927","1991":"56,93060976","1992":"56,22587805","1993":"55,46368293","1994":"54,68407317","1995":"53,92356098","1996":"53,21509756","1997":"52,59504878","1998":"52,1077561","1999":"51,80104878","2000":"51,74092683","2001":"51,98785366","2002":"52,5427561","2003":"53,3845122","2004":"54,47895122","2005":"55,78021951","2006":"57,22797561","2007":"58,73907317","2008":"60,22856098","2009":"61,63163415","2010":"62,88814634","2011":"63,96058537","2012":"64,85992683","2013":"65,60307317","2014":"66,19414634","2015":"66,64565854","2016":"","Country Name":"Kenya","Country Code":"KEN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"56,12807317","1961":"56,56412195","1962":"57,00265854","1963":"57,44319512","1964":"57,8822439","1965":"58,31526829","1966":"58,73829268","1967":"59,14631707","1968":"59,53585366","1969":"59,90387805","1970":"60,24490244","1971":"60,55441463","1972":"60,83541463","1973":"61,09290244","1974":"61,33290244","1975":"61,56485366","1976":"61,7972439","1977":"62,04007317","1978":"62,30090244","1979":"62,5857561","1980":"62,90378049","1981":"63,26363415","1982":"63,65887805","1983":"64,0775122","1984":"64,50492683","1985":"64,91895122","1986":"65,29378049","1987":"65,61119512","1988":"65,85858537","1989":"67,90731707","1990":"68,29756098","1991":"68,55121951","1992":"68,10243902","1993":"67,19268293","1994":"66,03902439","1995":"65,7902439","1996":"66,54390244","1997":"66,89268293","1998":"67,05121951","1999":"68,65609756","2000":"68,55853659","2001":"68,70731707","2002":"68,15609756","2003":"68,25609756","2004":"68,15365854","2005":"67,95609756","2006":"67,69512195","2007":"67,89512195","2008":"68,45121951","2009":"69,10243902","2010":"69,3","2011":"69,60243902","2012":"70,00243902","2013":"70,20243902","2014":"70,40243902","2015":"70,65121951","2016":"","Country Name":"Kyrgyzstan","Country Code":"KGZ","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,23202439","1961":"41,35768293","1962":"41,51743902","1963":"41,70278049","1964":"41,88560976","1965":"42,0757561","1966":"42,28946341","1967":"42,47612195","1968":"42,53968293","1969":"42,36168293","1970":"41,57119512","1971":"39,73329268","1972":"36,7572439","1973":"32,81287805","1974":"28,2584878","1975":"23,88453659","1976":"20,6565122","1977":"19,2655122","1978":"20,06492683","1979":"23,02909756","1980":"27,73897561","1981":"33,44992683","1982":"39,17431707","1983":"44,1192439","1984":"47,9234878","1985":"50,43812195","1986":"51,79046341","1987":"52,47","1988":"52,89519512","1989":"53,20868293","1990":"53,51007317","1991":"53,83634146","1992":"54,15078049","1993":"54,4417561","1994":"54,75021951","1995":"55,12165854","1996":"55,58602439","1997":"56,14385366","1998":"56,79160976","1999":"57,52880488","2000":"58,35087805","2001":"59,24726829","2002":"60,1874878","2003":"61,13758537","2004":"62,07360976","2005":"62,96921951","2006":"63,80209756","2007":"64,56634146","2008":"65,2584878","2009":"65,87597561","2010":"66,41968293","2011":"66,89739024","2012":"67,32739024","2013":"67,72802439","2014":"68,1062439","2015":"68,47204878","2016":"","Country Name":"Cambodia","Country Code":"KHM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"49,21597561","1961":"49,74368293","1962":"50,27429268","1963":"50,79778049","1964":"51,30768293","1965":"51,8085122","1966":"52,30780488","1967":"52,81465854","1968":"53,33056098","1969":"53,84756098","1970":"54,35112195","1971":"54,82370732","1972":"55,25080488","1973":"55,62234146","1974":"55,93480488","1975":"56,18673171","1976":"56,37914634","1977":"56,52807317","1978":"56,653","1979":"56,76941463","1980":"56,89521951","1981":"57,04636585","1982":"57,23378049","1983":"57,46292683","1984":"57,74129268","1985":"58,07485366","1986":"58,46609756","1987":"58,90260976","1988":"59,3704878","1989":"59,85834146","1990":"60,35082927","1991":"60,83458537","1992":"61,29973171","1993":"61,73729268","1994":"62,13978049","1995":"62,50565854","1996":"62,83731707","1997":"63,14460976","1998":"63,43290244","1999":"63,70260976","2000":"63,95068293","2001":"64,17312195","2002":"64,36646341","2003":"64,53073171","2004":"64,66990244","2005":"64,78697561","2006":"64,88841463","2007":"64,98070732","2008":"65,07239024","2009":"65,169","2010":"65,27756098","2011":"65,40265854","2012":"65,54385366","2013":"65,70017073","2014":"65,87060976","2015":"66,05219512","2016":"","Country Name":"Kiribati","Country Code":"KIR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"63,95121951","1983":"","1984":"","1985":"","1986":"","1987":"65,95121951","1988":"","1989":"","1990":"","1991":"","1992":"67,95121951","1993":"","1994":"","1995":"","1996":"","1997":"70,03634146","1998":"","1999":"","2000":"","2001":"","2002":"71,33658537","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"St. Kitts and Nevis","Country Code":"KNA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"53,00180488","1961":"53,73673171","1962":"54,48509756","1963":"55,24736585","1964":"56,02358537","1965":"56,82321951","1966":"57,65819512","1967":"58,52653659","1968":"59,4182439","1969":"60,31636585","1970":"62,03585366","1971":"62,44365854","1972":"62,84146341","1973":"63,2295122","1974":"63,59756098","1975":"63,95585366","1976":"64,30414634","1977":"64,64756098","1978":"64,97609756","1979":"65,29463415","1980":"65,80926829","1981":"66,30926829","1982":"66,78414634","1983":"67,23926829","1984":"67,90341463","1985":"68,53292683","1986":"69,18365854","1987":"69,80926829","1988":"70,33926829","1989":"70,8595122","1990":"71,2997561","1991":"71,7302439","1992":"72,2004878","1993":"72,68195122","1994":"73,04317073","1995":"73,39439024","1996":"73,83121951","1997":"74,24780488","1998":"74,6802439","1999":"75,37341463","2000":"75,83536585","2001":"76,34195122","2002":"76,83902439","2003":"77,2502439","2004":"77,84658537","2005":"78,43268293","2006":"78,96926829","2007":"79,3495122","2008":"79,83268293","2009":"80,29731707","2010":"80,55121951","2011":"80,96707317","2012":"81,21341463","2013":"81,70512195","2014":"82,15585366","2015":"82,15585366","2016":"","Country Name":"South Korea","Country Code":"KOR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,51929268","1961":"61,2604878","1962":"61,96168293","1963":"62,62285366","1964":"63,24602439","1965":"63,83268293","1966":"64,38431707","1967":"64,90346341","1968":"65,39412195","1969":"65,85831707","1970":"66,29758537","1971":"66,71295122","1972":"67,10390244","1973":"67,474","1974":"67,82521951","1975":"68,16509756","1976":"68,49709756","1977":"68,82473171","1978":"69,14997561","1979":"69,47329268","1980":"69,79565854","1981":"70,11507317","1982":"70,4274878","1983":"70,72890244","1984":"71,01529268","1985":"71,28412195","1986":"71,53187805","1987":"71,75704878","1988":"71,96117073","1989":"72,14319512","1990":"72,30514634","1991":"72,44853659","1992":"72,57685366","1993":"72,69363415","1994":"72,80187805","1995":"72,90258537","1996":"72,9972439","1997":"73,08639024","1998":"73,169","1999":"73,24809756","2000":"73,32370732","2001":"73,39585366","2002":"73,46404878","2003":"73,5297561","2004":"73,59597561","2005":"73,66514634","2006":"73,74121951","2007":"73,82514634","2008":"73,91887805","2009":"74,02143902","2010":"74,13285366","2011":"74,25165854","2012":"74,37441463","2013":"74,49868293","2014":"74,6234878","2015":"74,74682927","2016":"","Country Name":"Kuwait","Country Code":"KWT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"55,68265394","1961":"56,17794631","1962":"56,65454559","1963":"57,1121979","1964":"57,55339632","1965":"57,98308062","1966":"58,40715811","1967":"58,83064158","1968":"59,25661417","1969":"59,68677589","1970":"60,11853343","1971":"60,54763645","1972":"60,96797537","1973":"61,37571218","1974":"61,76981022","1975":"62,15138802","1976":"62,5243772","1977":"62,8935075","1978":"63,26233255","1979":"63,63251243","1980":"64,00345435","1981":"64,37296975","1982":"64,73984635","1983":"65,09799212","1984":"65,45187959","1985":"65,80028888","1986":"66,14329858","1987":"66,48430445","1988":"66,82249825","1989":"67,16366566","1990":"67,5110631","1991":"67,86955626","1992":"68,24133968","1993":"68,62288574","1994":"69,01454104","1995":"69,41092788","1996":"69,80700683","1997":"70,19711976","1998":"70,57315467","1999":"70,93407954","2000":"71,27607582","2001":"71,59847956","2002":"71,90451456","2003":"72,1952236","2004":"72,47454842","2005":"72,74393402","2006":"73,00611736","2007":"73,26252817","2008":"73,51496587","2009":"73,76332564","2010":"74,00789206","2011":"74,24702414","2012":"74,47922841","2013":"74,70349166","2014":"74,92018456","2015":"75,13039619","2016":"","Country Name":"Latin America & Caribbean (excluding high income)","Country Code":"LAC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"43,20446341","1961":"43,50704878","1962":"43,80865854","1963":"44,10929268","1964":"44,40943902","1965":"44,70960976","1966":"45,0117561","1967":"45,31687805","1968":"45,62543902","1969":"45,9354878","1970":"46,245","1971":"46,54956098","1972":"46,84665854","1973":"47,13582927","1974":"47,41704878","1975":"47,6892439","1976":"47,95139024","1977":"48,20839024","1978":"48,4677561","1979":"48,73546341","1980":"49,02358537","1981":"49,34465854","1982":"49,70429268","1983":"50,104","1984":"50,5442439","1985":"51,0184878","1986":"51,51758537","1987":"52,02843902","1988":"52,54053659","1989":"53,04887805","1990":"53,55207317","1991":"54,05270732","1992":"54,55643902","1993":"55,06782927","1994":"55,58746341","1995":"56,11729268","1996":"56,65682927","1997":"57,20343902","1998":"57,75756098","1999":"58,31617073","2000":"58,8797561","2001":"59,44982927","2002":"60,02541463","2003":"60,60202439","2004":"61,17712195","2005":"61,74421951","2006":"62,29773171","2007":"62,83365854","2008":"63,3484878","2009":"63,83868293","2010":"64,30329268","2011":"64,74031707","2012":"65,15378049","2013":"65,54719512","2014":"65,92263415","2015":"66,28404878","2016":"","Country Name":"Laos","Country Code":"LAO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"63,28012195","1961":"63,58597561","1962":"63,88041463","1963":"64,16441463","1964":"64,44143902","1965":"64,715","1966":"64,98804878","1967":"65,26253659","1968":"65,53697561","1969":"65,81036585","1970":"66,07870732","1971":"66,33702439","1972":"66,57985366","1973":"66,80521951","1974":"67,01214634","1975":"67,19965854","1976":"67,36773171","1977":"67,52139024","1978":"67,66709756","1979":"67,81036585","1980":"67,95665854","1981":"68,11343902","1982":"68,28270732","1983":"68,46843902","1984":"68,67368293","1985":"68,89797561","1986":"69,13790244","1987":"69,3905122","1988":"69,65329268","1989":"69,92919512","1990":"70,22114634","1991":"70,53604878","1992":"70,87678049","1993":"71,24621951","1994":"71,64387805","1995":"72,06819512","1996":"72,51717073","1997":"72,98387805","1998":"73,46141463","1999":"73,94482927","2000":"74,43170732","2001":"74,92112195","2002":"75,41209756","2003":"75,89921951","2004":"76,375","2005":"76,82897561","2006":"77,25014634","2007":"77,6334878","2008":"77,97646341","2009":"78,27756098","2010":"78,53826829","2011":"78,76456098","2012":"78,96541463","2013":"79,15031707","2014":"79,32626829","2015":"79,4982439","2016":"","Country Name":"Lebanon","Country Code":"LBN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"34,78317073","1961":"35,04626829","1962":"35,35412195","1963":"35,71521951","1964":"36,13","1965":"36,59336585","1966":"37,09619512","1967":"37,62387805","1968":"38,16829268","1969":"38,72490244","1970":"39,30214634","1971":"39,91353659","1972":"40,56614634","1973":"41,26009756","1974":"41,98439024","1975":"42,72565854","1976":"43,46792683","1977":"44,19026829","1978":"44,86865854","1979":"45,48660976","1980":"46,02207317","1981":"46,45892683","1982":"46,80007317","1983":"47,05302439","1984":"47,22678049","1985":"47,31982927","1986":"47,33117073","1987":"47,28290244","1988":"47,2117561","1989":"47,15943902","1990":"47,20243902","1991":"47,42273171","1992":"47,8514878","1993":"48,48365854","1994":"49,28695122","1995":"50,16282927","1996":"50,9795122","1997":"51,63331707","1998":"52,0707561","1999":"52,30117073","2000":"52,40760976","2001":"52,52743902","2002":"52,7967561","2003":"53,30509756","2004":"54,06414634","2005":"55,03107317","2006":"56,11334146","2007":"57,18326829","2008":"58,14170732","2009":"58,95163415","2010":"59,6055122","2011":"60,12880488","2012":"60,58953659","2013":"61,04117073","2014":"61,5012439","2015":"61,98021951","2016":"","Country Name":"Liberia","Country Code":"LBR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"42,64119512","1961":"44,24668293","1962":"45,87119512","1963":"47,45621951","1964":"48,95770732","1965":"50,34953659","1966":"51,62953659","1967":"52,83114634","1968":"53,97736585","1969":"55,07229268","1970":"56,11858537","1971":"57,11797561","1972":"58,07319512","1973":"58,98541463","1974":"59,85765854","1975":"60,69141463","1976":"61,48860976","1977":"62,24802439","1978":"62,9685122","1979":"63,64946341","1980":"64,28687805","1981":"64,87421951","1982":"65,41056098","1983":"65,89841463","1984":"66,34278049","1985":"66,75414634","1986":"67,1445122","1987":"67,52439024","1988":"67,89873171","1989":"68,26956098","1990":"68,62990244","1991":"68,96873171","1992":"69,27507317","1993":"69,54090244","1994":"69,76568293","1995":"69,95090244","1996":"70,10102439","1997":"70,2275122","1998":"70,34180488","1999":"70,45185366","2000":"70,57253659","2001":"70,71678049","2002":"70,88553659","2003":"71,07485366","2004":"71,27680488","2005":"71,471","2006":"71,63107317","2007":"71,73865854","2008":"71,78695122","2009":"71,7805122","2010":"71,73697561","2011":"71,68334146","2012":"71,65007317","2013":"71,65909756","2014":"71,71939024","2015":"71,83039024","2016":"","Country Name":"Libya","Country Code":"LBY","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"57,3037561","1961":"58,06190244","1962":"58,76334146","1963":"59,39007317","1964":"59,93939024","1965":"60,425","1966":"60,87253659","1967":"61,31814634","1968":"61,79012195","1969":"62,30039024","1970":"62,8525122","1971":"63,44317073","1972":"64,05370732","1973":"64,66787805","1974":"65,2787561","1975":"65,88482927","1976":"66,48795122","1977":"67,088","1978":"67,67941463","1979":"68,25031707","1980":"68,78195122","1981":"69,25509756","1982":"69,6574878","1983":"69,98621951","1984":"70,2422439","1985":"70,4355122","1986":"70,58426829","1987":"70,70873171","1988":"70,82560976","1989":"70,94073171","1990":"71,04943902","1991":"71,13817073","1992":"71,1945122","1993":"71,2145122","1994":"71,20514634","1995":"71,18095122","1996":"71,1574878","1997":"71,15529268","1998":"71,19136585","1999":"71,27617073","2000":"71,42353659","2001":"71,64280488","2002":"71,92436585","2003":"72,2537561","2004":"72,61809756","2005":"72,99563415","2006":"73,36214634","2007":"73,69995122","2008":"73,99673171","2009":"74,24614634","2010":"74,45065854","2011":"74,6217561","2012":"74,77865854","2013":"74,93773171","2014":"75,10436585","2015":"75,2835122","2016":"","Country Name":"St. Lucia","Country Code":"LCA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"56,05969825","1961":"56,54176372","1962":"57,006433","1963":"57,45350859","1964":"57,88520687","1965":"58,30637398","1966":"58,72275811","1967":"59,13916781","1968":"59,558726","1969":"59,98347318","1970":"60,41120428","1971":"60,83797541","1972":"61,25763996","1973":"61,66642235","1974":"62,06273593","1975":"62,44736348","1976":"62,82386818","1977":"63,19641079","1978":"63,56841625","1979":"63,9409689","1980":"64,31337813","1981":"64,68334441","1982":"65,04972168","1983":"65,40687866","1984":"65,75871108","1985":"66,10407605","1986":"66,44317477","1987":"66,7792102","1988":"67,11207527","1989":"67,44698667","1990":"67,78756795","1991":"68,13867471","1992":"68,50237706","1993":"68,87600049","1994":"69,2596147","1995":"69,64825514","1996":"70,03722057","1997":"70,42069174","1998":"70,79088567","1999":"71,14654618","2000":"71,49048847","2001":"71,80863119","2002":"72,11244215","2003":"72,39844483","2004":"72,67156077","2005":"72,93461145","2006":"73,19071497","2007":"73,44009847","2008":"73,68192639","2009":"73,92526865","2010":"74,16438652","2011":"74,39995913","2012":"74,62757504","2013":"74,848883","2014":"75,06371707","2015":"75,27120874","2016":"","Country Name":"Latin America & Caribbean","Country Code":"LCN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"40,22700492","1961":"40,70099648","1962":"41,18436833","1963":"41,67568179","1964":"42,16859889","1965":"42,64337242","1966":"43,07501817","1967":"43,44724094","1968":"43,75394015","1969":"44,00019652","1970":"44,20728865","1971":"44,40683357","1972":"44,6315219","1973":"44,90589839","1974":"45,24315278","1975":"45,65078152","1976":"46,12495137","1977":"46,64047361","1978":"47,16673026","1979":"47,67941113","1980":"48,16271926","1981":"48,61508955","1982":"49,04697079","1983":"49,46514286","1984":"49,86956821","1985":"50,25163677","1986":"50,60063859","1987":"50,91329391","1988":"51,19230592","1989":"51,44751172","1990":"51,69973692","1991":"51,97191451","1992":"52,2794369","1993":"52,62515647","1994":"53,00198475","1995":"53,40387755","1996":"53,82746305","1997":"54,26999759","1998":"54,72969449","1999":"55,20694594","2000":"55,70534573","2001":"56,23174458","2002":"56,7910298","2003":"57,38256549","2004":"58,00044906","2005":"58,63727333","2006":"59,28447956","2007":"59,93060337","2008":"60,56390493","2009":"61,17491514","2010":"61,75359909","2011":"62,29236486","2012":"62,79193465","2013":"63,25377625","2014":"63,67757136","2015":"64,0646819","2016":"","Country Name":"Least developed countries: UN classification","Country Code":"LDC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"39,06348207","1961":"39,4731907","1962":"39,87932816","1963":"40,29010289","1964":"40,71218808","1965":"41,14894841","1966":"41,59932201","1967":"42,05688797","1968":"42,51528748","1969":"42,97076968","1970":"43,4209343","1971":"43,86574076","1972":"44,30511136","1973":"44,73690763","1974":"45,15755179","1975":"45,56286716","1976":"45,94830345","1977":"46,31355884","1978":"46,66170081","1979":"46,99697073","1980":"47,3256888","1981":"47,65430841","1982":"47,98466251","1983":"48,31462262","1984":"48,63907925","1985":"48,94428564","1986":"49,2132986","1987":"49,43366848","1988":"49,60161154","1989":"49,72629533","1990":"49,82757664","1991":"49,92996647","1992":"50,05436393","1993":"50,20691803","1994":"50,3814688","1995":"50,5796627","1996":"50,81358057","1997":"51,09605287","1998":"51,436865","1999":"51,84206289","2000":"52,31635846","2001":"52,86199624","2002":"53,47259386","2003":"54,13790408","2004":"54,84602026","2005":"55,58465239","2006":"56,34193117","2007":"57,10391636","2008":"57,85569003","2009":"58,58318768","2010":"59,27368388","2011":"59,91839028","2012":"60,51870252","2013":"61,07649225","2014":"61,59026379","2015":"62,06047438","2016":"","Country Name":"Low income","Country Code":"LIC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"78,42195122","1995":"77,3902439","1996":"76,83658537","1997":"76,04634146","1998":"77,74634146","1999":"79,1097561","2000":"76,82682927","2001":"79,27560976","2002":"79,63658537","2003":"79,96097561","2004":"81,77073171","2005":"80,66829268","2006":"80,94878049","2007":"81,29512195","2008":"82,68292683","2009":"81,5","2010":"81,84146341","2011":"81,79268293","2012":"82,38292683","2013":"82,26097561","2014":"82,07317073","2015":"82,07317073","2016":"","Country Name":"Liechtenstein","Country Code":"LIE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"59,73226829","1961":"60,11192683","1962":"60,49670732","1963":"60,90563415","1964":"61,34863415","1965":"61,82602439","1966":"62,33012195","1967":"62,83968293","1968":"63,33653659","1969":"63,81509756","1970":"64,26731707","1971":"64,69031707","1972":"65,08721951","1973":"65,46456098","1974":"65,82778049","1975":"66,19121951","1976":"66,57421951","1977":"66,98263415","1978":"67,41434146","1979":"67,85780488","1980":"68,28141463","1981":"68,64756098","1982":"68,92941463","1983":"69,11473171","1984":"69,20980488","1985":"69,24163415","1986":"69,2547561","1987":"69,29046341","1988":"69,37441463","1989":"69,50809756","1990":"69,6552439","1991":"69,75795122","1992":"69,77514634","1993":"69,69592683","1994":"69,54565854","1995":"69,39726829","1996":"69,35087805","1997":"69,48131707","1998":"69,82585366","1999":"70,37609756","2000":"71,07968293","2001":"71,84919512","2002":"72,57958537","2003":"73,18931707","2004":"73,64482927","2005":"73,93560976","2006":"74,08507317","2007":"74,15512195","2008":"74,20117073","2009":"74,24765854","2010":"74,31302439","2011":"74,4072439","2012":"74,52431707","2013":"74,65929268","2014":"74,81465854","2015":"74,98895122","2016":"","Country Name":"Sri Lanka","Country Code":"LKA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,55401105","1961":"46,14802441","1962":"46,73813322","1963":"47,32245678","1964":"47,90341105","1965":"48,47000717","1966":"49,01262546","1967":"49,52474255","1968":"50,00559566","1969":"50,45961302","1970":"50,89923659","1971":"51,34071182","1972":"51,79943084","1973":"52,28422076","1974":"52,79542635","1975":"53,32890771","1976":"53,8766653","1977":"54,42141923","1978":"54,94829464","1979":"55,44653284","1980":"55,90895975","1981":"56,34123181","1982":"56,73457123","1983":"57,10633159","1984":"57,46188642","1985":"57,80549839","1986":"58,14283495","1987":"58,49361255","1988":"58,82742868","1989":"59,17172353","1990":"59,51327503","1991":"59,82944232","1992":"60,18390187","1993":"60,51412528","1994":"60,83836607","1995":"61,15763163","1996":"61,48362547","1997":"61,81748623","1998":"62,15027062","1999":"62,46910141","2000":"62,77386848","2001":"63,09838756","2002":"63,41932207","2003":"63,75037636","2004":"64,09121385","2005":"64,43795562","2006":"64,79907534","2007":"65,16581905","2008":"65,52903001","2009":"65,90151693","2010":"66,26247496","2011":"66,59661259","2012":"66,90478931","2013":"67,19332042","2014":"67,45876614","2015":"67,7051777","2016":"","Country Name":"Lower middle income","Country Code":"LMC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"47,31899453","1961":"47,83632895","1962":"48,43310979","1963":"49,13547151","1964":"49,95165771","1965":"50,84892865","1966":"51,78132922","1967":"52,70097764","1968":"53,56946744","1969":"54,35728603","1970":"55,08081688","1971":"55,72801346","1972":"56,31253617","1973":"56,88254889","1974":"57,43430724","1975":"57,93830539","1976":"58,43741925","1977":"58,90846489","1978":"59,35207705","1979":"59,74955178","1980":"60,13045889","1981":"60,49265619","1982":"60,84344395","1983":"61,15466478","1984":"61,4401794","1985":"61,75634205","1986":"62,0972599","1987":"62,37557054","1988":"62,63512065","1989":"62,87636898","1990":"63,10605218","1991":"63,32667319","1992":"63,49355771","1993":"63,65308903","1994":"63,86816184","1995":"64,11405956","1996":"64,40477325","1997":"64,71889154","1998":"65,01158687","1999":"65,28152437","2000":"65,57977546","2001":"65,89344233","2002":"66,2010013","2003":"66,5204032","2004":"66,85716377","2005":"67,1800052","2006":"67,53803377","2007":"67,88503967","2008":"68,21289415","2009":"68,55521334","2010":"68,86513362","2011":"69,17862416","2012":"69,45985393","2013":"69,72966133","2014":"69,97035579","2015":"70,19326103","2016":"","Country Name":"Low & middle income","Country Code":"LMY","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,50095122","1961":"46,98497561","1962":"47,3924878","1963":"47,7164878","1964":"47,9614878","1965":"48,1404878","1966":"48,273","1967":"48,39007317","1968":"48,52117073","1969":"48,68480488","1970":"48,89846341","1971":"49,17012195","1972":"49,49426829","1973":"49,86539024","1974":"50,28395122","1975":"50,75297561","1976":"51,27341463","1977":"51,83831707","1978":"52,43365854","1979":"53,04746341","1980":"53,65973171","1981":"54,2495122","1982":"54,80629268","1983":"55,32256098","1984":"55,79685366","1985":"56,26556098","1986":"56,77963415","1987":"57,35604878","1988":"57,97382927","1989":"58,58204878","1990":"59,07634146","1991":"59,33082927","1992":"59,25617073","1993":"58,80295122","1994":"57,9692439","1995":"56,75968293","1996":"55,20987805","1997":"53,4467561","1998":"51,61558537","1999":"49,84112195","2000":"48,2785122","2001":"47,07041463","2002":"46,2695122","2003":"45,89558537","2004":"45,94846341","2005":"46,38702439","2006":"47,12468293","2007":"48,02319512","2008":"48,95743902","2009":"49,85380488","2010":"50,66121951","2011":"51,36119512","2012":"51,98656098","2013":"52,56502439","2014":"53,09321951","2015":"53,57009756","2016":"","Country Name":"Lesotho","Country Code":"LSO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"50,29184498","1961":"50,78783313","1962":"51,42222342","1963":"52,28598616","1964":"53,38431284","1965":"54,67967909","1966":"56,048453","1967":"57,3988922","1968":"58,67990673","1969":"59,78054847","1970":"60,76046824","1971":"61,58037572","1972":"62,30301226","1973":"62,96797747","1974":"63,61202764","1975":"64,13977776","1976":"64,68566146","1977":"65,19157035","1978":"65,66225657","1979":"66,07159032","1980":"66,45485252","1981":"66,8484325","1982":"67,21434544","1983":"67,49364306","1984":"67,72043366","1985":"68,0116638","1986":"68,37093885","1987":"68,57645257","1988":"68,76832357","1989":"68,90882454","1990":"69,04728437","1991":"69,17324579","1992":"69,19984409","1993":"69,2096985","1994":"69,34005201","1995":"69,5617447","1996":"69,89243938","1997":"70,24841855","1998":"70,59142591","1999":"70,87602162","2000":"71,22726012","2001":"71,60625645","2002":"71,96239187","2003":"72,31412049","2004":"72,68178011","2005":"72,99092752","2006":"73,35165221","2007":"73,6659887","2008":"73,93370223","2009":"74,22007263","2010":"74,44445196","2011":"74,71367232","2012":"74,92439958","2013":"75,14546135","2014":"75,33914932","2015":"75,52288235","2016":"","Country Name":"Late-demographic dividend","Country Code":"LTE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,84731707","1961":"70,10268293","1962":"69,09536585","1963":"70,20439024","1964":"71,50902439","1965":"71,32512195","1966":"71,5202439","1967":"71,60390244","1968":"71,31365854","1969":"70,92853659","1970":"70,80439024","1971":"71,73536585","1972":"71,02463415","1973":"71,33219512","1974":"71,24414634","1975":"70,86731707","1976":"70,95804878","1977":"70,8095122","1978":"70,60463415","1979":"70,48219512","1980":"70,48219512","1981":"70,46073171","1982":"70,83682927","1983":"70,77780488","1984":"70,32","1985":"70,50121951","1986":"72,08073171","1987":"71,93463415","1988":"71,76219512","1989":"71,42536585","1990":"71,16073171","1991":"70,36414634","1992":"70,23439024","1993":"68,9104878","1994":"68,5302439","1995":"69,00634146","1996":"70,10804878","1997":"70,90902439","1998":"71,2195122","1999":"71,57073171","2000":"72,0195122","2001":"71,65853659","2002":"71,76097561","2003":"72,06097561","2004":"71,96097561","2005":"71,25365854","2006":"71,05609756","2007":"70,9","2008":"71,81219512","2009":"72,91463415","2010":"73,26829268","2011":"73,56341463","2012":"73,86341463","2013":"73,91463415","2014":"74,51707317","2015":"75,1195122","2016":"","Country Name":"Lithuania","Country Code":"LTU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,44639024","1961":"68,73773171","1962":"68,99812195","1963":"69,22307317","1964":"69,41104878","1965":"69,56102439","1966":"69,67446341","1967":"69,76134146","1968":"69,83514634","1969":"69,90485366","1970":"69,98346341","1971":"70,08143902","1972":"70,20531707","1973":"70,35817073","1974":"70,54256098","1975":"70,75760976","1976":"70,9985122","1977":"71,25629268","1978":"71,52246341","1979":"71,79446341","1980":"72,07260976","1981":"72,35768293","1982":"72,65346341","1983":"72,95887805","1984":"73,27192683","1985":"73,5857561","1986":"73,89460976","1987":"74,1937561","1988":"74,48034146","1989":"74,75241463","1990":"75,01041463","1991":"75,46341463","1992":"75,77073171","1993":"75,71219512","1994":"76,37073171","1995":"76,51219512","1996":"76,5195122","1997":"76,8804878","1998":"77,01707317","1999":"77,77073171","2000":"77,87317073","2001":"77,82439024","2002":"77,96585366","2003":"77,72682927","2004":"79,12195122","2005":"79,43170732","2006":"79,28780488","2007":"79,38292683","2008":"80,53902439","2009":"80,63658537","2010":"80,63170732","2011":"80,98780488","2012":"81,39268293","2013":"81,8","2014":"82,22926829","2015":"82,22926829","2016":"","Country Name":"Luxembourg","Country Code":"LUX","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,78682927","1961":"70,03243902","1962":"69,4304878","1963":"69,82902439","1964":"71,02804878","1965":"70,72658537","1966":"70,70731707","1967":"70,39390244","1968":"70,04292683","1969":"69,79682927","1970":"69,83536585","1971":"70,16463415","1972":"69,87878049","1973":"69,81341463","1974":"69,74097561","1975":"68,92536585","1976":"69,04780488","1977":"69,10463415","1978":"68,98780488","1979":"68,49560976","1980":"68,80853659","1981":"68,78634146","1982":"69,32829268","1983":"69,11902439","1984":"69,16292683","1985":"69,29146341","1986":"70,62243902","1987":"70,69292683","1988":"70,61536585","1989":"70,15536585","1990":"69,27317073","1991":"69,03243902","1992":"68,39609756","1993":"66,72268293","1994":"65,66439024","1995":"66,39121951","1996":"68,77658537","1997":"69,34926829","1998":"69,01219512","1999":"69,74292683","2000":"70,31463415","2001":"70,76097561","2002":"70,96097561","2003":"71,26585366","2004":"72,02682927","2005":"71,35609756","2006":"70,86585366","2007":"71,0195122","2008":"72,4195122","2009":"73,0804878","2010":"73,48292683","2011":"73,57560976","2012":"73,77804878","2013":"73,98292683","2014":"74,12439024","2015":"74,12439024","2016":"","Country Name":"Latvia","Country Code":"LVA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"64,65892683","1961":"65,13358537","1962":"65,5942439","1963":"66,04141463","1964":"66,47963415","1965":"66,91539024","1966":"67,35921951","1967":"67,81712195","1968":"68,29258537","1969":"68,78712195","1970":"69,29721951","1971":"69,81987805","1972":"70,34556098","1973":"70,86378049","1974":"71,3685122","1975":"71,8527561","1976":"72,30997561","1977":"72,74021951","1978":"73,14446341","1979":"73,52470732","1980":"73,8844878","1981":"74,23034146","1982":"74,56978049","1983":"74,9067561","1984":"75,2442439","1985":"75,58112195","1986":"75,9142439","1987":"76,23902439","1988":"76,55397561","1989":"76,85963415","1990":"77,16217073","1991":"77,4697561","1992":"77,78558537","1993":"78,11226829","1994":"78,44829268","1995":"78,78709756","1996":"79,121","1997":"79,44082927","1998":"79,74192683","1999":"80,02026829","2000":"80,27634146","2001":"80,51268293","2002":"80,73546341","2003":"80,9517561","2004":"81,16614634","2005":"81,38265854","2006":"81,60780488","2007":"81,84158537","2008":"82,08246341","2009":"82,32846341","2010":"82,57356098","2011":"82,81126829","2012":"83,03458537","2013":"83,24046341","2014":"83,42692683","2015":"83,59490244","2016":"","Country Name":"Macao SAR, China","Country Code":"MAC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"73,2195122","1983":"72,76829268","1984":"72,9195122","1985":"72,66829268","1986":"73,5195122","1987":"73,67073171","1988":"74,27073171","1989":"74,32195122","1990":"74,52195122","1991":"75,92439024","1992":"75,42439024","1993":"75,57317073","1994":"75,82195122","1995":"75,97073171","1996":"76,17073171","1997":"76,37073171","1998":"76,57073171","1999":"76,77073171","2000":"76,97073171","2001":"77,17073171","2002":"77,37073171","2003":"77,57073171","2004":"77,72195122","2005":"77,87073171","2006":"78,07073171","2007":"78,22195122","2008":"78,37073171","2009":"78,57073171","2010":"78,72195122","2011":"78,87073171","2012":"79,02195122","2013":"79,17073171","2014":"79,32195122","2015":"79,47073171","2016":"","Country Name":"St. Martin (French part)","Country Code":"MAF","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,44663415","1961":"48,86412195","1962":"49,28758537","1963":"49,7147561","1964":"50,142","1965":"50,56487805","1966":"50,97804878","1967":"51,38139024","1968":"51,77521951","1969":"52,16014634","1970":"52,53729268","1971":"52,90368293","1972":"53,26673171","1973":"53,63631707","1974":"54,02436585","1975":"54,44870732","1976":"54,93068293","1977":"55,47817073","1978":"56,09419512","1979":"56,77534146","1980":"57,51280488","1981":"58,29185366","1982":"59,09173171","1983":"59,88960976","1984":"60,6694878","1985":"61,42078049","1986":"62,1387561","1987":"62,82668293","1988":"63,48336585","1989":"64,10478049","1990":"64,67897561","1991":"65,19660976","1992":"65,65831707","1993":"66,06929268","1994":"66,44056098","1995":"66,78470732","1996":"67,11817073","1997":"67,45792683","1998":"67,81980488","1999":"68,21426829","2000":"68,65214634","2001":"69,14029268","2002":"69,67014634","2003":"70,22973171","2004":"70,80856098","2005":"71,39285366","2006":"71,96785366","2007":"72,5202439","2008":"73,03812195","2009":"73,51346341","2010":"73,94107317","2011":"74,3202439","2012":"74,66065854","2013":"74,97014634","2014":"75,25514634","2015":"75,52014634","2016":"","Country Name":"Morocco","Country Code":"MAR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Monaco","Country Code":"MCO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"61,81278049","1961":"62,17668293","1962":"62,54419512","1963":"62,9142439","1964":"63,28126829","1965":"63,63417073","1966":"63,95841463","1967":"64,24397561","1968":"64,48231707","1969":"64,67046341","1970":"64,80739024","1971":"64,89712195","1972":"64,95070732","1973":"64,97919512","1974":"64,98914634","1975":"64,98112195","1976":"64,94770732","1977":"64,89239024","1978":"64,82621951","1979":"64,76763415","1980":"64,75565854","1981":"64,8332439","1982":"65,02082927","1983":"65,31731707","1984":"65,70614634","1985":"66,14770732","1986":"66,58790244","1987":"66,97121951","1988":"67,25568293","1989":"67,42329268","1990":"67,46565854","1991":"67,39231707","1992":"67,24541463","1993":"67,06704878","1994":"66,88334146","1995":"66,72782927","1996":"66,62909756","1997":"66,59509756","1998":"66,63031707","1999":"66,73478049","2000":"66,89102439","2001":"67,07060976","2002":"67,2474878","2003":"67,40656098","2004":"67,54973171","2005":"67,70380488","2006":"67,90602439","2007":"68,18726829","2008":"68,5585122","2009":"69,0102439","2010":"69,51065854","2011":"70,01592683","2012":"70,47831707","2013":"70,86456098","2014":"71,16168293","2015":"71,37121951","2016":"","Country Name":"Moldova","Country Code":"MDA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"39,97468293","1961":"40,4572439","1962":"40,93780488","1963":"41,41490244","1964":"41,89053659","1965":"42,36568293","1966":"42,84282927","1967":"43,32392683","1968":"43,80897561","1969":"44,2954878","1970":"44,78241463","1971":"45,26734146","1972":"45,74673171","1973":"46,21614634","1974":"46,67153659","1975":"47,11143902","1976":"47,53780488","1977":"47,94960976","1978":"48,34136585","1979":"48,70907317","1980":"49,0307561","1981":"49,28492683","1982":"49,46563415","1983":"49,58136585","1984":"49,65212195","1985":"49,71031707","1986":"49,79487805","1987":"49,94326829","1988":"50,18497561","1989":"50,53604878","1990":"51,00809756","1991":"51,5982439","1992":"52,28012195","1993":"53,02280488","1994":"53,80729268","1995":"54,61404878","1996":"55,427","1997":"56,2335122","1998":"57,02043902","1999":"57,77173171","2000":"58,47280488","2001":"59,11360976","2002":"59,69917073","2003":"60,2355122","2004":"60,72870732","2005":"61,18729268","2006":"61,62387805","2007":"62,05153659","2008":"62,48031707","2009":"62,9152439","2010":"63,35780488","2011":"63,80546341","2012":"64,24912195","2013":"64,6817561","2014":"65,10131707","2015":"65,50782927","2016":"","Country Name":"Madagascar","Country Code":"MDG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"37,3137561","1961":"37,911","1962":"38,53973171","1963":"39,19590244","1964":"39,87202439","1965":"40,56507317","1966":"41,27007317","1967":"41,99007317","1968":"42,72509756","1969":"43,47470732","1970":"44,24097561","1971":"45,02543902","1972":"45,83112195","1973":"46,6595122","1974":"47,51","1975":"48,38702439","1976":"49,2944878","1977":"50,22973171","1978":"51,18517073","1979":"52,15226829","1980":"53,11302439","1981":"54,0485122","1982":"54,94831707","1983":"55,80595122","1984":"56,62282927","1985":"57,40821951","1986":"58,17687805","1987":"58,94914634","1988":"59,73753659","1989":"60,54819512","1990":"61,37843902","1991":"62,21821951","1992":"63,05541463","1993":"63,88370732","1994":"64,70465854","1995":"65,53246341","1996":"66,38563415","1997":"67,27426829","1998":"68,19965854","1999":"69,15292683","2000":"70,11946341","2001":"71,08185366","2002":"72,01365854","2003":"72,88821951","2004":"73,68563415","2005":"74,3787561","2006":"74,94673171","2007":"75,39302439","2008":"75,73070732","2009":"75,97653659","2010":"76,15690244","2011":"76,30631707","2012":"76,45743902","2013":"76,63595122","2014":"76,85587805","2015":"77,12026829","2016":"","Country Name":"Maldives","Country Code":"MDV","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,68765554","1961":"47,77602299","1962":"48,36430184","1963":"48,45492162","1964":"49,04840488","1965":"49,64254716","1966":"50,69666925","1967":"51,25237178","1968":"51,79596191","1969":"52,34590588","1970":"52,91756512","1971":"53,52577182","1972":"54,14717787","1973":"54,83928789","1974":"55,54007485","1975":"56,24378293","1976":"56,91472031","1977":"57,49698447","1978":"58,00713312","1979":"58,45288849","1980":"58,86796732","1981":"59,30124156","1982":"59,78902236","1983":"60,38170826","1984":"61,07226689","1985":"61,85194779","1986":"62,67429907","1987":"63,51442654","1988":"64,29821902","1989":"65,07328225","1990":"65,76490297","1991":"66,35960107","1992":"66,83561069","1993":"67,32544119","1994":"67,76336057","1995":"68,18652724","1996":"68,55985246","1997":"68,89219178","1998":"69,20656354","1999":"69,51205713","2000":"69,80253061","2001":"70,08638224","2002":"70,35184832","2003":"70,61312006","2004":"70,87790537","2005":"71,12919398","2006":"71,3849684","2007":"71,62518569","2008":"71,86372716","2009":"72,09286546","2010":"72,306228","2011":"72,50923435","2012":"72,71107939","2013":"72,92047395","2014":"73,12388055","2015":"73,32241546","2016":"","Country Name":"Middle East & North Africa","Country Code":"MEA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"57,06563415","1961":"57,65614634","1962":"58,1802439","1963":"58,64290244","1964":"59,05558537","1965":"59,43370732","1966":"59,79321951","1967":"60,15153659","1968":"60,52309756","1969":"60,91936585","1970":"61,3502439","1971":"61,81917073","1972":"62,31765854","1973":"62,83782927","1974":"63,37426829","1975":"63,92014634","1976":"64,46860976","1977":"65,01282927","1978":"65,54592683","1979":"66,06302439","1980":"66,56021951","1981":"67,03704878","1982":"67,49592683","1983":"67,94078049","1984":"68,37202439","1985":"68,79260976","1986":"69,20343902","1987":"69,60741463","1988":"70,0064878","1989":"70,40158537","1990":"70,79573171","1991":"71,19097561","1992":"71,58582927","1993":"71,97782927","1994":"72,36385366","1995":"72,73978049","1996":"73,09890244","1997":"73,43714634","1998":"73,75141463","1999":"74,0392439","2000":"74,29973171","2001":"74,5334878","2002":"74,74470732","2003":"74,9375122","2004":"75,1154878","2005":"75,28209756","2006":"75,43978049","2007":"75,59043902","2008":"75,7375122","2009":"75,88346341","2010":"76,03385366","2011":"76,19019512","2012":"76,35358537","2013":"76,52307317","2014":"76,69917073","2015":"76,88136585","2016":"","Country Name":"Mexico","Country Code":"MEX","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"72,14146341","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"67,50487805","2000":"65,23902439","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Marshall Islands","Country Code":"MHL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"47,92207841","1961":"48,45309581","1962":"49,06621836","1963":"49,78940205","1964":"50,6345359","1965":"51,56609351","1966":"52,53424976","1967":"53,4891599","1968":"54,38940205","1969":"55,20312656","1970":"55,94816679","1971":"56,61165908","1972":"57,20901983","1973":"57,79180174","1974":"58,35637634","1975":"58,87154082","1976":"59,38353015","1977":"59,86742023","1978":"60,3230759","1979":"60,72984451","1980":"61,11921996","1981":"61,48768959","1982":"61,84347969","1983":"62,15693797","1984":"62,4439008","1985":"62,76601739","1986":"63,11813837","1987":"63,40698322","1988":"63,68076715","1989":"63,93956475","1990":"64,18886695","1991":"64,42852284","1992":"64,61393176","1993":"64,78793192","1994":"65,02075224","1995":"65,28510665","1996":"65,59512916","1997":"65,92424935","1998":"66,22951727","1999":"66,50286324","2000":"66,79965891","2001":"67,10952004","2002":"67,40689043","2003":"67,71180415","2004":"68,03095985","2005":"68,33088635","2006":"68,66662559","2007":"68,9887853","2008":"69,28978248","2009":"69,60824126","2010":"69,89393032","2011":"70,18768581","2012":"70,44968286","2013":"70,70287366","2014":"70,92783423","2015":"71,13718238","2016":"","Country Name":"Middle income","Country Code":"MIC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,62280488","1961":"61,24939024","1962":"61,86046341","1963":"62,4595122","1964":"63,04946341","1965":"63,63173171","1966":"64,20473171","1967":"64,76397561","1968":"65,30246341","1969":"65,81470732","1970":"66,29278049","1971":"66,7312439","1972":"67,12568293","1973":"67,47370732","1974":"67,77541463","1975":"68,02485366","1976":"68,21909756","1977":"68,36363415","1978":"68,47146341","1979":"68,55856098","1980":"68,65043902","1981":"68,77360976","1982":"68,944","1983":"69,16904878","1984":"69,44663415","1985":"69,76365854","1986":"70,09495122","1987":"70,41295122","1988":"70,69763415","1989":"70,942","1990":"71,14763415","1991":"71,32565854","1992":"71,49473171","1993":"71,67092683","1994":"71,86031707","1995":"72,06729268","1996":"72,29521951","1997":"72,5354878","1998":"72,78158537","1999":"73,02560976","2000":"73,25631707","2001":"73,46053659","2002":"73,63295122","2003":"73,77168293","2004":"73,88114634","2005":"73,97117073","2006":"74,05846341","2007":"74,15817073","2008":"74,281","2009":"74,42982927","2010":"74,60409756","2011":"74,79587805","2012":"74,99085366","2013":"75,17970732","2014":"75,358","2015":"75,52431707","2016":"","Country Name":"Macedonia","Country Code":"MKD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"28,21160976","1961":"28,35873171","1962":"28,54846341","1963":"28,79639024","1964":"29,11104878","1965":"29,50192683","1966":"29,97097561","1967":"30,50563415","1968":"31,09378049","1969":"31,72641463","1970":"32,393","1971":"33,0815122","1972":"33,785","1973":"34,49446341","1974":"35,20541463","1975":"35,91985366","1976":"36,64229268","1977":"37,38073171","1978":"38,13419512","1979":"38,89821951","1980":"39,66334146","1981":"40,41914634","1982":"41,15460976","1983":"41,8587561","1984":"42,52502439","1985":"43,15129268","1986":"43,74046341","1987":"44,29843902","1988":"44,82314634","1989":"45,30860976","1990":"45,73185366","1991":"46,0614878","1992":"46,29012195","1993":"46,42936585","1994":"46,5037561","1995":"46,55634146","1996":"46,64060976","1997":"46,80497561","1998":"47,08492683","1999":"47,49739024","2000":"48,05234146","2001":"48,7417561","2002":"49,52460976","2003":"50,35690244","2004":"51,20809756","2005":"52,04070732","2006":"52,82126829","2007":"53,53429268","2008":"54,17431707","2009":"54,73629268","2010":"55,2297561","2011":"55,67463415","2012":"56,10243902","2013":"56,53612195","2014":"56,98670732","2015":"57,45770732","2016":"","Country Name":"Mali","Country Code":"MLI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,59529268","1961":"68,8872439","1962":"69,1737561","1963":"69,45526829","1964":"69,73319512","1965":"70,00753659","1966":"70,27929268","1967":"70,547","1968":"70,81168293","1969":"71,07285366","1970":"71,33","1971":"71,58463415","1972":"71,83626829","1973":"72,08487805","1974":"72,3304878","1975":"72,57358537","1976":"72,81468293","1977":"73,0527561","1978":"73,28882927","1979":"73,52239024","1980":"73,75343902","1981":"73,9814878","1982":"74,20753659","1983":"74,43056098","1984":"74,65109756","1985":"74,86912195","1986":"75,08563415","1987":"75,30014634","1988":"75,51317073","1989":"75,72517073","1990":"75,93568293","1991":"76,14468293","1992":"76,35165854","1993":"76,55614634","1994":"76,75812195","1995":"77,14146341","1996":"77,14146341","1997":"77,5902439","1998":"77,38780488","1999":"77,3","2000":"78,2","2001":"78,84390244","2002":"78,73902439","2003":"78,54634146","2004":"79,25365854","2005":"79,3","2006":"79,43902439","2007":"79,79268293","2008":"79,63658537","2009":"80,24146341","2010":"81,39756098","2011":"80,74634146","2012":"80,74634146","2013":"81,74634146","2014":"81,94634146","2015":"81,94634146","2016":"","Country Name":"Malta","Country Code":"MLT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"42,73639024","1961":"43,40253659","1962":"44,15136585","1963":"45,00390244","1964":"45,95509756","1965":"46,96639024","1966":"47,97668293","1967":"48,91636585","1968":"49,73585366","1969":"50,41863415","1970":"50,96768293","1971":"51,40956098","1972":"51,79385366","1973":"52,16263415","1974":"52,53541463","1975":"52,92421951","1976":"53,32907317","1977":"53,73843902","1978":"54,14329268","1979":"54,54465854","1980":"54,9415122","1981":"55,33439024","1982":"55,72326829","1983":"56,10714634","1984":"56,48753659","1985":"56,86392683","1986":"57,23680488","1987":"57,60617073","1988":"57,97302439","1989":"58,33585366","1990":"58,69417073","1991":"59,0484878","1992":"59,39631707","1993":"59,73917073","1994":"60,07704878","1995":"60,41143902","1996":"60,74590244","1997":"61,07990244","1998":"61,41443902","1999":"61,74897561","2000":"62,07702439","2001":"62,39402439","2002":"62,696","2003":"62,98287805","2004":"63,25763415","2005":"63,52919512","2006":"63,81097561","2007":"64,1104878","2008":"64,4302439","2009":"64,76478049","2010":"65,10417073","2011":"65,4305122","2012":"65,72895122","2013":"65,9884878","2014":"66,20721951","2015":"66,38563415","2016":"","Country Name":"Myanmar","Country Code":"MMR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,62043575","1961":"47,20919489","1962":"47,79463506","1963":"48,38099351","1964":"48,96981333","1965":"49,55755162","1966":"50,13617789","1967":"50,70084078","1968":"51,25202265","1969":"51,79512306","1970":"52,3465795","1971":"52,92796187","1972":"53,54979569","1973":"54,21113458","1974":"54,90062231","1975":"55,58599692","1976":"56,224186","1977":"56,78766023","1978":"57,26782037","1979":"57,67636736","1980":"58,05273196","1981":"58,45341106","1982":"58,92988706","1983":"59,51533553","1984":"60,21562941","1985":"61,01697513","1986":"61,88516534","1987":"62,76612531","1988":"63,61198759","1989":"64,3971732","1990":"65,1281518","1991":"65,74479081","1992":"66,29155155","1993":"66,78492627","1994":"67,23095204","1995":"67,63649031","1996":"68,00732218","1997":"68,34894883","1998":"68,66724828","1999":"68,96835067","2000":"69,25757342","2001":"69,5392943","2002":"69,81394528","2003":"70,08265796","2004":"70,34787077","2005":"70,60909369","2006":"70,86453907","2007":"71,11015676","2008":"71,34210949","2009":"71,5611842","2010":"71,76968311","2011":"71,97338721","2012":"72,17691421","2013":"72,38275192","2014":"72,58932144","2015":"72,7953708","2016":"","Country Name":"Middle East & North Africa (excluding high income)","Country Code":"MNA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"63,70560976","1961":"64,39178049","1962":"65,06190244","1963":"65,70290244","1964":"66,30826829","1965":"66,88439024","1966":"67,44717073","1967":"68,01219512","1968":"68,58809756","1969":"69,16958537","1970":"69,73982927","1971":"70,27602439","1972":"70,75841463","1973":"71,17526829","1974":"71,52385366","1975":"71,81107317","1976":"72,05026829","1977":"72,26397561","1978":"72,46804878","1979":"72,6697561","1980":"72,87219512","1981":"73,07034146","1982":"73,25570732","1983":"73,42185366","1984":"73,57109756","1985":"73,71134146","1986":"73,85514634","1987":"74,00687805","1988":"74,16390244","1989":"74,31797561","1990":"74,44336585","1991":"74,51041463","1992":"74,50065854","1993":"74,40860976","1994":"74,24221951","1995":"74,02221951","1996":"73,77878049","1997":"73,54904878","1998":"73,36385366","1999":"73,23863415","2000":"73,18107317","2001":"73,183","2002":"73,22773171","2003":"73,30195122","2004":"73,40717073","2005":"73,55619512","2006":"73,76621951","2007":"74,04390244","2008":"74,38653659","2009":"74,78156098","2010":"75,20353659","2011":"75,62312195","2012":"76,01407317","2013":"76,35512195","2014":"76,63885366","2015":"76,86431707","2016":"","Country Name":"Montenegro","Country Code":"MNE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,36880488","1961":"49,27897561","1962":"50,16004878","1963":"50,98729268","1964":"51,74609756","1965":"52,43739024","1966":"53,07529268","1967":"53,6805122","1968":"54,26573171","1969":"54,82702439","1970":"55,34643902","1971":"55,80146341","1972":"56,17509756","1973":"56,46026829","1974":"56,6595122","1975":"56,78078049","1976":"56,83409756","1977":"56,84641463","1978":"56,8477561","1979":"56,86360976","1980":"56,9255122","1981":"57,06453659","1982":"57,28568293","1983":"57,58592683","1984":"57,95770732","1985":"58,38136585","1986":"58,82619512","1987":"59,25758537","1988":"59,64904878","1989":"59,98817073","1990":"60,2677561","1991":"60,4882439","1992":"60,67236585","1993":"60,84319512","1994":"61,01558537","1995":"61,21058537","1996":"61,44804878","1997":"61,73646341","1998":"62,07953659","1999":"62,4757561","2000":"62,91536585","2001":"63,38180488","2002":"63,85468293","2003":"64,31804878","2004":"64,76514634","2005":"65,19912195","2006":"65,63095122","2007":"66,07287805","2008":"66,52768293","2009":"66,99026829","2010":"67,44556098","2011":"67,87553659","2012":"68,26314634","2013":"68,59985366","2014":"68,88260976","2015":"69,11587805","2016":"","Country Name":"Mongolia","Country Code":"MNG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Northern Mariana Islands","Country Code":"MNP","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"35,00370732","1961":"35,4667561","1962":"35,91226829","1963":"36,33878049","1964":"36,7487561","1965":"37,14921951","1966":"37,54868293","1967":"37,95465854","1968":"38,37117073","1969":"38,79970732","1970":"39,24329268","1971":"39,70695122","1972":"40,18117073","1973":"40,64946341","1974":"41,09431707","1975":"41,48126829","1976":"41,77282927","1977":"41,952","1978":"42,0192439","1979":"41,98604878","1980":"41,88136585","1981":"41,74663415","1982":"41,62780488","1983":"41,56485366","1984":"41,57726829","1985":"41,67056098","1986":"41,83321951","1987":"42,04080488","1988":"42,27636585","1989":"42,53939024","1990":"42,84590244","1991":"43,21534146","1992":"43,66070732","1993":"44,18202439","1994":"44,77034146","1995":"45,39926829","1996":"46,03490244","1997":"46,64931707","1998":"47,22602439","1999":"47,76097561","2000":"48,27007317","2001":"48,78214634","2002":"49,32858537","2003":"49,92873171","2004":"50,58304878","2005":"51,279","2006":"51,99212195","2007":"52,6955122","2008":"53,36678049","2009":"54,0005122","2010":"54,6017561","2011":"55,18758537","2012":"55,77653659","2013":"56,37960976","2014":"56,99434146","2015":"57,60926829","2016":"","Country Name":"Mozambique","Country Code":"MOZ","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"43,48309756","1961":"44,16392683","1962":"44,82521951","1963":"45,46002439","1964":"46,06234146","1965":"46,63073171","1966":"47,16468293","1967":"47,67317073","1968":"48,16270732","1969":"48,63931707","1970":"49,10695122","1971":"49,56758537","1972":"50,02370732","1973":"50,48136585","1974":"50,94607317","1975":"51,42792683","1976":"51,93953659","1977":"52,48192683","1978":"53,05214634","1979":"53,64265854","1980":"54,24243902","1981":"54,83595122","1982":"55,40753659","1983":"55,94163415","1984":"56,43065854","1985":"56,86604878","1986":"57,24578049","1987":"57,57785366","1988":"57,87080488","1989":"58,13060976","1990":"58,3642439","1991":"58,58019512","1992":"58,7845122","1993":"58,98173171","1994":"59,17387805","1995":"59,3574878","1996":"59,52409756","1997":"59,66826829","1998":"59,79002439","1999":"59,89190244","2000":"59,98492683","2001":"60,08014634","2002":"60,18953659","2003":"60,32107317","2004":"60,48126829","2005":"60,67358537","2006":"60,89753659","2007":"61,14660976","2008":"61,41021951","2009":"61,68182927","2010":"61,95136585","2011":"62,2097561","2012":"62,45095122","2013":"62,67195122","2014":"62,8702439","2015":"63,04636585","2016":"","Country Name":"Mauritania","Country Code":"MRT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"58,74521951","1961":"59,74836585","1962":"60,62690244","1963":"61,35765854","1964":"61,93495122","1965":"62,35829268","1966":"62,63870732","1967":"62,81531707","1968":"62,93168293","1969":"63,02019512","1970":"63,11804878","1971":"63,25334146","1972":"63,43995122","1973":"63,68553659","1974":"63,99997561","1975":"64,39053659","1976":"64,85563415","1977":"65,37243902","1978":"65,91331707","1979":"66,45578049","1980":"66,96539024","1981":"67,40739024","1982":"67,76536585","1983":"68,03760976","1984":"68,23036585","1985":"68,37068293","1986":"68,49936585","1987":"68,6555122","1988":"68,86302439","1989":"69,12402439","1990":"69,40487805","1991":"69,95609756","1992":"70,05853659","1993":"70,10731707","1994":"70,15853659","1995":"70,32585366","1996":"70,32292683","1997":"70,40487805","1998":"70,60731707","1999":"70,96097561","2000":"71,66341463","2001":"71,76585366","2002":"71,96585366","2003":"72,12130081","2004":"72,27674797","2005":"72,43219512","2006":"72,43219512","2007":"72,57073171","2008":"72,57073171","2009":"72,88243902","2010":"72,96731707","2011":"73,26682927","2012":"73,86341463","2013":"74,01707317","2014":"74,19439024","2015":"74,35317073","2016":"","Country Name":"Mauritius","Country Code":"MUS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"37,77363415","1961":"37,99814634","1962":"38,21417073","1963":"38,42170732","1964":"38,62578049","1965":"38,84139024","1966":"39,08604878","1967":"39,37173171","1968":"39,70543902","1969":"40,08663415","1970":"40,50882927","1971":"40,95953659","1972":"41,42119512","1973":"41,87734146","1974":"42,31990244","1975":"42,74539024","1976":"43,15778049","1977":"43,56156098","1978":"43,95921951","1979":"44,34570732","1980":"44,7104878","1981":"45,045","1982":"45,3412439","1983":"45,59473171","1984":"45,80597561","1985":"45,9784878","1986":"46,11826829","1987":"46,23636585","1988":"46,34041463","1989":"46,43356098","1990":"46,51295122","1991":"46,5717561","1992":"46,60507317","1993":"46,614","1994":"46,60556098","1995":"46,57485366","1996":"46,51290244","1997":"46,43558537","1998":"46,36870732","1999":"46,35053659","2000":"46,43634146","2001":"46,68434146","2002":"47,13034146","2003":"47,79119512","2004":"48,67129268","2005":"49,77156098","2006":"51,08","2007":"52,53926829","2008":"54,08012195","2009":"55,64270732","2010":"57,1562439","2011":"58,55736585","2012":"59,81473171","2013":"60,90643902","2014":"61,81660976","2015":"62,54336585","2016":"","Country Name":"Malawi","Country Code":"MWI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"59,47534146","1961":"60,05439024","1962":"60,61668293","1963":"61,16019512","1964":"61,68495122","1965":"62,1904878","1966":"62,67636585","1967":"63,14465854","1968":"63,59846341","1969":"64,03780488","1970":"64,46321951","1971":"64,87570732","1972":"65,27573171","1973":"65,6627561","1974":"66,03831707","1975":"66,40187805","1976":"66,75446341","1977":"67,09607317","1978":"67,42719512","1979":"67,74782927","1980":"68,059","1981":"68,36117073","1982":"68,65485366","1983":"68,94104878","1984":"69,21926829","1985":"69,4905122","1986":"69,75426829","1987":"70,01156098","1988":"70,26139024","1989":"70,50473171","1990":"70,74212195","1991":"70,973","1992":"71,19841463","1993":"71,41831707","1994":"71,63221951","1995":"71,84314634","1996":"72,05109756","1997":"72,25607317","1998":"72,45758537","1999":"72,65412195","2000":"72,83963415","2001":"73,00909756","2002":"73,15946341","2003":"73,2922439","2004":"73,40997561","2005":"73,52268293","2006":"73,6404878","2007":"73,77243902","2008":"73,92456098","2009":"74,09787805","2010":"74,28685366","2011":"74,48643902","2012":"74,68556098","2013":"74,87565854","2014":"75,05370732","2015":"75,22019512","2016":"","Country Name":"Malaysia","Country Code":"MYS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,89360376","1961":"70,36801738","1962":"70,2327068","1963":"70,05038739","1964":"70,31320505","1965":"70,36672191","1966":"70,37807047","1967":"70,71438226","1968":"70,17624157","1969":"70,69476442","1970":"70,9854796","1971":"71,28874087","1972":"71,32471392","1973":"71,52859423","1974":"72,07943102","1975":"72,69384248","1976":"72,95345922","1977":"73,34966017","1978":"73,47048383","1979":"73,9082308","1980":"73,7528378","1981":"74,15353567","1982":"74,49043746","1983":"74,61786298","1984":"74,73580628","1985":"74,73448283","1986":"74,79422574","1987":"74,96076821","1988":"74,96835495","1989":"75,22162201","1990":"75,43126468","1991":"75,58472222","1992":"75,78753608","1993":"75,64574496","1994":"75,84289757","1995":"75,85584528","1996":"76,24546582","1997":"76,63251134","1998":"76,78621881","1999":"76,80954808","2000":"76,89243196","2001":"77,09747435","2002":"77,1976618","2003":"77,31265491","2004":"77,74935242","2005":"77,76444426","2006":"77,94434805","2007":"78,23954091","2008":"78,30097125","2009":"78,64290788","2010":"78,8046116","2011":"78,92051971","2012":"79,02514782","2013":"79,04497199","2014":"79,06415393","2015":"79,08222552","2016":"","Country Name":"North America","Country Code":"NAC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,88141463","1961":"47,50436585","1962":"48,11297561","1963":"48,70621951","1964":"49,2835122","1965":"49,84117073","1966":"50,37243902","1967":"50,87868293","1968":"51,36382927","1969":"51,83441463","1970":"52,30658537","1971":"52,80209756","1972":"53,32919512","1973":"53,89158537","1974":"54,48134146","1975":"55,08043902","1976":"55,65926829","1977":"56,19614634","1978":"56,67492683","1979":"57,09660976","1980":"57,47521951","1981":"57,83887805","1982":"58,21368293","1983":"58,61617073","1984":"59,04531707","1985":"59,501","1986":"59,97656098","1987":"60,44336585","1988":"60,86787805","1989":"61,21868293","1990":"61,45385366","1991":"61,53307317","1992":"61,44058537","1993":"61,17356098","1994":"60,73463415","1995":"60,12192683","1996":"59,33804878","1997":"58,42641463","1998":"57,44987805","1999":"56,46680488","2000":"55,54209756","2001":"54,73217073","2002":"54,07982927","2003":"53,62578049","2004":"53,4107561","2005":"53,48880488","2006":"53,90246341","2007":"54,62463415","2008":"55,60134146","2009":"56,77773171","2010":"58,07460976","2011":"59,40392683","2012":"60,68470732","2013":"61,84543902","2014":"62,83892683","2015":"63,63643902","2016":"","Country Name":"Namibia","Country Code":"NAM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"58,63902439","1961":"59,03902439","1962":"59,43902439","1963":"59,88780488","1964":"60,33658537","1965":"60,78536585","1966":"61,23414634","1967":"61,68292683","1968":"62,13170732","1969":"62,5804878","1970":"63,02926829","1971":"63,47804878","1972":"63,92682927","1973":"64,37560976","1974":"64,82439024","1975":"65,27317073","1976":"65,72195122","1977":"66,17073171","1978":"66,30365854","1979":"66,43658537","1980":"66,5695122","1981":"66,70243902","1982":"66,9195122","1983":"68,58780488","1984":"68,06341463","1985":"68,76585366","1986":"69,06341463","1987":"69,42682927","1988":"69,45365854","1989":"69,08536585","1990":"70,48536585","1991":"70,35853659","1992":"71,61463415","1993":"71,65609756","1994":"70,67317073","1995":"72,0097561","1996":"71,99756098","1997":"71,73902439","1998":"74,37560976","1999":"73,87560976","2000":"75,16341463","2001":"74,83170732","2002":"75,10243902","2003":"75,27073171","2004":"75,51463415","2005":"75,16829268","2006":"76,46097561","2007":"75,94634146","2008":"76,45609756","2009":"76,96585366","2010":"77,47317073","2011":"76,72682927","2012":"77,12195122","2013":"77,32195122","2014":"77,57317073","2015":"77,77317073","2016":"","Country Name":"New Caledonia","Country Code":"NCL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"34,99773171","1961":"35,08514634","1962":"35,16709756","1963":"35,24458537","1964":"35,31760976","1965":"35,38763415","1966":"35,45763415","1967":"35,53256098","1968":"35,61939024","1969":"35,72214634","1970":"35,84580488","1971":"35,99190244","1972":"36,163","1973":"36,36209756","1974":"36,59273171","1975":"36,86492683","1976":"37,18768293","1977":"37,5634878","1978":"37,98585366","1979":"38,4487561","1980":"38,93465854","1981":"39,42558537","1982":"39,90497561","1983":"40,36385366","1984":"40,80119512","1985":"41,2194878","1986":"41,6312439","1987":"42,05446341","1988":"42,50417073","1989":"42,98687805","1990":"43,50914634","1991":"44,0754878","1992":"44,67846341","1993":"45,31002439","1994":"45,96421951","1995":"46,6295122","1996":"47,29539024","1997":"47,95329268","1998":"48,59968293","1999":"49,23253659","2000":"49,85580488","2001":"50,47797561","2002":"51,10953659","2003":"51,75897561","2004":"52,42778049","2005":"53,12241463","2006":"53,84682927","2007":"54,59456098","2008":"55,35312195","2009":"56,11004878","2010":"56,84541463","2011":"57,53629268","2012":"58,1702439","2013":"58,73880488","2014":"59,2405122","2015":"59,68187805","2016":"","Country Name":"Niger","Country Code":"NER","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"36,975","1961":"37,42929268","1962":"37,86907317","1963":"38,28882927","1964":"38,68707317","1965":"39,06780488","1966":"39,43702439","1967":"39,8042439","1968":"40,17846341","1969":"40,56468293","1970":"40,96590244","1971":"41,38660976","1972":"41,82282927","1973":"42,27002439","1974":"42,72321951","1975":"43,17990244","1976":"43,64056098","1977":"44,09770732","1978":"44,54034146","1979":"44,95695122","1980":"45,32756098","1981":"45,63165854","1982":"45,8627561","1983":"46,01834146","1984":"46,10192683","1985":"46,12197561","1986":"46,09546341","1987":"46,04290244","1988":"45,98429268","1989":"45,93265854","1990":"45,89463415","1991":"45,86978049","1992":"45,85265854","1993":"45,84080488","1994":"45,83970732","1995":"45,85131707","1996":"45,87704878","1997":"45,92129268","1998":"45,99246341","1999":"46,10002439","2000":"46,26443902","2001":"46,50573171","2002":"46,82995122","2003":"47,23463415","2004":"47,71078049","2005":"48,23836585","2006":"48,79285366","2007":"49,34626829","2008":"49,87756098","2009":"50,37573171","2010":"50,83726829","2011":"51,26968293","2012":"51,6904878","2013":"52,11270732","2014":"52,54134146","2015":"52,97792683","2016":"","Country Name":"Nigeria","Country Code":"NGA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,99882927","1961":"47,64565854","1962":"48,29587805","1963":"48,9505122","1964":"49,60807317","1965":"50,27063415","1966":"50,94129268","1967":"51,61953659","1968":"52,30085366","1969":"52,97812195","1970":"53,64365854","1971":"54,28673171","1972":"54,89917073","1973":"55,47592683","1974":"56,0134878","1975":"56,50892683","1976":"56,95785366","1977":"57,37","1978":"57,75714634","1979":"58,12846341","1980":"58,49709756","1981":"58,87312195","1982":"59,26656098","1983":"59,6894878","1984":"60,1504878","1985":"60,66782927","1986":"61,25517073","1987":"61,91007317","1988":"62,61990244","1989":"63,3704878","1990":"64,135","1991":"64,88409756","1992":"65,59141463","1993":"66,23914634","1994":"66,82163415","1995":"67,3427561","1996":"67,818","1997":"68,27409756","1998":"68,72880488","1999":"69,1902439","2000":"69,65807317","2001":"70,12741463","2002":"70,58587805","2003":"71,025","2004":"71,44290244","2005":"71,83858537","2006":"72,21504878","2007":"72,57621951","2008":"72,925","2009":"73,26387805","2010":"73,59234146","2011":"73,90736585","2012":"74,20946341","2013":"74,49809756","2014":"74,77278049","2015":"75,038","2016":"","Country Name":"Nicaragua","Country Code":"NIC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"73,39268293","1961":"73,65268293","1962":"73,32390244","1963":"73,33707317","1964":"73,70414634","1965":"73,56878049","1966":"73,51292683","1967":"73,80414634","1968":"73,61268293","1969":"73,5395122","1970":"73,58560976","1971":"73,8095122","1972":"73,72707317","1973":"74,14390244","1974":"74,53682927","1975":"74,49878049","1976":"74,64707317","1977":"75,22146341","1978":"75,14512195","1979":"75,60609756","1980":"75,74317073","1981":"75,93439024","1982":"75,98853659","1983":"76,16414634","1984":"76,23317073","1985":"76,28463415","1986":"76,2704878","1987":"76,70512195","1988":"76,8902439","1989":"76,73414634","1990":"76,87804878","1991":"77","1992":"77,21707317","1993":"76,91658537","1994":"77,37512195","1995":"77,40463415","1996":"77,43560976","1997":"77,79439024","1998":"77,88292683","1999":"77,83658537","2000":"77,98780488","2001":"78,1902439","2002":"78,29268293","2003":"78,49268293","2004":"79,09512195","2005":"79,34634146","2006":"79,69756098","2007":"80,09756098","2008":"80,25121951","2009":"80,54878049","2010":"80,70243902","2011":"81,20487805","2012":"81,10487805","2013":"81,30487805","2014":"81,70731707","2015":"81,70731707","2016":"","Country Name":"Netherlands","Country Code":"NLD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"73,5497561","1961":"73,5504878","1962":"73,44804878","1963":"73,07756098","1964":"73,59585366","1965":"73,72317073","1966":"73,99536585","1967":"74,06658537","1968":"73,94195122","1969":"73,66341463","1970":"74,08804878","1971":"74,17926829","1972":"74,34463415","1973":"74,44219512","1974":"74,75365854","1975":"74,81756098","1976":"75,0395122","1977":"75,38682927","1978":"75,41853659","1979":"75,41390244","1980":"75,67170732","1981":"75,86902439","1982":"76,01097561","1983":"76,06682927","1984":"76,22439024","1985":"75,91682927","1986":"76,24121951","1987":"76,08170732","1988":"76,2204878","1989":"76,5004878","1990":"76,53731707","1991":"76,98073171","1992":"77,18439024","1993":"77,15170732","1994":"77,6897561","1995":"77,73658537","1996":"78,1504878","1997":"78,14268293","1998":"78,32926829","1999":"78,28292683","2000":"78,63414634","2001":"78,78536585","2002":"78,98780488","2003":"79,3902439","2004":"79,84146341","2005":"80,04146341","2006":"80,34390244","2007":"80,39512195","2008":"80,59268293","2009":"80,79512195","2010":"80,99756098","2011":"81,29512195","2012":"81,45121951","2013":"81,75121951","2014":"82,1","2015":"82,1","2016":"","Country Name":"Norway","Country Code":"NOR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"35,17082927","1961":"35,53334146","1962":"35,95280488","1963":"36,42517073","1964":"36,94646341","1965":"37,50568293","1966":"38,09236585","1967":"38,695","1968":"39,30363415","1969":"39,90878049","1970":"40,50443902","1971":"41,08814634","1972":"41,66287805","1973":"42,23612195","1974":"42,80887805","1975":"43,38709756","1976":"43,97529268","1977":"44,57839024","1978":"45,20092683","1979":"45,84539024","1980":"46,51180488","1981":"47,19821951","1982":"47,90217073","1983":"48,62068293","1984":"49,35421951","1985":"50,10626829","1986":"50,88029268","1987":"51,67821951","1988":"52,50002439","1989":"53,33968293","1990":"54,19473171","1991":"55,05863415","1992":"55,9244878","1993":"56,78529268","1994":"57,63309756","1995":"58,46441463","1996":"59,27729268","1997":"60,07168293","1998":"60,84760976","1999":"61,60009756","2000":"62,32663415","2001":"63,0242439","2002":"63,69090244","2003":"64,32658537","2004":"64,93129268","2005":"65,5025122","2006":"66,04019512","2007":"66,54685366","2008":"67,02497561","2009":"67,47807317","2010":"67,91017073","2011":"68,32578049","2012":"68,72795122","2013":"69,11817073","2014":"69,49897561","2015":"69,86985366","2016":"","Country Name":"Nepal","Country Code":"NPL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Nauru","Country Code":"NRU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"71,23658537","1961":"70,98536585","1962":"71,23170732","1963":"71,2804878","1964":"71,32926829","1965":"71,22682927","1966":"71,12439024","1967":"71,47317073","1968":"71,12439024","1969":"71,47317073","1970":"71,27317073","1971":"71,77317073","1972":"71,82926829","1973":"71,66829268","1974":"71,92439024","1975":"72,2195122","1976":"72,42195122","1977":"72,16829268","1978":"73,0195122","1979":"73,06829268","1980":"72,82926829","1981":"73,62195122","1982":"73,72439024","1983":"73,77560976","1984":"74,37073171","1985":"73,82926829","1986":"74,12195122","1987":"74,17804878","1988":"74,42439024","1989":"74,82439024","1990":"75,37804878","1991":"76,03170732","1992":"76,12439024","1993":"76,43414634","1994":"76,88292683","1995":"76,73414634","1996":"76,78780488","1997":"77,33414634","1998":"78,08536585","1999":"77,8902439","2000":"78,63658537","2001":"78,69268293","2002":"78,84634146","2003":"79,14634146","2004":"79,54878049","2005":"79,85121951","2006":"80,04878049","2007":"80,15121951","2008":"80,35121951","2009":"80,70243902","2010":"80,70243902","2011":"80,90487805","2012":"81,15609756","2013":"81,40731707","2014":"81,40487805","2015":"81,45682927","2016":"","Country Name":"New Zealand","Country Code":"NZL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,35048212","1961":"67,74595626","1962":"67,75199961","1963":"67,97134172","1964":"68,3731857","1965":"68,49892859","1966":"68,77259358","1967":"69,00843594","1968":"68,97476195","1969":"69,1757368","1970":"69,50278436","1971":"69,78482657","1972":"70,08064152","1973":"70,26512117","1974":"70,68130667","1975":"71,03259954","1976":"71,30987488","1977":"71,67502673","1978":"71,85518766","1979":"72,19807647","1980":"72,25657296","1981":"72,62696","1982":"72,96708378","1983":"73,10069102","1984":"73,39398684","1985":"73,5360705","1986":"73,79565279","1987":"74,0857891","1988":"74,23133788","1989":"74,50052174","1990":"74,68090923","1991":"74,87505893","1992":"75,15282694","1993":"75,27369803","1994":"75,5772454","1995":"75,68628906","1996":"76,06165483","1997":"76,39982503","1998":"76,60815393","1999":"76,78952243","2000":"77,07011501","2001":"77,37521495","2002":"77,53477636","2003":"77,68198455","2004":"78,09882584","2005":"78,22479797","2006":"78,5231568","2007":"78,75809905","2008":"78,91707454","2009":"79,18281091","2010":"79,36693907","2011":"79,6074377","2012":"79,7278633","2013":"79,90576587","2014":"80,14410427","2015":"80,28312399","2016":"","Country Name":"OECD members","Country Code":"OED","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"42,66707317","1961":"43,49102439","1962":"44,3005122","1963":"45,09553659","1964":"45,87658537","1965":"46,64168293","1966":"47,38434146","1967":"48,10707317","1968":"48,81834146","1969":"49,52865854","1970":"50,25841463","1971":"51,03158537","1972":"51,85912195","1973":"52,748","1974":"53,6942439","1975":"54,68987805","1976":"55,71895122","1977":"56,75556098","1978":"57,77821951","1979":"58,77202439","1980":"59,72743902","1981":"60,64","1982":"61,51617073","1983":"62,35941463","1984":"63,16873171","1985":"63,94063415","1986":"64,67407317","1987":"65,37107317","1988":"66,03309756","1989":"66,66417073","1990":"67,2677561","1991":"67,84685366","1992":"68,40497561","1993":"68,94660976","1994":"69,4737561","1995":"69,98841463","1996":"70,49058537","1997":"70,97878049","1998":"71,45246341","1999":"71,91217073","2000":"72,35936585","2001":"72,79604878","2002":"73,22319512","2003":"73,63880488","2004":"74,04141463","2005":"74,42653659","2006":"74,7882439","2007":"75,12302439","2008":"75,42992683","2009":"75,71143902","2010":"75,97007317","2011":"76,21178049","2012":"76,44202439","2013":"76,66829268","2014":"76,89456098","2015":"77,12182927","2016":"","Country Name":"Oman","Country Code":"OMN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"51,4227955","1961":"51,8740673","1962":"52,3141966","1963":"52,71621429","1964":"53,11814729","1965":"53,49080365","1966":"53,82097217","1967":"54,15499847","1968":"54,48370185","1969":"54,80928029","1970":"55,14771133","1971":"55,47592621","1972":"55,8129492","1973":"56,11892243","1974":"56,42116475","1975":"56,75908333","1976":"57,14026046","1977":"57,53736463","1978":"57,99387145","1979":"58,4708819","1980":"58,94978531","1981":"59,41449288","1982":"59,91793939","1983":"60,30337627","1984":"60,67145902","1985":"61,02418508","1986":"61,4173255","1987":"61,78791717","1988":"62,0238355","1989":"62,21224702","1990":"62,33661342","1991":"62,44778983","1992":"62,44587921","1993":"62,24587126","1994":"61,97521992","1995":"61,8125386","1996":"61,69514863","1997":"61,42566562","1998":"61,03846887","1999":"60,81292225","2000":"60,68598221","2001":"60,60238258","2002":"60,71721738","2003":"60,89967984","2004":"61,25600107","2005":"61,73495875","2006":"62,281784","2007":"62,92563826","2008":"63,61709618","2009":"64,31605905","2010":"64,95379934","2011":"65,53312697","2012":"66,04342023","2013":"66,53652306","2014":"66,95622134","2015":"67,33112903","2016":"","Country Name":"Other small states","Country Code":"OSS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,28695122","1961":"46,2187561","1962":"47,11153659","1963":"47,96280488","1964":"48,77507317","1965":"49,54687805","1966":"50,2812439","1967":"50,97865854","1968":"51,64109756","1969":"52,2685122","1970":"52,86031707","1971":"53,41390244","1972":"53,92821951","1973":"54,40570732","1974":"54,84839024","1975":"55,26131707","1976":"55,64753659","1977":"56,01217073","1978":"56,36078049","1979":"56,69795122","1980":"57,02821951","1981":"57,35307317","1982":"57,6724878","1983":"57,98695122","1984":"58,2974878","1985":"58,60563415","1986":"58,91095122","1987":"59,21343902","1988":"59,51160976","1989":"59,80592683","1990":"60,09585366","1991":"60,38085366","1992":"60,66085366","1993":"60,93480488","1994":"61,20468293","1995":"61,47043902","1996":"61,73309756","1997":"61,99365854","1998":"62,25219512","1999":"62,50819512","2000":"62,75817073","2001":"62,99817073","2002":"63,22617073","2003":"63,44321951","2004":"63,65280488","2005":"63,8634878","2006":"64,08526829","2007":"64,32563415","2008":"64,58607317","2009":"64,86356098","2010":"65,15004878","2011":"65,432","2012":"65,69785366","2013":"65,93858537","2014":"66,14919512","2015":"66,33217073","2016":"","Country Name":"Pakistan","Country Code":"PAK","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"60,88170732","1961":"61,3975122","1962":"61,89636585","1963":"62,37678049","1964":"62,84021951","1965":"63,29012195","1966":"63,73236585","1967":"64,17439024","1968":"64,62360976","1969":"65,082","1970":"65,55458537","1971":"66,04439024","1972":"66,5484878","1973":"67,05997561","1974":"67,57395122","1975":"68,08195122","1976":"68,57353659","1977":"69,0427561","1978":"69,48309756","1979":"69,89207317","1980":"70,26817073","1981":"70,61331707","1982":"70,93546341","1983":"71,23963415","1984":"71,52934146","1985":"71,80765854","1986":"72,07468293","1987":"72,331","1988":"72,57717073","1989":"72,81573171","1990":"73,0462439","1991":"73,27126829","1992":"73,49073171","1993":"73,7055122","1994":"73,9154878","1995":"74,1215122","1996":"74,32541463","1997":"74,52504878","1998":"74,72082927","1999":"74,91365854","2000":"75,10197561","2001":"75,28529268","2002":"75,46268293","2003":"75,63531707","2004":"75,8037561","2005":"75,97163415","2006":"76,1395122","2007":"76,3114878","2008":"76,48712195","2009":"76,6685122","2010":"76,85519512","2011":"77,04621951","2012":"77,23904878","2013":"77,43263415","2014":"77,62543902","2015":"77,81743902","2016":"","Country Name":"Panama","Country Code":"PAN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"47,69158537","1961":"48,23292683","1962":"48,75278049","1963":"49,24865854","1964":"49,72804878","1965":"50,21443902","1966":"50,73678049","1967":"51,31853659","1968":"51,96919512","1969":"52,68726829","1970":"53,4537561","1971":"54,24168293","1972":"55,01758537","1973":"55,758","1974":"56,45141463","1975":"57,09682927","1976":"57,7047561","1977":"58,29414634","1978":"58,881","1979":"59,47034146","1980":"60,06363415","1981":"60,65892683","1982":"61,24970732","1983":"61,8305122","1984":"62,39936585","1985":"62,95482927","1986":"63,49443902","1987":"64,01921951","1988":"64,53217073","1989":"65,0347561","1990":"65,53043902","1991":"66,02365854","1992":"66,51736585","1993":"67,0134878","1994":"67,5125122","1995":"68,01543902","1996":"68,5237561","1997":"69,03253659","1998":"69,53680488","1999":"70,03009756","2000":"70,50743902","2001":"70,95987805","2002":"71,38387805","2003":"71,7764878","2004":"72,13619512","2005":"72,45902439","2006":"72,74595122","2007":"73,00197561","2008":"73,23356098","2009":"73,44770732","2010":"73,65136585","2011":"73,85253659","2012":"74,05668293","2013":"74,26678049","2014":"74,48536585","2015":"74,71341463","2016":"","Country Name":"Peru","Country Code":"PER","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"57,81192683","1961":"58,12226829","1962":"58,42885366","1963":"58,73260976","1964":"59,03307317","1965":"59,33326829","1966":"59,6362439","1967":"59,94212195","1968":"60,24546341","1969":"60,54034146","1970":"60,8132439","1971":"61,04617073","1972":"61,23109756","1973":"61,36897561","1974":"61,46534146","1975":"61,53619512","1976":"61,59958537","1977":"61,6775122","1978":"61,79","1979":"61,94558537","1980":"62,1547561","1981":"62,42102439","1982":"62,73241463","1983":"63,07339024","1984":"63,43343902","1985":"63,79756098","1986":"64,14773171","1987":"64,47443902","1988":"64,76914634","1989":"65,02887805","1990":"65,25709756","1991":"65,46329268","1992":"65,66097561","1993":"65,86017073","1994":"66,06434146","1995":"66,2724878","1996":"66,47960976","1997":"66,67873171","1998":"66,86331707","1999":"67,03292683","2000":"67,1865122","2001":"67,32560976","2002":"67,45370732","2003":"67,57382927","2004":"67,6895122","2005":"67,8022439","2006":"67,91256098","2007":"68,0224878","2008":"68,132","2009":"68,24309756","2010":"68,35826829","2011":"68,4784878","2012":"68,60421951","2013":"68,73495122","2014":"68,87017073","2015":"69,00985366","2016":"","Country Name":"Philippines","Country Code":"PHL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"69,06926829","1991":"","1992":"","1993":"","1994":"","1995":"71,84463415","1996":"","1997":"","1998":"","1999":"","2000":"70,49365854","2001":"","2002":"","2003":"","2004":"","2005":"69,12926829","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Palau","Country Code":"PLW","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,98104878","1961":"42,44909756","1962":"42,97731707","1963":"43,57782927","1964":"44,25073171","1965":"44,97917073","1966":"45,73878049","1967":"46,49912195","1968":"47,2372439","1969":"47,94419512","1970":"48,62056098","1971":"49,27590244","1972":"49,92909756","1973":"50,594","1974":"51,27439024","1975":"51,97882927","1976":"52,71485366","1977":"53,4737561","1978":"54,23953659","1979":"54,99434146","1980":"55,70519512","1981":"56,33519512","1982":"56,86397561","1983":"57,28541463","1984":"57,60409756","1985":"57,84136585","1986":"58,03131707","1987":"58,21334146","1988":"58,42004878","1989":"58,66431707","1990":"58,95021951","1991":"59,267","1992":"59,59","1993":"59,90246341","1994":"60,19990244","1995":"60,4827561","1996":"60,75390244","1997":"61,02107317","1998":"61,29209756","1999":"61,56936585","2000":"61,85682927","2001":"62,15995122","2002":"62,47534146","2003":"62,79953659","2004":"63,12560976","2005":"63,44507317","2006":"63,744","2007":"64,01590244","2008":"64,25534146","2009":"64,46278049","2010":"64,6402439","2011":"64,79568293","2012":"64,94156098","2013":"65,08585366","2014":"65,23407317","2015":"65,38770732","2016":"","Country Name":"Papua New Guinea","Country Code":"PNG","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,6804878","1961":"67,77804878","1962":"67,42682927","1963":"68,37560976","1964":"68,62926829","1965":"69,42926829","1966":"69,82682927","1967":"69,42439024","1968":"70,2195122","1969":"69,7195122","1970":"69,86829268","1971":"69,61219512","1972":"70,66585366","1973":"70,66341463","1974":"71,11707317","1975":"70,56097561","1976":"70,65609756","1977":"70,40243902","1978":"70,35121951","1979":"70,75121951","1980":"70,09756098","1981":"71,05121951","1982":"71,10243902","1983":"71","1984":"70,8","1985":"70,54878049","1986":"70,84878049","1987":"70,89756098","1988":"71,33170732","1989":"71,04390244","1990":"70,8902439","1991":"70,58780488","1992":"71,0902439","1993":"71,59512195","1994":"71,69512195","1995":"71,89268293","1996":"72,24634146","1997":"72,64634146","1998":"72,99756098","1999":"73,04390244","2000":"73,74878049","2001":"74,2","2002":"74,49756098","2003":"74,59756098","2004":"74,84634146","2005":"74,99512195","2006":"75,14390244","2007":"75,24390244","2008":"75,54390244","2009":"75,69512195","2010":"76,24634146","2011":"76,69512195","2012":"76,74634146","2013":"77","2014":"77,60243902","2015":"78,20487805","2016":"","Country Name":"Poland","Country Code":"POL","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"38,79077946","1961":"39,23902112","1962":"39,6825544","1963":"40,1209865","1964":"40,5552928","1965":"40,98861991","1966":"41,42469787","1967":"41,86628583","1968":"42,31475862","1969":"42,7696022","1970":"43,23038952","1971":"43,69715678","1972":"44,16640398","1973":"44,63343683","1974":"45,09351361","1975":"45,54169398","1976":"45,97366527","1977":"46,38598155","1978":"46,77644027","1979":"47,14308785","1980":"47,48404693","1981":"47,79831065","1982":"48,08706028","1983":"48,34988929","1984":"48,58569573","1985":"48,7909544","1986":"48,96292709","1987":"49,10220975","1988":"49,21230381","1989":"49,29983942","1990":"49,36949705","1991":"49,42429985","1992":"49,47090629","1993":"49,51796535","1994":"49,5750829","1995":"49,65237165","1996":"49,76089213","1997":"49,91006114","1998":"50,1101266","1999":"50,37110104","2000":"50,70775143","2001":"51,13160339","2002":"51,63812458","2003":"52,2160342","2004":"52,85181296","2005":"53,52850283","2006":"54,22828712","2007":"54,93213037","2008":"55,62257465","2009":"56,28609982","2010":"56,91218466","2011":"57,49632576","2012":"58,04447735","2013":"58,56164834","2014":"59,04751617","2015":"59,50281022","2016":"","Country Name":"Pre-demographic dividend","Country Code":"PRE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,71960976","1961":"68,94317073","1962":"69,14543902","1963":"69,356","1964":"69,59329268","1965":"69,8707561","1966":"70,18670732","1967":"70,5235122","1968":"70,86414634","1969":"71,20260976","1970":"71,53553659","1971":"71,85909756","1972":"72,16946341","1973":"72,46473171","1974":"72,73790244","1975":"72,98246341","1976":"73,19082927","1977":"73,36131707","1978":"73,49873171","1979":"73,60643902","1980":"73,7002439","1981":"73,79746341","1982":"73,90858537","1983":"74,03663415","1984":"74,17763415","1985":"74,30919512","1986":"74,40039024","1987":"74,43097561","1988":"74,39409756","1989":"74,29895122","1990":"74,16917073","1991":"74,03880488","1992":"73,94636585","1993":"73,92087805","1994":"73,97690244","1995":"74,12507317","1996":"74,3624878","1997":"74,66663415","1998":"75,01141463","1999":"75,38117073","2000":"76,68926829","2001":"77,06682927","2002":"77,7604878","2003":"78,07121951","2004":"78,17585366","2005":"78,29609756","2006":"78,41634146","2007":"78,42585366","2008":"77,9034878","2009":"78,14980488","2010":"78,40817073","2011":"78,67119512","2012":"78,92641463","2013":"79,16739024","2014":"79,39012195","2015":"79,59612195","2016":"","Country Name":"Puerto Rico","Country Code":"PRI","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"51,07717073","1961":"51,4382439","1962":"51,82531707","1963":"52,34504878","1964":"53,05487805","1965":"53,96695122","1966":"55,04121951","1967":"56,17370732","1968":"57,27714634","1969":"58,31943902","1970":"59,28263415","1971":"60,1647561","1972":"60,98590244","1973":"61,76060976","1974":"62,48843902","1975":"63,16485366","1976":"63,78639024","1977":"64,35197561","1978":"64,86409756","1979":"65,3272439","1980":"65,74541463","1981":"66,12519512","1982":"66,47302439","1983":"66,79741463","1984":"67,10570732","1985":"67,4272439","1986":"67,79931707","1987":"68,21880488","1988":"68,65768293","1989":"69,0734878","1990":"69,34431707","1991":"69,32531707","1992":"68,95170732","1993":"68,23026829","1994":"67,22821951","1995":"66,11729268","1996":"65,12419512","1997":"64,44195122","1998":"64,1915122","1999":"64,39526829","2000":"64,97956098","2001":"65,79214634","2002":"66,62178049","2003":"67,30870732","2004":"67,79829268","2005":"68,09446341","2006":"68,25973171","2007":"68,40873171","2008":"68,62904878","2009":"68,9372439","2010":"69,32731707","2011":"69,76926829","2012":"70,20960976","2013":"70,60787805","2014":"70,95207317","2015":"71,2387561","2016":"","Country Name":"North Korea","Country Code":"PRK","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"62,80892683","1961":"63,25236585","1962":"63,69414634","1963":"64,13229268","1964":"64,56385366","1965":"64,98946341","1966":"65,40626829","1967":"65,81682927","1968":"66,22165854","1969":"66,6217561","1970":"67,07317073","1971":"66,77073171","1972":"68,32439024","1973":"67,52439024","1974":"68,0195122","1975":"68,3097561","1976":"68,86097561","1977":"70,01219512","1978":"70,31707317","1979":"71,16829268","1980":"71,21463415","1981":"71,61463415","1982":"72,41463415","1983":"72,26585366","1984":"72,51463415","1985":"72,81463415","1986":"73,26585366","1987":"73,66585366","1988":"73,71463415","1989":"74,26585366","1990":"73,96585366","1991":"74,01463415","1992":"74,31219512","1993":"74,51219512","1994":"74,91463415","1995":"75,31219512","1996":"75,26097561","1997":"75,41219512","1998":"75,71219512","1999":"75,96341463","2000":"76,31463415","2001":"76,81463415","2002":"77,06585366","2003":"77,2195122","2004":"77,67073171","2005":"78,07073171","2006":"78,4195122","2007":"78,32195122","2008":"78,52439024","2009":"78,72682927","2010":"79,02682927","2011":"80,47073171","2012":"80,37317073","2013":"80,72195122","2014":"81,12195122","2015":"81,52195122","2016":"","Country Name":"Portugal","Country Code":"PRT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"63,79370732","1961":"64,01826829","1962":"64,22690244","1963":"64,41104878","1964":"64,57021951","1965":"64,70780488","1966":"64,83573171","1967":"64,96646341","1968":"65,10895122","1969":"65,26573171","1970":"65,43339024","1971":"65,6065122","1972":"65,77521951","1973":"65,93209756","1974":"66,07614634","1975":"66,20690244","1976":"66,32580488","1977":"66,43878049","1978":"66,5497561","1979":"66,66070732","1980":"66,77109756","1981":"66,87895122","1982":"66,98378049","1983":"67,08658537","1984":"67,18887805","1985":"67,29519512","1986":"67,411","1987":"67,53985366","1988":"67,6832439","1989":"67,84217073","1990":"68,01260976","1991":"68,19104878","1992":"68,37046341","1993":"68,55085366","1994":"68,7307561","1995":"68,91521951","1996":"69,11280488","1997":"69,32704878","1998":"69,56146341","1999":"69,81253659","2000":"70,07468293","2001":"70,33985366","2002":"70,59743902","2003":"70,84239024","2004":"71,07117073","2005":"71,28580488","2006":"71,49134146","2007":"71,69380488","2008":"71,89678049","2009":"72,0997561","2010":"72,2982439","2011":"72,48517073","2012":"72,6545122","2013":"72,8037561","2014":"72,93241463","2015":"73,04297561","2016":"","Country Name":"Paraguay","Country Code":"PRY","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"68,05287805","1991":"68,39402439","1992":"68,71604878","1993":"69,02541463","1994":"69,32463415","1995":"69,6117561","1996":"69,88380488","1997":"70,13534146","1998":"70,36390244","1999":"70,5704878","2000":"70,76009756","2001":"70,93568293","2002":"71,10368293","2003":"71,26912195","2004":"71,435","2005":"71,60385366","2006":"71,7737561","2007":"71,9437561","2008":"72,11239024","2009":"72,28014634","2010":"72,447","2011":"72,61536585","2012":"72,78470732","2013":"72,95546341","2014":"73,12812195","2015":"73,30168293","2016":"","Country Name":"Palestine","Country Code":"PSE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"53,67006557","1961":"54,14033352","1962":"54,60786792","1963":"55,07015758","1964":"55,52572445","1965":"55,97287602","1966":"56,41383061","1967":"56,8492529","1968":"57,27819454","1969":"57,69965377","1970":"58,11329481","1971":"58,5179868","1972":"58,91416251","1973":"59,30165501","1974":"59,6813295","1975":"60,05389909","1976":"60,41931295","1977":"60,77517056","1978":"61,11860687","1979":"61,44570504","1980":"61,74577516","1981":"62,00864034","1982":"62,23091625","1983":"62,41499053","1984":"62,56531712","1985":"62,69611061","1986":"62,82455381","1987":"63,21036026","1988":"63,14433163","1989":"63,36149744","1990":"63,67416005","1991":"63,92597418","1992":"64,25101481","1993":"64,58272237","1994":"64,91249115","1995":"65,29890682","1996":"65,54782609","1997":"65,85606776","1998":"66,16240513","1999":"66,49432628","2000":"66,76220437","2001":"67,0634195","2002":"67,35679052","2003":"67,64685116","2004":"67,93352705","2005":"68,22579401","2006":"68,49777393","2007":"68,7762324","2008":"69,05208184","2009":"69,32377437","2010":"69,58940877","2011":"69,84590637","2012":"70,09112623","2013":"70,32411046","2014":"70,54402369","2015":"70,75254202","2016":"","Country Name":"Pacific island small states","Country Code":"PSS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,72912546","1961":"69,13546883","1962":"69,1444825","1963":"69,35779637","1964":"69,77313365","1965":"69,86894002","1966":"70,12171064","1967":"70,37116613","1968":"70,30124012","1969":"70,50503947","1970":"70,82941892","1971":"71,10431399","1972":"71,34113641","1973":"71,50203394","1974":"71,88094942","1975":"72,22898839","1976":"72,46430573","1977":"72,80372631","1978":"72,93954013","1979":"73,23311394","1980":"73,26450776","1981":"73,58224113","1982":"73,90193533","1983":"74,01207477","1984":"74,30582617","1985":"74,44519745","1986":"74,69448661","1987":"74,98799944","1988":"75,0857233","1989":"75,33902415","1990":"75,46582414","1991":"75,56521164","1992":"75,79594604","1993":"75,80672859","1994":"76,05762839","1995":"76,07856942","1996":"76,41759112","1997":"76,75176414","1998":"76,96413271","1999":"77,12369327","2000":"77,36203954","2001":"77,66781002","2002":"77,7918545","2003":"77,91765042","2004":"78,3558044","2005":"78,44898619","2006":"78,77209265","2007":"79,0249116","2008":"79,17205685","2009":"79,49405804","2010":"79,70841198","2011":"79,97577732","2012":"80,10773932","2013":"80,29448189","2014":"80,5272136","2015":"80,64646234","2016":"","Country Name":"Post-demographic dividend","Country Code":"PST","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"56,35704878","1961":"56,78463415","1962":"57,17065854","1963":"57,54607317","1964":"57,92987805","1965":"58,33119512","1966":"58,74612195","1967":"59,15680488","1968":"59,54931707","1969":"59,92514634","1970":"60,2802439","1971":"60,61304878","1972":"60,92892683","1973":"61,23919512","1974":"61,5572439","1975":"61,91036585","1976":"62,32887805","1977":"62,82426829","1978":"63,39558537","1979":"64,03246341","1980":"64,70556098","1981":"65,37760976","1982":"66,00939024","1983":"66,57263415","1984":"67,05453659","1985":"67,45187805","1986":"67,77439024","1987":"68,04995122","1988":"68,30734146","1989":"68,56173171","1990":"68,82860976","1991":"69,12078049","1992":"69,44034146","1993":"69,78456098","1994":"70,15492683","1995":"70,54421951","1996":"70,94336585","1997":"71,33904878","1998":"71,72380488","1999":"72,09339024","2000":"72,45","2001":"72,80068293","2002":"73,15263415","2003":"73,51056098","2004":"73,87031707","2005":"74,22719512","2006":"74,57246341","2007":"74,8965122","2008":"75,19470732","2009":"75,46453659","2010":"75,70746341","2011":"75,92507317","2012":"76,12753659","2013":"76,31997561","2014":"76,50695122","2015":"76,6915122","2016":"","Country Name":"French Polynesia","Country Code":"PYF","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"61,22760976","1961":"61,98392683","1962":"62,74173171","1963":"63,49902439","1964":"64,25429268","1965":"65,00402439","1966":"65,7452439","1967":"66,47192683","1968":"67,17558537","1969":"67,85019512","1970":"68,4887561","1971":"69,0842439","1972":"69,63565854","1973":"70,1444878","1974":"70,61119512","1975":"71,03726829","1976":"71,42917073","1977":"71,79290244","1978":"72,13446341","1979":"72,45936585","1980":"72,76860976","1981":"73,06473171","1982":"73,3462439","1983":"73,61170732","1984":"73,86309756","1985":"74,10097561","1986":"74,32631707","1987":"74,53863415","1988":"74,73841463","1989":"74,92717073","1990":"75,10541463","1991":"75,27414634","1992":"75,43334146","1993":"75,58302439","1994":"75,72719512","1995":"75,86582927","1996":"76,00143902","1997":"76,13502439","1998":"76,26658537","1999":"76,39660976","2000":"76,52158537","2001":"76,6385122","2002":"76,74639024","2003":"76,84373171","2004":"76,93460976","2005":"77,02453659","2006":"77,12014634","2007":"77,22743902","2008":"77,34943902","2009":"77,48763415","2010":"77,6404878","2011":"77,80441463","2012":"77,97236585","2013":"78,13973171","2014":"78,3035122","2015":"78,46270732","2016":"","Country Name":"Qatar","Country Code":"QAT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"65,64243902","1961":"66,41587805","1962":"67,02907317","1963":"67,44107317","1964":"67,65043902","1965":"67,69785366","1966":"67,65946341","1967":"67,62690244","1968":"67,6712439","1969":"67,81492683","1970":"68,05641463","1971":"68,50414634","1972":"68,4702439","1973":"69,00560976","1974":"69,4997561","1975":"69,61390244","1976":"69,69878049","1977":"69,74195122","1978":"69,4804878","1979":"69,15317073","1980":"69,09097561","1981":"69,36829268","1982":"69,53170732","1983":"69,72634146","1984":"69,65878049","1985":"69,70682927","1986":"69,49634146","1987":"69,22682927","1988":"69,38804878","1989":"69,53073171","1990":"69,74121951","1991":"69,78439024","1992":"69,78439024","1993":"69,56341463","1994":"69,5097561","1995":"69,45609756","1996":"69,10487805","1997":"69,00487805","1998":"69,80731707","1999":"70,51219512","2000":"71,16341463","2001":"71,16097561","2002":"71,0097561","2003":"71,3097561","2004":"71,59427561","2005":"71,87889512","2006":"72,16341463","2007":"72,56585366","2008":"72,56585366","2009":"73,3097561","2010":"73,45853659","2011":"74,4097561","2012":"74,41219512","2013":"75,06341463","2014":"74,96097561","2015":"74,96097561","2016":"","Country Name":"Romania","Country Code":"ROU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"66,05529268","1961":"66,59702439","1962":"67,02141463","1963":"67,33990244","1964":"67,5665122","1965":"67,71885366","1966":"67,8125122","1967":"67,86014634","1968":"67,87434146","1969":"67,86712195","1970":"68,13365854","1971":"68,37658537","1972":"68,30853659","1973":"68,29463415","1974":"68,3202439","1975":"67,72390244","1976":"67,48756098","1977":"67,37634146","1978":"67,39097561","1979":"67,11439024","1980":"67,03390244","1981":"67,26390244","1982":"67,80609756","1983":"67,65268293","1984":"67,20268293","1985":"67,85682927","1986":"69,3897561","1987":"69,44","1988":"69,46439024","1989":"69,17170732","1990":"68,88609756","1991":"68,47439024","1992":"66,87317073","1993":"64,93585366","1994":"64,46707317","1995":"64,69073171","1996":"65,85414634","1997":"66,69878049","1998":"67,0297561","1999":"65,98219512","2000":"65,48365854","2001":"65,38341463","2002":"65,12878049","2003":"65,04780488","2004":"65,47097561","2005":"65,5297561","2006":"66,72756098","2007":"67,58682927","2008":"67,94926829","2009":"68,68463415","2010":"68,84121951","2011":"69,68390244","2012":"70,07219512","2013":"70,57878049","2014":"70,74365854","2015":"70,90853659","2016":"","Country Name":"Russia","Country Code":"RUS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"42,24929268","1961":"42,5487561","1962":"42,83770732","1963":"43,11312195","1964":"43,37053659","1965":"43,60141463","1966":"43,79726829","1967":"43,95960976","1968":"44,09146341","1969":"44,19982927","1970":"44,29026829","1971":"44,36480488","1972":"44,43797561","1973":"44,5297561","1974":"44,66214634","1975":"44,88458537","1976":"45,25253659","1977":"45,77641463","1978":"46,43670732","1979":"47,19287805","1980":"48,03743902","1981":"48,96592683","1982":"49,88736585","1983":"50,66280488","1984":"51,13270732","1985":"50,90595122","1986":"49,54036585","1987":"46,93741463","1988":"43,24017073","1989":"38,76734146","1990":"34,21180488","1991":"30,43560976","1992":"28,10704878","1993":"27,61270732","1994":"28,99992683","1995":"31,96439024","1996":"35,89958537","1997":"39,97836585","1998":"43,55226829","1999":"46,36156098","2000":"48,36060976","2001":"49,73597561","2002":"50,9115122","2003":"52,20802439","2004":"53,69368293","2005":"55,36658537","2006":"57,15278049","2007":"58,90234146","2008":"60,49380488","2009":"61,88834146","2010":"63,06556098","2011":"64,03158537","2012":"64,83546341","2013":"65,52270732","2014":"66,11334146","2015":"66,62087805","2016":"","Country Name":"Rwanda","Country Code":"RWA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,95918413","1961":"42,59928154","1962":"43,24321377","1963":"43,88639134","1964":"44,53611768","1965":"45,17868578","1966":"45,80669229","1967":"46,41328446","1968":"46,99678386","1969":"47,55954138","1970":"48,11404834","1971":"48,67544264","1972":"49,25857052","1973":"49,86917402","1974":"50,50209104","1975":"51,14601876","1976":"51,78695162","1977":"52,40561373","1978":"52,99056181","1979":"53,53511529","1980":"54,03490782","1981":"54,48621557","1982":"54,90540191","1983":"55,30151826","1984":"55,68395957","1985":"56,06361895","1986":"56,45294698","1987":"56,85899122","1988":"57,28560671","1989":"57,73411882","1990":"58,20399185","1991":"58,69239339","1992":"59,18845223","1993":"59,68450154","1994":"60,17598886","1995":"60,65818566","1996":"61,12772872","1997":"61,58483792","1998":"62,02892802","1999":"62,45947731","2000":"62,876685","2001":"63,28104402","2002":"63,67715634","2003":"64,06858717","2004":"64,45710161","2005":"64,84793714","2006":"65,2434613","2007":"65,64452281","2008":"66,04733525","2009":"66,44923186","2010":"66,84308693","2011":"67,22095963","2012":"67,57733562","2013":"67,90665104","2014":"68,20916845","2015":"68,48545298","2016":"","Country Name":"South Asia","Country Code":"SAS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,66626829","1961":"46,17439024","1962":"46,6945122","1963":"47,23614634","1964":"47,81126829","1965":"48,43839024","1966":"49,137","1967":"49,91512195","1968":"50,7752439","1969":"51,71387805","1970":"52,72453659","1971":"53,79721951","1972":"54,90895122","1973":"56,03621951","1974":"57,15856098","1975":"58,25743902","1976":"59,31936585","1977":"60,34085366","1978":"61,31687805","1979":"62,23943902","1980":"63,10207317","1981":"63,90531707","1982":"64,65468293","1983":"65,35712195","1984":"66,01556098","1985":"66,63134146","1986":"67,2067561","1987":"67,74273171","1988":"68,2452439","1989":"68,71782927","1990":"69,16460976","1991":"69,58978049","1992":"69,99507317","1993":"70,38214634","1994":"70,75160976","1995":"71,10502439","1996":"71,44192683","1997":"71,75919512","1998":"72,05421951","1999":"72,32390244","2000":"72,56165854","2001":"72,76092683","2002":"72,91912195","2003":"73,04068293","2004":"73,13207317","2005":"73,2047561","2006":"73,27226829","2007":"73,34763415","2008":"73,44139024","2009":"73,55807317","2010":"73,70014634","2011":"73,86360976","2012":"74,03846341","2013":"74,21821951","2014":"74,39739024","2015":"74,5744878","2016":"","Country Name":"Saudi Arabia","Country Code":"SAU","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"48,18763415","1961":"48,61153659","1962":"49,02746341","1963":"49,43792683","1964":"49,84387805","1965":"50,24836585","1966":"50,65336585","1967":"51,05785366","1968":"51,45782927","1969":"51,84829268","1970":"52,22121951","1971":"52,57014634","1972":"52,88753659","1973":"53,17043902","1974":"53,41631707","1975":"53,62373171","1976":"53,79414634","1977":"53,93258537","1978":"54,04907317","1979":"54,14907317","1980":"54,24112195","1981":"54,33168293","1982":"54,42478049","1983":"54,52436585","1984":"54,63543902","1985":"54,75797561","1986":"54,88946341","1987":"55,02736585","1988":"55,17017073","1989":"55,32139024","1990":"55,48695122","1991":"55,67485366","1992":"55,88858537","1993":"56,13268293","1994":"56,40568293","1995":"56,70560976","1996":"57,02802439","1997":"57,3644878","1998":"57,71056098","1999":"58,06429268","2000":"58,4242439","2001":"58,79395122","2002":"59,17692683","2003":"59,57463415","2004":"59,98407317","2005":"60,40673171","2006":"60,84209756","2007":"61,28709756","2008":"61,73419512","2009":"62,17578049","2010":"62,6007561","2011":"62,99702439","2012":"63,36004878","2013":"63,68578049","2014":"63,97473171","2015":"64,22941463","2016":"","Country Name":"Sudan","Country Code":"SDN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"38,206","1961":"38,3632439","1962":"38,446","1963":"38,4632439","1964":"38,43597561","1965":"38,39568293","1966":"38,37585366","1967":"38,41597561","1968":"38,55056098","1969":"38,80858537","1970":"39,22053659","1971":"39,80790244","1972":"40,55621951","1973":"41,44046341","1974":"42,43914634","1975":"43,5187561","1976":"44,64031707","1977":"45,76734146","1978":"46,86982927","1979":"47,92680488","1980":"48,9427561","1981":"49,93670732","1982":"50,93314634","1983":"51,93860976","1984":"52,93809756","1985":"53,90414634","1986":"54,80078049","1987":"55,59702439","1988":"56,26790244","1989":"56,80090244","1990":"57,18309756","1991":"57,4094878","1992":"57,50660976","1993":"57,51136585","1994":"57,4562439","1995":"57,37860976","1996":"57,31634146","1997":"57,29734146","1998":"57,34912195","1999":"57,49468293","2000":"57,7527561","2001":"58,13204878","2002":"58,61221951","2003":"59,17182927","2004":"59,79729268","2005":"60,47531707","2006":"61,19304878","2007":"61,93317073","2008":"62,67502439","2009":"63,39863415","2010":"64,08363415","2011":"64,71331707","2012":"65,28558537","2013":"65,80073171","2014":"66,25782927","2015":"66,66143902","2016":"","Country Name":"Senegal","Country Code":"SEN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"65,65982927","1961":"66,08719512","1962":"66,4322439","1963":"66,70080488","1964":"66,91021951","1965":"67,08580488","1966":"67,25595122","1967":"67,44573171","1968":"67,67373171","1969":"67,95107317","1970":"68,27941463","1971":"68,65046341","1972":"69,04290244","1973":"69,44031707","1974":"69,83478049","1975":"70,21970732","1976":"70,59397561","1977":"70,96090244","1978":"71,32334146","1979":"71,68273171","1980":"72,1902439","1981":"72,58780488","1982":"72,68780488","1983":"73,03658537","1984":"73,2902439","1985":"73,8902439","1986":"74,24634146","1987":"74,54878049","1988":"74,69756098","1989":"74,94634146","1990":"75,29512195","1991":"75,64634146","1992":"75,94634146","1993":"76,04634146","1994":"76,19756098","1995":"76,29512195","1996":"76,59512195","1997":"76,89756098","1998":"77,3","1999":"77,55121951","2000":"77,95121951","2001":"78,25121951","2002":"78,55121951","2003":"79,03902439","2004":"79,4902439","2005":"79,9902439","2006":"80,14146341","2007":"80,44146341","2008":"80,7902439","2009":"81,24146341","2010":"81,54146341","2011":"81,74390244","2012":"81,99512195","2013":"82,24634146","2014":"82,49512195","2015":"82,59512195","2016":"","Country Name":"Singapore","Country Code":"SGP","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"49,38170732","1961":"49,88170732","1962":"50,38170732","1963":"50,88170732","1964":"51,38170732","1965":"51,88170732","1966":"52,38170732","1967":"52,88170732","1968":"53,38170732","1969":"53,88170732","1970":"54,38770732","1971":"54,90668293","1972":"55,43863415","1973":"55,97709756","1974":"56,51056098","1975":"57,03053659","1976":"57,52902439","1977":"57,98956098","1978":"58,38965854","1979":"58,70736585","1980":"58,89073171","1981":"58,88336585","1982":"58,6787561","1983":"58,30139024","1984":"57,79468293","1985":"57,24402439","1986":"56,7497561","1987":"56,4012439","1988":"56,26090244","1989":"56,35570732","1990":"56,68170732","1991":"57,20156098","1992":"57,83187805","1993":"58,50273171","1994":"59,18053659","1995":"59,84560976","1996":"60,49617073","1997":"61,14602439","1998":"61,80517073","1999":"62,46619512","2000":"63,12136585","2001":"63,76402439","2002":"64,39004878","2003":"64,99619512","2004":"65,57904878","2005":"66,13660976","2006":"66,6717561","2007":"67,18768293","2008":"67,68565854","2009":"68,16556098","2010":"68,62282927","2011":"69,05343902","2012":"69,45295122","2013":"69,82241463","2014":"70,16231707","2015":"70,47668293","2016":"","Country Name":"Solomon Is.","Country Code":"SLB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"30,33153659","1961":"30,54043902","1962":"30,75278049","1963":"30,97756098","1964":"31,23039024","1965":"31,54263415","1966":"31,94821951","1967":"32,46282927","1968":"33,08695122","1969":"33,81039024","1970":"34,60909756","1971":"35,45190244","1972":"36,2952439","1973":"37,09973171","1974":"37,83678049","1975":"38,49307317","1976":"39,06802439","1977":"39,57226829","1978":"40,01226829","1979":"40,37673171","1980":"40,6502439","1981":"40,81770732","1982":"40,87036585","1983":"40,80695122","1984":"40,62831707","1985":"40,32480488","1986":"39,88626829","1987":"39,33065854","1988":"38,69407317","1989":"38,01858537","1990":"37,35341463","1991":"36,74834146","1992":"36,24658537","1993":"35,8857561","1994":"35,70139024","1995":"35,72478049","1996":"35,97414634","1997":"36,42619512","1998":"37,04680488","1999":"37,81253659","2000":"38,69014634","2001":"39,6454878","2002":"40,64290244","2003":"41,64912195","2004":"42,63919512","2005":"43,60307317","2006":"44,54507317","2007":"45,48139024","2008":"46,41517073","2009":"47,33326829","2010":"48,212","2011":"49,02426829","2012":"49,75358537","2013":"50,39253659","2014":"50,94260976","2015":"51,41285366","2016":"","Country Name":"Sierra Leone","Country Code":"SLE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"49,94792683","1961":"50,61226829","1962":"51,23868293","1963":"51,82309756","1964":"52,36353659","1965":"52,865","1966":"53,33660976","1967":"53,78443902","1968":"54,21353659","1969":"54,62287805","1970":"54,99982927","1971":"55,33170732","1972":"55,60790244","1973":"55,82741463","1974":"55,99529268","1975":"56,11407317","1976":"56,18782927","1977":"56,23678049","1978":"56,28929268","1979":"56,37268293","1980":"56,52992683","1981":"56,79897561","1982":"57,19753659","1983":"57,73165854","1984":"58,39982927","1985":"59,19397561","1986":"60,09985366","1987":"61,074","1988":"62,07146341","1989":"63,05641463","1990":"63,988","1991":"64,83153659","1992":"65,57797561","1993":"66,22282927","1994":"66,76304878","1995":"67,20519512","1996":"67,56482927","1997":"67,87363415","1998":"68,15831707","1999":"68,43541463","2000":"68,71704878","2001":"69,00570732","2002":"69,29787805","2003":"69,58953659","2004":"69,88273171","2005":"70,17892683","2006":"70,47919512","2007":"70,78","2008":"71,08034146","2009":"71,37773171","2010":"71,67019512","2011":"71,9552439","2012":"72,23185366","2013":"72,49853659","2014":"72,75529268","2015":"73,00309756","2016":"","Country Name":"El Salvador","Country Code":"SLV","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"79,1195122","1997":"79,47317073","1998":"80,17317073","1999":"80,52439024","2000":"80,6195122","2001":"80,97317073","2002":"81,1195122","2003":"81,2195122","2004":"81,72195122","2005":"81,97560976","2006":"82,1804878","2007":"82,50609756","2008":"82,83170732","2009":"82,99554324","2010":"83,15937916","2011":"83,32321508","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"San Marino","Country Code":"SMR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"36,96587805","1961":"37,36229268","1962":"37,76121951","1963":"38,16217073","1964":"38,56512195","1965":"38,96909756","1966":"39,37207317","1967":"39,77253659","1968":"40,1685122","1969":"40,56046341","1970":"40,94792683","1971":"41,33287805","1972":"41,71685366","1973":"42,09985366","1974":"42,48185366","1975":"42,86336585","1976":"43,24687805","1977":"43,62990244","1978":"44,00839024","1979":"44,37739024","1980":"44,73536585","1981":"45,08285366","1982":"45,41434146","1983":"45,71934146","1984":"45,98436585","1985":"46,16790244","1986":"46,21997561","1987":"46,13156098","1988":"45,92517073","1989":"45,64626829","1990":"45,38934146","1991":"45,27087805","1992":"45,37231707","1993":"45,73321951","1994":"46,34804878","1995":"47,16182927","1996":"48,07760976","1997":"48,97643902","1998":"49,76382927","1999":"50,40126829","2000":"50,87826829","2001":"51,22280488","2002":"51,50185366","2003":"51,77190244","2004":"52,05290244","2005":"52,35485366","2006":"52,67678049","2007":"53,00517073","2008":"53,33153659","2009":"53,65839024","2010":"53,99119512","2011":"54,3354878","2012":"54,6957561","2013":"55,0724878","2014":"55,46568293","2015":"55,87285366","2016":"","Country Name":"Somalia","Country Code":"SOM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"71,48780488","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"72,03902439","1998":"","1999":"","2000":"71,58292683","2001":"72,23414634","2002":"72,28536585","2003":"72,43658537","2004":"72,68292683","2005":"72,83414634","2006":"73,38536585","2007":"73,63170732","2008":"73,88536585","2009":"73,98536585","2010":"74,33658537","2011":"74,53658537","2012":"74,83658537","2013":"75,18536585","2014":"75,33658537","2015":"75,48780488","2016":"","Country Name":"Serbia","Country Code":"SRB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"40,36214263","1961":"40,80112303","1962":"41,23090332","1963":"41,64964624","1964":"42,05759314","1965":"42,45788192","1966":"42,85478443","1967":"43,2529273","1968":"43,65570445","1969":"44,06439825","1970":"44,478725","1971":"44,89789575","1972":"45,31709551","1973":"45,73066872","1974":"46,13373326","1975":"46,52207077","1976":"46,8934121","1977":"47,2474822","1978":"47,58456015","1979":"47,90486336","1980":"48,20903068","1981":"48,49804789","1982":"48,77204399","1983":"49,02867801","1984":"49,26442575","1985":"49,46940763","1986":"49,63269361","1987":"49,74835734","1988":"49,81684167","1989":"49,846653","1990":"49,85147113","1991":"49,84779026","1992":"49,8478211","1993":"49,85756477","1994":"49,87627109","1995":"49,90363593","1996":"49,94486588","1997":"50,01143276","1998":"50,11728851","1999":"50,27765486","2000":"50,51250294","2001":"50,83722093","2002":"51,26225496","2003":"51,78449939","2004":"52,39550035","2005":"53,08299779","2006":"53,83016295","2007":"54,6111601","2008":"55,39848436","2009":"56,17133041","2010":"56,90969451","2011":"57,60161835","2012":"58,24755232","2013":"58,84731309","2014":"59,39858813","2015":"59,90058785","2016":"","Country Name":"Sub-Saharan Africa (excluding high income)","Country Code":"SSA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"31,72270732","1961":"32,14865854","1962":"32,57160976","1963":"32,99556098","1964":"33,4215122","1965":"33,84646341","1966":"34,26492683","1967":"34,67290244","1968":"35,06639024","1969":"35,44636585","1970":"35,82082927","1971":"36,19878049","1972":"36,58668293","1973":"36,98456098","1974":"37,38690244","1975":"37,7742439","1976":"38,12412195","1977":"38,42153659","1978":"38,66402439","1979":"38,86058537","1980":"39,03168293","1981":"39,20280488","1982":"39,40641463","1983":"39,6664878","1984":"39,99953659","1985":"40,41753659","1986":"40,92602439","1987":"41,50802439","1988":"42,14404878","1989":"42,81963415","1990":"43,5187561","1991":"44,22592683","1992":"44,92514634","1993":"45,60287805","1994":"46,24665854","1995":"46,8455122","1996":"47,39395122","1997":"47,89846341","1998":"48,36758537","1999":"48,80629268","2000":"49,21907317","2001":"49,61190244","2002":"49,9932439","2003":"50,37409756","2004":"50,76241463","2005":"51,17014634","2006":"51,60731707","2007":"52,07439024","2008":"52,56987805","2009":"53,0912439","2010":"53,63197561","2011":"54,18307317","2012":"54,733","2013":"55,27231707","2014":"55,7964878","2015":"56,30258537","2016":"","Country Name":"S. Sudan","Country Code":"SSD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"40,36214263","1961":"40,80112303","1962":"41,23090332","1963":"41,64964624","1964":"42,05759314","1965":"42,45788192","1966":"42,85478443","1967":"43,2529273","1968":"43,65570445","1969":"44,06439825","1970":"44,478725","1971":"44,89789575","1972":"45,31709551","1973":"45,73066872","1974":"46,13373326","1975":"46,52207077","1976":"46,8934121","1977":"47,2474822","1978":"47,58456015","1979":"47,90486336","1980":"48,20903068","1981":"48,49804789","1982":"48,77518852","1983":"49,02867801","1984":"49,26442575","1985":"49,46940763","1986":"49,63269361","1987":"49,75126874","1988":"49,81684167","1989":"49,846653","1990":"49,85147113","1991":"49,84779026","1992":"49,85054649","1993":"49,85756477","1994":"49,87627109","1995":"49,90363593","1996":"49,94486588","1997":"50,01410677","1998":"50,11728851","1999":"50,27765486","2000":"50,51250294","2001":"50,83722093","2002":"51,26482756","2003":"51,78669705","2004":"52,39773954","2005":"53,08506134","2006":"53,83214224","2007":"54,61311643","2008":"55,40034528","2009":"56,17305571","2010":"56,9113617","2011":"57,60308526","2012":"58,24907519","2013":"58,8486612","2014":"59,39987928","2015":"59,90182611","2016":"","Country Name":"Sub-Saharan Africa","Country Code":"SSF","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"54,7221853","1961":"55,18855713","1962":"55,63544858","1963":"56,04357034","1964":"56,43634721","1965":"56,79507484","1966":"57,11306786","1967":"57,42367754","1968":"57,72371493","1969":"58,01815765","1970":"58,32005071","1971":"58,61573179","1972":"58,91858648","1973":"59,20250759","1974":"59,48529927","1975":"59,7920378","1976":"60,12775405","1977":"60,47252469","1978":"60,85364076","1979":"61,24351631","1980":"61,62802823","1981":"61,99516059","1982":"62,40691782","1983":"62,67498408","1984":"62,94874271","1985":"63,20224163","1986":"63,47625702","1987":"63,77050783","1988":"63,89698907","1989":"64,03328838","1990":"64,13434229","1991":"64,22438133","1992":"64,27022772","1993":"64,12357617","1994":"63,95447252","1995":"63,86576364","1996":"63,79654564","1997":"63,66226429","1998":"63,37466528","1999":"63,24430102","2000":"63,18001221","2001":"63,14224678","2002":"63,29544226","2003":"63,42062523","2004":"63,71618111","2005":"64,1047214","2006":"64,53711365","2007":"65,0444814","2008":"65,58863016","2009":"66,14156483","2010":"66,64989947","2011":"67,11482852","2012":"67,52868256","2013":"67,92739376","2014":"68,26977195","2015":"68,57721416","2016":"","Country Name":"Small states","Country Code":"SST","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"50,45136585","1961":"51,03109756","1962":"51,59729268","1963":"52,146","1964":"52,6747561","1965":"53,18970732","1966":"53,6994878","1967":"54,21563415","1968":"54,74714634","1969":"55,29597561","1970":"55,86846341","1971":"56,47297561","1972":"57,09980488","1973":"57,7337561","1974":"58,3582439","1975":"58,94058537","1976":"59,44717073","1977":"59,86007317","1978":"60,17095122","1979":"60,38292683","1980":"60,51178049","1981":"60,58629268","1982":"60,64217073","1983":"60,70858537","1984":"60,80260976","1985":"60,93021951","1986":"61,08829268","1987":"61,26009756","1988":"61,43295122","1989":"61,6042439","1990":"61,77143902","1991":"61,93453659","1992":"62,09509756","1993":"62,25514634","1994":"62,41470732","1995":"62,57026829","1996":"62,71831707","1997":"62,85990244","1998":"62,99746341","1999":"63,13702439","2000":"63,29253659","2001":"63,4795122","2002":"63,70492683","2003":"63,96973171","2004":"64,26795122","2005":"64,58356098","2006":"64,89604878","2007":"65,18492683","2008":"65,43570732","2009":"65,64292683","2010":"65,80860976","2011":"65,94080488","2012":"66,05653659","2013":"66,17134146","2014":"66,29070732","2015":"66,41665854","2016":"","Country Name":"Sao Tome and Principe","Country Code":"STP","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"59,68012195","1961":"60,047","1962":"60,40843902","1963":"60,77046341","1964":"61,13602439","1965":"61,5065122","1966":"61,87926829","1967":"62,24770732","1968":"62,60634146","1969":"62,95068293","1970":"63,27741463","1971":"63,58029268","1972":"63,86043902","1973":"64,1204878","1974":"64,36385366","1975":"64,60134146","1976":"64,84368293","1977":"65,09907317","1978":"65,36990244","1979":"65,65314634","1980":"65,94043902","1981":"66,21743902","1982":"66,4704878","1983":"66,69029268","1984":"66,87304878","1985":"67,02029268","1986":"67,13912195","1987":"67,23939024","1988":"67,3304878","1989":"67,41785366","1990":"67,50187805","1991":"67,5804878","1992":"67,65107317","1993":"67,71207317","1994":"67,76397561","1995":"67,80573171","1996":"67,83434146","1997":"67,85187805","1998":"67,86641463","1999":"67,8864878","2000":"67,92917073","2001":"68,01197561","2002":"68,14397561","2003":"68,32963415","2004":"68,56597561","2005":"68,846","2006":"69,15721951","2007":"69,48007317","2008":"69,796","2009":"70,09441463","2010":"70,3642439","2011":"70,60039024","2012":"70,80682927","2013":"70,98853659","2014":"71,14697561","2015":"71,28619512","2016":"","Country Name":"Suriname","Country Code":"SUR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,92365854","1961":"70,25085366","1962":"70,47229268","1963":"70,59492683","1964":"70,63278049","1965":"70,60336585","1966":"70,5252439","1967":"70,41853659","1968":"70,30682927","1969":"70,20570732","1970":"70,1342439","1971":"70,0994878","1972":"70,09892683","1973":"70,12507317","1974":"70,17590244","1975":"70,24487805","1976":"70,32246341","1977":"70,39860976","1978":"70,4652439","1979":"70,51990244","1980":"70,40853659","1981":"70,62926829","1982":"70,68902439","1983":"70,47902439","1984":"70,75097561","1985":"70,73463415","1986":"71,02121951","1987":"71,08878049","1988":"71,20780488","1989":"71,02634146","1990":"70,93268293","1991":"70,88292683","1992":"71,79512195","1993":"72,44878049","1994":"72,3","1995":"72,25365854","1996":"72,65365854","1997":"72,70487805","1998":"72,55121951","1999":"72,90243902","2000":"73,05121951","2001":"73,40243902","2002":"73,60487805","2003":"73,60487805","2004":"73,95853659","2005":"73,90487805","2006":"74,20487805","2007":"74,20731707","2008":"74,70487805","2009":"74,9097561","2010":"75,11219512","2011":"75,95853659","2012":"76,1097561","2013":"76,41219512","2014":"76,81219512","2015":"77,21219512","2016":"","Country Name":"Slovakia","Country Code":"SVK","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,97804878","1961":"68,97804878","1962":"68,97804878","1963":"68,62195122","1964":"68,66341463","1965":"68,36585366","1966":"69,01219512","1967":"69,36585366","1968":"68,91707317","1969":"68,36097561","1970":"68,6097561","1971":"68,83414634","1972":"69,05853659","1973":"69,40487805","1974":"70,16097561","1975":"70,35853659","1976":"70,30731707","1977":"70,55609756","1978":"70,70243902","1979":"70,85365854","1980":"71,10487805","1981":"71,20487805","1982":"71,05365854","1983":"70,54146341","1984":"70,90243902","1985":"71,35121951","1986":"71,80243902","1987":"72,00243902","1988":"72,44634146","1989":"72,70487805","1990":"73,20487805","1991":"73,35365854","1992":"73,30487805","1993":"73,25365854","1994":"73,40487805","1995":"73,95853659","1996":"74,45853659","1997":"74,70731707","1998":"74,80731707","1999":"75,0097561","2000":"75,41219512","2001":"75,75853659","2002":"76,00731707","2003":"76,85853659","2004":"77,20731707","2005":"77,61219512","2006":"78,08658537","2007":"78,56097561","2008":"78,76585366","2009":"78,97073171","2010":"79,42195122","2011":"79,97073171","2012":"80,12439024","2013":"80,32195122","2014":"81,07804878","2015":"81,07804878","2016":"","Country Name":"Slovenia","Country Code":"SVN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"73,00560976","1961":"73,47439024","1962":"73,3504878","1963":"73,55536585","1964":"73,73317073","1965":"73,86170732","1966":"74,07853659","1967":"74,12243902","1968":"73,97292683","1969":"74,08487805","1970":"74,64926829","1971":"74,62390244","1972":"74,71804878","1973":"74,86731707","1974":"74,9804878","1975":"74,98463415","1976":"74,96926829","1977":"75,3797561","1978":"75,46902439","1979":"75,52414634","1980":"75,74097561","1981":"76,02609756","1982":"76,32731707","1983":"76,55170732","1984":"76,81585366","1985":"76,66780488","1986":"76,93121951","1987":"77,09219512","1988":"76,97926829","1989":"77,72682927","1990":"77,53682927","1991":"77,66682927","1992":"77,99878049","1993":"78,0604878","1994":"78,6502439","1995":"78,7404878","1996":"78,95902439","1997":"79,19756098","1998":"79,33902439","1999":"79,44146341","2000":"79,64390244","2001":"79,79512195","2002":"79,84634146","2003":"80,09512195","2004":"80,49756098","2005":"80,54634146","2006":"80,74878049","2007":"80,9","2008":"81,1","2009":"81,35121951","2010":"81,45121951","2011":"81,80243902","2012":"81,70487805","2013":"81,95609756","2014":"82,25365854","2015":"82,55121951","2016":"","Country Name":"Sweden","Country Code":"SWE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"44,23878049","1961":"44,53487805","1962":"44,81946341","1963":"45,10056098","1964":"45,38865854","1965":"45,7007561","1966":"46,05231707","1967":"46,45231707","1968":"46,90429268","1969":"47,40973171","1970":"47,96017073","1971":"48,54460976","1972":"49,14560976","1973":"49,75317073","1974":"50,36026829","1975":"50,96892683","1976":"51,58507317","1977":"52,21819512","1978":"52,8722439","1979":"53,54770732","1980":"54,25356098","1981":"55,00080488","1982":"55,78046341","1983":"56,57353659","1984":"57,35402439","1985":"58,09792683","1986":"58,78519512","1987":"59,38382927","1988":"59,85387805","1989":"60,15485366","1990":"60,2252439","1991":"60,00756098","1992":"59,49282927","1993":"58,69517073","1994":"57,64021951","1995":"56,3452439","1996":"54,83653659","1997":"53,19121951","1998":"51,5097561","1999":"49,8884878","2000":"48,44217073","2001":"47,27053659","2002":"46,42112195","2003":"45,92402439","2004":"45,80341463","2005":"46,07482927","2006":"46,72782927","2007":"47,67997561","2008":"48,83509756","2009":"50,11860976","2010":"51,44819512","2011":"52,75373171","2012":"53,99043902","2013":"55,11929268","2014":"56,10146341","2015":"56,91236585","2016":"","Country Name":"Swaziland","Country Code":"SWZ","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"74,54390244","2008":"74,53658537","2009":"75,58780488","2010":"","2011":"","2012":"73,05365854","2013":"","2014":"","2015":"","2016":"","Country Name":"Sint Maarten (Dutch part)","Country Code":"SXM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"68,68292683","1983":"","1984":"","1985":"","1986":"","1987":"69,73195122","1988":"","1989":"","1990":"","1991":"","1992":"70,67073171","1993":"","1994":"","1995":"","1996":"","1997":"71,41463415","1998":"","1999":"","2000":"","2001":"","2002":"72,95365854","2003":"71,02926829","2004":"72,6097561","2005":"72,13170732","2006":"72,21707317","2007":"73,19268293","2008":"73,16341463","2009":"73,03414634","2010":"73,19756098","2011":"72,72439024","2012":"74,22682927","2013":"73,1195122","2014":"73,22926829","2015":"73,22926829","2016":"","Country Name":"Seychelles","Country Code":"SYC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"51,99685366","1961":"52,59504878","1962":"53,20278049","1963":"53,82360976","1964":"54,46104878","1965":"55,12158537","1966":"55,81170732","1967":"56,53239024","1968":"57,28009756","1969":"58,04931707","1970":"58,83202439","1971":"59,6172439","1972":"60,39346341","1973":"61,15219512","1974":"61,88543902","1975":"62,59117073","1976":"63,26841463","1977":"63,92368293","1978":"64,56041463","1979":"65,17860976","1980":"65,77921951","1981":"66,36370732","1982":"66,93153659","1983":"67,47968293","1984":"68,00765854","1985":"68,5104878","1986":"68,98370732","1987":"69,42434146","1988":"69,83195122","1989":"70,20702439","1990":"70,55204878","1991":"70,86895122","1992":"71,16373171","1993":"71,44036585","1994":"71,70436585","1995":"71,9567561","1996":"72,20007317","1997":"72,43290244","1998":"72,65673171","1999":"72,87363415","2000":"73,10229268","2001":"73,36704878","2002":"73,66680488","2003":"73,98178049","2004":"74,28002439","2005":"74,48192683","2006":"74,49219512","2007":"74,26519512","2008":"73,79846341","2009":"73,1294878","2010":"72,33982927","2011":"71,53943902","2012":"70,8514878","2013":"70,37543902","2014":"70,16321951","2015":"70,25265854","2016":"","Country Name":"Syria","Country Code":"SYR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Turks and Caicos Islands","Country Code":"TCA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"38,00819512","1961":"38,2644878","1962":"38,51939024","1963":"38,77536585","1964":"39,03836585","1965":"39,3217561","1966":"39,64039024","1967":"40,00163415","1968":"40,40597561","1969":"40,84541463","1970":"41,30560976","1971":"41,76570732","1972":"42,20541463","1973":"42,61031707","1974":"42,97392683","1975":"43,29663415","1976":"43,58626829","1977":"43,85914634","1978":"44,12763415","1979":"44,3972439","1980":"44,67204878","1981":"44,95368293","1982":"45,23882927","1983":"45,52060976","1984":"45,79453659","1985":"46,05256098","1986":"46,28656098","1987":"46,49095122","1988":"46,66409756","1989":"46,80656098","1990":"46,92385366","1991":"47,02558537","1992":"47,12136585","1993":"47,21731707","1994":"47,3144878","1995":"47,4065122","1996":"47,48192683","1997":"47,53270732","1998":"47,55929268","1999":"47,56860976","2000":"47,57058537","2001":"47,58112195","2002":"47,61509756","2003":"47,69090244","2004":"47,82241463","2005":"48,0275122","2006":"48,32207317","2007":"48,70109756","2008":"49,15368293","2009":"49,66336585","2010":"50,20634146","2011":"50,7522439","2012":"51,2747561","2013":"51,7545122","2014":"52,18107317","2015":"52,55395122","2016":"","Country Name":"Chad","Country Code":"TCD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,72315642","1961":"46,16179468","1962":"46,87623469","1963":"47,903069","1964":"49,24798218","1965":"50,83429568","1966":"52,54500467","1967":"54,24527113","1968":"55,8154844","1969":"57,19808241","1970":"58,36694147","1971":"59,33893921","1972":"60,183044","1973":"60,95922333","1974":"61,68589425","1975":"62,37504605","1976":"63,03267555","1977":"63,65039924","1978":"64,22351969","1979":"64,74998908","1980":"65,22790664","1981":"65,65878656","1982":"66,04875841","1983":"66,39994099","1984":"66,71767356","1985":"67,00587327","1986":"67,26662768","1987":"67,50163725","1988":"67,7146291","1989":"67,91238739","1990":"68,10003941","1991":"68,28341806","1992":"68,4663644","1993":"68,65723634","1994":"68,86203448","1995":"69,09120746","1996":"69,35310165","1997":"69,64694954","1998":"69,96932494","1999":"70,31527962","2000":"70,67723369","2001":"71,04588091","2002":"71,40940517","2003":"71,75755508","2004":"72,08461739","2005":"72,38507081","2006":"72,65773106","2007":"72,90613215","2008":"73,13580954","2009":"73,34833986","2010":"73,5442134","2011":"73,72732328","2012":"73,89902227","2013":"74,06398866","2014":"74,22379227","2015":"74,38078","2016":"","Country Name":"East Asia & Pacific (IDA & IBRD countries)","Country Code":"TEA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"63,8220684","1961":"64,29595945","1962":"64,61389253","1963":"65,03306523","1964":"65,32512421","1965":"65,60328812","1966":"65,7927297","1967":"65,86039093","1968":"66,06579457","1969":"66,09476833","1970":"66,32664874","1971":"66,48414402","1972":"66,62367801","1973":"66,72244336","1974":"66,859706","1975":"66,65398688","1976":"66,65128965","1977":"66,63646641","1978":"66,68796152","1979":"66,67155471","1980":"66,7191344","1981":"67,00062067","1982":"67,30565565","1983":"67,40090559","1984":"67,37655013","1985":"67,72759554","1986":"68,43982712","1987":"68,59782172","1988":"68,70376118","1989":"68,63987155","1990":"68,51875166","1991":"68,26719723","1992":"67,73231115","1993":"67,01138465","1994":"66,80349818","1995":"66,87143945","1996":"67,34986691","1997":"67,92450398","1998":"68,2628432","1999":"68,13996774","2000":"68,24035788","2001":"68,44897041","2002":"68,49714621","2003":"68,62307161","2004":"68,94600374","2005":"69,07836694","2006":"69,65673271","2007":"70,1219901","2008":"70,4131024","2009":"70,96717347","2010":"71,2870766","2011":"71,83632601","2012":"72,13327428","2013":"72,50947789","2014":"72,74292048","2015":"72,94809221","2016":"","Country Name":"Europe & Central Asia (IDA & IBRD countries)","Country Code":"TEC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"40,27282927","1961":"40,9164878","1962":"41,55509756","1963":"42,18917073","1964":"42,81921951","1965":"43,44470732","1966":"44,06863415","1967":"44,68946341","1968":"45,30821951","1969":"45,92341463","1970":"46,53509756","1971":"47,14229268","1972":"47,74304878","1973":"48,33741463","1974":"48,92336585","1975":"49,50241463","1976":"50,0774878","1977":"50,64756098","1978":"51,21163415","1979":"51,76473171","1980":"52,30441463","1981":"52,82819512","1982":"53,32965854","1983":"53,80241463","1984":"54,23904878","1985":"54,63473171","1986":"54,98817073","1987":"55,29639024","1988":"55,55180488","1989":"55,7442439","1990":"55,84843902","1991":"55,83502439","1992":"55,69768293","1993":"55,45019512","1994":"55,11343902","1995":"54,72487805","1996":"54,32760976","1997":"53,96990244","1998":"53,69","1999":"53,51504878","2000":"53,45970732","2001":"53,52260976","2002":"53,6787561","2003":"53,90812195","2004":"54,20419512","2005":"54,57290244","2006":"55,02312195","2007":"55,55370732","2008":"56,15007317","2009":"56,79068293","2010":"57,4425122","2011":"58,06860976","2012":"58,64456098","2013":"59,15046341","2014":"59,57634146","2015":"59,92370732","2016":"","Country Name":"Togo","Country Code":"TGO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"54,69931707","1961":"55,23273171","1962":"55,74521951","1963":"56,23239024","1964":"56,6942439","1965":"57,13578049","1966":"57,56636585","1967":"57,99982927","1968":"58,44502439","1969":"58,90741463","1970":"59,39053659","1971":"59,89385366","1972":"60,41202439","1973":"60,93812195","1974":"61,46819512","1975":"61,99426829","1976":"62,50436585","1977":"62,99597561","1978":"63,47463415","1979":"63,94841463","1980":"64,44643902","1981":"65,00739024","1982":"65,64729268","1983":"66,36209756","1984":"67,13117073","1985":"67,90778049","1986":"68,63160976","1987":"69,24990244","1988":"69,7275122","1989":"70,05241463","1990":"70,23060976","1991":"70,2872439","1992":"70,27307317","1993":"70,23743902","1994":"70,20702439","1995":"70,20060976","1996":"70,22787805","1997":"70,28239024","1998":"70,36263415","1999":"70,47556098","2000":"70,63260976","2001":"70,84319512","2002":"71,10507317","2003":"71,41197561","2004":"71,75670732","2005":"72,1265122","2006":"72,50863415","2007":"72,88753659","2008":"73,25026829","2009":"73,58741463","2010":"73,89419512","2011":"74,16739024","2012":"74,41680488","2013":"74,64765854","2014":"74,86404878","2015":"75,068","2016":"","Country Name":"Thailand","Country Code":"THA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"56,15353659","1961":"56,56260976","1962":"56,97468293","1963":"57,3887561","1964":"57,80182927","1965":"58,20892683","1966":"58,60553659","1967":"58,98717073","1968":"59,35034146","1969":"59,69402439","1970":"60,01473171","1971":"60,31397561","1972":"60,59473171","1973":"60,861","1974":"61,11519512","1975":"61,36078049","1976":"61,60065854","1977":"61,83626829","1978":"62,06912195","1979":"62,29926829","1980":"62,53439024","1981":"62,7827561","1982":"63,04097561","1983":"63,2984878","1984":"63,53960976","1985":"63,7257561","1986":"63,81017073","1987":"63,7734878","1988":"63,62214634","1989":"63,3804878","1990":"63,10378049","1991":"62,86409756","1992":"62,72690244","1993":"62,73536585","1994":"62,90514634","1995":"63,22456098","1996":"63,65858537","1997":"64,14478049","1998":"64,63285366","1999":"65,10187805","2000":"65,54360976","2001":"65,96646341","2002":"66,39070732","2003":"66,82956098","2004":"67,28109756","2005":"67,73839024","2006":"68,19407317","2007":"68,63770732","2008":"69,05787805","2009":"69,44909756","2010":"69,80236585","2011":"70,11360976","2012":"70,38473171","2013":"70,62119512","2014":"70,82697561","2015":"71,00712195","2016":"","Country Name":"Tajikistan","Country Code":"TJK","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"54,45868293","1961":"54,87119512","1962":"55,28719512","1963":"55,70570732","1964":"56,12273171","1965":"56,5352439","1966":"56,93726829","1967":"57,32529268","1968":"57,69380488","1969":"58,03931707","1970":"58,35782927","1971":"58,64531707","1972":"58,90380488","1973":"59,14029268","1974":"59,35926829","1975":"59,5732439","1976":"59,79419512","1977":"60,03163415","1978":"60,28858537","1979":"60,56553659","1980":"60,86056098","1981":"61,1692439","1982":"61,47807317","1983":"61,77253659","1984":"62,04453659","1985":"62,27792683","1986":"62,45897561","1987":"62,58707317","1988":"62,66465854","1989":"62,6987561","1990":"62,70146341","1991":"62,68890244","1992":"62,67934146","1993":"62,68846341","1994":"62,72787805","1995":"62,80170732","1996":"62,91","1997":"63,04468293","1998":"63,20070732","1999":"63,37704878","2000":"63,57717073","2001":"63,80556098","2002":"64,06263415","2003":"64,34682927","2004":"64,65312195","2005":"64,97646341","2006":"65,31187805","2007":"65,65131707","2008":"65,9857561","2009":"66,30714634","2010":"66,60539024","2011":"66,87290244","2012":"67,10912195","2013":"67,31404878","2014":"67,49068293","2015":"67,64104878","2016":"","Country Name":"Turkmenistan","Country Code":"TKM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"55,63864137","1961":"56,12269682","1962":"56,58771097","1963":"57,03367815","1964":"57,46346779","1965":"57,88261993","1966":"58,29741061","1967":"58,71330289","1968":"59,13356982","1969":"59,55992406","1970":"59,98976828","1971":"60,41880213","1972":"60,84077282","1973":"61,25182401","1974":"61,65107186","1975":"62,03979687","1976":"62,42189657","1977":"62,80185988","1978":"63,1828906","1979":"63,56615309","1980":"63,95050606","1981":"64,33341786","1982":"64,71321671","1983":"65,08373308","1984":"65,44874937","1985":"65,8071758","1986":"66,15933028","1987":"66,50892148","1988":"66,85556535","1989":"67,20482475","1990":"67,55971199","1991":"67,92453396","1992":"68,3010356","1993":"68,68559223","1994":"69,07847074","1995":"69,47468268","1996":"69,86977781","1997":"70,25864396","1998":"70,63373824","1999":"70,99399064","2000":"71,33540117","2001":"71,6569172","2002":"71,96120239","2003":"72,24936437","2004":"72,52528734","2005":"72,7908023","2006":"73,04910848","2007":"73,302092","2008":"73,55188818","2009":"73,79845702","2010":"74,0420487","2011":"74,28091804","2012":"74,5132759","2013":"74,73790151","2014":"74,95507474","2015":"75,16584183","2016":"","Country Name":"Latin America & the Caribbean (IDA & IBRD countries)","Country Code":"TLA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"33,73712195","1961":"34,23756098","1962":"34,73904878","1963":"35,24153659","1964":"35,7434878","1965":"36,28290244","1966":"36,90478049","1967":"37,60660976","1968":"38,34587805","1969":"39,0515122","1970":"39,53887805","1971":"39,5852439","1972":"39,09809756","1973":"38,0925122","1974":"36,67814634","1975":"35,11341463","1976":"33,73734146","1977":"32,85026829","1978":"32,65173171","1979":"33,19812195","1980":"34,43595122","1981":"36,1985122","1982":"38,18621951","1983":"40,14317073","1984":"41,94385366","1985":"43,49497561","1986":"44,7665122","1987":"45,83912195","1988":"46,79234146","1989":"47,65646341","1990":"48,48473171","1991":"49,34426829","1992":"50,28026829","1993":"51,31841463","1994":"52,46341463","1995":"53,68831707","1996":"54,94312195","1997":"56,1655122","1998":"57,31087805","1999":"58,3657561","2000":"59,34697561","2001":"60,29058537","2002":"61,23763415","2003":"62,20790244","2004":"63,19297561","2005":"64,15560976","2006":"65,04636585","2007":"65,82073171","2008":"66,45187805","2009":"66,9387561","2010":"67,30046341","2011":"67,57229268","2012":"67,80414634","2013":"68,03782927","2014":"68,29295122","2015":"68,58002439","2016":"","Country Name":"Timor-Leste","Country Code":"TLS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,62043575","1961":"47,20919489","1962":"47,79463506","1963":"48,38099351","1964":"48,96981333","1965":"49,55755162","1966":"50,13617789","1967":"50,70084078","1968":"51,25202265","1969":"51,79512306","1970":"52,3465795","1971":"52,92796187","1972":"53,54979569","1973":"54,21113458","1974":"54,90062231","1975":"55,58599692","1976":"56,224186","1977":"56,78766023","1978":"57,26782037","1979":"57,67636736","1980":"58,05273196","1981":"58,45341106","1982":"58,92988706","1983":"59,51533553","1984":"60,21562941","1985":"61,01697513","1986":"61,88516534","1987":"62,76612531","1988":"63,61198759","1989":"64,3971732","1990":"65,10254233","1991":"65,72111679","1992":"66,2694087","1993":"66,76398942","1994":"67,21091811","1995":"67,61712708","1996":"67,98847012","1997":"68,33054819","1998":"68,64966354","1999":"68,95163376","2000":"69,24178176","2001":"69,52450348","2002":"69,80017181","2003":"70,06988058","2004":"70,33606494","2005":"70,59820259","2006":"70,85450548","2007":"71,10088635","2008":"71,33345003","2009":"71,55301397","2010":"71,76190266","2011":"71,96592607","2012":"72,16976707","2013":"72,37593846","2014":"72,58283577","2015":"72,78920326","2016":"","Country Name":"Middle East & North Africa (IDA & IBRD countries)","Country Code":"TMN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"61,36502439","1961":"61,73270732","1962":"62,09729268","1963":"62,4587561","1964":"62,81514634","1965":"63,16797561","1966":"63,51831707","1967":"63,8672439","1968":"64,21226829","1969":"64,55290244","1970":"64,88509756","1971":"65,20480488","1972":"65,50797561","1973":"65,79504878","1974":"66,06602439","1975":"66,32339024","1976":"66,57114634","1977":"66,81536585","1978":"67,05856098","1979":"67,30326829","1980":"67,55","1981":"67,79973171","1982":"68,0494878","1983":"68,29529268","1984":"68,53365854","1985":"68,75965854","1986":"68,96590244","1987":"69,15192683","1988":"69,31519512","1989":"69,45768293","1990":"69,58231707","1991":"69,69304878","1992":"69,79721951","1993":"69,90073171","1994":"70,00646341","1995":"70,11926829","1996":"70,2385122","1997":"70,36368293","1998":"70,49285366","1999":"70,62507317","2000":"70,76095122","2001":"70,89960976","2002":"71,0392439","2003":"71,17953659","2004":"71,32007317","2005":"71,45897561","2006":"71,59778049","2007":"71,73592683","2008":"71,87390244","2009":"72,01114634","2010":"72,14819512","2011":"72,28597561","2012":"72,42397561","2013":"72,56212195","2014":"72,70136585","2015":"72,84017073","2016":"","Country Name":"Tonga","Country Code":"TON","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"41,95918413","1961":"42,59928154","1962":"43,24321377","1963":"43,88639134","1964":"44,53611768","1965":"45,17868578","1966":"45,80669229","1967":"46,41328446","1968":"46,99678386","1969":"47,55954138","1970":"48,11404834","1971":"48,67544264","1972":"49,25857052","1973":"49,86917402","1974":"50,50209104","1975":"51,14601876","1976":"51,78695162","1977":"52,40561373","1978":"52,99056181","1979":"53,53511529","1980":"54,03490782","1981":"54,48621557","1982":"54,90540191","1983":"55,30151826","1984":"55,68395957","1985":"56,06361895","1986":"56,45294698","1987":"56,85899122","1988":"57,28560671","1989":"57,73411882","1990":"58,20399185","1991":"58,69239339","1992":"59,18845223","1993":"59,68450154","1994":"60,17598886","1995":"60,65818566","1996":"61,12772872","1997":"61,58483792","1998":"62,02892802","1999":"62,45947731","2000":"62,876685","2001":"63,28104402","2002":"63,67715634","2003":"64,06858717","2004":"64,45710161","2005":"64,84793714","2006":"65,2434613","2007":"65,64452281","2008":"66,04733525","2009":"66,44923186","2010":"66,84308693","2011":"67,22095963","2012":"67,57733562","2013":"67,90665104","2014":"68,20916845","2015":"68,48545298","2016":"","Country Name":"South Asia (IDA & IBRD)","Country Code":"TSA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"40,36214263","1961":"40,80112303","1962":"41,23090332","1963":"41,64964624","1964":"42,05759314","1965":"42,45788192","1966":"42,85478443","1967":"43,2529273","1968":"43,65570445","1969":"44,06439825","1970":"44,478725","1971":"44,89789575","1972":"45,31709551","1973":"45,73066872","1974":"46,13373326","1975":"46,52207077","1976":"46,8934121","1977":"47,2474822","1978":"47,58456015","1979":"47,90486336","1980":"48,20903068","1981":"48,49804789","1982":"48,77518852","1983":"49,02867801","1984":"49,26442575","1985":"49,46940763","1986":"49,63269361","1987":"49,75126874","1988":"49,81684167","1989":"49,846653","1990":"49,85147113","1991":"49,84779026","1992":"49,85054649","1993":"49,85756477","1994":"49,87627109","1995":"49,90363593","1996":"49,94486588","1997":"50,01410677","1998":"50,11728851","1999":"50,27765486","2000":"50,51250294","2001":"50,83722093","2002":"51,26482756","2003":"51,78669705","2004":"52,39773954","2005":"53,08506134","2006":"53,83214224","2007":"54,61311643","2008":"55,40034528","2009":"56,17305571","2010":"56,9113617","2011":"57,60308526","2012":"58,24907519","2013":"58,8486612","2014":"59,39987928","2015":"59,90182611","2016":"","Country Name":"Sub-Saharan Africa (IDA & IBRD countries)","Country Code":"TSS","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"62,65758537","1961":"63,2537561","1962":"63,76019512","1963":"64,16139024","1964":"64,45578049","1965":"64,6517561","1966":"64,77017073","1967":"64,84792683","1968":"64,918","1969":"64,99987805","1970":"65,11063415","1971":"65,26039024","1972":"65,44280488","1973":"65,64695122","1974":"65,87134146","1975":"66,10490244","1976":"66,3374878","1977":"66,556","1978":"66,75185366","1979":"66,92104878","1980":"67,06268293","1981":"67,17987805","1982":"67,28126829","1983":"67,37595122","1984":"67,46641463","1985":"67,55668293","1986":"67,6492439","1987":"67,74292683","1988":"67,83712195","1989":"67,93119512","1990":"68,02290244","1991":"68,11058537","1992":"68,19163415","1993":"68,26412195","1994":"68,32809756","1995":"68,3837561","1996":"68,43082927","1997":"68,47260976","1998":"68,51131707","1999":"68,55156098","2000":"68,59643902","2001":"68,64895122","2002":"68,71043902","2003":"68,78426829","2004":"68,87182927","2005":"68,97853659","2006":"69,10734146","2007":"69,25714634","2008":"69,42441463","2009":"69,60556098","2010":"69,79253659","2011":"69,97731707","2012":"70,15290244","2013":"70,31485366","2014":"70,45965854","2015":"70,58885366","2016":"","Country Name":"Trinidad and Tobago","Country Code":"TTO","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"42,0097561","1961":"42,6455122","1962":"43,34168293","1963":"44,10078049","1964":"44,92385366","1965":"45,81441463","1966":"46,77495122","1967":"47,8005122","1968":"48,87912195","1969":"49,99780488","1970":"51,14273171","1971":"52,29753659","1972":"53,4502439","1973":"54,58878049","1974":"55,70397561","1975":"56,79502439","1976":"57,87053659","1977":"58,93673171","1978":"59,9924878","1979":"61,02885366","1980":"62,0245122","1981":"62,95480488","1982":"63,80365854","1983":"64,56685366","1984":"65,24904878","1985":"65,86768293","1986":"66,44960976","1987":"67,02307317","1988":"67,60790244","1989":"68,21007317","1990":"68,82709756","1991":"69,44556098","1992":"70,04312195","1993":"70,60190244","1994":"71,11395122","1995":"71,57534146","1996":"71,98560976","1997":"72,35268293","1998":"72,68353659","1999":"72,98360976","2000":"73,25382927","2001":"73,49960976","2002":"73,72139024","2003":"73,92314634","2004":"74,10687805","2005":"74,27217073","2006":"74,41514634","2007":"74,53541463","2008":"74,63697561","2009":"74,72529268","2010":"74,81126829","2011":"74,90668293","2012":"75,01890244","2013":"75,15429268","2014":"75,31434146","2015":"75,49704878","2016":"","Country Name":"Tunisia","Country Code":"TUN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,38441463","1961":"46,1044878","1962":"46,83670732","1963":"47,57402439","1964":"48,30631707","1965":"49,02343902","1966":"49,71573171","1967":"50,38360976","1968":"51,0285122","1969":"51,65192683","1970":"52,26141463","1971":"52,86509756","1972":"53,47512195","1973":"54,09660976","1974":"54,73365854","1975":"55,38521951","1976":"56,0497561","1977":"56,71868293","1978":"57,385","1979":"58,04426829","1980":"58,69158537","1981":"59,32612195","1982":"59,94646341","1983":"60,55265854","1984":"61,14319512","1985":"61,71443902","1986":"62,26226829","1987":"62,7875122","1988":"63,29453659","1989":"63,79031707","1990":"64,28234146","1991":"64,78309756","1992":"65,30021951","1993":"65,83790244","1994":"66,39873171","1995":"66,98192683","1996":"67,58621951","1997":"68,19968293","1998":"68,81226829","1999":"69,41539024","2000":"69,99934146","2001":"70,55580488","2002":"71,08197561","2003":"71,57419512","2004":"72,02987805","2005":"72,44812195","2006":"72,82912195","2007":"73,17812195","2008":"73,50282927","2009":"73,80631707","2010":"74,09404878","2011":"74,36941463","2012":"74,63629268","2013":"74,89604878","2014":"75,15214634","2015":"75,40709756","2016":"","Country Name":"Turkey","Country Code":"TUR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"Tuvalu","Country Code":"TUV","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"43,65387805","1961":"43,90729268","1962":"44,1622439","1963":"44,42370732","1964":"44,69770732","1965":"44,98873171","1966":"45,29680488","1967":"45,62087805","1968":"45,95795122","1969":"46,3105122","1970":"46,68304878","1971":"47,08404878","1972":"47,511","1973":"47,95739024","1974":"48,4112439","1975":"48,85609756","1976":"49,2704878","1977":"49,63995122","1978":"49,95246341","1979":"50,20346341","1980":"50,39639024","1981":"50,54312195","1982":"50,66004878","1983":"50,75617073","1984":"50,8314878","1985":"50,87253659","1986":"50,85736585","1987":"50,77409756","1988":"50,62439024","1989":"50,42185366","1990":"50,18365854","1991":"49,93290244","1992":"49,70065854","1993":"49,52187805","1994":"49,42607317","1995":"49,44017073","1996":"49,58656098","1997":"49,86360976","1998":"50,26768293","1999":"50,7972439","2000":"51,45585366","2001":"52,24012195","2002":"53,13014634","2003":"54,09834146","2004":"55,11704878","2005":"56,15390244","2006":"57,17790244","2007":"58,16982927","2008":"59,11812195","2009":"60,01043902","2010":"60,85568293","2011":"61,67443902","2012":"62,48729268","2013":"63,30560976","2014":"64,1184878","2015":"64,90331707","2016":"","Country Name":"Tanzania","Country Code":"TZA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"43,98356098","1961":"44,56002439","1962":"45,14704878","1963":"45,73812195","1964":"46,32126829","1965":"46,8794878","1966":"47,3942439","1967":"47,8515122","1968":"48,24329268","1969":"48,56353659","1970":"48,8122439","1971":"48,99492683","1972":"49,12609756","1973":"49,21970732","1974":"49,2837561","1975":"49,3297561","1976":"49,36573171","1977":"49,39263415","1978":"49,40592683","1979":"49,39902439","1980":"49,35473171","1981":"49,25387805","1982":"49,08285366","1983":"48,83368293","1984":"48,50941463","1985":"48,11119512","1986":"47,64165854","1987":"47,12507317","1988":"46,59021951","1989":"46,06480488","1990":"45,57107317","1991":"45,1262439","1992":"44,74729268","1993":"44,45717073","1994":"44,28585366","1995":"44,2722439","1996":"44,45265854","1997":"44,83239024","1998":"45,40226829","1999":"46,14868293","2000":"47,05117073","2001":"48,08036585","2002":"49,19085366","2003":"50,33358537","2004":"51,46985366","2005":"52,56680488","2006":"53,60395122","2007":"54,58156098","2008":"55,49546341","2009":"56,3322439","2010":"57,07763415","2011":"57,722","2012":"58,27482927","2013":"58,74902439","2014":"59,15580488","2015":"59,5087561","2016":"","Country Name":"Uganda","Country Code":"UGA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"68,29953659","1961":"68,76385366","1962":"69,14609756","1963":"69,45770732","1964":"69,70821951","1965":"69,90563415","1966":"70,05653659","1967":"70,16112195","1968":"70,22307317","1969":"70,24756098","1970":"70,23521951","1971":"70,18263415","1972":"70,09085366","1973":"69,96292683","1974":"69,80885366","1975":"69,63463415","1976":"69,44617073","1977":"69,25343902","1978":"69,07090244","1979":"68,91512195","1980":"68,81782927","1981":"68,81082927","1982":"68,9012439","1983":"69,0774878","1984":"69,31734146","1985":"69,57478049","1986":"69,7912439","1987":"70,49512195","1988":"70,49756098","1989":"70,53902439","1990":"70,13658537","1991":"68,87804878","1992":"69,06829268","1993":"68,47560976","1994":"67,83853659","1995":"67,13707317","1996":"66,88780488","1997":"67,29536585","1998":"67,98878049","1999":"68,21341463","2000":"67,8595122","2001":"68,28707317","2002":"68,27560976","2003":"68,21073171","2004":"68,18536585","2005":"67,95682927","2006":"68,07756098","2007":"68,22219512","2008":"68,25146341","2009":"69,19","2010":"70,26536585","2011":"70,80926829","2012":"70,94414634","2013":"71,1595122","2014":"71,18658537","2015":"71,1895122","2016":"","Country Name":"Ukraine","Country Code":"UKR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"49,86632526","1961":"50,38098188","1962":"51,02935021","1963":"51,86758006","1964":"52,93561985","1965":"54,17454816","1966":"55,4963073","1967":"56,82231532","1968":"58,07348547","1969":"59,18511608","1970":"60,18148984","1971":"61,02619056","1972":"61,74240683","1973":"62,41542604","1974":"63,0394039","1975":"63,56258736","1976":"64,07396162","1977":"64,54123926","1978":"64,97218618","1979":"65,33694059","1980":"65,70196183","1981":"66,0572874","1982":"66,4137861","1983":"66,7103008","1984":"66,97274084","1985":"67,31082139","1986":"67,7088614","1987":"67,96890744","1988":"68,21495484","1989":"68,42265704","1990":"68,6197874","1991":"68,80378586","1992":"68,87875356","1993":"68,93680998","1994":"69,11376664","1995":"69,35617713","1996":"69,68280839","1997":"70,02458513","1998":"70,34860358","1999":"70,60895163","2000":"70,91929542","2001":"71,25175371","2002":"71,56304712","2003":"71,8792524","2004":"72,21392765","2005":"72,50155664","2006":"72,84732116","2007":"73,15843694","2008":"73,4273968","2009":"73,72044375","2010":"73,95607316","2011":"74,23684128","2012":"74,47654368","2013":"74,71816553","2014":"74,92436697","2015":"75,11854968","2016":"","Country Name":"Upper middle income","Country Code":"UMC","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"67,89639024","1961":"68,11278049","1962":"68,29663415","1963":"68,44092683","1964":"68,54314634","1965":"68,60680488","1966":"68,63592683","1967":"68,6455122","1968":"68,65109756","1969":"68,66170732","1970":"68,68580488","1971":"68,73036585","1972":"68,79590244","1973":"68,88390244","1974":"68,99736585","1975":"69,14282927","1976":"69,32131707","1977":"69,52985366","1978":"69,76446341","1979":"70,01860976","1980":"70,28629268","1981":"70,55897561","1982":"70,83160976","1983":"71,09617073","1984":"71,34863415","1985":"71,58346341","1986":"71,79858537","1987":"71,99756098","1988":"72,18490244","1989":"72,36419512","1990":"72,53953659","1991":"72,71904878","1992":"72,90680488","1993":"73,10485366","1994":"73,3162439","1995":"73,53843902","1996":"73,76987805","1997":"74,005","1998":"74,23817073","1999":"74,46634146","2000":"74,68597561","2001":"74,89604878","2002":"75,09556098","2003":"75,2845122","2004":"75,46441463","2005":"75,63470732","2006":"75,79641463","2007":"75,95153659","2008":"76,10158537","2009":"76,25009756","2010":"76,39612195","2011":"76,54219512","2012":"76,68836585","2013":"76,83465854","2014":"76,98209756","2015":"77,13163415","2016":"","Country Name":"Uruguay","Country Code":"URY","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"69,77073171","1961":"70,27073171","1962":"70,1195122","1963":"69,91707317","1964":"70,16585366","1965":"70,21463415","1966":"70,21219512","1967":"70,56097561","1968":"69,95121951","1969":"70,50731707","1970":"70,80731707","1971":"71,10731707","1972":"71,15609756","1973":"71,35609756","1974":"71,95609756","1975":"72,60487805","1976":"72,85609756","1977":"73,25609756","1978":"73,35609756","1979":"73,80487805","1980":"73,6097561","1981":"74,0097561","1982":"74,36097561","1983":"74,46341463","1984":"74,56341463","1985":"74,56341463","1986":"74,61463415","1987":"74,76585366","1988":"74,76585366","1989":"75,01707317","1990":"75,21463415","1991":"75,36585366","1992":"75,61707317","1993":"75,4195122","1994":"75,6195122","1995":"75,62195122","1996":"76,02682927","1997":"76,42926829","1998":"76,5804878","1999":"76,58292683","2000":"76,63658537","2001":"76,83658537","2002":"76,93658537","2003":"77,03658537","2004":"77,48780488","2005":"77,48780488","2006":"77,68780488","2007":"77,98780488","2008":"78,03902439","2009":"78,3902439","2010":"78,54146341","2011":"78,64146341","2012":"78,74146341","2013":"78,74146341","2014":"78,74146341","2015":"78,74146341","2016":"","Country Name":"United States","Country Code":"USA","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"58,69404878","1961":"59,05673171","1962":"59,42441463","1963":"59,79560976","1964":"60,16782927","1965":"60,53656098","1966":"60,89831707","1967":"61,24807317","1968":"61,58234146","1969":"61,89860976","1970":"62,19185366","1971":"62,45902439","1972":"62,70212195","1973":"62,92519512","1974":"63,13273171","1975":"63,33331707","1976":"63,5334878","1977":"63,74131707","1978":"63,96182927","1979":"64,19607317","1980":"64,45009756","1981":"64,72697561","1982":"65,01963415","1983":"65,3175122","1984":"65,60946341","1985":"65,87329268","1986":"66,08778049","1987":"66,24126829","1988":"66,33019512","1989":"66,35956098","1990":"66,34295122","1991":"66,3005122","1992":"66,2585122","1993":"66,23960976","1994":"66,25639024","1995":"66,31687805","1996":"66,42102439","1997":"66,55821951","1998":"66,71890244","1999":"66,90158537","2000":"67,10231707","2001":"67,32014634","2002":"67,55363415","2003":"67,80080488","2004":"68,0602439","2005":"68,33546341","2006":"68,63202439","2007":"68,95090244","2008":"69,2865122","2009":"69,6307561","2010":"69,96843902","2011":"70,28341463","2012":"70,56302439","2013":"70,80068293","2014":"70,99339024","2015":"71,14568293","2016":"","Country Name":"Uzbekistan","Country Code":"UZB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"57,72080488","1961":"58,80763415","1962":"59,83819512","1963":"60,78239024","1964":"61,62114634","1965":"62,34797561","1966":"62,97034146","1967":"63,51526829","1968":"64,00473171","1969":"64,44719512","1970":"64,84253659","1971":"65,18314634","1972":"65,46897561","1973":"65,70404878","1974":"65,90243902","1975":"66,08680488","1976":"66,27985366","1977":"66,49926829","1978":"66,75460976","1979":"67,04836585","1980":"67,37641463","1981":"67,7255122","1982":"68,07343902","1983":"68,40353659","1984":"68,70729268","1985":"68,98285366","1986":"69,23236585","1987":"69,46507317","1988":"69,68360976","1989":"69,88797561","1990":"70,07409756","1991":"70,23385366","1992":"70,36353659","1993":"70,462","1994":"70,53063415","1995":"70,57187805","1996":"70,58614634","1997":"70,58253659","1998":"70,57119512","1999":"70,56426829","2000":"70,577","2001":"70,62419512","2002":"70,71302439","2003":"70,84453659","2004":"71,01668293","2005":"71,22429268","2006":"71,45460976","2007":"71,69229268","2008":"71,92312195","2009":"72,13892683","2010":"72,3342439","2011":"72,50707317","2012":"72,66263415","2013":"72,80658537","2014":"72,9395122","2015":"73,06495122","2016":"","Country Name":"St. Vincent and the Grenadines","Country Code":"VCT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"59,28512195","1961":"59,86256098","1962":"60,43031707","1963":"60,98582927","1964":"61,52907317","1965":"62,06207317","1966":"62,58880488","1967":"63,11182927","1968":"63,6302439","1969":"64,14163415","1970":"64,63909756","1971":"65,1147561","1972":"65,56214634","1973":"65,97634146","1974":"66,35736585","1975":"66,70721951","1976":"67,03085366","1977":"67,33619512","1978":"67,62817073","1979":"67,90826829","1980":"68,174","1981":"68,42041463","1982":"68,64453659","1983":"68,84334146","1984":"69,01978049","1985":"69,17485366","1986":"69,31202439","1987":"69,43821951","1988":"69,56031707","1989":"69,68717073","1990":"69,82860976","1991":"69,99441463","1992":"70,18802439","1993":"70,40943902","1994":"70,65621951","1995":"70,92692683","1996":"71,21570732","1997":"71,51226829","1998":"71,80539024","1999":"72,08626829","2000":"72,34612195","2001":"72,57560976","2002":"72,77526829","2003":"72,94456098","2004":"73,08643902","2005":"73,20382927","2006":"73,30204878","2007":"73,39041463","2008":"73,47826829","2009":"73,5715122","2010":"73,67514634","2011":"73,79419512","2012":"73,9262439","2013":"74,07041463","2014":"74,22614634","2015":"74,3915122","2016":"","Country Name":"Venezuela","Country Code":"VEN","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"","1982":"","1983":"","1984":"","1985":"","1986":"","1987":"","1988":"","1989":"","1990":"","1991":"","1992":"","1993":"","1994":"","1995":"","1996":"","1997":"","1998":"","1999":"","2000":"","2001":"","2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":"","Country Name":"British Virgin Islands","Country Code":"VGB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"66,22485366","1961":"66,48797561","1962":"66,74109756","1963":"66,99621951","1964":"67,26036585","1965":"67,5405122","1966":"67,83512195","1967":"68,13819512","1968":"68,44273171","1969":"68,74821951","1970":"69,05119512","1971":"69,35114634","1972":"69,64660976","1973":"69,93558537","1974":"70,21758537","1975":"70,49007317","1976":"70,75053659","1977":"70,99992683","1978":"71,2392439","1979":"71,47097561","1980":"71,70012195","1981":"71,93070732","1982":"72,1662439","1983":"72,4102439","1984":"72,66221951","1985":"72,92217073","1986":"73,18704878","1987":"73,45385366","1988":"73,71758537","1989":"73,9782439","1990":"74,23585366","1991":"74,49195122","1992":"74,74704878","1993":"75,00265854","1994":"75,25729268","1995":"75,50992683","1996":"75,75902439","1997":"76,00253659","1998":"76,23697561","1999":"76,46185366","2000":"76,6195122","2001":"77,87317073","2002":"78,02439024","2003":"78,17317073","2004":"78,72439024","2005":"78,52439024","2006":"78,62439024","2007":"78,82439024","2008":"78,92439024","2009":"79,07317073","2010":"79,17317073","2011":"79,37317073","2012":"79,47317073","2013":"79,62439024","2014":"79,77317073","2015":"79,87317073","2016":"","Country Name":"Virgin Islands (U.S.)","Country Code":"VIR","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"59,06702439","1961":"59,74419512","1962":"60,41053659","1963":"61,04302439","1964":"61,60714634","1965":"61,99678049","1966":"62,08739024","1967":"61,84204878","1968":"61,29304878","1969":"60,52568293","1970":"59,73704878","1971":"59,1742439","1972":"59,02160976","1973":"59,38121951","1974":"60,25343902","1975":"61,53636585","1976":"63,04285366","1977":"64,52670732","1978":"65,79634146","1979":"66,7725122","1980":"67,43365854","1981":"67,83046341","1982":"68,09387805","1983":"68,33273171","1984":"68,58412195","1985":"68,86853659","1986":"69,18590244","1987":"69,50958537","1988":"69,8225122","1989":"70,12419512","1990":"70,41819512","1991":"70,70807317","1992":"70,99546341","1993":"71,28241463","1994":"71,5684878","1995":"71,85221951","1996":"72,13156098","1997":"72,4035122","1998":"72,6645122","1999":"72,91353659","2000":"73,14858537","2001":"73,36958537","2002":"73,57656098","2003":"73,77253659","2004":"73,95902439","2005":"74,13712195","2006":"74,30839024","2007":"74,47487805","2008":"74,63865854","2009":"74,80319512","2010":"74,97043902","2011":"75,14285366","2012":"75,32134146","2013":"75,50534146","2014":"75,69529268","2015":"75,89119512","2016":"","Country Name":"Vietnam","Country Code":"VNM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"46,4874878","1961":"47,08809756","1962":"47,68819512","1963":"48,28729268","1964":"48,88682927","1965":"49,48478049","1966":"50,08312195","1967":"50,68182927","1968":"51,28092683","1969":"51,87990244","1970":"52,47980488","1971":"53,07963415","1972":"53,67943902","1973":"54,27926829","1974":"54,87860976","1975":"55,47997561","1976":"56,08831707","1977":"56,70309756","1978":"57,32236585","1979":"57,93919512","1980":"58,54270732","1981":"59,12056098","1982":"59,66487805","1983":"60,17212195","1984":"60,64226829","1985":"61,08219512","1986":"61,50221951","1987":"61,91463415","1988":"62,3317561","1989":"62,75802439","1990":"63,19685366","1991":"63,64778049","1992":"64,10341463","1993":"64,55934146","1994":"65,01214634","1995":"65,45934146","1996":"65,8994878","1997":"66,33009756","1998":"66,75119512","1999":"67,15982927","2000":"67,555","2001":"67,9362439","2002":"68,30353659","2003":"68,65785366","2004":"68,99819512","2005":"69,32604878","2006":"69,64287805","2007":"69,94863415","2008":"70,24385366","2009":"70,529","2010":"70,80312195","2011":"71,0647561","2012":"71,31343902","2013":"71,54917073","2014":"71,772","2015":"71,98490244","2016":"","Country Name":"Vanuatu","Country Code":"VUT","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"52,58568527","1961":"53,08903048","1962":"53,51089406","1963":"54,04198746","1964":"54,71896163","1965":"55,38582589","1966":"56,12447761","1967":"56,8367673","1968":"57,44199872","1969":"58,05565739","1970":"58,64731319","1971":"59,1733683","1972":"59,65869529","1973":"60,10516176","1974":"60,59699121","1975":"61,0385021","1976":"61,45510669","1977":"61,87269679","1978":"62,22836397","1979":"62,58472999","1980":"62,86580021","1981":"63,20069407","1982":"63,51929798","1983":"63,76013289","1984":"64,01809319","1985":"64,26833741","1986":"64,56432813","1987":"64,81568399","1988":"65,02130916","1989":"65,24046744","1990":"65,43431634","1991":"65,62391518","1992":"65,78967888","1993":"65,9170838","1994":"66,12737531","1995":"66,32595047","1996":"66,61517664","1997":"66,91332879","1998":"67,17311965","1999":"67,40727714","2000":"67,68493124","2001":"67,98243113","2002":"68,24909482","2003":"68,52261611","2004":"68,8625137","2005":"69,13615307","2006":"69,47557909","2007":"69,79463073","2008":"70,08453335","2009":"70,40674945","2010":"70,68495745","2011":"70,97376295","2012":"71,21697592","2013":"71,46206472","2014":"71,69170194","2015":"71,88880421","2016":"","Country Name":"World","Country Code":"WLD","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"49,9695122","1961":"50,4695122","1962":"50,9695122","1963":"51,4695122","1964":"51,9695122","1965":"52,4695122","1966":"52,9695122","1967":"53,4695122","1968":"53,9695122","1969":"54,4695122","1970":"54,9695122","1971":"55,4695122","1972":"55,9695122","1973":"56,4695122","1974":"56,9695122","1975":"57,4695122","1976":"57,9695122","1977":"58,4695122","1978":"58,9695122","1979":"59,4695122","1980":"59,9695122","1981":"60,4685122","1982":"60,9665122","1983":"61,4645122","1984":"61,9625122","1985":"62,463","1986":"62,969","1987":"63,48097561","1988":"63,99895122","1989":"64,51941463","1990":"65,04041463","1991":"65,55895122","1992":"66,07002439","1993":"66,56914634","1994":"67,05180488","1995":"67,51302439","1996":"67,94726829","1997":"68,35453659","1998":"68,73829268","1999":"69,10056098","2000":"69,44831707","2001":"69,78909756","2002":"70,12939024","2003":"70,47670732","2004":"70,83402439","2005":"71,20734146","2006":"71,59812195","2007":"72,00331707","2008":"72,41495122","2009":"72,82702439","2010":"73,23002439","2011":"73,6125122","2012":"73,9674878","2013":"74,2905122","2014":"74,58007317","2015":"74,83870732","2016":"","Country Name":"Samoa","Country Code":"WSM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"","1961":"","1962":"","1963":"","1964":"","1965":"","1966":"","1967":"","1968":"","1969":"","1970":"","1971":"","1972":"","1973":"","1974":"","1975":"","1976":"","1977":"","1978":"","1979":"","1980":"","1981":"65,89756098","1982":"66,19756098","1983":"66,39756098","1984":"66,59756098","1985":"66,79756098","1986":"66,99756098","1987":"67,19756098","1988":"67,39756098","1989":"67,54878049","1990":"67,74878049","1991":"67,94878049","1992":"68,1","1993":"68,24878049","1994":"68,4","1995":"68,55121951","1996":"68,7","1997":"68,85121951","1998":"68,95121951","1999":"66,95121951","2000":"67,95121951","2001":"67,99756098","2002":"67,94390244","2003":"68,19512195","2004":"68,44634146","2005":"68,69512195","2006":"68,94634146","2007":"69,19756098","2008":"69,39756098","2009":"69,64878049","2010":"69,9","2011":"70,14878049","2012":"70,49756098","2013":"70,79756098","2014":"71,09756098","2015":"71,34634146","2016":"","Country Name":"Kosovo","Country Code":"XKX","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"34,36380488","1961":"34,4732439","1962":"34,73956098","1963":"35,18678049","1964":"35,81287805","1965":"36,59339024","1966":"37,48231707","1967":"38,42019512","1968":"39,35658537","1969":"40,2684878","1970":"41,14641463","1971":"41,99885366","1972":"42,85482927","1973":"43,73380488","1974":"44,63929268","1975":"45,57631707","1976":"46,54536585","1977":"47,54046341","1978":"48,54860976","1979":"49,55829268","1980":"50,55953659","1981":"51,54134146","1982":"52,49270732","1983":"53,40212195","1984":"54,25558537","1985":"55,03858537","1986":"55,73863415","1987":"56,35673171","1988":"56,89634146","1989":"57,363","1990":"57,76419512","1991":"58,11090244","1992":"58,41863415","1993":"58,70287805","1994":"58,97263415","1995":"59,23441463","1996":"59,48570732","1997":"59,7255122","1998":"59,95382927","1999":"60,17614634","2000":"60,40443902","2001":"60,64921951","2002":"60,91543902","2003":"61,20712195","2004":"61,52173171","2005":"61,85529268","2006":"62,20082927","2007":"62,54634146","2008":"62,88134146","2009":"63,20031707","2010":"63,4982439","2011":"63,77560976","2012":"64,03339024","2013":"64,27707317","2014":"64,50717073","2015":"64,72568293","2016":"","Country Name":"Yemen","Country Code":"YEM","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"52,2262439","1961":"52,56873171","1962":"52,90134146","1963":"53,23404878","1964":"53,57365854","1965":"53,92890244","1966":"54,30687805","1967":"54,70334146","1968":"55,10926829","1969":"55,51673171","1970":"55,9094878","1971":"56,26841463","1972":"56,58097561","1973":"56,84104878","1974":"57,05034146","1975":"57,21146341","1976":"57,3324878","1977":"57,43414634","1978":"57,53873171","1979":"57,66309756","1980":"57,83607317","1981":"58,08197561","1982":"58,40570732","1983":"58,80221951","1984":"59,2604878","1985":"59,77002439","1986":"60,31590244","1987":"60,86531707","1988":"61,37685366","1989":"61,81414634","1990":"62,13568293","1991":"62,30597561","1992":"62,31202439","1993":"62,14778049","1994":"61,80785366","1995":"61,27385366","1996":"60,53443902","1997":"59,62114634","1998":"58,58543902","1999":"57,48270732","2000":"56,36831707","2001":"55,29465854","2002":"54,31495122","2003":"53,49043902","2004":"52,88031707","2005":"52,56317073","2006":"52,60460976","2007":"52,99702439","2008":"53,70407317","2009":"54,68346341","2010":"55,86960976","2011":"57,18107317","2012":"58,52041463","2013":"59,80007317","2014":"60,95478049","2015":"61,93409756","2016":"","Country Name":"South Africa","Country Code":"ZAF","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"45,10980488","1961":"45,4875122","1962":"45,85365854","1963":"46,20921951","1964":"46,55868293","1965":"46,91202439","1966":"47,28526829","1967":"47,68397561","1968":"48,10914634","1969":"48,55629268","1970":"49,01895122","1971":"49,48914634","1972":"49,94934146","1973":"50,3785122","1974":"50,75665854","1975":"51,06670732","1976":"51,29509756","1977":"51,43482927","1978":"51,48085366","1979":"51,42319512","1980":"51,24829268","1981":"50,94317073","1982":"50,51436585","1983":"49,97997561","1984":"49,35809756","1985":"48,66736585","1986":"47,92439024","1987":"47,15778049","1988":"46,39958537","1989":"45,68136585","1990":"45,02763415","1991":"44,45492683","1992":"43,96912195","1993":"43,58109756","1994":"43,30929268","1995":"43,17214634","1996":"43,18109756","1997":"43,33658537","1998":"43,63602439","1999":"44,07980488","2000":"44,67031707","2001":"45,40997561","2002":"46,28621951","2003":"47,28207317","2004":"48,37946341","2005":"49,57492683","2006":"50,87143902","2007":"52,25409756","2008":"53,68846341","2009":"55,13158537","2010":"56,5244878","2011":"57,80860976","2012":"58,9474878","2013":"59,92019512","2014":"60,71534146","2015":"61,33958537","2016":"","Country Name":"Zambia","Country Code":"ZMB","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"},{"1960":"51,54197561","1961":"51,91495122","1962":"52,27790244","1963":"52,62931707","1964":"52,97165854","1965":"53,30446341","1966":"53,62770732","1967":"53,94543902","1968":"54,26014634","1969":"54,57685366","1970":"54,89909756","1971":"55,22936585","1972":"55,57068293","1973":"55,92653659","1974":"56,30087805","1975":"56,70921951","1976":"57,16904878","1977":"57,68034146","1978":"58,23002439","1979":"58,79597561","1980":"59,35556098","1981":"59,88604878","1982":"60,35087805","1983":"60,71158537","1984":"60,9327561","1985":"60,97202439","1986":"60,79504878","1987":"60,39958537","1988":"59,79246341","1989":"58,98141463","1990":"57,96573171","1991":"56,74965854","1992":"55,37273171","1993":"53,89239024","1994":"52,36558537","1995":"50,84178049","1996":"49,36136585","1997":"47,96458537","1998":"46,70209756","1999":"45,63217073","2000":"44,81356098","2001":"44,28758537","2002":"44,06063415","2003":"44,13063415","2004":"44,50595122","2005":"45,21095122","2006":"46,26704878","2007":"47,63585366","2008":"49,24943902","2009":"51,02890244","2010":"52,87780488","2011":"54,69719512","2012":"56,40770732","2013":"57,9405122","2014":"59,24431707","2015":"60,27934146","2016":"","Country Name":"Zimbabwe","Country Code":"ZWE","Indicator Name":"Life expectancy at birth, total (years)","Indicator Code":"SP.DYN.LE00.IN"}]

/***/ }),
/* 915 */
/***/ (function(module, exports) {

module.exports = [{"1960":54211,"1961":55438,"1962":56225,"1963":56695,"1964":57032,"1965":57360,"1966":57715,"1967":58055,"1968":58386,"1969":58726,"1970":59063,"1971":59440,"1972":59840,"1973":60243,"1974":60528,"1975":60657,"1976":60586,"1977":60366,"1978":60103,"1979":59980,"1980":60096,"1981":60567,"1982":61345,"1983":62201,"1984":62836,"1985":63026,"1986":62644,"1987":61833,"1988":61079,"1989":61032,"1990":62149,"1991":64622,"1992":68235,"1993":72504,"1994":76700,"1995":80324,"1996":83200,"1997":85451,"1998":87277,"1999":89005,"2000":90853,"2001":92898,"2002":"94992","2003":"97017","2004":"98737","2005":"100031","2006":"100832","2007":"101220","2008":"101353","2009":"101453","2010":"101669","2011":"102053","2012":"102577","2013":"103187","2014":"103795","2015":"104341","2016":104822,"Country Name":"Aruba","Country Code":"ABW","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8996351,"1961":9166764,"1962":9345868,"1963":9533954,"1964":9731361,"1965":9938414,"1966":10152331,"1967":10372630,"1968":10604346,"1969":10854428,"1970":11126123,"1971":11417825,"1972":11721940,"1973":12027822,"1974":12321541,"1975":12590286,"1976":12840299,"1977":13067538,"1978":13237734,"1979":13306695,"1980":13248370,"1981":13053954,"1982":12749645,"1983":12389269,"1984":12047115,"1985":11783050,"1986":11601041,"1987":11502761,"1988":11540888,"1989":11777609,"1990":12249114,"1991":12993657,"1992":13981231,"1993":15095099,"1994":16172719,"1995":17099541,"1996":17822884,"1997":18381605,"1998":18863999,"1999":19403676,"2000":20093756,"2001":20966463,"2002":"21979923","2003":"23064851","2004":"24118979","2005":"25070798","2006":"25893450","2007":"26616792","2008":"27294031","2009":"28004331","2010":"28803167","2011":"29708599","2012":"30696958","2013":"31731688","2014":"32758020","2015":"33736494","2016":34656032,"Country Name":"Afghanistan","Country Code":"AFG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5643182,"1961":5753024,"1962":5866061,"1963":5980417,"1964":6093321,"1965":6203299,"1966":6309770,"1967":6414995,"1968":6523791,"1969":6642632,"1970":6776381,"1971":6927269,"1972":7094834,"1973":7277960,"1974":7474338,"1975":7682479,"1976":7900997,"1977":8130988,"1978":8376147,"1979":8641521,"1980":8929900,"1981":9244507,"1982":9582156,"1983":9931562,"1984":10277321,"1985":10609042,"1986":10921037,"1987":11218268,"1988":11513968,"1989":11827237,"1990":12171441,"1991":12553446,"1992":12968345,"1993":13403734,"1994":13841301,"1995":14268994,"1996":14682284,"1997":15088981,"1998":15504318,"1999":15949766,"2000":16440924,"2001":16983266,"2002":"17572649","2003":"18203369","2004":"18865716","2005":"19552542","2006":"20262399","2007":"20997687","2008":"21759420","2009":"22549547","2010":"23369131","2011":"24218565","2012":"25096150","2013":"25998340","2014":"26920466","2015":"27859305","2016":28813463,"Country Name":"Angola","Country Code":"AGO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1608800,"1961":1659800,"1962":1711319,"1963":1762621,"1964":1814135,"1965":1864791,"1966":1914573,"1967":1965598,"1968":2022272,"1969":2081695,"1970":2135479,"1971":2187853,"1972":2243126,"1973":2296752,"1974":2350124,"1975":2404831,"1976":2458526,"1977":2513546,"1978":2566266,"1979":2617832,"1980":2671997,"1981":2726056,"1982":2784278,"1983":2843960,"1984":2904429,"1985":2964762,"1986":3022635,"1987":3083605,"1988":3142336,"1989":3227943,"1990":3286542,"1991":3266790,"1992":3247039,"1993":3227287,"1994":3207536,"1995":3187784,"1996":3168033,"1997":3148281,"1998":3128530,"1999":3108778,"2000":3089027,"2001":3060173,"2002":"3051010","2003":"3039616","2004":"3026939","2005":"3011487","2006":"2992547","2007":"2970017","2008":"2947314","2009":"2927519","2010":"2913021","2011":"2905195","2012":"2900401","2013":"2895092","2014":"2889104","2015":"2880703","2016":2876101,"Country Name":"Albania","Country Code":"ALB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":13411,"1961":14375,"1962":15370,"1963":16412,"1964":17469,"1965":18549,"1966":19647,"1967":20758,"1968":21890,"1969":23058,"1970":24276,"1971":25559,"1972":26892,"1973":28232,"1974":29520,"1975":30705,"1976":31777,"1977":32771,"1978":33737,"1979":34818,"1980":36067,"1981":37500,"1982":39114,"1983":40867,"1984":42706,"1985":44600,"1986":46517,"1987":48455,"1988":50434,"1989":52448,"1990":54509,"1991":56671,"1992":58888,"1993":60971,"1994":62677,"1995":63850,"1996":64360,"1997":64327,"1998":64142,"1999":64370,"2000":65390,"2001":67341,"2002":"70049","2003":"73182","2004":"76244","2005":"78867","2006":"80991","2007":"82683","2008":"83861","2009":"84462","2010":"84449","2011":"83751","2012":"82431","2013":"80788","2014":"79223","2015":"78014","2016":77281,"Country Name":"Andorra","Country Code":"AND","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":92490932,"1961":95044497,"1962":97682294,"1963":100411076,"1964":103239902,"1965":106174988,"1966":109230593,"1967":112406932,"1968":115680165,"1969":119016542,"1970":122398374,"1971":125807419,"1972":129269375,"1973":132863416,"1974":136696761,"1975":140843298,"1976":145332378,"1977":150133054,"1978":155183724,"1979":160392488,"1980":165689490,"1981":171051950,"1982":176490084,"1983":182005827,"1984":187610756,"1985":193310301,"1986":199093767,"1987":204942549,"1988":210844771,"1989":216787402,"1990":224735446,"1991":230829868,"1992":235037179,"1993":241286091,"1994":247435930,"1995":255029671,"1996":260843462,"1997":266575075,"1998":272235146,"1999":277962869,"2000":283832016,"2001":289850357,"2002":"296026575","2003":"302434519","2004":"309162029","2005":"316264728","2006":"323773264","2007":"331653797","2008":"339825483","2009":"348145094","2010":"356508908","2011":"364895878","2012":"373306993","2013":"381702086","2014":"390043028","2015":"398304960","2016":406452690,"Country Name":"Arab World","Country Code":"ARB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":92634,"1961":101078,"1962":112472,"1963":125566,"1964":138529,"1965":150362,"1966":160481,"1967":170283,"1968":183194,"1969":203820,"1970":235499,"1971":278808,"1972":332760,"1973":397174,"1974":471364,"1975":554324,"1976":646943,"1977":748117,"1978":852262,"1979":952040,"1980":1042384,"1981":1120900,"1982":1189545,"1983":1253060,"1984":1318478,"1985":1391052,"1986":1472218,"1987":1560718,"1988":1655849,"1989":1756043,"1990":1860174,"1991":1970026,"1992":2086639,"1993":2207405,"1994":2328686,"1995":2448820,"1996":2571020,"1997":2700010,"1998":2838145,"1999":2988162,"2000":3154925,"2001":3326032,"2002":"3507232","2003":"3741932","2004":"4087931","2005":"4579562","2006":"5242032","2007":"6044067","2008":"6894278","2009":"7666393","2010":"8270684","2011":"8672475","2012":"8900453","2013":"9006263","2014":"9070867","2015":"9154302","2016":9269612,"Country Name":"United Arab Emirates","Country Code":"ARE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":20619075,"1961":20953077,"1962":21287682,"1963":21621840,"1964":21953929,"1965":22283390,"1966":22608748,"1967":22932203,"1968":23261278,"1969":23605987,"1970":23973058,"1971":24366439,"1972":24782949,"1973":25213388,"1974":25644506,"1975":26066975,"1976":26477152,"1977":26878565,"1978":27277741,"1979":27684534,"1980":28105888,"1981":28543364,"1982":28993987,"1983":29454738,"1984":29920904,"1985":30388783,"1986":30857244,"1987":31326473,"1988":31795517,"1989":32263561,"1990":32729739,"1991":33193918,"1992":33655151,"1993":34110917,"1994":34558115,"1995":34994814,"1996":35419682,"1997":35833969,"1998":36241590,"1999":36648068,"2000":37057452,"2001":37471509,"2002":"37889370","2003":"38309379","2004":"38728696","2005":"39145488","2006":"39558890","2007":"39970224","2008":"40382389","2009":"40799407","2010":"41223889","2011":"41656879","2012":"42096739","2013":"42539925","2014":"42981515","2015":"43417765","2016":43847430,"Country Name":"Argentina","Country Code":"ARG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1874120,"1961":1941491,"1962":2009526,"1963":2077575,"1964":2144998,"1965":2211316,"1966":2276031,"1967":2339124,"1968":2401140,"1969":2462925,"1970":2525065,"1971":2587706,"1972":2650484,"1973":2712781,"1974":2773747,"1975":2832757,"1976":2889579,"1977":2944379,"1978":2997411,"1979":3049105,"1980":3099751,"1981":3148092,"1982":3193686,"1983":3238594,"1984":3285595,"1985":3335935,"1986":3392256,"1987":3451942,"1988":3504651,"1989":3536469,"1990":3538165,"1991":3505251,"1992":3442810,"1993":3363098,"1994":3283660,"1995":3217342,"1996":3168215,"1997":3133086,"1998":3108684,"1999":3089017,"2000":3069588,"2001":3050655,"2002":"3033897","2003":"3017806","2004":"3000612","2005":"2981259","2006":"2958500","2007":"2933056","2008":"2908220","2009":"2888584","2010":"2877311","2011":"2875581","2012":"2881922","2013":"2893509","2014":"2906220","2015":"2916950","2016":2924816,"Country Name":"Armenia","Country Code":"ARM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":20013,"1961":20486,"1962":21117,"1963":21882,"1964":22698,"1965":23520,"1966":24321,"1967":25116,"1968":25885,"1969":26614,"1970":27292,"1971":27916,"1972":28492,"1973":29014,"1974":29488,"1975":29932,"1976":30321,"1977":30689,"1978":31102,"1979":31673,"1980":32457,"1981":33493,"1982":34738,"1983":36160,"1984":37688,"1985":39241,"1986":40837,"1987":42450,"1988":44047,"1989":45593,"1990":47038,"1991":48375,"1992":49593,"1993":50720,"1994":51803,"1995":52868,"1996":53929,"1997":54941,"1998":55901,"1999":56770,"2000":57521,"2001":58175,"2002":"58731","2003":"59117","2004":"59264","2005":"59118","2006":"58650","2007":"57903","2008":"57030","2009":"56227","2010":"55637","2011":"55320","2012":"55230","2013":"55307","2014":"55437","2015":"55537","2016":55599,"Country Name":"American Samoa","Country Code":"ASM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":55339,"1961":56144,"1962":57144,"1963":58294,"1964":59524,"1965":60781,"1966":62059,"1967":63360,"1968":64655,"1969":65910,"1970":67098,"1971":68188,"1972":69176,"1973":70066,"1974":70878,"1975":71609,"1976":72285,"1977":72875,"1978":73324,"1979":73528,"1980":73442,"1981":73066,"1982":72448,"1983":71639,"1984":70725,"1985":69782,"1986":68809,"1987":67845,"1988":67058,"1989":66627,"1990":66696,"1991":67307,"1992":68427,"1993":69938,"1994":71719,"1995":73619,"1996":75628,"1997":77739,"1998":79851,"1999":81831,"2000":83584,"2001":85057,"2002":"86266","2003":"87293","2004":"88257","2005":"89253","2006":"90301","2007":"91381","2008":"92478","2009":"93581","2010":"94661","2011":"95719","2012":"96777","2013":"97824","2014":"98875","2015":"99923","2016":100963,"Country Name":"Antigua and Barbuda","Country Code":"ATG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":10276477,"1961":10483000,"1962":10742000,"1963":10950000,"1964":11167000,"1965":11388000,"1966":11651000,"1967":11799000,"1968":12009000,"1969":12263000,"1970":12507000,"1971":12937000,"1972":13177000,"1973":13380000,"1974":13723000,"1975":13893000,"1976":14033000,"1977":14192000,"1978":14358000,"1979":14514000,"1980":14692000,"1981":14927000,"1982":15178000,"1983":15369000,"1984":15544000,"1985":15758000,"1986":16018400,"1987":16263900,"1988":16532200,"1989":16814400,"1990":17065100,"1991":17284000,"1992":17495000,"1993":17667000,"1994":17855000,"1995":18072000,"1996":18311000,"1997":18517000,"1998":18711000,"1999":18926000,"2000":19153000,"2001":19413000,"2002":"19651400","2003":"19895400","2004":"20127400","2005":"20394800","2006":"20697900","2007":"20827600","2008":"21249200","2009":"21691700","2010":"22031750","2011":"22340024","2012":"22728254","2013":"23117353","2014":"23460694","2015":"23789338","2016":24127159,"Country Name":"Australia","Country Code":"AUS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7047539,"1961":7086299,"1962":7129864,"1963":7175811,"1964":7223801,"1965":7270889,"1966":7322066,"1967":7376998,"1968":7415403,"1969":7441055,"1970":7467086,"1971":7500482,"1972":7544201,"1973":7586115,"1974":7599038,"1975":7578903,"1976":7565525,"1977":7568430,"1978":7562305,"1979":7549425,"1980":7549433,"1981":7568710,"1982":7574140,"1983":7561910,"1984":7561434,"1985":7564985,"1986":7569794,"1987":7574586,"1988":7585317,"1989":7619567,"1990":7677850,"1991":7754891,"1992":7840709,"1993":7905633,"1994":7936118,"1995":7948278,"1996":7959017,"1997":7968041,"1998":7976789,"1999":7992324,"2000":8011566,"2001":8042293,"2002":"8081957","2003":"8121423","2004":"8171966","2005":"8227829","2006":"8268641","2007":"8295487","2008":"8321496","2009":"8343323","2010":"8363404","2011":"8391643","2012":"8429991","2013":"8479375","2014":"8541575","2015":"8633169","2016":8747358,"Country Name":"Austria","Country Code":"AUT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3895396,"1961":4030320,"1962":4171425,"1963":4315128,"1964":4456689,"1965":4592610,"1966":4721525,"1967":4843870,"1968":4960235,"1969":5071930,"1970":5180025,"1971":5284532,"1972":5385267,"1973":5483084,"1974":5579077,"1975":5674137,"1976":5768724,"1977":5863134,"1978":5957929,"1979":6053645,"1980":6150738,"1981":6249320,"1982":6349558,"1983":6452076,"1984":6557585,"1985":6666455,"1986":6778633,"1987":6893500,"1988":7010036,"1989":7126891,"1990":7159000,"1991":7271000,"1992":7382000,"1993":7495000,"1994":7597000,"1995":7685000,"1996":7763000,"1997":7838250,"1998":7913000,"1999":7982750,"2000":8048600,"2001":8111200,"2002":"8171950","2003":"8234100","2004":"8306500","2005":"8391850","2006":"8484550","2007":"8581300","2008":"8763400","2009":"8947243","2010":"9054332","2011":"9173082","2012":"9295784","2013":"9416801","2014":"9535079","2015":"9649341","2016":9762274,"Country Name":"Azerbaijan","Country Code":"AZE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2786106,"1961":2839666,"1962":2893669,"1963":2949926,"1964":3010859,"1965":3077876,"1966":3152723,"1967":3234023,"1968":3316233,"1969":3391753,"1970":3455606,"1971":3505391,"1972":3544047,"1973":3578490,"1974":3618585,"1975":3671494,"1976":3739659,"1977":3821194,"1978":3913768,"1979":4013310,"1980":4116817,"1981":4223195,"1982":4333386,"1983":4448728,"1984":4571292,"1985":4702066,"1986":4841565,"1987":4987736,"1988":5135956,"1989":5280024,"1990":5415415,"1991":5542048,"1992":5661139,"1993":5771398,"1994":5871607,"1995":5962058,"1996":6041112,"1997":6112097,"1998":6186352,"1999":6278940,"2000":6400706,"2001":6555829,"2002":"6741569","2003":"6953113","2004":"7182451","2005":"7423289","2006":"7675338","2007":"7939573","2008":"8212264","2009":"8489031","2010":"8766930","2011":"9043508","2012":"9319710","2013":"9600186","2014":"9891790","2015":"10199270","2016":10524117,"Country Name":"Burundi","Country Code":"BDI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":9153489,"1961":9183948,"1962":9220578,"1963":9289770,"1964":9378113,"1965":9463667,"1966":9527807,"1967":9580991,"1968":9618756,"1969":9646032,"1970":9655549,"1971":9673162,"1972":9711115,"1973":9741720,"1974":9772419,"1975":9800700,"1976":9818227,"1977":9830358,"1978":9839534,"1979":9848382,"1980":9859242,"1981":9858982,"1982":9856303,"1983":9855520,"1984":9855372,"1985":9858308,"1986":9861823,"1987":9870234,"1988":9901664,"1989":9937697,"1990":9967379,"1991":10004486,"1992":10045158,"1993":10084475,"1994":10115603,"1995":10136811,"1996":10156637,"1997":10181245,"1998":10203008,"1999":10226419,"2000":10251250,"2001":10286570,"2002":"10332785","2003":"10376133","2004":"10421137","2005":"10478617","2006":"10547958","2007":"10625700","2008":"10709973","2009":"10796493","2010":"10895586","2011":"11047744","2012":"11128246","2013":"11182817","2014":"11209057","2015":"11274196","2016":11348159,"Country Name":"Belgium","Country Code":"BEL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2431622,"1961":2465867,"1962":2502896,"1963":2542859,"1964":2585965,"1965":2632356,"1966":2682159,"1967":2735307,"1968":2791590,"1969":2850661,"1970":2912340,"1971":2976572,"1972":3043567,"1973":3113675,"1974":3187412,"1975":3265165,"1976":3347173,"1977":3433439,"1978":3523938,"1979":3618526,"1980":3717165,"1981":3820128,"1982":3927714,"1983":4039949,"1984":4156819,"1985":4278501,"1986":4404506,"1987":4535263,"1988":4672852,"1989":4820016,"1990":4978496,"1991":5149499,"1992":5331803,"1993":5521763,"1994":5714220,"1995":5905558,"1996":6094259,"1997":6281639,"1998":6470265,"1999":6664098,"2000":6865951,"2001":7076733,"2002":"7295394","2003":"7520555","2004":"7750004","2005":"7982225","2006":"8216896","2007":"8454791","2008":"8696916","2009":"8944706","2010":"9199259","2011":"9460802","2012":"9729160","2013":"10004451","2014":"10286712","2015":"10575952","2016":10872298,"Country Name":"Benin","Country Code":"BEN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4829288,"1961":4894580,"1962":4960326,"1963":5027821,"1964":5098890,"1965":5174870,"1966":5256363,"1967":5343019,"1968":5434041,"1969":5528174,"1970":5624600,"1971":5723381,"1972":5825173,"1973":5930483,"1974":6040041,"1975":6154545,"1976":6274037,"1977":6398935,"1978":6530819,"1979":6671656,"1980":6822843,"1981":6985160,"1982":7158255,"1983":7340905,"1984":7531242,"1985":7727907,"1986":7930694,"1987":8140073,"1988":8356305,"1989":8579823,"1990":8811034,"1991":9050084,"1992":9297113,"1993":9552476,"1994":9816588,"1995":10089878,"1996":10372745,"1997":10665546,"1998":10968724,"1999":11282701,"2000":11607942,"2001":11944587,"2002":"12293100","2003":"12654621","2004":"13030569","2005":"13421930","2006":"13829177","2007":"14252021","2008":"14689726","2009":"15141099","2010":"15605217","2011":"16081904","2012":"16571216","2013":"17072723","2014":"17585977","2015":"18110624","2016":18646433,"Country Name":"Burkina Faso","Country Code":"BFA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":48199747,"1961":49592802,"1962":51030137,"1963":52532417,"1964":54129100,"1965":55834038,"1966":57672990,"1967":59620669,"1968":61579473,"1969":63417394,"1970":65047770,"1971":66424744,"1972":67597470,"1973":68691185,"1974":69884420,"1975":71305923,"1976":72999136,"1977":74925896,"1978":77033846,"1979":79236776,"1980":81470860,"1981":83721268,"1982":86007331,"1983":88338242,"1984":90732362,"1985":93199865,"1986":95742431,"1987":98343809,"1988":100975321,"1989":103599232,"1990":106188642,"1991":108727432,"1992":111221938,"1993":113695139,"1994":116182267,"1995":118706871,"1996":121269645,"1997":123854640,"1998":126447965,"1999":129029691,"2000":131581243,"2001":134107160,"2002":"136600667","2003":"139019001","2004":"141307489","2005":"143431101","2006":"145368004","2007":"147139191","2008":"148805814","2009":"150454708","2010":"152149102","2011":"153911916","2012":"155727053","2013":"157571292","2014":"159405279","2015":"161200886","2016":162951560,"Country Name":"Bangladesh","Country Code":"BGD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7867374,"1961":7943118,"1962":8012946,"1963":8078145,"1964":8144340,"1965":8204168,"1966":8258057,"1967":8310226,"1968":8369603,"1969":8434172,"1970":8489574,"1971":8536395,"1972":8576200,"1973":8620967,"1974":8678745,"1975":8720742,"1976":8758599,"1977":8804183,"1978":8814032,"1979":8825940,"1980":8861535,"1981":8891117,"1982":8917457,"1983":8939738,"1984":8960679,"1985":8960547,"1986":8958171,"1987":8971359,"1988":8981446,"1989":8876972,"1990":8718289,"1991":8632367,"1992":8540164,"1993":8472313,"1994":8443591,"1995":8406067,"1996":8362826,"1997":8312068,"1998":8256786,"1999":8210624,"2000":8170172,"2001":8009142,"2002":"7837161","2003":"7775327","2004":"7716860","2005":"7658972","2006":"7601022","2007":"7545338","2008":"7492561","2009":"7444443","2010":"7395599","2011":"7348328","2012":"7305888","2013":"7265115","2014":"7223938","2015":"7177991","2016":7127822,"Country Name":"Bulgaria","Country Code":"BGR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":162427,"1961":167894,"1962":173144,"1963":178140,"1964":182887,"1965":187431,"1966":191780,"1967":196063,"1968":200653,"1969":206043,"1970":212605,"1971":220312,"1972":229155,"1973":239527,"1974":251911,"1975":266543,"1976":283752,"1977":303175,"1978":323473,"1979":342798,"1980":359888,"1981":374120,"1982":385950,"1983":396454,"1984":407227,"1985":419430,"1986":433482,"1987":448973,"1988":465202,"1989":481090,"1990":495931,"1991":509765,"1992":523087,"1993":536213,"1994":549588,"1995":563699,"1996":578668,"1997":594930,"1998":613702,"1999":636545,"2000":664614,"2001":697549,"2002":"735148","2003":"778711","2004":"829848","2005":"889168","2006":"958414","2007":"1035891","2008":"1114590","2009":"1185029","2010":"1240862","2011":"1278269","2012":"1300217","2013":"1315411","2014":"1336397","2015":"1371855","2016":1425171,"Country Name":"Bahrain","Country Code":"BHR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":109528,"1961":115108,"1962":121083,"1963":127333,"1964":133698,"1965":140054,"1966":146366,"1967":152609,"1968":158627,"1969":164248,"1970":169354,"1971":173863,"1972":177839,"1973":181488,"1974":185099,"1975":188882,"1976":192902,"1977":197111,"1978":201513,"1979":206032,"1980":210661,"1981":215396,"1982":220275,"1983":225187,"1984":230015,"1985":234687,"1986":239131,"1987":243393,"1988":247579,"1989":251849,"1990":256336,"1991":261116,"1992":266134,"1993":271165,"1994":275895,"1995":280150,"1996":283790,"1997":286970,"1998":290060,"1999":293572,"2000":297890,"2001":303135,"2002":"309157","2003":"315746","2004":"322526","2005":"329249","2006":"335830","2007":"342328","2008":"348676","2009":"354856","2010":"360832","2011":"366568","2012":"372039","2013":"377240","2014":"382169","2015":"386838","2016":391232,"Country Name":"Bahamas","Country Code":"BHS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3225668,"1961":3288602,"1962":3353226,"1963":3417574,"1964":3478995,"1965":3535640,"1966":3586634,"1967":3632669,"1968":3675452,"1969":3717466,"1970":3760527,"1971":3805285,"1972":3851151,"1973":3897255,"1974":3942223,"1975":3985103,"1976":4025265,"1977":4063191,"1978":4100350,"1979":4138819,"1980":4179855,"1981":4222511,"1982":4265310,"1983":4308106,"1984":4350746,"1985":4392130,"1986":4435504,"1987":4478519,"1988":4508056,"1989":4506653,"1990":4463422,"1991":4371603,"1992":4239154,"1993":4087999,"1994":3948816,"1995":3843712,"1996":3780378,"1997":3752431,"1998":3750485,"1999":3759118,"2000":3766706,"2001":3771284,"2002":"3775807","2003":"3779247","2004":"3781287","2005":"3781530","2006":"3779468","2007":"3774000","2008":"3763599","2009":"3746561","2010":"3722084","2011":"3688865","2012":"3648200","2013":"3604999","2014":"3566002","2015":"3535961","2016":3516816,"Country Name":"Bosnia and Herz.","Country Code":"BIH","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8198000,"1961":8271216,"1962":8351928,"1963":8437232,"1964":8524224,"1965":8610000,"1966":8696496,"1967":8785648,"1968":8874552,"1969":8960304,"1970":9040000,"1971":9115576,"1972":9188968,"1973":9257272,"1974":9317584,"1975":9367000,"1976":9411000,"1977":9463000,"1978":9525000,"1979":9584000,"1980":9643000,"1981":9710000,"1982":9776000,"1983":9843000,"1984":9910000,"1985":9975000,"1986":10043000,"1987":10111000,"1988":10140000,"1989":10170000,"1990":10189000,"1991":10194000,"1992":10216000,"1993":10239000,"1994":10227000,"1995":10194000,"1996":10160000,"1997":10117000,"1998":10069000,"1999":10026738,"2000":9979610,"2001":9928549,"2002":"9865548","2003":"9796749","2004":"9730146","2005":"9663915","2006":"9604924","2007":"9560953","2008":"9527985","2009":"9506765","2010":"9490583","2011":"9473172","2012":"9464495","2013":"9465997","2014":"9474511","2015":"9489616","2016":9507120,"Country Name":"Belarus","Country Code":"BLR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{ountry Name":"Belize","Country Code":"BLZ","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":44400,"1961":45500,"1962":46600,"1963":47700,"1964":48900,"1965":50100,"1966":51000,"1967":52000,"1968":53000,"1969":54000,"1970":55000,"1971":54600,"1972":54200,"1973":53800,"1974":53400,"1975":53000,"1976":53200,"1977":53400,"1978":53600,"1979":53800,"1980":54670,"1981":55050,"1982":55449,"1983":55930,"1984":56423,"1985":56898,"1986":57382,"1987":57849,"1988":58347,"1989":58841,"1990":59326,"1991":59021,"1992":58595,"1993":58910,"1994":59320,"1995":59746,"1996":60129,"1997":60497,"1998":60943,"1999":61285,"2000":61833,"2001":62504,"2002":"62912","2003":"63325","2004":"63740","2005":"64154","2006":"64523","2007":"64888","2008":"65273","2009":"65636","2010":"65124","2011":"64564","2012":"64798","2013":"65001","2014":"65139","2015":"65235","2016":65331,"Country Name":"Bermuda","Country Code":"BMU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3693449,"1961":3764813,"1962":3838097,"1963":3913395,"1964":3990857,"1965":4070590,"1966":4152668,"1967":4237125,"1968":4324064,"1969":4413590,"1970":4505778,"1971":4600591,"1972":4698083,"1973":4798509,"1974":4902168,"1975":5009257,"1976":5119833,"1977":5233677,"1978":5350322,"1979":5469123,"1980":5589575,"1981":5711599,"1982":5835182,"1983":5959960,"1984":6085496,"1985":6211550,"1986":6337893,"1987":6464732,"1988":6592787,"1989":6723046,"1990":6856244,"1991":6992521,"1992":7131707,"1993":7273825,"1994":7418861,"1995":7566714,"1996":7717443,"1997":7870855,"1998":8026254,"1999":8182712,"2000":8339512,"2001":8496375,"2002":"8653345","2003":"8810420","2004":"8967741","2005":"9125409","2006":"9283334","2007":"9441444","2008":"9599855","2009":"9758748","2010":"9918242","2011":"10078343","2012":"10239004","2013":"10400264","2014":"10562159","2015":"10724705","2016":10887882,"Country Name":"Bolivia","Country Code":"BOL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":72207554,"1961":74351763,"1962":76573248,"1963":78854019,"1964":81168654,"1965":83498020,"1966":85837799,"1967":88191378,"1968":90557064,"1969":92935072,"1970":95326793,"1971":97728961,"1972":100143598,"1973":102584278,"1974":105069367,"1975":107612100,"1976":110213082,"1977":112867867,"1978":115577669,"1979":118342626,"1980":121159761,"1981":124030908,"1982":126947365,"1983":129882321,"1984":132800684,"1985":135676281,"1986":138499464,"1987":141273488,"1988":144001542,"1989":146691981,"1990":149352145,"1991":151976577,"1992":154564278,"1993":157132682,"1994":159705123,"1995":162296612,"1996":164913306,"1997":167545164,"1998":170170640,"1999":172759243,"2000":175287587,"2001":177750670,"2002":"180151021","2003":"182482149","2004":"184738458","2005":"186917361","2006":"189012412","2007":"191026637","2008":"192979029","2009":"194895996","2010":"196796269","2011":"198686688","2012":"200560983","2013":"202408632","2014":"204213133","2015":"205962108","2016":207652865,"Country Name":"Brazil","Country Code":"BRA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":230939,"1961":231678,"1962":232586,"1963":233587,"1964":234547,"1965":235374,"1966":236044,"1967":236621,"1968":237199,"1969":237913,"1970":238848,"1971":240035,"1972":241441,"1973":242976,"1974":244539,"1975":246034,"1976":247444,"1977":248784,"1978":250032,"1979":251177,"1980":252194,"1981":253080,"1982":253841,"1983":254518,"1984":255193,"1985":255924,"1986":256736,"1987":257611,"1988":258527,"1989":259458,"1990":260374,"1991":261275,"1992":262184,"1993":263089,"1994":264015,"1995":264959,"1996":265942,"1997":266945,"1998":267950,"1999":268922,"2000":269847,"2001":270685,"2002":"271478","2003":"272258","2004":"273091","2005":"274009","2006":"275039","2007":"276150","2008":"277319","2009":"278470","2010":"279569","2011":"280601","2012":"281585","2013":"282509","2014":"283385","2015":"284217","2016":284996,"Country Name":"Barbados","Country Code":"BRB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{ountry Name":"Brunei","Country Code":"BRN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":223288,"1961":228918,"1962":234706,"1963":240778,"1964":247325,"1965":254464,"1966":262244,"1967":270622,"1968":279515,"1969":288774,"1970":298301,"1971":308053,"1972":318045,"1973":328312,"1974":338943,"1975":349982,"1976":361455,"1977":373324,"1978":385384,"1979":397390,"1980":409172,"1981":420380,"1982":431050,"1983":441847,"1984":453720,"1985":467178,"1986":482952,"1987":500437,"1988":517273,"1989":530257,"1990":537280,"1991":537284,"1992":531525,"1993":523117,"1994":516503,"1995":514877,"1996":519282,"1997":528754,"1998":542155,"1999":557543,"2000":573416,"2001":589600,"2002":"606399","2003":"623434","2004":"640282","2005":"656639","2006":"672228","2007":"686958","2008":"700950","2009":"714458","2010":"727641","2011":"740510","2012":"752967","2013":"764961","2014":"776448","2015":"787386","2016":797765,"Country Name":"Bhutan","Country Code":"BTN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":524552,"1961":537249,"1962":550840,"1963":565353,"1964":580799,"1965":597190,"1966":614613,"1967":633154,"1968":652843,"1969":673640,"1970":695597,"1971":718639,"1972":742835,"1973":768512,"1974":796095,"1975":825840,"1976":857855,"1977":891926,"1978":927585,"1979":964166,"1980":1001158,"1981":1038397,"1982":1075889,"1983":1113539,"1984":1151292,"1985":1189114,"1986":1226810,"1987":1264314,"1988":1301818,"1989":1339624,"1990":1377912,"1991":1416731,"1992":1455833,"1993":1494693,"1994":1532622,"1995":1569094,"1996":1604060,"1997":1637635,"1998":1669625,"1999":1699862,"2000":1728340,"2001":1754935,"2002":"1779953","2003":"1804339","2004":"1829330","2005":"1855852","2006":"1884238","2007":"1914414","2008":"1946351","2009":"1979882","2010":"2014866","2011":"2051339","2012":"2089315","2013":"2128507","2014":"2168573","2015":"2209197","2016":2250260,"Country Name":"Botswana","Country Code":"BWA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1503508,"1961":1529227,"1962":1556661,"1963":1585763,"1964":1616516,"1965":1648833,"1966":1682885,"1967":1718603,"1968":1755344,"1969":1792220,"1970":1828709,"1971":1864598,"1972":1900317,"1973":1936841,"1974":1975521,"1975":2017372,"1976":2062405,"1977":2110457,"1978":2162249,"1979":2218575,"1980":2279821,"1981":2346797,"1982":2418844,"1983":2493135,"1984":2565803,"1985":2634232,"1986":2696982,"1987":2755244,"1988":2812244,"1989":2872668,"1990":2939780,"1991":3014624,"1992":3095807,"1993":3181222,"1994":3267670,"1995":3352767,"1996":3435821,"1997":3517309,"1998":3597385,"1999":3676508,"2000":3754986,"2001":3832203,"2002":"3907612","2003":"3981665","2004":"4055036","2005":"4127910","2006":"4201758","2007":"4275800","2008":"4345386","2009":"4404230","2010":"4448525","2011":"4476153","2012":"4490416","2013":"4499653","2014":"4515392","2015":"4546100","2016":4594621,"Country Name":"Central African Rep.","Country Code":"CAF","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":17909009,"1961":18271000,"1962":18614000,"1963":18964000,"1964":19325000,"1965":19678000,"1966":20048000,"1967":20412000,"1968":20744000,"1969":21028000,"1970":21324000,"1971":21645535,"1972":21993631,"1973":22369408,"1974":22774087,"1975":23209000,"1976":23518000,"1977":23796000,"1978":24036000,"1979":24277000,"1980":24593000,"1981":24900000,"1982":25202000,"1983":25456000,"1984":25702000,"1985":25942000,"1986":26204000,"1987":26550000,"1988":26895000,"1989":27379000,"1990":27791000,"1991":28171682,"1992":28519597,"1993":28833410,"1994":29111906,"1995":29354000,"1996":29671900,"1997":29987200,"1998":30247900,"1999":30499200,"2000":30769700,"2001":31081900,"2002":"31362000","2003":"31676000","2004":"31995000","2005":"32312000","2006":"32570505","2007":"32887928","2008":"33245773","2009":"33628571","2010":"34005274","2011":"34342780","2012":"34750545","2013":"35155451","2014":"35544564","2015":"35848610","2016":36286425,"Country Name":"Canada","Country Code":"CAN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":91401583,"1961":92237118,"1962":93014890,"1963":93845749,"1964":94722599,"1965":95447065,"1966":96148635,"1967":97043587,"1968":97882394,"1969":98602140,"1970":99133296,"1971":99638983,"1972":100363597,"1973":101120519,"1974":101946256,"1975":102862489,"1976":103770134,"1977":104589313,"1978":105304312,"1979":105924838,"1980":106564905,"1981":107187982,"1982":107770794,"1983":108326895,"1984":108853181,"1985":109360296,"1986":109847148,"1987":110296680,"1988":110688533,"1989":110801380,"1990":110745760,"1991":110290445,"1992":110005636,"1993":110081461,"1994":110019570,"1995":109913216,"1996":109563097,"1997":109459093,"1998":109207205,"1999":109102354,"2000":108405522,"2001":107800399,"2002":"107097577","2003":"106760768","2004":"106466116","2005":"106173766","2006":"105901322","2007":"105504531","2008":"105126686","2009":"104924372","2010":"104543801","2011":"104174038","2012":"103935318","2013":"103713726","2014":"103496179","2015":"103257751","2016":102974082,"Country Name":"Central Europe and the Baltics","Country Code":"CEB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5327827,"1961":5434294,"1962":5573815,"1963":5694247,"1964":5789228,"1965":5856472,"1966":5918002,"1967":5991785,"1968":6067714,"1969":6136387,"1970":6180877,"1971":6213399,"1972":6260956,"1973":6307347,"1974":6341405,"1975":6338632,"1976":6302504,"1977":6281174,"1978":6281738,"1979":6294365,"1980":6319408,"1981":6354074,"1982":6391309,"1983":6418773,"1984":6441865,"1985":6470365,"1986":6504124,"1987":6545106,"1988":6593386,"1989":6646912,"1990":6715519,"1991":6799978,"1992":6875364,"1993":6938265,"1994":6993795,"1995":7040687,"1996":7071850,"1997":7088906,"1998":7110001,"1999":7143991,"2000":7184250,"2001":7229854,"2002":"7284753","2003":"7339001","2004":"7389625","2005":"7437115","2006":"7483934","2007":"7551117","2008":"7647675","2009":"7743831","2010":"7824909","2011":"7912398","2012":"7996861","2013":"8089346","2014":"8188649","2015":"8282396","2016":8372098,"Country Name":"Switzerland","Country Code":"CHE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":109420,"1961":110399,"1962":111457,"1963":112595,"1964":113773,"1965":114995,"1966":116227,"1967":117474,"1968":118726,"1969":119972,"1970":121197,"1971":122413,"1972":123614,"1973":124725,"1974":125682,"1975":126415,"1976":126902,"1977":127183,"1978":127390,"1979":127692,"1980":128212,"1981":128981,"1982":129979,"1983":131156,"1984":132453,"1985":133808,"1986":135230,"1987":136716,"1988":138187,"1989":139530,"1990":140671,"1991":141568,"1992":142258,"1993":142819,"1994":143384,"1995":144046,"1996":144829,"1997":145715,"1998":146671,"1999":147687,"2000":148725,"2001":149793,"2002":"150901","2003":"152038","2004":"153170","2005":"154294","2006":"155411","2007":"156513","2008":"157581","2009":"158603","2010":"159581","2011":"160497","2012":"161358","2013":"162180","2014":"162969","2015":"163758","2016":164541,"Country Name":"Channel Islands","Country Code":"CHI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7716625,"1961":7890156,"1962":8067136,"1963":8247415,"1964":8430838,"1965":8617077,"1966":8806137,"1967":8997325,"1968":9188822,"1969":9378243,"1970":9563865,"1971":9745189,"1972":9922558,"1973":10096295,"1974":10267056,"1975":10435534,"1976":10601836,"1977":10766419,"1978":10930783,"1979":11096868,"1980":11266226,"1981":11439144,"1982":11615836,"1983":11797534,"1984":11985658,"1985":12181028,"1986":12384108,"1987":12594145,"1988":12809025,"1989":13025797,"1990":13242132,"1991":13457244,"1992":13671033,"1993":13882668,"1994":14091389,"1995":14296613,"1996":14497826,"1997":14694835,"1998":14887756,"1999":15076952,"2000":15262754,"2001":15444969,"2002":"15623635","2003":"15799542","2004":"15973778","2005":"16147064","2006":"16319792","2007":"16491687","2008":"16661942","2009":"16829442","2010":"16993354","2011":"17153357","2012":"17309746","2013":"17462982","2014":"17613798","2015":"17762681","2016":17909754,"Country Name":"Chile","Country Code":"CHL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":667070000,"1961":660330000,"1962":665770000,"1963":682335000,"1964":698355000,"1965":715185000,"1966":735400000,"1967":754550000,"1968":774510000,"1969":796025000,"1970":818315000,"1971":841105000,"1972":862030000,"1973":881940000,"1974":900350000,"1975":916395000,"1976":930685000,"1977":943455000,"1978":956165000,"1979":969005000,"1980":981235000,"1981":993885000,"1982":1008630000,"1983":1023310000,"1984":1036825000,"1985":1051040000,"1986":1066790000,"1987":1084035000,"1988":1101630000,"1989":1118650000,"1990":1135185000,"1991":1150780000,"1992":1164970000,"1993":1178440000,"1994":1191835000,"1995":1204855000,"1996":1217550000,"1997":1230075000,"1998":1241935000,"1999":1252735000,"2000":1262645000,"2001":1271850000,"2002":"1280400000","2003":"1288400000","2004":"1296075000","2005":"1303720000","2006":"1311020000","2007":"1317885000","2008":"1324655000","2009":"1331260000","2010":"1337705000","2011":"1344130000","2012":"1350695000","2013":"1357380000","2014":"1364270000","2015":"1371220000","2016":1378665000,"Country Name":"China","Country Code":"CHN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3558988,"1961":3694205,"1962":3841071,"1963":3996941,"1964":4157965,"1965":4321791,"1966":4487204,"1967":4656353,"1968":4834279,"1969":5027971,"1970":5242395,"1971":5479338,"1972":5737281,"1973":6013862,"1974":6305287,"1975":6608609,"1976":6922982,"1977":7248828,"1978":7585914,"1979":7934279,"1980":8293675,"1981":8664057,"1982":9044473,"1983":9432731,"1984":9826055,"1985":10222558,"1986":10620267,"1987":11019651,"1988":11424260,"1989":11839243,"1990":12267754,"1991":12710008,"1992":13163019,"1993":13622731,"1994":14083611,"1995":14540820,"1996":14995249,"1997":15445986,"1998":15884552,"1999":16300233,"2000":16686561,"2001":17040152,"2002":"17366517","2003":"17679355","2004":"17997738","2005":"18336303","2006":"18699435","2007":"19085941","2008":"19497986","2009":"19936366","2010":"20401331","2011":"20895311","2012":"21418603","2013":"21966312","2014":"22531350","2015":"23108472","2016":23695919,"Country Name":"Cote d'Ivoire","Country Code":"CIV","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5176268,"1961":5285231,"1962":5399922,"1963":5520332,"1964":5646316,"1965":5777834,"1966":5915123,"1967":6058539,"1968":6208282,"1969":6364569,"1970":6527635,"1971":6697745,"1972":6875228,"1973":7060603,"1974":7254468,"1975":7457362,"1976":7669445,"1977":7890969,"1978":8122529,"1979":8364835,"1980":8618354,"1981":8883016,"1982":9158566,"1983":9445003,"1984":9742263,"1985":10050023,"1986":10368300,"1987":10696274,"1988":11031817,"1989":11372160,"1990":11715218,"1991":12060729,"1992":12408931,"1993":12758881,"1994":13109660,"1995":13460994,"1996":13812472,"1997":14165423,"1998":14523570,"1999":14891891,"2000":15274234,"2001":15671927,"2002":"16084886","2003":"16513822","2004":"16959081","2005":"17420795","2006":"17899562","2007":"18395389","2008":"18907008","2009":"19432541","2010":"19970495","2011":"20520447","2012":"21082383","2013":"21655715","2014":"22239904","2015":"22834522","2016":23439189,"Country Name":"Cameroon","Country Code":"CMR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":15248251,"1961":15637733,"1962":16041263,"1963":16461930,"1964":16903923,"1965":17369883,"1966":17861881,"1967":18378214,"1968":18913203,"1969":19458904,"1970":20009935,"1971":20562865,"1972":21120140,"1973":21689239,"1974":22280923,"1975":22902319,"1976":23559071,"1977":24247550,"1978":24954655,"1979":25661884,"1980":26357462,"1981":27039468,"1982":27717337,"1983":28404876,"1984":29121474,"1985":29883446,"1986":30685824,"1987":31529823,"1988":32444156,"1989":33465441,"1990":34614581,"1991":35914825,"1992":37346147,"1993":38833595,"1994":40273701,"1995":41595744,"1996":42770544,"1997":43830146,"1998":44840529,"1999":45898667,"2000":47076387,"2001":48394338,"2002":"49835756","2003":"51390033","2004":"53034217","2005":"54751476","2006":"56543011","2007":"58417562","2008":"60373608","2009":"62409435","2010":"64523263","2011":"66713597","2012":"68978682","2013":"71316033","2014":"73722860","2015":"76196619","2016":78736153,"Country Name":"Dem. Rep. Congo","Country Code":"COD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1037220,"1961":1064111,"1962":1092292,"1963":1121735,"1964":1152412,"1965":1184316,"1966":1217391,"1967":1251703,"1968":1287516,"1969":1325147,"1970":1364812,"1971":1406643,"1972":1450518,"1973":1496047,"1974":1542690,"1975":1590039,"1976":1637941,"1977":1686524,"1978":1736099,"1979":1787129,"1980":1839935,"1981":1894676,"1982":1951195,"1983":2009165,"1984":2068132,"1985":2127770,"1986":2188046,"1987":2249146,"1988":2311348,"1989":2375008,"1990":2440457,"1991":2507772,"1992":2577035,"1993":2648507,"1994":2722497,"1995":2799255,"1996":2879222,"1997":2962470,"1998":3048453,"1999":3136344,"2000":3225727,"2001":3315806,"2002":"3407180","2003":"3502519","2004":"3605439","2005":"3718243","2006":"3842365","2007":"3976246","2008":"4115435","2009":"4253712","2010":"4386693","2011":"4512730","2012":"4633363","2013":"4751393","2014":"4871101","2015":"4995648","2016":5125821,"Country Name":"Congo","Country Code":"COG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":16480383,"1961":16982315,"1962":17500171,"1963":18033550,"1964":18581974,"1965":19144223,"1966":19721462,"1967":20311371,"1968":20905059,"1969":21490945,"1970":22061215,"1971":22611986,"1972":23146803,"1973":23674504,"1974":24208021,"1975":24756973,"1976":25323406,"1977":25905127,"1978":26502166,"1979":27113512,"1980":27737900,"1981":28375991,"1982":29027162,"1983":29687094,"1984":30350086,"1985":31011688,"1986":31669776,"1987":32324325,"1988":32975535,"1989":33624444,"1990":34271565,"1991":34916766,"1992":35558682,"1993":36195168,"1994":36823537,"1995":37441977,"1996":38049038,"1997":38645411,"1998":39234062,"1999":39819279,"2000":40403958,"2001":40988909,"2002":"41572491","2003":"42152151","2004":"42724163","2005":"43285634","2006":"43835722","2007":"44374572","2008":"44901544","2009":"45416181","2010":"45918097","2011":"46406646","2012":"46881475","2013":"47342981","2014":"47791911","2015":"48228697","2016":48653419,"Country Name":"Colombia","Country Code":"COL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":191121,"1961":194139,"1962":197198,"1963":200372,"1964":203753,"1965":207424,"1966":211478,"1967":215897,"1968":220575,"1969":225325,"1970":230054,"1971":234644,"1972":239235,"1973":244208,"1974":250104,"1975":257290,"1976":265953,"1977":275900,"1978":286634,"1979":297447,"1980":307829,"1981":317606,"1982":326946,"1983":336096,"1984":345466,"1985":355337,"1986":365760,"1987":376654,"1988":387963,"1989":399632,"1990":411594,"1991":423872,"1992":436448,"1993":449274,"1994":462277,"1995":475394,"1996":488627,"1997":501953,"1998":515385,"1999":528848,"2000":542357,"2001":555888,"2002":"569479","2003":"583211","2004":"597228","2005":"611627","2006":"626425","2007":"641620","2008":"657229","2009":"673252","2010":"689692","2011":"706569","2012":"723868","2013":"741500","2014":"759385","2015":"777424","2016":795601,"Country Name":"Comoros","Country Code":"COM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":202310,"1961":205956,"1962":210867,"1963":216908,"1964":223846,"1965":231428,"1966":239770,"1967":248747,"1968":257509,"1969":264909,"1970":270198,"1971":272992,"1972":273651,"1973":273005,"1974":272292,"1975":272423,"1976":273652,"1977":275767,"1978":278739,"1979":282415,"1980":286657,"1981":291602,"1982":297285,"1983":303368,"1984":309397,"1985":315069,"1986":320183,"1987":324893,"1988":329671,"1989":335184,"1990":341883,"1991":349934,"1992":359090,"1993":369014,"1994":379156,"1995":389127,"1996":398773,"1997":408175,"1998":417323,"1999":426285,"2000":435079,"2001":443716,"2002":"452106","2003":"460147","2004":"467664","2005":"474567","2006":"480795","2007":"486438","2008":"491723","2009":"496963","2010":"502384","2011":"508067","2012":"513979","2013":"520106","2014":"526437","2015":"532913","2016":539560,"Country Name":"Cabo Verde","Country Code":"CPV","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1333040,"1961":1381917,"1962":1432585,"1963":1484510,"1964":1537041,"1965":1589621,"1966":1642186,"1967":1694710,"1968":1746869,"1969":1798311,"1970":1848866,"1971":1898360,"1972":1947048,"1973":1995743,"1974":2045580,"1975":2097407,"1976":2151497,"1977":2207725,"1978":2266154,"1979":2326704,"1980":2389310,"1981":2454129,"1982":2521168,"1983":2589930,"1984":2659781,"1985":2730233,"1986":2800986,"1987":2872211,"1988":2944557,"1989":3018955,"1990":3095995,"1991":3175649,"1992":3257466,"1993":3341004,"1994":3425690,"1995":3510926,"1996":3596732,"1997":3682725,"1998":3767373,"1999":3848723,"2000":3925443,"2001":3996798,"2002":"4063204","2003":"4125971","2004":"4187038","2005":"4247841","2006":"4308794","2007":"4369469","2008":"4429508","2009":"4488263","2010":"4545280","2011":"4600474","2012":"4654122","2013":"4706401","2014":"4757575","2015":"4807852","2016":4857274,"Country Name":"Costa Rica","Country Code":"CRI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4198307,"1961":4277802,"1962":4357746,"1963":4436804,"1964":4513246,"1965":4585777,"1966":4653919,"1967":4718167,"1968":4779624,"1969":4839881,"1970":4900059,"1971":4960647,"1972":5021359,"1973":5082049,"1974":5142246,"1975":5201705,"1976":5260062,"1977":5317542,"1978":5375393,"1979":5435143,"1980":5497756,"1981":5564200,"1982":5633661,"1983":5702754,"1984":5766957,"1985":5823242,"1986":5870023,"1987":5908886,"1988":5943661,"1989":5979907,"1990":6021614,"1991":6070204,"1992":6124265,"1993":6181538,"1994":6238576,"1995":6292827,"1996":6343683,"1997":6392040,"1998":6438587,"1999":6484510,"2000":6530691,"2001":6577216,"2002":"6623792","2003":"6670276","2004":"6716373","2005":"6761932","2006":"6806838","2007":"6851221","2008":"6895315","2009":"6939534","2010":"6984096","2011":"7029022","2012":"7074129","2013":"7118888","2014":"7162679","2015":"7204948","2016":7245472,"Country Name":"Caribbean small states","Country Code":"CSS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7141135,"1961":7289826,"1962":7450402,"1963":7618354,"1964":7787146,"1965":7951933,"1966":8110430,"1967":8263546,"1968":8413327,"1969":8563193,"1970":8715123,"1971":8869961,"1972":9025300,"1973":9176052,"1974":9315373,"1975":9438442,"1976":9544271,"1977":9634680,"1978":9711392,"1979":9777290,"1980":9835177,"1981":9884213,"1982":9925623,"1983":9966733,"1984":10017059,"1985":10082989,"1986":10168087,"1987":10269567,"1988":10379548,"1989":10486509,"1990":10582081,"1991":10663585,"1992":10733363,"1993":10794135,"1994":10850585,"1995":10906043,"1996":10961012,"1997":11013983,"1998":11064097,"1999":11110004,"2000":11150736,"2001":11186542,"2002":"11217998","2003":"11244885","2004":"11266941","2005":"11284253","2006":"11296233","2007":"11303687","2008":"11309754","2009":"11318602","2010":"11333051","2011":"11354651","2012":"11382146","2013":"11412167","2014":"11439767","2015":"11461432","2016":11475982,"Country Name":"Cuba","Country Code":"CUB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":124826,"1961":126125,"1962":128414,"1963":130860,"1964":133148,"1965":135266,"1966":136682,"1967":138140,"1968":140298,"1969":142581,"1970":144739,"1971":147389,"1972":147710,"1973":146912,"1974":148351,"1975":149129,"1976":149399,"1977":149459,"1978":148341,"1979":147851,"1980":148041,"1981":148629,"1982":150101,"1983":151159,"1984":151940,"1985":152711,"1986":152662,"1987":151456,"1988":149254,"1989":146937,"1990":145400,"1991":144403,"1992":143912,"1993":144299,"1994":144630,"1995":145139,"1996":146306,"1997":146956,"1998":144472,"1999":139428,"2000":133860,"2001":129047,"2002":"129205","2003":"131897","2004":"134192","2005":"137658","2006":"141239","2007":"144056","2008":"145880","2009":"146833","2010":"148703","2011":"150831","2012":"152088","2013":"153822","2014":"155909","2015":"157979","2016":159999,"Country Name":"Curacao","Country Code":"CUW","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7865,"1961":8026,"1962":8146,"1963":8227,"1964":8298,"1965":8369,"1966":8441,"1967":8521,"1968":8631,"1969":8827,"1970":9144,"1971":9581,"1972":10136,"1973":10784,"1974":11498,"1975":12244,"1976":13022,"1977":13841,"1978":14661,"1979":15444,"1980":16162,"1981":16789,"1982":17356,"1983":17906,"1984":18543,"1985":19313,"1986":20251,"1987":21339,"1988":22538,"1989":23776,"1990":25010,"1991":26213,"1992":27404,"1993":28646,"1994":30055,"1995":31672,"1996":33536,"1997":35597,"1998":37740,"1999":39808,"2000":41687,"2001":43316,"2002":"44738","2003":"46028","2004":"47299","2005":"48622","2006":"50031","2007":"51483","2008":"52926","2009":"54279","2010":"55507","2011":"56579","2012":"57523","2013":"58371","2014":"59172","2015":"59963","2016":60765,"Country Name":"Cayman Islands","Country Code":"CYM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":572930,"1961":576395,"1962":577691,"1963":577913,"1964":578627,"1965":580966,"1966":585308,"1967":591308,"1968":598493,"1969":606113,"1970":613621,"1971":620859,"1972":628002,"1973":635111,"1974":642339,"1975":649755,"1976":657534,"1977":665528,"1978":673251,"1979":680011,"1980":685406,"1981":689173,"1982":691702,"1983":694077,"1984":697717,"1985":703687,"1986":712341,"1987":723380,"1988":736479,"1989":751044,"1990":766614,"1991":783129,"1992":800609,"1993":818751,"1994":837110,"1995":855384,"1996":873423,"1997":891192,"1998":908704,"1999":926050,"2000":943286,"2001":960282,"2002":"976966","2003":"993563","2004":"1010410","2005":"1027658","2006":"1045509","2007":"1063712","2008":"1081563","2009":"1098076","2010":"1112607","2011":"1124835","2012":"1135062","2013":"1143896","2014":"1152309","2015":"1160985","2016":1170125,"Country Name":"Cyprus","Country Code":"CYP","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":9602006,"1961":9586651,"1962":9624660,"1963":9670685,"1964":9727804,"1965":9779358,"1966":9821040,"1967":9852899,"1968":9876346,"1969":9896580,"1970":9858071,"1971":9826815,"1972":9867632,"1973":9922266,"1974":9988459,"1975":10058620,"1976":10125939,"1977":10186755,"1978":10242098,"1979":10292341,"1980":10304193,"1981":10300591,"1982":10314826,"1983":10323856,"1984":10330213,"1985":10337118,"1986":10342227,"1987":10347318,"1988":10355276,"1989":10361068,"1990":10333355,"1991":10308578,"1992":10319123,"1993":10329855,"1994":10333587,"1995":10327253,"1996":10315241,"1997":10304131,"1998":10294373,"1999":10283860,"2000":10255063,"2001":10216605,"2002":"10196916","2003":"10193998","2004":"10197101","2005":"10211216","2006":"10238905","2007":"10298828","2008":"10384603","2009":"10443936","2010":"10474410","2011":"10496088","2012":"10510785","2013":"10514272","2014":"10525347","2015":"10546059","2016":10561633,"Country Name":"Czechia","Country Code":"CZE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":72814900,"1961":73377632,"1962":74025784,"1963":74714353,"1964":75318337,"1965":75963695,"1966":76600311,"1967":76951336,"1968":77294314,"1969":77909682,"1970":78169289,"1971":78312842,"1972":78688452,"1973":78936666,"1974":78967433,"1975":78673554,"1976":78336950,"1977":78159814,"1978":78091820,"1979":78126350,"1980":78288576,"1981":78407907,"1982":78333366,"1983":78128282,"1984":77858685,"1985":77684873,"1986":77720436,"1987":77839920,"1988":78144619,"1989":78751283,"1990":79433029,"1991":80013896,"1992":80624598,"1993":81156363,"1994":81438348,"1995":81678051,"1996":81914831,"1997":82034771,"1998":82047195,"1999":82100243,"2000":82211508,"2001":82349925,"2002":"82488495","2003":"82534176","2004":"82516260","2005":"82469422","2006":"82376451","2007":"82266372","2008":"82110097","2009":"81902307","2010":"81776930","2011":"80274983","2012":"80425823","2013":"80645605","2014":"80982500","2015":"81686611","2016":82667685,"Country Name":"Germany","Country Code":"DEU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{ountry Name":"Djibouti","Country Code":"DJI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":60011,"1961":61032,"1962":61982,"1963":62918,"1964":63926,"1965":65038,"1966":66311,"1967":67686,"1968":69040,"1969":70213,"1970":71073,"1971":71569,"1972":71734,"1973":71744,"1974":71807,"1975":72094,"1976":72642,"1977":73411,"1978":74242,"1979":74925,"1980":75314,"1981":75375,"1982":75170,"1983":74747,"1984":74213,"1985":73643,"1986":73025,"1987":72370,"1988":71742,"1989":71242,"1990":70926,"1991":70842,"1992":70970,"1993":71210,"1994":71373,"1995":71368,"1996":71145,"1997":70753,"1998":70290,"1999":69903,"2000":69676,"2001":69670,"2002":"69824","2003":"70093","2004":"70379","2005":"70627","2006":"70807","2007":"70950","2008":"71074","2009":"71229","2010":"71440","2011":"71718","2012":"72044","2013":"72400","2014":"72778","2015":"73162","2016":73543,"Country Name":"Dominica","Country Code":"DMA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4579603,"1961":4611687,"1962":4647727,"1963":4684483,"1964":4722072,"1965":4759012,"1966":4797381,"1967":4835354,"1968":4864883,"1969":4891860,"1970":4928757,"1971":4963126,"1972":4991596,"1973":5021861,"1974":5045297,"1975":5059862,"1976":5072596,"1977":5088419,"1978":5104248,"1979":5116801,"1980":5123027,"1981":5121572,"1982":5117810,"1983":5114297,"1984":5111619,"1985":5113691,"1986":5120534,"1987":5127024,"1988":5129516,"1989":5132594,"1990":5140939,"1991":5154298,"1992":5171370,"1993":5188628,"1994":5206180,"1995":5233373,"1996":5263074,"1997":5284991,"1998":5304219,"1999":5321799,"2000":5339616,"2001":5358783,"2002":"5375931","2003":"5390574","2004":"5404523","2005":"5419432","2006":"5437272","2007":"5461438","2008":"5493621","2009":"5523095","2010":"5547683","2011":"5570572","2012":"5591572","2013":"5614932","2014":"5643475","2015":"5683483","2016":5731118,"Country Name":"Denmark","Country Code":"DNK","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3294042,"1961":3406299,"1962":3521278,"1963":3638628,"1964":3757956,"1965":3878948,"1966":4001375,"1967":4125109,"1968":4250025,"1969":4376054,"1970":4503114,"1971":4631114,"1972":4759934,"1973":4889436,"1974":5019473,"1975":5149935,"1976":5280723,"1977":5411865,"1978":5543517,"1979":5675931,"1980":5809269,"1981":5943591,"1982":6078820,"1983":6214857,"1984":6351572,"1985":6488856,"1986":6626542,"1987":6764624,"1988":6903316,"1989":7042937,"1990":7183647,"1991":7325622,"1992":7468551,"1993":7611465,"1994":7753052,"1995":7892423,"1996":8029113,"1997":8163472,"1998":8296375,"1999":8429112,"2000":8562622,"2001":8697126,"2002":"8832285","2003":"8967760","2004":"9102998","2005":"9237566","2006":"9371338","2007":"9504353","2008":"9636520","2009":"9767758","2010":"9897985","2011":"10027095","2012":"10154950","2013":"10281296","2014":"10405844","2015":"10528394","2016":10648791,"Country Name":"Dominican Rep.","Country Code":"DOM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":11124888,"1961":11404859,"1962":11690153,"1963":11985136,"1964":12295970,"1965":12626952,"1966":12980267,"1967":13354197,"1968":13744387,"1969":14144438,"1970":14550034,"1971":14960109,"1972":15377093,"1973":15804428,"1974":16247113,"1975":16709099,"1976":17190239,"1977":17690184,"1978":18212326,"1979":18760761,"1980":19337715,"1981":19943664,"1982":20575701,"1983":21228289,"1984":21893853,"1985":22565905,"1986":23241272,"1987":23917897,"1988":24591492,"1989":25257672,"1990":25912367,"1991":26554329,"1992":27181094,"1993":27786259,"1994":28362253,"1995":28904298,"1996":29411415,"1997":29886839,"1998":30335732,"1999":30765613,"2000":31183660,"2001":31592153,"2002":"31995046","2003":"32403514","2004":"32831096","2005":"33288437","2006":"33777915","2007":"34300076","2008":"34860715","2009":"35465760","2010":"36117637","2011":"36819558","2012":"37565847","2013":"38338562","2014":"39113313","2015":"39871528","2016":40606052,"Country Name":"Algeria","Country Code":"DZA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":896028698,"1961":895298263,"1962":906884794,"1963":929755070,"1964":952270698,"1965":975806696,"1966":1002934760,"1967":1029191793,"1968":1056451631,"1969":1085459960,"1970":1115426888,"1971":1146089613,"1972":1175063145,"1973":1203125473,"1974":1229692862,"1975":1253833445,"1976":1276113367,"1977":1296790080,"1978":1317415135,"1979":1338309727,"1980":1358820476,"1981":1379912281,"1982":1403263369,"1983":1426711590,"1984":1449129592,"1985":1472378771,"1986":1497346873,"1987":1523913102,"1988":1550788717,"1989":1576996364,"1990":1602333626,"1991":1626573153,"1992":1649254066,"1993":1671105718,"1994":1692831189,"1995":1714178345,"1996":1735206930,"1997":1756055502,"1998":1776225147,"1999":1795288998,"2000":1813301554,"2001":1830514334,"2002":"1846954095","2003":"1862791918","2004":"1878255588","2005":"1893574455","2006":"1908392032","2007":"1922657606","2008":"1936774935","2009":"1950768124","2010":"1964691596","2011":"1978727582","2012":"1993008684","2013":"2007434775","2014":"2022021082","2015":"2036552598","2016":2051431154,"Country Name":"East Asia & Pacific (excluding high income)","Country Code":"EAP","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":979226919,"1961":1002452948,"1962":1026507449,"1963":1051325637,"1964":1076932498,"1965":1103304703,"1966":1130426147,"1967":1158369169,"1968":1187026097,"1969":1216472256,"1970":1246716017,"1971":1277762374,"1972":1309604349,"1973":1342263687,"1974":1375594732,"1975":1409580208,"1976":1444169309,"1977":1479422523,"1978":1515592095,"1979":1553047664,"1980":1591990202,"1981":1632475500,"1982":1674359619,"1983":1717368237,"1984":1761090462,"1985":1805249148,"1986":1849730185,"1987":1894522377,"1988":1939445455,"1989":1984308307,"1990":2031055831,"1991":2075649490,"1992":2119850957,"1993":2163826818,"1994":2207779855,"1995":2251918069,"1996":2296329568,"1997":2340898615,"1998":2385398260,"1999":2429667617,"2000":2473774746,"2001":2517286127,"2002":"2560644471","2003":"2603838625","2004":"2647027406","2005":"2690316623","2006":"2733734510","2007":"2777285769","2008":"2820959886","2009":"2864730145","2010":"2908808244","2011":"2952873719","2012":"2996573424","2013":"3040240928","2014":"3083836360","2015":"3127290269","2016":3170542188,"Country Name":"Early-demographic dividend","Country Code":"EAR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1042016962,"1961":1045307974,"1962":1059467033,"1963":1084916211,"1964":1109997197,"1965":1136131881,"1966":1165700563,"1967":1194329626,"1968":1223381452,"1969":1255964340,"1970":1288580672,"1971":1322181844,"1972":1354002849,"1973":1384272287,"1974":1414384540,"1975":1441541935,"1976":1465814651,"1977":1488757160,"1978":1511580462,"1979":1534795624,"1980":1557506468,"1981":1580901245,"1982":1606486447,"1983":1632005817,"1984":1656292670,"1985":1681267479,"1986":1707960613,"1987":1736144967,"1988":1764605492,"1989":1792425355,"1990":1819288343,"1991":1845101737,"1992":1869217918,"1993":1892440716,"1994":1915670711,"1995":1938715324,"1996":1961419043,"1997":1983653425,"1998":2005143552,"1999":2025300644,"2000":2044496088,"2001":2063002418,"2002":"2080534724","2003":"2097265008","2004":"2113465324","2005":"2129445086","2006":"2145245494","2007":"2160431752","2008":"2175832008","2009":"2190811045","2010":"2205614879","2011":"2220357890","2012":"2235430359","2013":"2250552199","2014":"2265898057","2015":"2281203360","2016":2296786207,"Country Name":"East Asia & Pacific","Country Code":"EAS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":279087938,"1961":283416986,"1962":287761794,"1963":292120322,"1964":296463073,"1965":300740822,"1966":304356201,"1967":308039772,"1968":311636189,"1969":315162240,"1970":318699628,"1971":322234890,"1972":325762116,"1973":329267807,"1974":332789612,"1975":336330171,"1976":340024688,"1977":343646223,"1978":347250227,"1979":350823401,"1980":354494056,"1981":358233804,"1982":361802765,"1983":365350752,"1984":369141750,"1985":372949384,"1986":376730350,"1987":380496651,"1988":384146656,"1989":387627353,"1990":390207446,"1991":391907109,"1992":393481005,"1993":394905543,"1994":395568548,"1995":396053579,"1996":396285161,"1997":396772932,"1998":396999014,"1999":397071924,"2000":397083969,"2001":396886165,"2002":"396574307","2003":"396720391","2004":"397064999","2005":"397469492","2006":"398011334","2007":"398693705","2008":"399739094","2009":"401472949","2010":"403470694","2011":"405521953","2012":"407706585","2013":"410126644","2014":"412510951","2015":"414975737","2016":417424643,"Country Name":"Europe & Central Asia (excluding high income)","Country Code":"ECA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":667246384,"1961":674972972,"1962":682938669,"1963":690962675,"1964":698905664,"1965":706609007,"1966":713341112,"1967":719879789,"1968":726161895,"1969":732317863,"1970":737948178,"1971":743607439,"1972":749815857,"1973":755867961,"1974":761701324,"1975":767332578,"1976":772838318,"1977":778094845,"1978":783298994,"1979":788525199,"1980":793937090,"1981":799215272,"1982":803972967,"1983":808524728,"1984":813281381,"1985":818146882,"1986":823155058,"1987":828213790,"1988":833315236,"1989":838462813,"1990":842848473,"1991":846178277,"1992":849656744,"1993":852762014,"1994":854723057,"1995":856352861,"1996":857652703,"1997":859112727,"1998":860236344,"1999":861380105,"2000":862304084,"2001":863615633,"2002":"865196877","2003":"867457662","2004":"870030758","2005":"872661621","2006":"875343230","2007":"878465992","2008":"881965816","2009":"885591693","2010":"889016221","2011":"891094964","2012":"894666669","2013":"898855113","2014":"903094668","2015":"907424836","2016":911995305,"Country Name":"Europe & Central Asia","Country Code":"ECS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4545550,"1961":4676859,"1962":4812890,"1963":4953733,"1964":5099468,"1965":5250119,"1966":5405685,"1967":5566057,"1968":5730906,"1969":5899845,"1970":6072527,"1971":6248835,"1972":6428711,"1973":6611916,"1974":6798206,"1975":6987391,"1976":7179399,"1977":7374234,"1978":7571959,"1979":7772653,"1980":7976445,"1981":8183194,"1982":8392940,"1983":8606213,"1984":8823751,"1985":9045979,"1986":9272906,"1987":9504129,"1988":9739176,"1989":9977377,"1990":10218091,"1991":10460990,"1992":10705667,"1993":10951202,"1994":11196479,"1995":11440583,"1996":11683479,"1997":11924993,"1998":12163885,"1999":12398691,"2000":12628596,"2001":12852755,"2002":"13072060","2003":"13289601","2004":"13509647","2005":"13735233","2006":"13967480","2007":"14205453","2008":"14447562","2009":"14691275","2010":"14934690","2011":"15177355","2012":"15419666","2013":"15661547","2014":"15903112","2015":"16144368","2016":16385068,"Country Name":"Ecuador","Country Code":"ECU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":26996533,"1961":27744712,"1962":28506176,"1963":29281250,"1964":30071102,"1965":30875964,"1966":31697616,"1967":32534021,"1968":33377259,"1969":34216826,"1970":35046273,"1971":35863382,"1972":36673642,"1973":37488067,"1974":38322022,"1975":39187702,"1976":40089032,"1977":41026477,"1978":42004655,"1979":43027816,"1980":44099142,"1981":45216506,"1982":46379620,"1983":47594556,"1984":48868951,"1985":50204985,"1986":51607703,"1987":53066229,"1988":54547296,"1989":56006573,"1990":57412215,"1991":58752390,"1992":60035536,"1993":61275601,"1994":62495745,"1995":63714386,"1996":64933456,"1997":66151117,"1998":67378056,"1999":68626664,"2000":69905988,"2001":71226940,"2002":"72590118","2003":"73981942","2004":"75381899","2005":"76778149","2006":"78159048","2007":"79537253","2008":"80953881","2009":"82465022","2010":"84107606","2011":"85897561","2012":"87813257","2013":"89807433","2014":"91812566","2015":"93778172","2016":95688681,"Country Name":"Egypt","Country Code":"EGY","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":265396502,"1961":267825309,"1962":270324828,"1963":272876447,"1964":275382197,"1965":277856703,"1966":280147494,"1967":282114545,"1968":283966953,"1969":285855058,"1970":287416205,"1971":289032499,"1972":291040689,"1973":292961768,"1974":294689415,"1975":296244715,"1976":297573002,"1977":298738608,"1978":299908948,"1979":301099972,"1980":302363486,"1981":303498663,"1982":304314034,"1983":304920007,"1984":305432240,"1985":306018719,"1986":306797207,"1987":307668322,"1988":308725859,"1989":310080079,"1990":311539698,"1991":312708143,"1992":314162055,"1993":315449102,"1994":316366781,"1995":317181450,"1996":318003013,"1997":318761758,"1998":319433986,"1999":320258899,"2000":321310785,"2001":322547881,"2002":"324125338","2003":"325885962","2004":"327682509","2005":"329380418","2006":"330922786","2007":"332645168","2008":"334274731","2009":"335360887","2010":"336151479","2011":"335425831","2012":"336167296","2013":"337296873","2014":"338429646","2015":"339519210","2016":340894606,"Country Name":"Euro area","Country Code":"EMU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1397491,"1961":1432640,"1962":1469645,"1963":1508273,"1964":1548187,"1965":1589179,"1966":1631147,"1967":1674204,"1968":1718525,"1969":1764343,"1970":1811878,"1971":1861199,"1972":1912302,"1973":1965160,"1974":2019717,"1975":2075965,"1976":2133723,"1977":2193068,"1978":2254450,"1979":2318495,"1980":2385540,"1981":2454766,"1982":2525521,"1983":2598410,"1984":2674289,"1985":2753151,"1986":2837111,"1987":2924349,"1988":3006361,"1989":3071771,"1990":3113311,"1991":3127297,"1992":3118582,"1993":3099047,"1994":3085443,"1995":3090159,"1996":3116379,"1997":3161350,"1998":3224223,"1999":3302263,"2000":3392801,"2001":3497124,"2002":"3614639","2003":"3738265","2004":"3858623","2005":"3969007","2006":"4066648","2007":"4153332","2008":"4232636","2009":"4310334","2010":"4390840","2011":"4474690","2012":"","2013":"","2014":"","2015":"","2016":null,"Country Name":"Eritrea","Country Code":"ERI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":30455000,"1961":30739250,"1962":31023366,"1963":31296651,"1964":31609195,"1965":31954292,"1966":32283194,"1967":32682947,"1968":33113134,"1969":33441054,"1970":33814531,"1971":34224490,"1972":34604469,"1973":34988947,"1974":35373335,"1975":35757900,"1976":36137812,"1977":36511638,"1978":36864898,"1979":37191330,"1980":37491165,"1981":37758631,"1982":37986012,"1983":38171525,"1984":38330364,"1985":38469512,"1986":38584624,"1987":38684815,"1988":38766939,"1989":38827764,"1990":38867322,"1991":38966376,"1992":39157685,"1993":39361262,"1994":39549108,"1995":39724050,"1996":39889852,"1997":40057389,"1998":40223509,"1999":40386875,"2000":40567864,"2001":40850412,"2002":"41431558","2003":"42187645","2004":"42921895","2005":"43653155","2006":"44397319","2007":"45226803","2008":"45954106","2009":"46362946","2010":"46576897","2011":"46742697","2012":"46773055","2013":"46620045","2014":"46480882","2015":"46447697","2016":46443959,"Country Name":"Spain","Country Code":"ESP","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1211537,"1961":1225077,"1962":1241623,"1963":1258857,"1964":1277086,"1965":1294566,"1966":1308597,"1967":1318946,"1968":1331214,"1969":1345249,"1970":1360076,"1971":1376955,"1972":1392518,"1973":1405951,"1974":1418169,"1975":1429352,"1976":1439576,"1977":1450211,"1978":1460188,"1979":1468333,"1980":1477219,"1981":1487666,"1982":1498414,"1983":1508745,"1984":1518617,"1985":1528781,"1986":1540190,"1987":1552221,"1988":1561900,"1989":1568131,"1990":1569174,"1991":1561314,"1992":1533091,"1993":1494128,"1994":1462514,"1995":1436634,"1996":1415594,"1997":1399535,"1998":1386156,"1999":1390244,"2000":1396985,"2001":1388115,"2002":"1379350","2003":"1370720","2004":"1362550","2005":"1354775","2006":"1346810","2007":"1340680","2008":"1337090","2009":"1334515","2010":"1331475","2011":"1327439","2012":"1322696","2013":"1317997","2014":"1314545","2015":"1315407","2016":1316481,"Country Name":"Estonia","Country Code":"EST","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":22151278,"1961":22671190,"1962":23221389,"1963":23798429,"1964":24397024,"1965":25013626,"1966":25641376,"1967":26281208,"1968":26946079,"1969":27654161,"1970":28415077,"1971":29245207,"1972":30132580,"1973":31025115,"1974":31851708,"1975":32566821,"1976":33146891,"1977":33622390,"1978":34068316,"1979":34590226,"1980":35264898,"1981":36120288,"1982":37136848,"1983":38285883,"1984":39518801,"1985":40800343,"1986":42120730,"1987":43493283,"1988":44932064,"1989":46458913,"1990":48086516,"1991":49821083,"1992":51647768,"1993":53532956,"1994":55431123,"1995":57309880,"1996":59155148,"1997":60976450,"1998":62794151,"1999":64640054,"2000":66537331,"2001":68492257,"2002":"70497192","2003":"72545144","2004":"74624405","2005":"76727083","2006":"78850689","2007":"81000409","2008":"83184892","2009":"85416253","2010":"87702670","2011":"90046756","2012":"92444183","2013":"94887724","2014":"97366774","2015":"99873033","2016":102403196,"Country Name":"Ethiopia","Country Code":"ETH","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":409498463,"1961":413007006,"1962":416670637,"1963":420393293,"1964":424075858,"1965":427592605,"1966":430868372,"1967":434001556,"1968":436916059,"1969":439730656,"1970":442062266,"1971":444400996,"1972":447253578,"1973":449960637,"1974":452475893,"1975":454865483,"1976":457001001,"1977":458888174,"1978":460699315,"1979":462488540,"1980":464392913,"1981":466099879,"1982":467389436,"1983":468468840,"1984":469501597,"1985":470637754,"1986":471937316,"1987":473284093,"1988":474792549,"1989":476392094,"1990":478005307,"1991":478976406,"1992":480438473,"1993":482099284,"1994":483262847,"1995":484271345,"1996":485000714,"1997":485892088,"1998":486565874,"1999":487539363,"2000":488178830,"2001":489155666,"2002":"490390251","2003":"492200115","2004":"494162545","2005":"496115011","2006":"497973707","2007":"499916649","2008":"501808478","2009":"503317964","2010":"504421131","2011":"504012082","2012":"505104334","2013":"506592457","2014":"508157247","2015":"509703315","2016":511497415,"Country Name":"European Union","Country Code":"EUU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":121765037,"1961":124558907,"1962":127465500,"1963":130492518,"1964":133661787,"1965":136988867,"1966":140486338,"1967":144152478,"1968":147967143,"1969":151904121,"1970":155946806,"1971":160072960,"1972":164297540,"1973":168673430,"1974":173281249,"1975":178166730,"1976":183363175,"1977":188827291,"1978":194446551,"1979":200065012,"1980":205569660,"1981":210939026,"1982":216213145,"1983":221432781,"1984":226660414,"1985":231956914,"1986":237300542,"1987":242711060,"1988":248333373,"1989":254349779,"1990":262862202,"1991":270090401,"1992":277863547,"1993":285986364,"1994":294177517,"1995":302240865,"1996":310098332,"1997":317827011,"1998":325374011,"1999":333069571,"2000":341295147,"2001":350015363,"2002":"359110192","2003":"368514375","2004":"378123879","2005":"387862311","2006":"397732436","2007":"407747286","2008":"417919663","2009":"428246870","2010":"438737943","2011":"449398455","2012":"460228236","2013":"471253115","2014":"482474449","2015":"493919601","2016":505635987,"Country Name":"Fragile and conflict affected situations","Country Code":"FCS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4429634,"1961":4461005,"1962":4491443,"1963":4523309,"1964":4548543,"1965":4563732,"1966":4580869,"1967":4605744,"1968":4626469,"1969":4623785,"1970":4606307,"1971":4612124,"1972":4639657,"1973":4666081,"1974":4690574,"1975":4711440,"1976":4725664,"1977":4738902,"1978":4752528,"1979":4764690,"1980":4779535,"1981":4799964,"1982":4826933,"1983":4855787,"1984":4881803,"1985":4902206,"1986":4918154,"1987":4932123,"1988":4946481,"1989":4964371,"1990":4986431,"1991":5013740,"1992":5041992,"1993":5066447,"1994":5088333,"1995":5107790,"1996":5124573,"1997":5139835,"1998":5153498,"1999":5165474,"2000":5176209,"2001":5188008,"2002":"5200598","2003":"5213014","2004":"5228172","2005":"5246096","2006":"5266268","2007":"5288720","2008":"5313399","2009":"5338871","2010":"5363352","2011":"5388272","2012":"5413971","2013":"5438972","2014":"5461512","2015":"5479531","2016":5495096,"Country Name":"Finland","Country Code":"FIN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":393386,"1961":407156,"1962":421577,"1963":436208,"1964":450450,"1965":463883,"1966":476324,"1967":487913,"1968":498892,"1969":509658,"1970":520529,"1971":531601,"1972":542814,"1973":554107,"1974":565388,"1975":576595,"1976":587520,"1977":598259,"1978":609345,"1979":621538,"1980":635255,"1981":650955,"1982":668198,"1983":685391,"1984":700366,"1985":711661,"1986":718548,"1987":721725,"1988":722917,"1989":724624,"1990":728628,"1991":735473,"1992":744531,"1993":755026,"1994":765667,"1995":775498,"1996":784476,"1997":792860,"1998":800315,"1999":806494,"2000":811223,"2001":814218,"2002":"815691","2003":"816628","2004":"818354","2005":"821817","2006":"827411","2007":"834812","2008":"843340","2009":"851967","2010":"859950","2011":"867086","2012":"873596","2013":"879715","2014":"885806","2015":"892149","2016":898760,"Country Name":"Fiji","Country Code":"FJI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":46814237,"1961":47444751,"1962":48119649,"1963":48803680,"1964":49449403,"1965":50023774,"1966":50508717,"1967":50915456,"1968":51276054,"1969":51638260,"1970":52035095,"1971":52480421,"1972":52959228,"1973":53441264,"1974":53882416,"1975":54252574,"1976":54541493,"1977":54764462,"1978":54947975,"1979":55130594,"1980":55340782,"1981":55585824,"1982":55858727,"1983":56156284,"1984":56470769,"1985":56795686,"1986":57132691,"1987":57482591,"1988":57836486,"1989":58182702,"1990":58512808,"1991":58559312,"1992":58851216,"1993":59106766,"1994":59327194,"1995":59541900,"1996":59753098,"1997":59964845,"1998":60186291,"1999":60496715,"2000":60912498,"2001":61357431,"2002":"61805267","2003":"62244884","2004":"62704897","2005":"63179356","2006":"63621376","2007":"64016229","2008":"64374990","2009":"64707044","2010":"65027512","2011":"65342776","2012":"65659790","2013":"65998570","2014":"66331957","2015":"66624068","2016":66896109,"Country Name":"France","Country Code":"FRA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":34661,"1961":35115,"1962":35570,"1963":36014,"1964":36454,"1965":36900,"1966":37334,"1967":37768,"1968":38200,"1969":38646,"1970":39083,"1971":39537,"1972":40009,"1973":40486,"1974":40955,"1975":41407,"1976":41848,"1977":42275,"1978":42693,"1979":43101,"1980":43514,"1981":43917,"1982":44307,"1983":44700,"1984":45122,"1985":45573,"1986":46077,"1987":46621,"1988":47117,"1989":47466,"1990":47594,"1991":47457,"1992":47101,"1993":46640,"1994":46250,"1995":46040,"1996":46058,"1997":46251,"1998":46580,"1999":46937,"2000":47258,"2001":47526,"2002":"47769","2003":"47974","2004":"48143","2005":"48285","2006":"48383","2007":"48448","2008":"48485","2009":"48517","2010":"48550","2011":"48608","2012":"48666","2013":"48747","2014":"48842","2015":"48965","2016":49117,"Country Name":"Faroe Islands","Country Code":"FRO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":44537,"1961":45955,"1962":47388,"1963":48876,"1964":50487,"1965":52242,"1966":54199,"1967":56319,"1968":58403,"1969":60170,"1970":61431,"1971":62108,"1972":62298,"1973":62290,"1974":62476,"1975":63144,"1976":64386,"1977":66105,"1978":68222,"1979":70550,"1980":72964,"1981":75462,"1982":78059,"1983":80678,"1984":83240,"1985":85686,"1986":87948,"1987":90020,"1988":92021,"1989":94091,"1990":96331,"1991":98799,"1992":101413,"1993":103934,"1994":106057,"1995":107556,"1996":108344,"1997":108502,"1998":108238,"1999":107816,"2000":107432,"2001":107165,"2002":"106983","2003":"106816","2004":"106577","2005":"106196","2006":"105684","2007":"105078","2008":"104478","2009":"103960","2010":"103616","2011":"103468","2012":"103503","2013":"103702","2014":"104015","2015":"104433","2016":104937,"Country Name":"Micronesia, Fed. Sts.","Country Code":"FSM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":499184,"1961":504167,"1962":509806,"1963":516265,"1964":523789,"1965":532511,"1966":542557,"1967":553823,"1968":565873,"1969":578108,"1970":590118,"1971":601731,"1972":613123,"1973":624621,"1974":636696,"1975":649716,"1976":663770,"1977":678774,"1978":694732,"1979":711533,"1980":729159,"1981":747587,"1982":766855,"1983":787013,"1984":808083,"1985":830085,"1986":853027,"1987":876863,"1988":901458,"1989":926622,"1990":952212,"1991":978223,"1992":1004676,"1993":1031504,"1994":1058663,"1995":1086137,"1996":1113994,"1997":1142324,"1998":1171224,"1999":1200773,"2000":1231122,"2001":1262259,"2002":"1294409","2003":"1328146","2004":"1364205","2005":"1403126","2006":"1444844","2007":"1489193","2008":"1536411","2009":"1586754","2010":"1640210","2011":"1697101","2012":"1756817","2013":"1817271","2014":"1875713","2015":"1930175","2016":1979786,"Country Name":"Gabon","Country Code":"GAB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":52400000,"1961":52800000,"1962":53250000,"1963":53650000,"1964":54000000,"1965":54348050,"1966":54648500,"1967":54943600,"1968":55211700,"1969":55441750,"1970":55663250,"1971":55896223,"1972":56086065,"1973":56194527,"1974":56229974,"1975":56225800,"1976":56211968,"1977":56193492,"1978":56196504,"1979":56246951,"1980":56314216,"1981":56333829,"1982":56313641,"1983":56332848,"1984":56422072,"1985":56550268,"1986":56681396,"1987":56802050,"1988":56928327,"1989":57076711,"1990":57247586,"1991":57424897,"1992":57580402,"1993":57718614,"1994":57865745,"1995":58019030,"1996":58166950,"1997":58316954,"1998":58487141,"1999":58682466,"2000":58892514,"2001":59119673,"2002":"59370479","2003":"59647577","2004":"59987905","2005":"60401206","2006":"60846820","2007":"61322463","2008":"61806995","2009":"62276270","2010":"62766365","2011":"63258918","2012":"63700300","2013":"64128226","2014":"64613160","2015":"65128861","2016":65637239,"Country Name":"United Kingdom","Country Code":"GBR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3645600,"1961":3703600,"1962":3760300,"1963":3816100,"1964":3870300,"1965":3921600,"1966":3966700,"1967":4005800,"1968":4042300,"1969":4080300,"1970":4119900,"1971":4163000,"1972":4205300,"1973":4242500,"1974":4279500,"1975":4311200,"1976":4342400,"1977":4372100,"1978":4397700,"1979":4430200,"1980":4467700,"1981":4504500,"1982":4542800,"1983":4582900,"1984":4622200,"1985":4662900,"1986":4704500,"1987":4743500,"1988":4790700,"1989":4803300,"1990":4802000,"1991":4835900,"1992":4873500,"1993":4911100,"1994":4861600,"1995":4734000,"1996":4616100,"1997":4531600,"1998":4487300,"1999":4452500,"2000":4418300,"2001":4386400,"2002":"4357000","2003":"4301000","2004":"4245000","2005":"4190000","2006":"4136000","2007":"4082000","2008":"4030000","2009":"3978000","2010":"3926000","2011":"3875000","2012":"3825000","2013":"3776000","2014":"3727000","2015":"3717100","2016":3719300,"Country Name":"Georgia","Country Code":"GEO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":6652287,"1961":6866539,"1962":7085464,"1963":7303432,"1964":7513289,"1965":7710549,"1966":7890992,"1967":8057444,"1968":8221020,"1969":8397347,"1970":8596983,"1971":8827273,"1972":9083573,"1973":9350111,"1974":9604276,"1975":9831407,"1976":10023472,"1977":10189890,"1978":10354499,"1979":10550777,"1980":10802028,"1981":11117605,"1982":11488106,"1983":11895125,"1984":12311158,"1985":12716228,"1986":13104296,"1987":13481406,"1988":13854214,"1989":14233874,"1990":14628260,"1991":15039514,"1992":15463854,"1993":15896432,"1994":16330174,"1995":16760467,"1996":17185608,"1997":17608812,"1998":18036494,"1999":18477612,"2000":18938762,"2001":19421605,"2002":"19924522","2003":"20446782","2004":"20986536","2005":"21542009","2006":"22113425","2007":"22700212","2008":"23298640","2009":"23903831","2010":"24512104","2011":"25121796","2012":"25733049","2013":"26346251","2014":"26962563","2015":"27582821","2016":28206728,"Country Name":"Ghana","Country Code":"GHA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":23394,"1961":23786,"1962":24284,"1963":24848,"1964":25454,"1965":26041,"1966":26612,"1967":27174,"1968":27694,"1969":28159,"1970":28560,"1971":28869,"1972":29104,"1973":29278,"1974":29427,"1975":29578,"1976":29742,"1977":29902,"1978":30049,"1979":30177,"1980":30272,"1981":30334,"1982":30381,"1983":30383,"1984":30325,"1985":30207,"1986":30004,"1987":29744,"1988":29469,"1989":29262,"1990":29164,"1991":29212,"1992":29379,"1993":29623,"1994":29895,"1995":30147,"1996":30382,"1997":30594,"1998":30801,"1999":30991,"2000":31180,"2001":31374,"2002":"31544","2003":"31720","2004":"31896","2005":"32085","2006":"32296","2007":"32510","2008":"32732","2009":"32956","2010":"33189","2011":"33405","2012":"33623","2013":"33831","2014":"34038","2015":"34228","2016":34408,"Country Name":"Gibraltar","Country Code":"GIB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3577409,"1961":3633652,"1962":3690664,"1963":3749505,"1964":3811659,"1965":3877806,"1966":3948869,"1967":4023486,"1968":4097191,"1969":4164003,"1970":4219770,"1971":4263840,"1972":4298091,"1973":4324360,"1974":4345545,"1975":4364514,"1976":4381601,"1977":4398484,"1978":4421134,"1979":4457078,"1980":4511902,"1981":4589784,"1982":4690605,"1983":4810496,"1984":4943144,"1985":5084767,"1986":5229797,"1987":5381483,"1988":5554882,"1989":5770652,"1990":6041094,"1991":6374329,"1992":6758838,"1993":7163236,"1994":7544291,"1995":7871173,"1996":8132552,"1997":8337988,"1998":8503297,"1999":8653769,"2000":8808546,"2001":8971139,"2002":"9137345","2003":"9309848","2004":"9490229","2005":"9679745","2006":"9881428","2007":"10096727","2008":"10323142","2009":"10556524","2010":"10794170","2011":"11035170","2012":"11281469","2013":"11536615","2014":"11805509","2015":"12091533","2016":12395924,"Country Name":"Guinea","Country Code":"GIN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":367928,"1961":376737,"1962":383523,"1963":389072,"1964":394553,"1965":400861,"1966":408180,"1967":416339,"1968":425510,"1969":435798,"1970":447285,"1971":460194,"1972":474539,"1973":489861,"1974":505512,"1975":521070,"1976":536409,"1977":551817,"1978":567831,"1979":585157,"1980":604369,"1981":625411,"1982":648210,"1983":673238,"1984":701104,"1985":732096,"1986":766589,"1987":804125,"1988":843050,"1989":881138,"1990":916808,"1991":949493,"1992":979718,"1993":1008358,"1994":1036829,"1995":1066223,"1996":1096708,"1997":1128169,"1998":1160944,"1999":1195420,"2000":1231844,"2001":1270495,"2002":"1311349","2003":"1354194","2004":"1398573","2005":"1444204","2006":"1491021","2007":"1539116","2008":"1588572","2009":"1639560","2010":"1692149","2011":"1746363","2012":"1802125","2013":"1859324","2014":"1917852","2015":"1977590","2016":2038501,"Country Name":"Gambia","Country Code":"GMB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":616409,"1961":623415,"1962":629969,"1963":636586,"1964":643961,"1965":652562,"1966":662463,"1967":673462,"1968":685476,"1969":698338,"1970":711827,"1971":726256,"1972":741490,"1973":756280,"1974":768945,"1975":778470,"1976":784156,"1977":786754,"1978":788495,"1979":792462,"1980":800854,"1981":814507,"1982":832668,"1983":854113,"1984":876873,"1985":899509,"1986":921626,"1987":943617,"1988":965742,"1989":988520,"1990":1012280,"1991":1037155,"1992":1062800,"1993":1088569,"1994":1113541,"1995":1137122,"1996":1159060,"1997":1179727,"1998":1199915,"1999":1220794,"2000":1243229,"2001":1267512,"2002":"1293523","2003":"1321202","2004":"1350345","2005":"1380838","2006":"1412669","2007":"1445958","2008":"1480841","2009":"1517448","2010":"1555880","2011":"1596154","2012":"1638139","2013":"1681495","2014":"1725744","2015":"1770526","2016":1815698,"Country Name":"Guinea-Bissau","Country Code":"GNB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":255323,"1961":258947,"1962":262590,"1963":266598,"1964":271457,"1965":277396,"1966":284868,"1967":293440,"1968":301353,"1969":306233,"1970":306515,"1971":301666,"1972":292585,"1973":281021,"1974":269426,"1975":259747,"1976":252194,"1977":246677,"1978":244485,"1979":247078,"1980":255325,"1981":270063,"1982":290617,"1983":314475,"1984":338086,"1985":358896,"1986":376024,"1987":390173,"1988":402326,"1989":414138,"1990":426846,"1991":440624,"1992":455148,"1993":470610,"1994":487140,"1995":504871,"1996":523999,"1997":544636,"1998":566673,"1999":589938,"2000":614323,"2001":639762,"2002":"666407","2003":"694611","2004":"724817","2005":"757317","2006":"792217","2007":"829327","2008":"868418","2009":"909111","2010":"951104","2011":"994290","2012":"1038593","2013":"1083746","2014":"1129424","2015":"1175389","2016":1221490,"Country Name":"Eq. Guinea","Country Code":"GNQ","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8331725,"1961":8398050,"1962":8448233,"1963":8479625,"1964":8510429,"1965":8550333,"1966":8613651,"1967":8684088,"1968":8740765,"1969":8772764,"1970":8792806,"1971":8831036,"1972":8888628,"1973":8929086,"1974":8962022,"1975":9046541,"1976":9188150,"1977":9308479,"1978":9429959,"1979":9548258,"1980":9642505,"1981":9729350,"1982":9789513,"1983":9846627,"1984":9895801,"1985":9934300,"1986":9967213,"1987":10000595,"1988":10036983,"1989":10089498,"1990":10196792,"1991":10319927,"1992":10399061,"1993":10460415,"1994":10512922,"1995":10562153,"1996":10608800,"1997":10661259,"1998":10720509,"1999":10761698,"2000":10805808,"2001":10862132,"2002":"10902022","2003":"10928070","2004":"10955141","2005":"10987314","2006":"11020362","2007":"11048473","2008":"11077841","2009":"11107017","2010":"11121341","2011":"11104899","2012":"11045011","2013":"10965211","2014":"10892413","2015":"10820883","2016":10746740,"Country Name":"Greece","Country Code":"GRC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":89869,"1961":91260,"1962":92425,"1963":93350,"1964":94066,"1965":94581,"1966":94875,"1967":94961,"1968":94868,"1969":94682,"1970":94426,"1971":94185,"1972":93934,"1973":93630,"1974":93152,"1975":92448,"1976":91437,"1977":90184,"1978":89073,"1979":88568,"1980":89005,"1981":90572,"1982":93091,"1983":95985,"1984":98439,"1985":99906,"1986":100143,"1987":99380,"1988":98062,"1989":96869,"1990":96283,"1991":96454,"1992":97198,"1993":98305,"1994":99405,"1995":100255,"1996":100796,"1997":101122,"1998":101309,"1999":101442,"2000":101619,"2001":101849,"2002":"102100","2003":"102375","2004":"102656","2005":"102949","2006":"103259","2007":"103586","2008":"103930","2009":"104296","2010":"104677","2011":"105075","2012":"105481","2013":"105909","2014":"106360","2015":"106823","2016":107317,"Country Name":"Grenada","Country Code":"GRD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":32500,"1961":33700,"1962":35000,"1963":36400,"1964":37600,"1965":39200,"1966":40500,"1967":41900,"1968":43400,"1969":44900,"1970":46400,"1971":47200,"1972":48300,"1973":49000,"1974":49500,"1975":49600,"1976":49700,"1977":49400,"1978":49200,"1979":49600,"1980":50200,"1981":51000,"1982":51500,"1983":52100,"1984":52700,"1985":53200,"1986":53500,"1987":54100,"1988":54800,"1989":55300,"1990":55600,"1991":55500,"1992":55300,"1993":55200,"1994":55500,"1995":55800,"1996":55900,"1997":56000,"1998":56100,"1999":56100,"2000":56200,"2001":56350,"2002":"56609","2003":"56765","2004":"56911","2005":"56935","2006":"56774","2007":"56555","2008":"56328","2009":"56323","2010":"56905","2011":"56890","2012":"56810","2013":"56483","2014":"56295","2015":"56114","2016":56186,"Country Name":"Greenland","Country Code":"GRL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4210747,"1961":4336143,"1962":4464249,"1963":4595510,"1964":4730540,"1965":4869716,"1966":5013153,"1967":5160609,"1968":5311615,"1969":5465512,"1970":5621792,"1971":5780480,"1972":5941567,"1973":6104530,"1974":6268707,"1975":6433728,"1976":6599214,"1977":6765516,"1978":6933906,"1979":7106145,"1980":7283459,"1981":7466488,"1982":7654819,"1983":7847472,"1984":8042897,"1985":8240060,"1986":8438604,"1987":8639108,"1988":8842575,"1989":9050465,"1990":9263813,"1991":9483270,"1992":9708544,"1993":9938692,"1994":10172297,"1995":10408489,"1996":10646674,"1997":10887634,"1998":11133501,"1999":11387203,"2000":11650743,"2001":11924946,"2002":"12208848","2003":"12500478","2004":"12796925","2005":"13096028","2006":"13397008","2007":"13700286","2008":"14006366","2009":"14316208","2010":"14630417","2011":"14948919","2012":"15271056","2013":"15596214","2014":"15923559","2015":"16252429","2016":16582469,"Country Name":"Guatemala","Country Code":"GTM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":66742,"1961":68072,"1962":69604,"1963":71286,"1964":73051,"1965":74830,"1966":76607,"1967":78404,"1968":80217,"1969":82040,"1970":83877,"1971":85726,"1972":87587,"1973":89464,"1974":91377,"1975":93352,"1976":95385,"1977":97477,"1978":99630,"1979":101844,"1980":104133,"1981":106485,"1982":108906,"1983":111402,"1984":113961,"1985":116572,"1986":119232,"1987":121919,"1988":124673,"1989":127522,"1990":130482,"1991":133558,"1992":136692,"1993":139818,"1994":142802,"1995":145561,"1996":148060,"1997":150303,"1998":152277,"1999":153953,"2000":155329,"2001":156401,"2002":"157175","2003":"157714","2004":"158099","2005":"158402","2006":"158648","2007":"158855","2008":"159035","2009":"159231","2010":"159444","2011":"159678","2012":"159973","2013":"160375","2014":"160967","2015":"161797","2016":162896,"Country Name":"Guam","Country Code":"GUM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":571819,"1961":589274,"1962":606285,"1963":622575,"1964":637845,"1965":651868,"1966":664521,"1967":675871,"1968":686146,"1969":695745,"1970":704934,"1971":713684,"1972":721948,"1973":729916,"1974":737847,"1975":745841,"1976":754101,"1977":762424,"1978":770125,"1979":776254,"1980":780153,"1981":781732,"1982":781246,"1983":778948,"1984":775219,"1985":770435,"1986":764459,"1987":757506,"1988":750731,"1989":745665,"1990":743309,"1991":744289,"1992":748134,"1993":753484,"1994":758342,"1995":761291,"1996":761861,"1997":760510,"1998":757952,"1999":755278,"2000":753301,"2001":752263,"2002":"751884","2003":"751857","2004":"751652","2005":"750946","2006":"749601","2007":"747869","2008":"746314","2009":"745693","2010":"746556","2011":"749100","2012":"753091","2013":"758081","2014":"763393","2015":"768514","2016":773303,"Country Name":"Guyana","Country Code":"GUY","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":754609427,"1961":765954945,"1962":775951378,"1963":785862106,"1964":795665202,"1965":805075170,"1966":813853230,"1967":822241252,"1968":829645659,"1969":838753008,"1970":846882888,"1971":855639296,"1972":864539350,"1973":872567660,"1974":881670409,"1975":890246720,"1976":897372543,"1977":904741646,"1978":912161808,"1979":919955840,"1980":927553164,"1981":935158734,"1982":942355372,"1983":949117924,"1984":955531829,"1985":961975411,"1986":968708868,"1987":975426680,"1988":982292069,"1989":989594399,"1990":997353719,"1991":1005572310,"1992":1011955640,"1993":1019867916,"1994":1027255148,"1995":1036155042,"1996":1043361631,"1997":1050343650,"1998":1057108848,"1999":1063829397,"2000":1070496404,"2001":1077634323,"2002":"1084822379","2003":"1091996228","2004":"1099536199","2005":"1107240168","2006":"1115520890","2007":"1124299890","2008":"1133634254","2009":"1141985286","2010":"1149511694","2011":"1154998991","2012":"1161900127","2013":"1168843771","2014":"1175966521","2015":"1182929820","2016":1190029421,"Country Name":"High income","Country Code":"HIC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3075605,"1961":3168100,"1962":3305200,"1963":3420900,"1964":3504600,"1965":3597900,"1966":3629900,"1967":3722800,"1968":3802700,"1969":3863900,"1970":3959000,"1971":4045300,"1972":4123600,"1973":4241600,"1974":4377800,"1975":4461600,"1976":4518000,"1977":4583700,"1978":4667500,"1979":4929700,"1980":5063100,"1981":5183400,"1982":5264500,"1983":5345100,"1984":5397900,"1985":5456200,"1986":5524600,"1987":5580500,"1988":5627600,"1989":5686200,"1990":5704500,"1991":5752000,"1992":5800500,"1993":5901000,"1994":6035400,"1995":6156100,"1996":6435500,"1997":6489300,"1998":6543700,"1999":6606500,"2000":6665000,"2001":6714300,"2002":"6744100","2003":"6730800","2004":"6783500","2005":"6813200","2006":"6857100","2007":"6916300","2008":"6957800","2009":"6972800","2010":"7024200","2011":"7071600","2012":"7154600","2013":"7187500","2014":"7241700","2015":"7305700","2016":7346700,"Country Name":"Hong Kong SAR, China","Country Code":"HKG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2038637,"1961":2096407,"1962":2155652,"1963":2216707,"1964":2280045,"1965":2346010,"1966":2414807,"1967":2486414,"1968":2560727,"1969":2637517,"1970":2716659,"1971":2798125,"1972":2882113,"1973":2968994,"1974":3059254,"1975":3153261,"1976":3251158,"1977":3352835,"1978":3458104,"1979":3566665,"1980":3678286,"1981":3792938,"1982":3910657,"1983":4031349,"1984":4154887,"1985":4281189,"1986":4410158,"1987":4541804,"1988":4676361,"1989":4814137,"1990":4955328,"1991":5099951,"1992":5247836,"1993":5398805,"1994":5552625,"1995":5709051,"1996":5867849,"1997":6028882,"1998":6192026,"1999":6357221,"2000":6524283,"2001":6693061,"2002":"6863157","2003":"7033821","2004":"7204153","2005":"7373430","2006":"7541406","2007":"7707972","2008":"7872658","2009":"8035021","2010":"8194778","2011":"8351600","2012":"8505646","2013":"8657785","2014":"8809216","2015":"8960829","2016":9112867,"Country Name":"Honduras","Country Code":"HND","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":162495580,"1961":166348536,"1962":170348129,"1963":174502178,"1964":178820615,"1965":183311108,"1966":187976481,"1967":192817243,"1968":197836081,"1969":203035027,"1970":208415064,"1971":213978472,"1972":219724282,"1973":225645580,"1974":231732881,"1975":237979218,"1976":244394102,"1977":250981876,"1978":257725573,"1979":264602415,"1980":271603169,"1981":278728186,"1982":286006012,"1983":293492340,"1984":301260428,"1985":309370058,"1986":317825339,"1987":326631480,"1988":335847788,"1989":345544609,"1990":355762200,"1991":366551884,"1992":377879250,"1993":389594161,"1994":401488248,"1995":413418810,"1996":425324425,"1997":437269757,"1998":449393754,"1999":461899663,"2000":474935556,"2001":488553040,"2002":"502710676","2003":"517352559","2004":"532385197","2005":"547744433","2006":"563415107","2007":"579434057","2008":"595849807","2009":"612731524","2010":"630127436","2011":"648053253","2012":"666488623","2013":"685401960","2014":"704745420","2015":"724482652","2016":744602976,"Country Name":"Heavily indebted poor countries (HIPC)","Country Code":"HPC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4140000,"1961":4171672,"1962":4202104,"1963":4231408,"1964":4259680,"1965":4287000,"1966":4313000,"1967":4339000,"1968":4364000,"1969":4387000,"1970":4411000,"1971":4435000,"1972":4457000,"1973":4478000,"1974":4497000,"1975":4514000,"1976":4530000,"1977":4532000,"1978":4556000,"1979":4571000,"1980":4588000,"1981":4608000,"1982":4635000,"1983":4659000,"1984":4680000,"1985":4701000,"1986":4722000,"1987":4740000,"1988":4757000,"1989":4767000,"1990":4780000,"1991":4510000,"1992":4470000,"1993":4640000,"1994":4650000,"1995":4669000,"1996":4494000,"1997":4572000,"1998":4501000,"1999":4554000,"2000":4426000,"2001":4440000,"2002":"4440000","2003":"4440000","2004":"4439000","2005":"4442000","2006":"4440000","2007":"4436000","2008":"4434508","2009":"4429078","2010":"4417781","2011":"4280622","2012":"4267558","2013":"4255689","2014":"4238389","2015":"4203604","2016":4170600,"Country Name":"Croatia","Country Code":"HRV","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3866159,"1961":3943364,"1962":4022593,"1963":4103730,"1964":4186640,"1965":4271133,"1966":4357484,"1967":4445530,"1968":4534234,"1969":4622208,"1970":4708642,"1971":4793155,"1972":4876560,"1973":4960657,"1974":5047944,"1975":5140357,"1976":5238245,"1977":5341419,"1978":5450549,"1979":5566266,"1980":5688836,"1981":5818671,"1982":5955267,"1983":6096692,"1984":6240329,"1985":6384195,"1986":6527543,"1987":6670568,"1988":6813348,"1989":6956300,"1990":7099732,"1991":7243391,"1992":7386975,"1993":7530705,"1994":7674911,"1995":7819806,"1996":7965553,"1997":8111951,"1998":8258483,"1999":8404398,"2000":8549200,"2001":8692567,"2002":"8834733","2003":"8976552","2004":"9119178","2005":"9263404","2006":"9409457","2007":"9556889","2008":"9705029","2009":"9852870","2010":"9999617","2011":"10145054","2012":"10289210","2013":"10431776","2014":"10572466","2015":"10711061","2016":10847334,"Country Name":"Haiti","Country Code":"HTI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":9983967,"1961":10029321,"1962":10061734,"1963":10087947,"1964":10119835,"1965":10147935,"1966":10178653,"1967":10216604,"1968":10255815,"1969":10298723,"1970":10337910,"1971":10367537,"1972":10398489,"1973":10432055,"1974":10478720,"1975":10540525,"1976":10598677,"1977":10648031,"1978":10684822,"1979":10704152,"1980":10711122,"1981":10711848,"1982":10705535,"1983":10689463,"1984":10668095,"1985":10648713,"1986":10630564,"1987":10612741,"1988":10596487,"1989":10481719,"1990":10373988,"1991":10373400,"1992":10369341,"1993":10357523,"1994":10343355,"1995":10328965,"1996":10311238,"1997":10290486,"1998":10266570,"1999":10237530,"2000":10210971,"2001":10187576,"2002":"10158608","2003":"10129552","2004":"10107146","2005":"10087065","2006":"10071370","2007":"10055780","2008":"10038188","2009":"10022650","2010":"10000023","2011":"9971727","2012":"9920362","2013":"9893082","2014":"9866468","2015":"9843028","2016":9817958,"Country Name":"Hungary","Country Code":"HUN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1919407887,"1961":1939836298,"1962":1973218329,"1963":2018350305,"1964":2063746670,"1965":2110279679,"1966":2160019389,"1967":2209396889,"1968":2260184564,"1969":2313158771,"1970":2367654009,"1971":2423465508,"1972":2478408044,"1973":2533174002,"1974":2587071115,"1975":2639203803,"1976":2690222169,"1977":2740145512,"1978":2790579600,"1979":2841958816,"1980":2893772908,"1981":2946735091,"1982":3002548293,"1983":3058911508,"1984":3114789711,"1985":3171656036,"1986":3230286974,"1987":3290559744,"1988":3351016862,"1989":3410607766,"1990":3468363155,"1991":3524156900,"1992":3578122909,"1993":3631077834,"1994":3683170309,"1995":3734660463,"1996":3785506609,"1997":3836417837,"1998":3886504193,"1999":3935412182,"2000":3982443142,"2001":4028377292,"2002":"4073362380","2003":"4118095711","2004":"4162639289","2005":"4207162999","2006":"4251352513","2007":"4295109674","2008":"4339073871","2009":"4383580939","2010":"4427798045","2011":"4472295862","2012":"4517416870","2013":"4562691125","2014":"4607807731","2015":"4652578287","2016":4697247117,"Country Name":"IBRD only","Country Code":"IBD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2301897627,"1961":2331635822,"1962":2374688722,"1963":2429878060,"1964":2485749333,"1965":2543190731,"1966":2604311574,"1967":2665519130,"1968":2728489377,"1969":2793865148,"1970":2860891191,"1971":2929334010,"1972":2997073809,"1973":3064933022,"1974":3132415989,"1975":3198758000,"1976":3264663646,"1977":3330121247,"1978":3396706897,"1979":3464795884,"1980":3533831065,"1981":3604524700,"1982":3678602357,"1983":3753779743,"1984":3829034886,"1985":3905848914,"1986":3984993015,"1987":4066327440,"1988":4148376854,"1989":4230092461,"1990":4310509136,"1991":4389375611,"1992":4466925145,"1993":4543801237,"1994":4620029667,"1995":4695886903,"1996":4771331934,"1997":4847036638,"1998":4922022165,"1999":4996027951,"2000":5068859280,"2001":5141153664,"2002":"5213009069","2003":"5285116716","2004":"5357527608","2005":"5430388379","2006":"5503417422","2007":"5576571343","2008":"5650516692","2009":"5725606720","2010":"5801348625","2011":"5877978113","2012":"5955531931","2013":"6033914681","2014":"6112778045","2015":"6191917218","2016":6271593092,"Country Name":"IDA & IBRD total","Country Code":"IBT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":382489740,"1961":391799524,"1962":401470393,"1963":411527755,"1964":422002663,"1965":432911052,"1966":444292185,"1967":456122241,"1968":468304813,"1969":480706377,"1970":493237182,"1971":505868502,"1972":518665765,"1973":531759020,"1974":545344874,"1975":559554197,"1976":574441477,"1977":589975735,"1978":606127297,"1979":622837068,"1980":640058157,"1981":657789609,"1982":676054064,"1983":694868235,"1984":714245175,"1985":734192878,"1986":754706041,"1987":775767696,"1988":797359992,"1989":819484695,"1990":842145981,"1991":865218711,"1992":888802236,"1993":912723403,"1994":936859358,"1995":961226440,"1996":985825325,"1997":1010618801,"1998":1035517972,"1999":1060615769,"2000":1086416138,"2001":1112776372,"2002":"1139646689","2003":"1167021005","2004":"1194888319","2005":"1223225380","2006":"1252064909","2007":"1281461669","2008":"1311442821","2009":"1342025781","2010":"1373550580","2011":"1405682251","2012":"1438115061","2013":"1471223556","2014":"1504970314","2015":"1539338931","2016":1574345975,"Country Name":"IDA total","Country Code":"IDA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":123195063,"1961":126145959,"1962":129235885,"1963":132460233,"1964":135810058,"1965":139283107,"1966":142884219,"1967":146618832,"1968":150482659,"1969":154472531,"1970":158588589,"1971":162826704,"1972":167198554,"1973":171751733,"1974":176545424,"1975":181619647,"1976":186993690,"1977":192650981,"1978":198566333,"1979":204695751,"1980":211007189,"1981":217484839,"1982":224129826,"1983":230943958,"1984":237935069,"1985":245102022,"1986":252445129,"1987":259944139,"1988":267549711,"1989":275200141,"1990":282899816,"1991":290487021,"1992":298118128,"1993":305759721,"1994":313402026,"1995":321107441,"1996":328964394,"1997":336924643,"1998":344939833,"1999":352915069,"2000":361050467,"2001":369246309,"2002":"377544104","2003":"385980348","2004":"394625729","2005":"403526930","2006":"412705870","2007":"422204235","2008":"432032769","2009":"442179341","2010":"452947421","2011":"463997812","2012":"474993526","2013":"486261860","2014":"497751634","2015":"509396383","2016":521159393,"Country Name":"IDA blend","Country Code":"IDB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":87792515,"1961":90138235,"1962":92558005,"1963":95055665,"1964":97638029,"1965":100308894,"1966":103067354,"1967":105907403,"1968":108821564,"1969":111800091,"1970":114834780,"1971":117921998,"1972":121059513,"1973":124242298,"1974":127465231,"1975":130724115,"1976":134010690,"1977":137322118,"1978":140665856,"1979":144053518,"1980":147490365,"1981":150978840,"1982":154506265,"1983":158044343,"1984":161555583,"1985":165012196,"1986":168402025,"1987":171728917,"1988":175000916,"1989":178233223,"1990":181436821,"1991":184615979,"1992":187766086,"1993":190879523,"1994":193945272,"1995":196957849,"1996":199914831,"1997":202826465,"1998":205715544,"1999":208612556,"2000":211540429,"2001":214506502,"2002":"217508059","2003":"220545214","2004":"223614649","2005":"226712730","2006":"229838202","2007":"232989141","2008":"236159276","2009":"239340478","2010":"242524123","2011":"245707511","2012":"248883232","2013":"252032263","2014":"255131116","2015":"258162113","2016":261115456,"Country Name":"Indonesia","Country Code":"IDN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":259294677,"1961":265653565,"1962":272234508,"1963":279067522,"1964":286192605,"1965":293627945,"1966":301407966,"1967":309503409,"1968":317822154,"1969":326233846,"1970":334648593,"1971":343041798,"1972":351467211,"1973":360007287,"1974":368799450,"1975":377934550,"1976":387447787,"1977":397324754,"1978":407560964,"1979":418141317,"1980":429050968,"1981":440304770,"1982":451924238,"1983":463924277,"1984":476310106,"1985":489090856,"1986":502260912,"1987":515823557,"1988":529810281,"1989":544284554,"1990":559246165,"1991":574731690,"1992":590684108,"1993":606963682,"1994":623457332,"1995":640118999,"1996":656860931,"1997":673694158,"1998":690578139,"1999":707700700,"2000":725365671,"2001":743530063,"2002":"762102585","2003":"781040657","2004":"800262590","2005":"819698450","2006":"839359039","2007":"859257434","2008":"879410052","2009":"899846440","2010":"920603159","2011":"941684439","2012":"963121535","2013":"984961696","2014":"1007218680","2015":"1029942548","2016":1053186582,"Country Name":"IDA only","Country Code":"IDX","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":48442,"1961":48281,"1962":48418,"1963":48800,"1964":49391,"1965":50141,"1966":51049,"1967":52118,"1968":53254,"1969":54376,"1970":55425,"1971":56352,"1972":57154,"1973":57900,"1974":58655,"1975":59478,"1976":60428,"1977":61443,"1978":62406,"1979":63151,"1980":63551,"1981":63540,"1982":63191,"1983":62730,"1984":62487,"1985":62696,"1986":63441,"1987":64630,"1988":66047,"1989":67388,"1990":68429,"1991":69096,"1992":69475,"1993":69656,"1994":69818,"1995":70070,"1996":70431,"1997":70869,"1998":71390,"1999":71952,"2000":72554,"2001":73192,"2002":"73870","2003":"74587","2004":"75341","2005":"76118","2006":"76914","2007":"77727","2008":"78534","2009":"79325","2010":"80072","2011":"80759","2012":"81406","2013":"82013","2014":"82590","2015":"83167","2016":83737,"Country Name":"Isle of Man","Country Code":"IMN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":449480608,"1961":458494963,"1962":467852537,"1963":477527970,"1964":487484535,"1965":497702365,"1966":508161935,"1967":518889779,"1968":529967317,"1969":541505076,"1970":553578513,"1971":566224812,"1972":579411513,"1973":593058926,"1974":607050255,"1975":621301720,"1976":635771734,"1977":650485030,"1978":665502284,"1979":680915804,"1980":696783517,"1981":713118032,"1982":729868013,"1983":746949067,"1984":764245202,"1985":781666671,"1986":799181436,"1987":816792741,"1988":834489322,"1989":852270034,"1990":870133480,"1991":888054875,"1992":906021106,"1993":924057817,"1994":942204249,"1995":960482795,"1996":978893217,"1997":997405318,"1998":1015974042,"1999":1034539214,"2000":1053050912,"2001":1071477855,"2002":"1089807112","2003":"1108027848","2004":"1126135777","2005":"1144118674","2006":"1161977719","2007":"1179681239","2008":"1197146906","2009":"1214270132","2010":"1230980691","2011":"1247236029","2012":"1263065852","2013":"1278562207","2014":"1293859294","2015":"1309053980","2016":1324171354,"Country Name":"India","Country Code":"IND","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":null,"1961":null,"1962":null,"1963":null,"1964":null,"1965":null,"1966":null,"1967":null,"1968":null,"1969":null,"1970":null,"1971":null,"1972":null,"1973":null,"1974":null,"1975":null,"1976":null,"1977":null,"1978":null,"1979":null,"1980":null,"1981":null,"1982":null,"1983":null,"1984":null,"1985":null,"1986":null,"1987":null,"1988":null,"1989":null,"1990":null,"1991":null,"1992":null,"1993":null,"1994":null,"1995":null,"1996":null,"1997":null,"1998":null,"1999":null,"2000":null,"2001":null,"2002":"","2003":"","2004":"","2005":"","2006":"","2007":"","2008":"","2009":"","2010":"","2011":"","2012":"","2013":"","2014":"","2015":"","2016":null,"Country Name":"Not classified","Country Code":"INX","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2828600,"1961":2824400,"1962":2836050,"1963":2852650,"1964":2866550,"1965":2877300,"1966":2888800,"1967":2902450,"1968":2915550,"1969":2932650,"1970":2957250,"1971":2992050,"1972":3036850,"1973":3085950,"1974":3137500,"1975":3189550,"1976":3238050,"1977":3282200,"1978":3329100,"1979":3373750,"1980":3412800,"1981":3453000,"1982":3485800,"1983":3510600,"1984":3532423,"1985":3538082,"1986":3539690,"1987":3540057,"1988":3524949,"1989":3511009,"1990":3513974,"1991":3534235,"1992":3558430,"1993":3576261,"1994":3590386,"1995":3608841,"1996":3637510,"1997":3674171,"1998":3712696,"1999":3754786,"2000":3805174,"2001":3866243,"2002":"3931947","2003":"3996521","2004":"4070262","2005":"4159914","2006":"4273591","2007":"4398942","2008":"4489544","2009":"4535375","2010":"4560155","2011":"4576794","2012":"4586897","2013":"4598294","2014":"4617225","2015":"4676835","2016":4773095,"Country Name":"Ireland","Country Code":"IRL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":21906903,"1961":22480418,"1962":23071429,"1963":23680432,"1964":24308085,"1965":24955115,"1966":25624656,"1967":26318119,"1968":27032943,"1969":27765243,"1970":28514010,"1971":29281268,"1972":30074298,"1973":30904271,"1974":31785500,"1975":32730554,"1976":33737768,"1977":34810723,"1978":35972652,"1979":37252659,"1980":38668220,"1981":40217629,"1982":41883332,"1983":43645092,"1984":45474708,"1985":47342702,"1986":49256842,"1987":51197482,"1988":53075618,"1989":54777114,"1990":56226185,"1991":57375584,"1992":58260738,"1993":58991218,"1994":59725125,"1995":60575644,"1996":61583089,"1997":62710557,"1998":63900630,"1999":65062660,"2000":66131854,"2001":67096414,"2002":"67983330","2003":"68812713","2004":"69617100","2005":"70421811","2006":"71227880","2007":"72031103","2008":"72845542","2009":"73687565","2010":"74567511","2011":"75491582","2012":"76453574","2013":"77435384","2014":"78411092","2015":"79360487","2016":80277428,"Country Name":"Iran","Country Code":"IRN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7289761,"1961":7475352,"1962":7674223,"1963":7888914,"1964":8122199,"1965":8375793,"1966":8651164,"1967":8947404,"1968":9260682,"1969":9585576,"1970":9917983,"1971":10255903,"1972":10599845,"1973":10951166,"1974":11312305,"1975":11684589,"1976":12068168,"1977":12460914,"1978":12859094,"1979":13257799,"1980":13653356,"1981":14046540,"1982":14438309,"1983":14825789,"1984":15205501,"1985":15576395,"1986":15936375,"1987":16290149,"1988":16651807,"1989":17040190,"1990":17469005,"1991":17942715,"1992":18458187,"1993":19011917,"1994":19597239,"1995":20208387,"1996":20845893,"1997":21509291,"1998":22190250,"1999":22878156,"2000":23565413,"2001":24251649,"2002":"24939299","2003":"25627626","2004":"26316609","2005":"27008426","2006":"27697912","2007":"28390433","2008":"29111417","2009":"29894652","2010":"30762701","2011":"31727053","2012":"32776571","2013":"33883145","2014":"35006080","2015":"36115649","2016":37202572,"Country Name":"Iraq","Country Code":"IRQ","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":175574,"1961":179029,"1962":182378,"1963":185653,"1964":188983,"1965":192286,"1966":195570,"1967":198751,"1968":201488,"1969":203369,"1970":204438,"1971":206098,"1972":209137,"1973":212317,"1974":215209,"1975":217979,"1976":220154,"1977":221799,"1978":223537,"1979":225735,"1980":228138,"1981":230755,"1982":233860,"1983":236977,"1984":239511,"1985":241405,"1986":243180,"1987":245859,"1988":249740,"1989":252852,"1990":254826,"1991":257797,"1992":261057,"1993":263725,"1994":266021,"1995":267468,"1996":268916,"1997":271128,"1998":274047,"1999":277381,"2000":281205,"2001":284968,"2002":"287523","2003":"289521","2004":"292074","2005":"296734","2006":"303782","2007":"311566","2008":"317414","2009":"318499","2010":"318041","2011":"319014","2012":"320716","2013":"323764","2014":"327386","2015":"330815","2016":334252,"Country Name":"Iceland","Country Code":"ISL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2114020,"1961":2185000,"1962":2293000,"1963":2379000,"1964":2475000,"1965":2563000,"1966":2629000,"1967":2745000,"1968":2803000,"1969":2877000,"1970":2974000,"1971":3069000,"1972":3148000,"1973":3278000,"1974":3377000,"1975":3455000,"1976":3533000,"1977":3613000,"1978":3690000,"1979":3786000,"1980":3878000,"1981":3956000,"1982":4031000,"1983":4105000,"1984":4159000,"1985":4233000,"1986":4299000,"1987":4369000,"1988":4442000,"1989":4518000,"1990":4660000,"1991":4949000,"1992":5123000,"1993":5261000,"1994":5399000,"1995":5545000,"1996":5692000,"1997":5836000,"1998":5971000,"1999":6125000,"2000":6289000,"2001":6439000,"2002":"6570000","2003":"6689700","2004":"6809000","2005":"6930100","2006":"7053700","2007":"7180100","2008":"7308800","2009":"7485600","2010":"7623600","2011":"7765800","2012":"7910500","2013":"8059500","2014":"8215700","2015":"8380100","2016":8547100,"Country Name":"Israel","Country Code":"ISR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":50199700,"1961":50536350,"1962":50879450,"1963":51252000,"1964":51675350,"1965":52112350,"1966":52519000,"1967":52900500,"1968":53235750,"1969":53537950,"1970":53821850,"1971":54073490,"1972":54381345,"1973":54751406,"1974":55110868,"1975":55441001,"1976":55718260,"1977":55955411,"1978":56155143,"1979":56317749,"1980":56433883,"1981":56501675,"1982":56543548,"1983":56564074,"1984":56576718,"1985":56593071,"1986":56596155,"1987":56601931,"1988":56629288,"1989":56671781,"1990":56719240,"1991":56758521,"1992":56797087,"1993":56831821,"1994":56843400,"1995":56844303,"1996":56860281,"1997":56890372,"1998":56906744,"1999":56916317,"2000":56942108,"2001":56974100,"2002":"57059007","2003":"57313203","2004":"57685327","2005":"57969484","2006":"58143979","2007":"58438310","2008":"58826731","2009":"59095365","2010":"59277417","2011":"59379449","2012":"59539717","2013":"60233948","2014":"60789140","2015":"60730582","2016":60600590,"Country Name":"Italy","Country Code":"ITA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1628252,"1961":1650806,"1962":1676250,"1963":1703395,"1964":1730486,"1965":1756266,"1966":1780264,"1967":1803064,"1968":1825633,"1969":1849414,"1970":1875381,"1971":1904016,"1972":1934828,"1973":1966700,"1974":1998034,"1975":2027737,"1976":2055085,"1977":2080538,"1978":2105664,"1979":2132690,"1980":2163045,"1981":2197583,"1982":2235327,"1983":2273666,"1984":2308947,"1985":2338638,"1986":2361720,"1987":2379279,"1988":2393534,"1989":2407720,"1990":2424242,"1991":2443689,"1992":2465362,"1993":2488782,"1994":2513049,"1995":2537440,"1996":2561993,"1997":2586827,"1998":2611367,"1999":2634882,"2000":2656864,"2001":2677011,"2002":"2695446","2003":"2712511","2004":"2728777","2005":"2744673","2006":"2760279","2007":"2775467","2008":"2790122","2009":"2804082","2010":"2817210","2011":"2829493","2012":"2840992","2013":"2851807","2014":"2862087","2015":"2871934","2016":2881355,"Country Name":"Jamaica","Country Code":"JAM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":932257,"1961":973083,"1962":1009733,"1963":1049302,"1964":1101459,"1965":1172550,"1966":1265806,"1967":1377465,"1968":1498309,"1969":1615277,"1970":1718913,"1971":1806605,"1972":1881214,"1973":1945626,"1974":2004833,"1975":2062918,"1976":2120069,"1977":2176135,"1978":2234594,"1979":2299655,"1980":2374422,"1981":2461193,"1982":2559718,"1983":2667470,"1984":2780428,"1985":2895985,"1986":3011300,"1987":3127917,"1988":3252672,"1989":3395023,"1990":3560582,"1991":3753433,"1992":3968198,"1993":4189431,"1994":4395953,"1995":4572904,"1996":4716373,"1997":4832267,"1998":4927912,"1999":5014899,"2000":5103130,"2001":5193482,"2002":"5287488","2003":"5396774","2004":"5535595","2005":"5714111","2006":"5934232","2007":"6193191","2008":"6489822","2009":"6821116","2010":"7182390","2011":"7574943","2012":"7992573","2013":"8413464","2014":"8809306","2015":"9159302","2016":9455802,"Country Name":"Jordan","Country Code":"JOR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":92500572,"1961":94943000,"1962":95832000,"1963":96812000,"1964":97826000,"1965":98883000,"1966":99790000,"1967":100725000,"1968":101061000,"1969":103172000,"1970":104345000,"1971":105697000,"1972":107188000,"1973":108079000,"1974":110162000,"1975":111940000,"1976":112771000,"1977":113863000,"1978":114898000,"1979":115870000,"1980":116782000,"1981":117648000,"1982":118449000,"1983":119259000,"1984":120018000,"1985":120754000,"1986":121492000,"1987":122091000,"1988":122613000,"1989":123116000,"1990":123537000,"1991":123921000,"1992":124229000,"1993":124536000,"1994":124961000,"1995":125439000,"1996":125757000,"1997":126057000,"1998":126400000,"1999":126631000,"2000":126843000,"2001":127149000,"2002":"127445000","2003":"127718000","2004":"127761000","2005":"127773000","2006":"127854000","2007":"128001000","2008":"128063000","2009":"128047000","2010":"128070000","2011":"127833000","2012":"127629000","2013":"127445000","2014":"127276000","2015":"127141000","2016":126994511,"Country Name":"Japan","Country Code":"JPN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":9714260,"1961":10129861,"1962":10532062,"1963":10913552,"1964":11267329,"1965":11588870,"1966":11872939,"1967":12120504,"1968":12341412,"1969":12550121,"1970":12757245,"1971":12966920,"1972":13176584,"1973":13382211,"1974":13577049,"1975":13756789,"1976":13920105,"1977":14070681,"1978":14215111,"1979":14362417,"1980":14518924,"1981":14683789,"1982":14853993,"1983":15030495,"1984":15214051,"1985":15403006,"1986":15600928,"1987":15801753,"1988":15982510,"1989":16249500,"1990":16348000,"1991":16450500,"1992":16439095,"1993":16330419,"1994":16095199,"1995":15815626,"1996":15577894,"1997":15333703,"1998":15071300,"1999":14928426,"2000":14883626,"2001":14858335,"2002":"14858948","2003":"14909018","2004":"15012985","2005":"15147029","2006":"15308084","2007":"15484192","2008":"15674000","2009":"16092701","2010":"16321581","2011":"16556600","2012":"16791425","2013":"17035275","2014":"17289224","2015":"17544126","2016":17797032,"Country Name":"Kazakhstan","Country Code":"KAZ","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8105440,"1961":8361441,"1962":8628972,"1963":8908422,"1964":9200157,"1965":9504703,"1966":9822499,"1967":10154484,"1968":10502245,"1969":10867716,"1970":11252492,"1971":11657514,"1972":12083188,"1973":12529852,"1974":12997595,"1975":13486629,"1976":13996704,"1977":14528293,"1978":15082994,"1979":15662852,"1980":16268990,"1981":16901677,"1982":17559430,"1983":18239404,"1984":18937738,"1985":19651225,"1986":20378626,"1987":21119318,"1988":21871442,"1989":22633022,"1990":23402507,"1991":24179598,"1992":24963953,"1993":25754114,"1994":26548486,"1995":27346456,"1996":28147734,"1997":28954114,"1998":29769803,"1999":30600397,"2000":31450483,"2001":32321482,"2002":"33214009","2003":"34130852","2004":"35074931","2005":"36048288","2006":"37052050","2007":"38085909","2008":"39148416","2009":"40237204","2010":"41350152","2011":"42486839","2012":"43646629","2013":"44826849","2014":"46024250","2015":"47236259","2016":48461567,"Country Name":"Kenya","Country Code":"KEN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2172300,"1961":2255900,"1962":2333400,"1963":2413700,"1964":2495300,"1965":2573300,"1966":2655300,"1967":2736500,"1968":2818300,"1969":2894800,"1970":2959900,"1971":3022300,"1972":3088200,"1973":3153800,"1974":3223900,"1975":3292400,"1976":3358700,"1977":3423900,"1978":3487100,"1979":3552000,"1980":3617400,"1981":3685800,"1982":3759300,"1983":3838300,"1984":3916400,"1985":3990300,"1986":4066500,"1987":4144600,"1988":4218400,"1989":4307500,"1990":4391200,"1991":4463600,"1992":4515400,"1993":4516700,"1994":4515100,"1995":4560400,"1996":4628400,"1997":4696400,"1998":4769000,"1999":4840400,"2000":4898400,"2001":4945100,"2002":"4990700","2003":"5043300","2004":"5104700","2005":"5162600","2006":"5218400","2007":"5268400","2008":"5318700","2009":"5383300","2010":"5447900","2011":"5514600","2012":"5607200","2013":"5719600","2014":"5835500","2015":"5956900","2016":6082700,"Country Name":"Kyrgyzstan","Country Code":"KGZ","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5722370,"1961":5873015,"1962":6028551,"1963":6183747,"1964":6331583,"1965":6467197,"1966":6584766,"1967":6685321,"1968":6778723,"1969":6879184,"1970":6994848,"1971":7137749,"1972":7300152,"1973":7447285,"1974":7531424,"1975":7522593,"1976":7402873,"1977":7194279,"1978":6955566,"1979":6768724,"1980":6692107,"1981":6748193,"1982":6918101,"1983":7168236,"1984":7446019,"1985":7712978,"1986":7958976,"1987":8196037,"1988":8433798,"1989":8689152,"1990":8973342,"1991":9286976,"1992":9621504,"1993":9968275,"1994":10315376,"1995":10653558,"1996":10980273,"1997":11295880,"1998":11597739,"1999":11883636,"2000":12152354,"2001":12402473,"2002":"12634729","2003":"12853124","2004":"13063377","2005":"13270201","2006":"13474489","2007":"13676693","2008":"13880509","2009":"14090208","2010":"14308740","2011":"14537886","2012":"14776866","2013":"15022692","2014":"15270790","2015":"15517635","2016":15762370,"Country Name":"Cambodia","Country Code":"KHM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":41233,"1961":42257,"1962":43302,"1963":44363,"1964":45425,"1965":46453,"1966":47459,"1967":48437,"1968":49388,"1969":50294,"1970":51178,"1971":52025,"1972":52824,"1973":53604,"1974":54380,"1975":55169,"1976":55977,"1977":56810,"1978":57662,"1979":58506,"1980":59339,"1981":60133,"1982":60920,"1983":61768,"1984":62765,"1985":64003,"1986":65518,"1987":67261,"1988":69098,"1989":70860,"1990":72412,"1991":73700,"1992":74769,"1993":75719,"1994":76671,"1995":77730,"1996":78907,"1997":80184,"1998":81550,"1999":82966,"2000":84406,"2001":85858,"2002":"87343","2003":"88895","2004":"90542","2005":"92325","2006":"94260","2007":"96311","2008":"98440","2009":"100568","2010":"102652","2011":"104656","2012":"106613","2013":"108535","2014":"110458","2015":"112407","2016":114395,"Country Name":"Kiribati","Country Code":"KIR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":51195,"1961":51193,"1962":50966,"1963":50525,"1964":49930,"1965":49214,"1966":48358,"1967":47380,"1968":46402,"1969":45534,"1970":44885,"1971":44495,"1972":44326,"1973":44316,"1974":44331,"1975":44276,"1976":44148,"1977":43942,"1978":43703,"1979":43457,"1980":43210,"1981":42976,"1982":42762,"1983":42542,"1984":42294,"1985":42013,"1986":41697,"1987":41351,"1988":41047,"1989":40852,"1990":40834,"1991":41013,"1992":41361,"1993":41846,"1994":42373,"1995":42891,"1996":43373,"1997":43846,"1998":44317,"1999":44824,"2000":45374,"2001":45990,"2002":"46641","2003":"47306","2004":"47971","2005":"48611","2006":"49210","2007":"49783","2008":"50332","2009":"50886","2010":"51445","2011":"52006","2012":"52591","2013":"53169","2014":"53739","2015":"54288","2016":54821,"Country Name":"St. Kitts and Nevis","Country Code":"KNA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":25012374,"1961":25765673,"1962":26513030,"1963":27261747,"1964":27984155,"1965":28704674,"1966":29435571,"1967":30130983,"1968":30838302,"1969":31544266,"1970":32240827,"1971":32882704,"1972":33505406,"1973":34103149,"1974":34692266,"1975":35280725,"1976":35848523,"1977":36411795,"1978":36969185,"1979":37534236,"1980":38123775,"1981":38723248,"1982":39326352,"1983":39910403,"1984":40405956,"1985":40805744,"1986":41213674,"1987":41621690,"1988":42031247,"1989":42449038,"1990":42869283,"1991":43295704,"1992":43747962,"1993":44194628,"1994":44641540,"1995":45092991,"1996":45524681,"1997":45953580,"1998":46286503,"1999":46616677,"2000":47008111,"2001":47370164,"2002":"47644736","2003":"47892330","2004":"48082519","2005":"48184561","2006":"48438292","2007":"48683638","2008":"49054708","2009":"49307835","2010":"49554112","2011":"49936638","2012":"50199853","2013":"50428893","2014":"50746659","2015":"51014947","2016":51245707,"Country Name":"South Korea","Country Code":"KOR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":269618,"1961":301336,"1962":338296,"1963":379891,"1964":425235,"1965":473554,"1966":524856,"1967":579007,"1968":634897,"1969":691129,"1970":746767,"1971":801142,"1972":854604,"1973":908520,"1974":964834,"1975":1024940,"1976":1089209,"1977":1157033,"1978":1227601,"1979":1299683,"1980":1372318,"1981":1442991,"1982":1511314,"1983":1580638,"1984":1655833,"1985":1738994,"1986":1836105,"1987":1942810,"1988":2038885,"1989":2096932,"1990":2099615,"1991":2035661,"1992":null,"1993":null,"1994":null,"1995":1610651,"1996":1631740,"1997":1715314,"1998":1836353,"1999":1957066,"2000":2050741,"2001":2109355,"2002":"2143833","2003":"2169118","2004":"2207939","2005":"2276623","2006":"2377258","2007":"2503410","2008":"2652340","2009":"2818939","2010":"2998083","2011":"3191051","2012":"3395556","2013":"3598385","2014":"3782450","2015":"3935794","2016":4052584,"Country Name":"Kuwait","Country Code":"KWT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":206288466,"1961":212141158,"1962":218187764,"1963":224397456,"1964":230726737,"1965":237143034,"1966":243633320,"1967":250203252,"1968":256861866,"1969":263625974,"1970":270506235,"1971":277502867,"1972":284605846,"1973":291803994,"1974":299082201,"1975":306429011,"1976":313835275,"1977":321300608,"1978":328832663,"1979":336443919,"1980":344140576,"1981":351924309,"1982":359782679,"1983":367690458,"1984":375614401,"1985":383529486,"1986":391419929,"1987":399287449,"1988":407145597,"1989":415016911,"1990":422914642,"1991":430838594,"1992":438771695,"1993":446689943,"1994":454561464,"1995":462360574,"1996":470084837,"1997":477732904,"1998":485282781,"1999":492708788,"2000":499996505,"2001":507131154,"2002":"514126613","2003":"521033040","2004":"527919692","2005":"534836570","2006":"541798268","2007":"548789887","2008":"555795034","2009":"562785589","2010":"569737872","2011":"576648286","2012":"583515410","2013":"590319145","2014":"597035363","2015":"603644865","2016":610136397,"Country Name":"Latin America & Caribbean (excluding high income)","Country Code":"LAC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2120896,"1961":2170343,"1962":2221122,"1963":2273349,"1964":2327137,"1965":2382594,"1966":2439196,"1967":2496920,"1968":2556852,"1969":2620434,"1970":2688428,"1971":2762265,"1972":2840841,"1973":2919287,"1974":2990965,"1975":3051577,"1976":3098973,"1977":3135842,"1978":3168843,"1979":3207328,"1980":3258144,"1981":3323377,"1982":3401242,"1983":3489977,"1984":3586381,"1985":3687898,"1986":3794043,"1987":3905163,"1988":4020295,"1989":4138408,"1990":4258472,"1991":4380073,"1992":4502363,"1993":4623280,"1994":4740380,"1995":4851923,"1996":4957180,"1997":5056519,"1998":5150763,"1999":5241284,"2000":5329304,"2001":5414568,"2002":"5497273","2003":"5579656","2004":"5664605","2005":"5754026","2006":"5849356","2007":"5949787","2008":"6052190","2009":"6152036","2010":"6246274","2011":"6333487","2012":"6415169","2013":"6494557","2014":"6576397","2015":"6663967","2016":6758353,"Country Name":"Laos","Country Code":"LAO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1804926,"1961":1864605,"1962":1925276,"1963":1984980,"1964":2041207,"1965":2092348,"1966":2136636,"1967":2174845,"1968":2210959,"1969":2250602,"1970":2297389,"1971":2353555,"1972":2416735,"1973":2480419,"1974":2535497,"1975":2575690,"1976":2598354,"1977":2606221,"1978":2604865,"1979":2602566,"1980":2605293,"1981":2615747,"1982":2632276,"1983":2651292,"1984":2667220,"1985":2676583,"1986":2677280,"1987":2672173,"1988":2668585,"1989":2676605,"1990":2703016,"1991":2752462,"1992":2821862,"1993":2900854,"1994":2974640,"1995":3033394,"1996":3070960,"1997":3092670,"1998":3113951,"1999":3156646,"2000":3235366,"2001":3359859,"2002":"3522837","2003":"3701464","2004":"3863267","2005":"3986852","2006":"4057350","2007":"4086466","2008":"4111047","2009":"4183156","2010":"4337141","2011":"4588368","2012":"4916404","2013":"5276102","2014":"5603279","2015":"5851479","2016":6006668,"Country Name":"Lebanon","Country Code":"LBN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1120313,"1961":1144986,"1962":1170480,"1963":1196890,"1964":1224344,"1965":1252972,"1966":1282814,"1967":1313941,"1968":1346491,"1969":1380637,"1970":1416529,"1971":1454198,"1972":1493711,"1973":1535229,"1974":1578952,"1975":1625013,"1976":1672300,"1977":1720489,"1978":1771256,"1979":1826881,"1980":1888314,"1981":1957456,"1982":2031850,"1983":2102911,"1984":2159089,"1985":2192555,"1986":2201833,"1987":2191023,"1988":2165090,"1989":2131525,"1990":2097232,"1991":2060267,"1992":2022729,"1993":2000248,"1994":2012885,"1995":2073482,"1996":2191179,"1997":2358469,"1998":2551062,"1999":2734518,"2000":2884522,"2001":2991132,"2002":"3062863","2003":"3116233","2004":"3176414","2005":"3261230","2006":"3375838","2007":"3512932","2008":"3662993","2009":"3811528","2010":"3948125","2011":"4070167","2012":"4181563","2013":"4286291","2014":"4390737","2015":"4499621","2016":4613823,"Country Name":"Liberia","Country Code":"LBR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1448417,"1961":1498071,"1962":1550813,"1963":1607171,"1964":1667825,"1965":1733306,"1966":1803683,"1967":1878877,"1968":1958914,"1969":2043818,"1970":2133526,"1971":2228146,"1972":2327490,"1973":2430755,"1974":2536888,"1975":2645139,"1976":2754696,"1977":2865637,"1978":2979093,"1979":3096729,"1980":3219466,"1981":3347781,"1982":3480454,"1983":3614689,"1984":3746715,"1985":3873781,"1986":3994591,"1987":4109703,"1988":4220418,"1989":4328914,"1990":4436661,"1991":4544293,"1992":4651004,"1993":4755289,"1994":4855003,"1995":4948798,"1996":5035884,"1997":5117269,"1998":5195502,"1999":5274163,"2000":5355751,"2001":5440566,"2002":"5527515","2003":"5615952","2004":"5704759","2005":"5792688","2006":"5881435","2007":"5970362","2008":"6053078","2009":"6121053","2010":"6169140","2011":"6193501","2012":"6198258","2013":"6195970","2014":"6204108","2015":"6234955","2016":6293253,"Country Name":"Libya","Country Code":"LBY","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{ountry Name":"St. Lucia","Country Code":"LCA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":220434162,"1961":226564269,"1962":232898623,"1963":239400168,"1964":246016868,"1965":252710810,"1966":259469769,"1967":266297580,"1968":273207936,"1969":280224095,"1970":287360913,"1971":294620200,"1972":301984111,"1973":309446838,"1974":316987705,"1975":324590353,"1976":332247634,"1977":339956216,"1978":347735376,"1979":355592928,"1980":363540795,"1981":371579141,"1982":379699615,"1983":387871825,"1984":396066751,"1985":404253008,"1986":412419260,"1987":420565926,"1988":428704815,"1989":436859090,"1990":445044474,"1991":453251622,"1992":461466818,"1993":469673464,"1994":477832466,"1995":485913137,"1996":493920486,"1997":501837818,"1998":509664955,"1999":517324341,"2000":524829248,"2001":532173135,"2002":"539373531","2003":"546480559","2004":"553565401","2005":"560677294","2006":"567825874","2007":"574999132","2008":"582185012","2009":"589352524","2010":"596477846","2011":"603534610","2012":"610545003","2013":"617492351","2014":"624331830","2015":"631058524","2016":637664490,"Country Name":"Latin America & Caribbean","Country Code":"LCN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":240742196,"1961":246406470,"1962":252264341,"1963":258352723,"1964":264721836,"1965":271400502,"1966":278419926,"1967":285751541,"1968":293292818,"1969":300902584,"1970":308486373,"1971":316004632,"1972":323506502,"1973":331095229,"1974":338920295,"1975":347093126,"1976":355653610,"1977":364581154,"1978":373854416,"1979":383429856,"1980":393279303,"1981":403408681,"1982":413846599,"1983":424613917,"1984":435737690,"1985":447240981,"1986":459115735,"1987":471364938,"1988":484033065,"1989":497176877,"1990":510827576,"1991":525020368,"1992":539720450,"1993":554804181,"1994":570101958,"1995":585496175,"1996":600926162,"1997":616437048,"1998":632146821,"1999":648229112,"2000":664804763,"2001":681932226,"2002":"699560739","2003":"717572892","2004":"735796583","2005":"754118072","2006":"772488966","2007":"790978141","2008":"809730997","2009":"828953320","2010":"848791962","2011":"869298106","2012":"890423474","2013":"912093996","2014":"934192321","2015":"956631108","2016":979387925,"Country Name":"Least developed countries: UN classification","Country Code":"LDC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":154670163,"1961":158069258,"1962":161549718,"1963":165151369,"1964":168931464,"1965":172929952,"1966":177159065,"1967":181601570,"1968":186231925,"1969":191011431,"1970":195910639,"1971":200923157,"1972":206053605,"1973":211296083,"1974":216646371,"1975":222101799,"1976":227669815,"1977":233352815,"1978":239138889,"1979":245012264,"1980":250969220,"1981":257008637,"1982":263158391,"1983":269480791,"1984":276057603,"1985":282952714,"1986":290181431,"1987":297743620,"1988":305666480,"1989":313976444,"1990":322686243,"1991":331828071,"1992":341387303,"1993":351272293,"1994":361356181,"1995":371552946,"1996":381823685,"1997":392209889,"1998":402805256,"1999":413745647,"2000":425129552,"2001":436993814,"2002":"449310184","2003":"462034389","2004":"475094388","2005":"488440913","2006":"502059411","2007":"515977457","2008":"530237548","2009":"544900284","2010":"560007444","2011":"575572515","2012":"591576162","2013":"607987351","2014":"624759914","2015":"641858608","2016":659272676,"Country Name":"Low income","Country Code":"LIC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":16495,"1961":16894,"1962":17290,"1963":17718,"1964":18170,"1965":18649,"1966":19153,"1967":19691,"1968":20236,"1969":20765,"1970":21265,"1971":21726,"1972":22151,"1973":22563,"1974":22981,"1975":23432,"1976":23926,"1977":24440,"1978":24962,"1979":25447,"1980":25866,"1981":26224,"1982":26515,"1983":26765,"1984":27011,"1985":27257,"1986":27524,"1987":27802,"1988":28095,"1989":28407,"1990":28747,"1991":29108,"1992":29497,"1993":29919,"1994":30365,"1995":30833,"1996":31325,"1997":31838,"1998":32355,"1999":32842,"2000":33286,"2001":33671,"2002":"34018","2003":"34321","2004":"34596","2005":"34852","2006":"35095","2007":"35322","2008":"35541","2009":"35766","2010":"36003","2011":"36264","2012":"36545","2013":"36834","2014":"37127","2015":"37403","2016":37666,"Country Name":"Liechtenstein","Country Code":"LIE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":9896000,"1961":10168000,"1962":10443000,"1963":10582000,"1964":10903000,"1965":11164000,"1966":11439000,"1967":11703000,"1968":11992000,"1969":12252000,"1970":12514000,"1971":12690000,"1972":12861000,"1973":13091000,"1974":13284000,"1975":13496000,"1976":13717000,"1977":13942000,"1978":14190000,"1979":14472000,"1980":14747000,"1981":14847000,"1982":15096000,"1983":15339000,"1984":15583000,"1985":15831000,"1986":16083000,"1987":16339000,"1988":16593000,"1989":16841000,"1990":17078000,"1991":17306000,"1992":17524000,"1993":17728000,"1994":17912000,"1995":18074000,"1996":18210000,"1997":18323000,"1998":18425000,"1999":18532000,"2000":18655000,"2001":18797000,"2002":"18939000","2003":"19083000","2004":"19228000","2005":"19373000","2006":"19520000","2007":"19668000","2008":"19817000","2009":"19968000","2010":"20119000","2011":"20271000","2012":"20425000","2013":"20585000","2014":"20771000","2015":"20966000","2016":21203000,"Country Name":"Sri Lanka","Country Code":"LKA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":955530364,"1961":977153221,"1962":999510311,"1963":1022440150,"1964":1046222931,"1965":1070587525,"1966":1095615249,"1967":1121291228,"1968":1147654767,"1969":1174659356,"1970":1202337501,"1971":1230618932,"1972":1259606757,"1973":1289405226,"1974":1319989340,"1975":1351448578,"1976":1383765405,"1977":1416926158,"1978":1451030951,"1979":1486206375,"1980":1522455237,"1981":1559578301,"1982":1597742202,"1983":1636777504,"1984":1676491166,"1985":1716719088,"1986":1757496619,"1987":1798719486,"1988":1840232174,"1989":1881932892,"1990":1925379611,"1991":1966936363,"1992":2008612913,"1993":2050156017,"1994":2091318647,"1995":2132343002,"1996":2173450913,"1997":2214623596,"1998":2255687535,"1999":2296629842,"2000":2337778855,"2001":2379053569,"2002":"2420369986","2003":"2461865840","2004":"2503542524","2005":"2545319773","2006":"2587214235","2007":"2629277748","2008":"2671499214","2009":"2713862748","2010":"2756602745","2011":"2799383507","2012":"2841934571","2013":"2884574006","2014":"2927194316","2015":"2970020158","2016":3012923806,"Country Name":"Lower middle income","Country Code":"LMC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2279583870,"1961":2309160397,"1962":2352010104,"1963":2406932278,"1964":2462536274,"1965":2519876451,"1966":2581011300,"1967":2642198273,"1968":2705175456,"1969":2770630717,"1970":2837882982,"1971":2906559051,"1972":2974385601,"1973":3042289951,"1974":3109760508,"1975":3176021264,"1976":3241778539,"1977":3307040031,"1978":3373447579,"1979":3441339408,"1980":3510137270,"1981":3580605849,"1982":3654457786,"1983":3729407841,"1984":3804450531,"1985":3881091898,"1986":3960113275,"1987":4041372105,"1988":4123409918,"1989":4205136981,"1990":4287532629,"1991":4366505939,"1992":4444185609,"1993":4521207585,"1994":4597585266,"1995":4673602296,"1996":4749206716,"1997":4825054508,"1998":4900128612,"1999":4974237881,"2000":5047578889,"2001":5120003794,"2002":"5192002039","2003":"5264263346","2004":"5336810799","2005":"5409780630","2006":"5482900367","2007":"5556123157","2008":"5630111419","2009":"5705229263","2010":"5781145005","2011":"5857844644","2012":"5935500538","2013":"6014016344","2014":"6093019655","2015":"6172290592","2016":6252106157,"Country Name":"Low & middle income","Country Code":"LMY","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":851591,"1961":866462,"1962":882170,"1963":898647,"1964":915822,"1965":933655,"1966":952206,"1967":971512,"1968":991491,"1969":1012015,"1970":1033050,"1971":1054453,"1972":1076340,"1973":1099235,"1974":1123855,"1975":1150635,"1976":1179723,"1977":1210799,"1978":1243352,"1979":1276663,"1980":1310118,"1981":1343690,"1982":1377346,"1983":1410439,"1984":1442212,"1985":1472192,"1986":1499861,"1987":1525460,"1988":1550262,"1989":1576022,"1990":1603938,"1991":1634517,"1992":1667121,"1993":1700362,"1994":1732257,"1995":1761359,"1996":1787273,"1997":1810453,"1998":1831298,"1999":1850527,"2000":1868699,"2001":1885955,"2002":"1902312","2003":"1918097","2004":"1933728","2005":"1949543","2006":"1965662","2007":"1982287","2008":"1999930","2009":"2019209","2010":"2040551","2011":"2064166","2012":"2089928","2013":"2117361","2014":"2145785","2015":"2174645","2016":2203821,"Country Name":"Lesotho","Country Code":"LSO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1099314242,"1961":1101437594,"1962":1115814176,"1963":1141369524,"1964":1166686603,"1965":1192684380,"1966":1221467515,"1967":1249422404,"1968":1278226894,"1969":1308528257,"1970":1339564796,"1971":1371115219,"1972":1401045511,"1973":1430110305,"1974":1457744790,"1975":1483162765,"1976":1507058741,"1977":1529402942,"1978":1551701372,"1979":1574205012,"1980":1596260695,"1981":1618553932,"1982":1643017771,"1983":1667415556,"1984":1690957098,"1985":1715338025,"1986":1741359686,"1987":1768900972,"1988":1796575744,"1989":1823489515,"1990":1848804300,"1991":1872462246,"1992":1892154493,"1993":1912802703,"1994":1933029510,"1995":1954394231,"1996":1973716477,"1997":1992872162,"1998":2011383694,"1999":2028688232,"2000":2044405728,"2001":2059351100,"2002":"2073373008","2003":"2087062173","2004":"2100672286","2005":"2114381754","2006":"2127904635","2007":"2141092280","2008":"2154444388","2009":"2168123627","2010":"2181250143","2011":"2194503254","2012":"2208049607","2013":"2221689409","2014":"2235382535","2015":"2248927194","2016":2262709895,"Country Name":"Late-demographic dividend","Country Code":"LTE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2778550,"1961":2823550,"1962":2863350,"1963":2898950,"1964":2935200,"1965":2971450,"1966":3008050,"1967":3044400,"1968":3078850,"1969":3107321,"1970":3139689,"1971":3179041,"1972":3213622,"1973":3244438,"1974":3273894,"1975":3301652,"1976":3328664,"1977":3355036,"1978":3379514,"1979":3397842,"1980":3413202,"1981":3432947,"1982":3457179,"1983":3485192,"1984":3514205,"1985":3544543,"1986":3578914,"1987":3616367,"1988":3655049,"1989":3684255,"1990":3697838,"1991":3704134,"1992":3700114,"1993":3682613,"1994":3657144,"1995":3629102,"1996":3601613,"1997":3575137,"1998":3549331,"1999":3524238,"2000":3499536,"2001":3470818,"2002":"3443067","2003":"3415213","2004":"3377075","2005":"3322528","2006":"3269909","2007":"3231294","2008":"3198231","2009":"3162916","2010":"3097282","2011":"3028115","2012":"2987773","2013":"2957689","2014":"2932367","2015":"2904910","2016":2872298,"Country Name":"Lithuania","Country Code":"LTU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":313970,"1961":316845,"1962":320750,"1963":324100,"1964":327750,"1965":331500,"1966":333895,"1967":334995,"1968":335850,"1969":337500,"1970":339171,"1971":342421,"1972":346600,"1973":350450,"1974":355050,"1975":358950,"1976":360731,"1977":361358,"1978":362007,"1979":362856,"1980":364150,"1981":365225,"1982":365525,"1983":365622,"1984":365998,"1985":366706,"1986":368355,"1987":370750,"1988":373450,"1989":377100,"1990":381850,"1991":387000,"1992":392175,"1993":397475,"1994":402925,"1995":408625,"1996":414225,"1997":419450,"1998":424700,"1999":430475,"2000":436300,"2001":441525,"2002":"446175","2003":"451630","2004":"458095","2005":"465158","2006":"472637","2007":"479993","2008":"488650","2009":"497783","2010":"506953","2011":"518347","2012":"530946","2013":"543360","2014":"556319","2015":"569604","2016":582972,"Country Name":"Luxembourg","Country Code":"LUX","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2120979,"1961":2152681,"1962":2181586,"1963":2210919,"1964":2240623,"1965":2265919,"1966":2283217,"1967":2301220,"1968":2323619,"1969":2343173,"1970":2359164,"1971":2376389,"1972":2395674,"1973":2415819,"1974":2437186,"1975":2456130,"1976":2470989,"1977":2485073,"1978":2497921,"1979":2505953,"1980":2511701,"1981":2519421,"1982":2531080,"1983":2546011,"1984":2562047,"1985":2578873,"1986":2599892,"1987":2626583,"1988":2653434,"1989":2666955,"1990":2663151,"1991":2650581,"1992":2614338,"1993":2563290,"1994":2520742,"1995":2485056,"1996":2457222,"1997":2432851,"1998":2410019,"1999":2390482,"2000":2367550,"2001":2337170,"2002":"2310173","2003":"2287955","2004":"2263122","2005":"2238799","2006":"2218357","2007":"2200325","2008":"2177322","2009":"2141669","2010":"2097555","2011":"2059709","2012":"2034319","2013":"2012647","2014":"1993782","2015":"1977527","2016":1960424,"Country Name":"Latvia","Country Code":"LVA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":167796,"1961":170465,"1962":176188,"1963":184250,"1964":193563,"1965":203231,"1966":213196,"1967":223420,"1968":233004,"1969":240842,"1970":246195,"1971":248739,"1972":248767,"1973":246947,"1974":244284,"1975":241628,"1976":239085,"1977":236695,"1978":235198,"1979":235479,"1980":238118,"1981":243427,"1982":251219,"1983":260997,"1984":271993,"1985":283581,"1986":295677,"1987":308275,"1988":320877,"1989":332901,"1990":343935,"1991":353764,"1992":362459,"1993":370345,"1994":377960,"1995":385686,"1996":393567,"1997":401564,"1998":409837,"1999":418604,"2000":427979,"2001":438081,"2002":"448896","2003":"460147","2004":"471453","2005":"482559","2006":"493320","2007":"503823","2008":"514348","2009":"525313","2010":"536969","2011":"549439","2012":"562531","2013":"575841","2014":"588781","2015":"600942","2016":612167,"Country Name":"Macao SAR, China","Country Code":"MAC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4279,"1961":4453,"1962":4566,"1963":4656,"1964":4748,"1965":4841,"1966":4936,"1967":5033,"1968":5161,"1969":5303,"1970":5450,"1971":5601,"1972":5756,"1973":5915,"1974":6078,"1975":6291,"1976":6530,"1977":6778,"1978":7035,"1979":7303,"1980":7580,"1981":7868,"1982":8670,"1983":10547,"1984":12790,"1985":15392,"1986":18337,"1987":21628,"1988":24873,"1989":27676,"1990":30036,"1991":31821,"1992":32892,"1993":33238,"1994":33098,"1995":32712,"1996":32102,"1997":31304,"1998":30358,"1999":29305,"2000":28384,"2001":27782,"2002":"27450","2003":"27363","2004":"27514","2005":"27906","2006":"28414","2007":"28905","2008":"29376","2009":"29820","2010":"30235","2011":"30615","2012":"30959","2013":"31264","2014":"31530","2015":"31754","2016":31949,"Country Name":"St. Martin (French part)","Country Code":"MAF","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":12328532,"1961":12710547,"1962":13094818,"1963":13478232,"1964":13857142,"1965":14229044,"1966":14593284,"1967":14950803,"1968":15302947,"1969":15651924,"1970":16000008,"1971":16347198,"1972":16695003,"1973":17049165,"1974":17416964,"1975":17803698,"1976":18210754,"1977":18636977,"1978":19081718,"1979":19543347,"1980":20019847,"1981":20511601,"1982":21016818,"1983":21528502,"1984":22037610,"1985":22537376,"1986":23023935,"1987":23497766,"1988":23961820,"1989":24421191,"1990":24879136,"1991":25336862,"1992":25791494,"1993":26237417,"1994":26667048,"1995":27075232,"1996":27460603,"1997":27825901,"1998":28175263,"1999":28514798,"2000":28849621,"2001":29181832,"2002":"29512368","2003":"29843937","2004":"30179285","2005":"30521070","2006":"30869346","2007":"31225881","2008":"31596855","2009":"31989897","2010":"32409639","2011":"32858823","2012":"33333789","2013":"33824769","2014":"34318082","2015":"34803322","2016":35276786,"Country Name":"Morocco","Country Code":"MAR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":22452,"1961":22808,"1962":23039,"1963":23168,"1964":23236,"1965":23282,"1966":23305,"1967":23292,"1968":23304,"1969":23346,"1970":23484,"1971":23720,"1972":24051,"1973":24439,"1974":24835,"1975":25197,"1976":25523,"1977":25809,"1978":26087,"1979":26395,"1980":26745,"1981":27164,"1982":27624,"1983":28095,"1984":28512,"1985":28835,"1986":29041,"1987":29172,"1988":29235,"1989":29312,"1990":29439,"1991":29624,"1992":29863,"1993":30138,"1994":30427,"1995":30691,"1996":30967,"1997":31251,"1998":31523,"1999":31800,"2000":32082,"2001":32360,"2002":"32629","2003":"32933","2004":"33314","2005":"33793","2006":"34408","2007":"35111","2008":"35853","2009":"36534","2010":"37094","2011":"37497","2012":"37783","2013":"37971","2014":"38132","2015":"38307","2016":38499,"Country Name":"Monaco","Country Code":"MCO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2544000,"1961":2605000,"1962":2664000,"1963":2721000,"1964":2774000,"1965":2825000,"1966":2873000,"1967":2918000,"1968":2960000,"1969":3002000,"1970":3044000,"1971":3088000,"1972":3131000,"1973":3174000,"1974":3215000,"1975":3251000,"1976":3284000,"1977":3312000,"1978":3339000,"1979":3366000,"1980":3396000,"1981":3429000,"1982":3464000,"1983":3500000,"1984":3536000,"1985":3570000,"1986":3602000,"1987":3633000,"1988":3660000,"1989":3681000,"1990":3696000,"1991":3704000,"1992":3706000,"1993":3701000,"1994":3691000,"1995":3675099,"1996":3667748,"1997":3654208,"1998":3652732,"1999":3647001,"2000":3639592,"2001":3631462,"2002":"3623062","2003":"3612874","2004":"3603945","2005":"3595187","2006":"3585209","2007":"3576910","2008":"3570108","2009":"3565604","2010":"3562045","2011":"3559986","2012":"3559519","2013":"3558566","2014":"3556397","2015":"3554108","2016":3552000,"Country Name":"Moldova","Country Code":"MDA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5099373,"1961":5223568,"1962":5352503,"1963":5486319,"1964":5625164,"1965":5769218,"1966":5918595,"1967":6073526,"1968":6234465,"1969":6401921,"1970":6576305,"1971":6757850,"1972":6946620,"1973":7142627,"1974":7345780,"1975":7556026,"1976":7773449,"1977":7998164,"1978":8230218,"1979":8469672,"1980":8716553,"1981":8971345,"1982":9234129,"1983":9504281,"1984":9780872,"1985":10063495,"1986":10352120,"1987":10647754,"1988":10952395,"1989":11268658,"1990":11598633,"1991":11942819,"1992":12301336,"1993":12675460,"1994":13066543,"1995":13475400,"1996":13902688,"1997":14347854,"1998":14808791,"1999":15282521,"2000":15766806,"2001":16260932,"2002":"16765117","2003":"17279141","2004":"17802997","2005":"18336724","2006":"18880268","2007":"19433523","2008":"19996469","2009":"20569121","2010":"21151640","2011":"21743949","2012":"22346573","2013":"22961146","2014":"23589801","2015":"24234088","2016":24894551,"Country Name":"Madagascar","Country Code":"MDG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":89887,"1961":92350,"1962":94938,"1963":97584,"1964":100214,"1965":102766,"1966":105190,"1967":107538,"1968":109959,"1969":112651,"1970":115768,"1971":119378,"1972":123441,"1973":127791,"1974":132195,"1975":136519,"1976":140665,"1977":144736,"1978":148892,"1979":153386,"1980":158385,"1981":163935,"1982":169960,"1983":176356,"1984":182953,"1985":189637,"1986":196357,"1987":203124,"1988":209885,"1989":216595,"1990":218000,"1991":227000,"1992":234000,"1993":242000,"1994":245000,"1995":255000,"1996":262000,"1997":264000,"1998":271000,"1999":280000,"2000":286000,"2001":292000,"2002":"297000","2003":"304000","2004":"312000","2005":"321000","2006":"333000","2007":"349000","2008":"362000","2009":"360000","2010":"367000","2011":"377000","2012":"385000","2013":"393000","2014":"401000","2015":"409163","2016":417492,"Country Name":"Maldives","Country Code":"MDV","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":105488678,"1961":108374227,"1962":111385940,"1963":114471415,"1964":117671617,"1965":120973578,"1966":124374455,"1967":127947266,"1968":131566224,"1969":135279930,"1970":139083819,"1971":142950993,"1972":146887303,"1973":150999871,"1974":155259901,"1975":159722643,"1976":164407528,"1977":169318424,"1978":174493349,"1979":180000521,"1980":185843847,"1981":192015875,"1982":198499602,"1983":205229901,"1984":212102793,"1985":219095273,"1986":226161475,"1987":233285188,"1988":240367135,"1989":247283550,"1990":255989130,"1991":262659662,"1992":267020622,"1993":273204804,"1994":279279333,"1995":286917385,"1996":292934005,"1997":298982946,"1998":305001541,"1999":311053183,"2000":317129227,"2001":323196354,"2002":"329289435","2003":"335522845","2004":"342046777","2005":"348956287","2006":"356287693","2007":"363996317","2008":"371999662","2009":"380192587","2010":"388376106","2011":"396573248","2012":"404782447","2013":"412950407","2014":"421022841","2015":"428961724","2016":436720722,"Country Name":"Middle East & North Africa","Country Code":"MEA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":38174112,"1961":39394126,"1962":40649588,"1963":41939880,"1964":43264272,"1965":44623043,"1966":46011038,"1967":47429812,"1968":48894019,"1969":50423481,"1970":52029861,"1971":53718724,"1972":55478151,"1973":57280587,"1974":59088193,"1975":60872399,"1976":62623763,"1977":64345884,"1978":66039488,"1979":67709689,"1980":69360871,"1981":70992195,"1982":72602533,"1983":74196548,"1984":75780605,"1985":77360707,"1986":78934125,"1987":80503052,"1988":82083919,"1989":83697891,"1990":85357874,"1991":87071512,"1992":88828310,"1993":90600453,"1994":92349147,"1995":94045579,"1996":95687452,"1997":97281739,"1998":98821456,"1999":100300579,"2000":101719673,"2001":103067068,"2002":"104355608","2003":"105640453","2004":"106995583","2005":"108472228","2006":"110092378","2007":"111836346","2008":"113661809","2009":"115505228","2010":"117318941","2011":"119090017","2012":"120828307","2013":"122535969","2014":"124221600","2015":"125890949","2016":127540423,"Country Name":"Mexico","Country Code":"MEX","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":14662,"1961":15051,"1962":15547,"1963":16114,"1964":16710,"1965":17284,"1966":17842,"1967":18388,"1968":18961,"1969":19622,"1970":20395,"1971":21313,"1972":22341,"1973":23439,"1974":24531,"1975":25576,"1976":26552,"1977":27470,"1978":28405,"1979":29418,"1980":30576,"1981":31893,"1982":33330,"1983":34892,"1984":36561,"1985":38333,"1986":40204,"1987":42153,"1988":44063,"1989":45814,"1990":47298,"1991":48475,"1992":49378,"1993":50048,"1994":50575,"1995":51015,"1996":51401,"1997":51692,"1998":51925,"1999":52079,"2000":52159,"2001":52183,"2002":"52158","2003":"52116","2004":"52074","2005":"52055","2006":"52078","2007":"52137","2008":"52218","2009":"52320","2010":"52425","2011":"52542","2012":"52663","2013":"52793","2014":"52898","2015":"52994","2016":53066,"Country Name":"Marshall Islands","Country Code":"MHL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2124913707,"1961":2151091139,"1962":2190460386,"1963":2241780909,"1964":2293604810,"1965":2346946499,"1966":2403852235,"1967":2460596703,"1968":2518943531,"1969":2579619286,"1970":2641972343,"1971":2705635894,"1972":2768331996,"1973":2830993868,"1974":2893114137,"1975":2953919465,"1976":3014108724,"1977":3073687216,"1978":3134308690,"1979":3196327144,"1980":3259168050,"1981":3323597212,"1982":3391299395,"1983":3459927050,"1984":3528392928,"1985":3598139184,"1986":3669931844,"1987":3743628485,"1988":3817743438,"1989":3891160537,"1990":3964846386,"1991":4034677868,"1992":4102798306,"1993":4169935292,"1994":4236229085,"1995":4302049350,"1996":4367383031,"1997":4432844619,"1998":4497323356,"1999":4560492234,"2000":4622449337,"2001":4683009980,"2002":"4742691855","2003":"4802228957","2004":"4861716411","2005":"4921339717","2006":"4980840956","2007":"5040145700","2008":"5099873871","2009":"5160328979","2010":"5221137561","2011":"5282272129","2012":"5343924376","2013":"5406028993","2014":"5468259741","2015":"5530431984","2016":5592833481,"Country Name":"Middle income","Country Code":"MIC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1488667,"1961":1507654,"1962":1527111,"1963":1547450,"1964":1569141,"1965":1592432,"1966":1617794,"1967":1644943,"1968":1672399,"1969":1698143,"1970":1720800,"1971":1739521,"1972":1754956,"1973":1768992,"1974":1784398,"1975":1803010,"1976":1825552,"1977":1851069,"1978":1877688,"1979":1902719,"1980":1924197,"1981":1941530,"1982":1955243,"1983":1965895,"1984":1974415,"1985":1981534,"1986":1987538,"1987":1992274,"1988":1995513,"1989":1996870,"1990":1996228,"1991":1993302,"1992":1988659,"1993":1984028,"1994":1981703,"1995":1983252,"1996":1989443,"1997":1999599,"1998":2012057,"1999":2024394,"2000":2034819,"2001":2042842,"2002":"2048928","2003":"2053426","2004":"2057047","2005":"2060272","2006":"2063145","2007":"2065458","2008":"2067378","2009":"2069093","2010":"2070739","2011":"2072383","2012":"2074036","2013":"2075739","2014":"2077495","2015":"2079308","2016":2081206,"Country Name":"Macedonia","Country Code":"MKD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5263733,"1961":5322266,"1962":5381368,"1963":5441613,"1964":5503752,"1965":5568484,"1966":5635859,"1967":5706199,"1968":5780835,"1969":5861412,"1970":5949045,"1971":6044530,"1972":6147458,"1973":6256187,"1974":6368348,"1975":6482278,"1976":6596773,"1977":6712401,"1978":6831295,"1979":6956579,"1980":7090126,"1981":7234303,"1982":7387656,"1983":7543743,"1984":7693667,"1985":7831889,"1986":7955164,"1987":8067758,"1988":8180728,"1989":8309531,"1990":8465188,"1991":8652514,"1992":8868263,"1993":9105472,"1994":9353385,"1995":9604450,"1996":9856810,"1997":10114094,"1998":10380835,"1999":10663723,"2000":10967690,"2001":11293258,"2002":"11638929","2003":"12005128","2004":"12391906","2005":"12798763","2006":"13227064","2007":"13675606","2008":"14138216","2009":"14606597","2010":"15075085","2011":"15540989","2012":"16006670","2013":"16477818","2014":"16962846","2015":"17467905","2016":17994837,"Country Name":"Mali","Country Code":"MLI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":326550,"1961":325250,"1962":323900,"1963":322550,"1964":321250,"1965":318800,"1966":315200,"1967":311550,"1968":307900,"1969":304300,"1970":302650,"1971":302700,"1972":302450,"1973":302200,"1974":301996,"1975":304222,"1976":305774,"1977":306970,"1978":310182,"1979":313342,"1980":316645,"1981":318982,"1982":325898,"1983":330524,"1984":330593,"1985":336452,"1986":342121,"1987":344485,"1988":347325,"1989":350722,"1990":354170,"1991":363845,"1992":367618,"1993":371308,"1994":374797,"1995":377419,"1996":379905,"1997":382791,"1998":385287,"1999":387578,"2000":390087,"2001":393028,"2002":"395969","2003":"398582","2004":"401268","2005":"403834","2006":"405308","2007":"406724","2008":"409379","2009":"412477","2010":"414508","2011":"416268","2012":"419455","2013":"423374","2014":"427364","2015":"431874","2016":436947,"Country Name":"Malta","Country Code":"MLT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":20986123,"1961":21438025,"1962":21898020,"1963":22371902,"1964":22867741,"1965":23391145,"1966":23944178,"1967":24524548,"1968":25128116,"1969":25748643,"1970":26381431,"1971":27024985,"1972":27680144,"1973":28347341,"1974":29027734,"1975":29721967,"1976":30428034,"1977":31144324,"1978":31872230,"1979":32613888,"1980":33369712,"1981":34139130,"1982":34917895,"1983":35697943,"1984":36468888,"1985":37222296,"1986":37957332,"1987":38673241,"1988":39362142,"1989":40014862,"1990":40626250,"1991":41190156,"1992":41711465,"1993":42209778,"1994":42712223,"1995":43237792,"1996":43793310,"1997":44371525,"1998":44959935,"1999":45539435,"2000":46095462,"2001":46627994,"2002":"47140220","2003":"47624894","2004":"48073707","2005":"48482614","2006":"48846474","2007":"49171586","2008":"49479752","2009":"49800690","2010":"50155896","2011":"50553031","2012":"50986514","2013":"51448196","2014":"51924182","2015":"52403669","2016":52885223,"Country Name":"Myanmar","Country Code":"MMR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":97837766,"1961":100458479,"1962":103147177,"1963":105914391,"1964":108774858,"1965":111738154,"1966":114816087,"1967":118004103,"1968":121276296,"1969":124596411,"1970":127942543,"1971":131309640,"1972":134719523,"1973":138211123,"1974":141837810,"1975":145642454,"1976":149628962,"1977":153798274,"1978":158185098,"1979":162829871,"1980":167755859,"1981":172967490,"1982":178440308,"1983":184129812,"1984":189974163,"1985":195917732,"1986":201950420,"1987":208051337,"1988":214140741,"1989":220121789,"1990":227903820,"1991":233582274,"1992":239062651,"1993":244395451,"1994":249660649,"1995":254918217,"1996":260190124,"1997":265463944,"1998":270672291,"1999":275840061,"2000":280955290,"2001":286016125,"2002":"291051001","2003":"296114536","2004":"301278295","2005":"306595214","2006":"312079307","2007":"317721161","2008":"323531149","2009":"329488935","2010":"335581557","2011":"341822043","2012":"348195697","2013":"354641044","2014":"361077997","2015":"367449306","2016":373719055,"Country Name":"Middle East & North Africa (excluding high income)","Country Code":"MNA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":480579,"1961":491140,"1962":502558,"1963":513409,"1964":521753,"1965":526327,"1966":526419,"1967":522796,"1968":517481,"1969":513340,"1970":512407,"1971":515449,"1972":521785,"1973":530220,"1974":538902,"1975":546487,"1976":552562,"1977":557576,"1978":562065,"1979":566888,"1980":572608,"1981":579445,"1982":587001,"1983":594506,"1984":600884,"1985":605398,"1986":607711,"1987":608144,"1988":607413,"1989":606571,"1990":606372,"1991":607105,"1992":608516,"1993":610170,"1994":611389,"1995":611712,"1996":611003,"1997":609520,"1998":607662,"1999":606001,"2000":604950,"2001":607389,"2002":"609828","2003":"612267","2004":"613353","2005":"614261","2006":"615025","2007":"615875","2008":"616969","2009":"618294","2010":"619428","2011":"620079","2012":"620601","2013":"621207","2014":"621810","2015":"622159","2016":622781,"Country Name":"Montenegro","Country Code":"MNE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":955505,"1961":982178,"1962":1011324,"1963":1042383,"1964":1074514,"1965":1107124,"1966":1139961,"1967":1173191,"1968":1207104,"1969":1242214,"1970":1278825,"1971":1317050,"1972":1356670,"1973":1397304,"1974":1438425,"1975":1479651,"1976":1520865,"1977":1562209,"1978":1603906,"1979":1646291,"1980":1689622,"1981":1733475,"1982":1777727,"1983":1823216,"1984":1871090,"1985":1921881,"1986":1976309,"1987":2033343,"1988":2089714,"1989":2141008,"1990":2184145,"1991":2217918,"1992":2243502,"1993":2263200,"1994":2280496,"1995":2298039,"1996":2316567,"1997":2335695,"1998":2355590,"1999":2376162,"2000":2397436,"2001":2419776,"2002":"2443659","2003":"2469286","2004":"2496832","2005":"2526446","2006":"2558012","2007":"2591670","2008":"2628131","2009":"2668289","2010":"2712650","2011":"2761516","2012":"2814226","2013":"2869107","2014":"2923896","2015":"2976877","2016":3027398,"Country Name":"Mongolia","Country Code":"MNG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":10035,"1961":10302,"1962":10499,"1963":10667,"1964":10857,"1965":11105,"1966":11435,"1967":11823,"1968":12257,"1969":12691,"1970":13127,"1971":13569,"1972":14040,"1973":14492,"1974":14859,"1975":15117,"1976":15234,"1977":15251,"1978":15372,"1979":15862,"1980":16920,"1981":18604,"1982":20856,"1983":23503,"1984":26302,"1985":29092,"1986":31802,"1987":34480,"1988":37134,"1989":39808,"1990":42538,"1991":45249,"1992":47919,"1993":50602,"1994":53380,"1995":56278,"1996":59364,"1997":62528,"1998":65474,"1999":67755,"2000":69094,"2001":69388,"2002":"68763","2003":"67422","2004":"65663","2005":"63744","2006":"61688","2007":"59513","2008":"57431","2009":"55674","2010":"54424","2011":"53786","2012":"53718","2013":"54036","2014":"54468","2015":"54816","2016":55023,"Country Name":"Northern Mariana Islands","Country Code":"MNP","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7388695,"1961":7541325,"1962":7699139,"1963":7862072,"1964":8030025,"1965":8203076,"1966":8381455,"1967":8565674,"1968":8756481,"1969":8954809,"1970":9161534,"1971":9375144,"1972":9595762,"1973":9827580,"1974":10076172,"1975":10344494,"1976":10632932,"1977":10936936,"1978":11248046,"1979":11554979,"1980":11848331,"1981":12133074,"1982":12409243,"1983":12657708,"1984":12853780,"1985":12984405,"1986":13034385,"1987":13020861,"1988":13002553,"1989":13059613,"1990":13247649,"1991":13591970,"1992":14071231,"1993":14636995,"1994":15217044,"1995":15759132,"1996":16248232,"1997":16701351,"1998":17136780,"1999":17584869,"2000":18067687,"2001":18588758,"2002":"19139658","2003":"19716598","2004":"20312705","2005":"20923070","2006":"21547463","2007":"22188387","2008":"22846758","2009":"23524063","2010":"24221405","2011":"24939005","2012":"25676606","2013":"26434372","2014":"27212382","2015":"28010691","2016":28829476,"Country Name":"Mozambique","Country Code":"MOZ","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":858168,"1961":883221,"1962":909174,"1963":936016,"1964":963747,"1965":992367,"1966":1021882,"1967":1052286,"1968":1083583,"1969":1115788,"1970":1148908,"1971":1182954,"1972":1217941,"1973":1253874,"1974":1290790,"1975":1328686,"1976":1367563,"1977":1407436,"1978":1448414,"1979":1490603,"1980":1534085,"1981":1578938,"1982":1625124,"1983":1672496,"1984":1720812,"1985":1769942,"1986":1819954,"1987":1870978,"1988":1923002,"1989":1976030,"1990":2030140,"1991":2085202,"1992":2141445,"1993":2199791,"1994":2261403,"1995":2327075,"1996":2397245,"1997":2471598,"1998":2549223,"1999":2628803,"2000":2709359,"2001":2790729,"2002":"2873228","2003":"2957117","2004":"3042823","2005":"3130720","2006":"3220653","2007":"3312665","2008":"3407541","2009":"3506288","2010":"3609543","2011":"3717672","2012":"3830239","2013":"3946170","2014":"4063920","2015":"4182341","2016":4301018,"Country Name":"Mauritania","Country Code":"MRT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":659351,"1961":680757,"1962":700349,"1963":718861,"1964":736381,"1965":753000,"1966":768813,"1967":783917,"1968":798413,"1969":812405,"1970":826000,"1971":839230,"1972":852053,"1973":864819,"1974":878042,"1975":892000,"1976":906507,"1977":921379,"1978":933499,"1979":949888,"1980":966039,"1981":980462,"1982":992521,"1983":1001691,"1984":1012221,"1985":1020528,"1986":1028360,"1987":1036082,"1988":1043239,"1989":1051260,"1990":1058775,"1991":1070266,"1992":1084441,"1993":1097374,"1994":1112846,"1995":1122457,"1996":1133996,"1997":1148284,"1998":1160421,"1999":1175267,"2000":1186873,"2001":1196287,"2002":"1204621","2003":"1213370","2004":"1221003","2005":"1228254","2006":"1233996","2007":"1239630","2008":"1244121","2009":"1247429","2010":"1250400","2011":"1252404","2012":"1255882","2013":"1258653","2014":"1260934","2015":"1262605","2016":1263473,"Country Name":"Mauritius","Country Code":"MUS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3618595,"1961":3700023,"1962":3784439,"1963":3872118,"1964":3963417,"1965":4058673,"1966":4158124,"1967":4262005,"1968":4370650,"1969":4484439,"1970":4603723,"1971":4728703,"1972":4859610,"1973":4996940,"1974":5141202,"1975":5292808,"1976":5454705,"1977":5627533,"1978":5806845,"1979":5986332,"1980":6163080,"1981":6327569,"1982":6484452,"1983":6661358,"1984":6895928,"1985":7211105,"1986":7625305,"1987":8120093,"1988":8636935,"1989":9094671,"1990":9437553,"1991":9641153,"1992":9729717,"1993":9755857,"1994":9796976,"1995":9909088,"1996":10109789,"1997":10381862,"1998":10704744,"1999":11044356,"2000":11376172,"2001":11695863,"2002":"12013711","2003":"12336687","2004":"12676038","2005":"13039711","2006":"13429262","2007":"13840969","2008":"14271234","2009":"14714602","2010":"15167095","2011":"15627618","2012":"16097305","2013":"16577147","2014":"17068838","2015":"17573607","2016":18091575,"Country Name":"Malawi","Country Code":"MWI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8157106,"1961":8418460,"1962":8692815,"1963":8974084,"1964":9253963,"1965":9526563,"1966":9789982,"1967":10046172,"1968":10297801,"1969":10549226,"1970":10803978,"1971":11062338,"1972":11324251,"1973":11592698,"1974":11871233,"1975":12162369,"1976":12468893,"1977":12790546,"1978":13123069,"1979":13460201,"1980":13798125,"1981":14133840,"1982":14470633,"1983":14818617,"1984":15191625,"1985":15598942,"1986":16045047,"1987":16525108,"1988":17027588,"1989":17535971,"1990":18038321,"1991":18529454,"1992":19012724,"1993":19494967,"1994":19986894,"1995":20495597,"1996":21023321,"1997":21565325,"1998":22113464,"1999":22656286,"2000":23185608,"2001":23698907,"2002":"24198811","2003":"24688703","2004":"25174109","2005":"25659393","2006":"26143566","2007":"26625845","2008":"27111069","2009":"27605383","2010":"28112289","2011":"28635128","2012":"29170456","2013":"29706724","2014":"30228017","2015":"30723155","2016":31187265,"Country Name":"Malaysia","Country Code":"MYS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":198624409,"1961":202007500,"1962":205198600,"1963":208253700,"1964":211262900,"1965":214031100,"1966":216659000,"1967":219176000,"1968":221503000,"1969":223759000,"1970":226431000,"1971":229361135,"1972":231943831,"1973":234332208,"1974":236681487,"1975":239235000,"1976":241606200,"1977":244088400,"1978":246674600,"1979":249385800,"1980":251872670,"1981":254421050,"1982":256921449,"1983":259303930,"1984":261583423,"1985":263922898,"1986":266394382,"1987":268896849,"1988":271452347,"1989":274256841,"1990":277473326,"1991":281211703,"1992":285092192,"1993":288811320,"1994":292297226,"1995":295691746,"1996":299126029,"1997":302704697,"1998":306162843,"1999":309600485,"2000":312993944,"2001":316113359,"2002":"319050105","2003":"321847258","2004":"324864038","2005":"327892753","2006":"331014940","2007":"334184023","2008":"337405012","2009":"340465736","2010":"343418591","2011":"346070702","2012":"348813722","2013":"351425360","2014":"354173159","2015":"356810463","2016":359479269,"Country Name":"North America","Country Code":"NAC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":602544,"1961":617277,"1962":632654,"1963":648661,"1964":665282,"1965":682551,"1966":700341,"1967":718685,"1968":737886,"1969":758377,"1970":780384,"1971":804157,"1972":829441,"1973":855380,"1974":880785,"1975":904839,"1976":927503,"1977":949193,"1978":970258,"1979":991226,"1980":1012672,"1981":1034264,"1982":1056366,"1983":1081081,"1984":1111132,"1985":1148302,"1986":1193592,"1987":1245990,"1988":1302741,"1989":1359933,"1990":1414692,"1991":1465740,"1992":1513721,"1993":1559983,"1994":1606718,"1995":1655359,"1996":1706489,"1997":1758994,"1998":1810566,"1999":1858042,"2000":1899257,"2001":1933596,"2002":"1962147","2003":"1986535","2004":"2009228","2005":"2032196","2006":"2055734","2007":"2079915","2008":"2106375","2009":"2137040","2010":"2173170","2011":"2215621","2012":"2263934","2013":"2316520","2014":"2370992","2015":"2425561","2016":2479713,"Country Name":"Namibia","Country Code":"NAM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":79000,"1961":81200,"1962":83400,"1963":85700,"1964":88100,"1965":90500,"1966":93500,"1967":96500,"1968":99500,"1969":104000,"1970":112000,"1971":120000,"1972":125500,"1973":128500,"1974":131000,"1975":132500,"1976":134000,"1977":136000,"1978":137500,"1979":138500,"1980":140050,"1981":142650,"1982":145700,"1983":148700,"1984":151650,"1985":154450,"1986":157350,"1987":160500,"1988":163650,"1989":166898,"1990":170899,"1991":175362,"1992":179799,"1993":184496,"1994":189482,"1995":193816,"1996":197564,"1997":201418,"1998":205279,"1999":209214,"2000":213230,"2001":217324,"2002":"221490","2003":"225000","2004":"228000","2005":"231000","2006":"235000","2007":"238000","2008":"242000","2009":"245000","2010":"250000","2011":"254000","2012":"259000","2013":"263000","2014":"268000","2015":"273000","2016":278000,"Country Name":"New Caledonia","Country Code":"NCL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3388764,"1961":3486295,"1962":3588156,"1963":3693866,"1964":3802640,"1965":3913934,"1966":4027758,"1967":4144395,"1968":4263745,"1969":4385758,"1970":4510479,"1971":4637829,"1972":4768078,"1973":4902006,"1974":5040656,"1975":5184811,"1976":5334918,"1977":5490921,"1978":5652355,"1979":5818506,"1980":5988904,"1981":6164006,"1982":6344382,"1983":6529894,"1984":6720344,"1985":6915927,"1986":7116744,"1987":7323969,"1988":7540253,"1989":7768995,"1990":8012861,"1991":8272976,"1992":8549424,"1993":8842415,"1994":9151763,"1995":9477333,"1996":9819964,"1997":10180061,"1998":10556549,"1999":10947829,"2000":11352973,"2001":11771976,"2002":"12206002","2003":"12656870","2004":"13127012","2005":"13618449","2006":"14132064","2007":"14668338","2008":"15228525","2009":"15813913","2010":"16425578","2011":"17064636","2012":"17731634","2013":"18426372","2014":"19148219","2015":"19896965","2016":20672987,"Country Name":"Niger","Country Code":"NER","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":45137812,"1961":46062905,"1962":47029140,"1963":48032246,"1964":49066059,"1965":50127214,"1966":51217359,"1967":52341834,"1968":53505978,"1969":54716735,"1970":55981400,"1971":57295210,"1972":58662603,"1973":60110433,"1974":61673559,"1975":63373572,"1976":65226229,"1977":67215805,"1978":69293550,"1979":71391290,"1980":73460724,"1981":75482552,"1982":77472907,"1983":79462277,"1984":81497739,"1985":83613300,"1986":85818502,"1987":88101628,"1988":90450281,"1989":92844353,"1990":95269988,"1991":97726323,"1992":100221563,"1993":102761737,"1994":105355783,"1995":108011465,"1996":110732904,"1997":113522705,"1998":116385750,"1999":119327073,"2000":122352009,"2001":125463434,"2002":"128666710","2003":"131972533","2004":"135393616","2005":"138939478","2006":"142614094","2007":"146417024","2008":"150347390","2009":"154402181","2010":"158578261","2011":"162877076","2012":"167297284","2013":"171829303","2014":"176460502","2015":"181181744","2016":185989640,"Country Name":"Nigeria","Country Code":"NGA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1774699,"1961":1830400,"1962":1886562,"1963":1943590,"1964":2002119,"1965":2062630,"1966":2125240,"1967":2189882,"1968":2256782,"1969":2326139,"1970":2398096,"1971":2472656,"1972":2549774,"1973":2629505,"1974":2711848,"1975":2796746,"1976":2884155,"1977":2973806,"1978":3065117,"1979":3157355,"1980":3249910,"1981":3342669,"1982":3435525,"1983":3527939,"1984":3619253,"1985":3709091,"1986":3796917,"1987":3882943,"1988":3968454,"1989":4055265,"1990":4144565,"1991":4236801,"1992":4331277,"1993":4426580,"1994":4520725,"1995":4612228,"1996":4700779,"1997":4786640,"1998":4869626,"1999":4949660,"2000":5026796,"2001":5100750,"2002":"5171734","2003":"5240879","2004":"5309703","2005":"5379328","2006":"5450211","2007":"5522106","2008":"5594506","2009":"5666581","2010":"5737723","2011":"5807820","2012":"5877108","2013":"5945747","2014":"6013997","2015":"6082035","2016":6149928,"Country Name":"Nicaragua","Country Code":"NIC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":11486631,"1961":11638712,"1962":11805689,"1963":11965966,"1964":12127120,"1965":12294732,"1966":12456251,"1967":12598201,"1968":12729721,"1969":12877984,"1970":13038526,"1971":13194497,"1972":13328593,"1973":13439322,"1974":13545056,"1975":13666335,"1976":13774037,"1977":13856185,"1978":13941700,"1979":14038270,"1980":14149800,"1981":14247208,"1982":14312690,"1983":14367070,"1984":14424211,"1985":14491632,"1986":14572278,"1987":14665037,"1988":14760094,"1989":14848907,"1990":14951510,"1991":15069798,"1992":15184166,"1993":15290368,"1994":15382838,"1995":15459006,"1996":15530498,"1997":15610650,"1998":15707209,"1999":15812088,"2000":15925513,"2001":16046180,"2002":"16148929","2003":"16225302","2004":"16281779","2005":"16319868","2006":"16346101","2007":"16381696","2008":"16445593","2009":"16530388","2010":"16615394","2011":"16693074","2012":"16754962","2013":"16804432","2014":"16865008","2015":"16939923","2016":17018408,"Country Name":"Netherlands","Country Code":"NLD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3581239,"1961":3609800,"1962":3638918,"1963":3666537,"1964":3694339,"1965":3723168,"1966":3753012,"1967":3784539,"1968":3816486,"1969":3847707,"1970":3875763,"1971":3903039,"1972":3933004,"1973":3960612,"1974":3985258,"1975":4007313,"1976":4026152,"1977":4043205,"1978":4058671,"1979":4072517,"1980":4085620,"1981":4099702,"1982":4114787,"1983":4128432,"1984":4140099,"1985":4152516,"1986":4167354,"1987":4186905,"1988":4209488,"1989":4226901,"1990":4241473,"1991":4261732,"1992":4286401,"1993":4311991,"1994":4336613,"1995":4359184,"1996":4381336,"1997":4405157,"1998":4431464,"1999":4461913,"2000":4490967,"2001":4513751,"2002":"4538159","2003":"4564855","2004":"4591910","2005":"4623291","2006":"4660677","2007":"4709153","2008":"4768212","2009":"4828726","2010":"4889252","2011":"4953088","2012":"5018573","2013":"5079623","2014":"5137232","2015":"5188607","2016":5232929,"Country Name":"Norway","Country Code":"NOR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":10063011,"1961":10221759,"1962":10384204,"1963":10552267,"1964":10728197,"1965":10913724,"1966":11109884,"1967":11316826,"1968":11534264,"1969":11761473,"1970":11997929,"1971":12243768,"1972":12499429,"1973":12764957,"1974":13040404,"1975":13325814,"1976":13621110,"1977":13926260,"1978":14241403,"1979":14566691,"1980":14902163,"1981":15249010,"1982":15607236,"1983":15974420,"1984":16347242,"1985":16723956,"1986":17101136,"1987":17480921,"1988":17873667,"1989":18293514,"1990":18749406,"1991":19245054,"1992":19773772,"1993":20321175,"1994":20867130,"1995":21396384,"1996":21903379,"1997":22389803,"1998":22856305,"1999":23305994,"2000":23740911,"2001":24161777,"2002":"24566342","2003":"24950623","2004":"25309449","2005":"25640287","2006":"25940618","2007":"26214847","2008":"26475859","2009":"26741103","2010":"27023137","2011":"27327147","2012":"27649925","2013":"27985310","2014":"28323241","2015":"28656282","2016":28982771,"Country Name":"Nepal","Country Code":"NPL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4433,"1961":4675,"1962":4947,"1963":5231,"1964":5500,"1965":5738,"1966":5936,"1967":6102,"1968":6241,"1969":6368,"1970":6493,"1971":6619,"1972":6743,"1973":6862,"1974":6972,"1975":7070,"1976":7156,"1977":7235,"1978":7311,"1979":7393,"1980":7488,"1981":7597,"1982":7719,"1983":7855,"1984":8007,"1985":8174,"1986":8356,"1987":8550,"1988":8752,"1989":8956,"1990":9157,"1991":9354,"1992":9544,"1993":9719,"1994":9863,"1995":9970,"1996":10033,"1997":10056,"1998":10054,"1999":10044,"2000":10042,"2001":10053,"2002":"10073","2003":"10096","2004":"10113","2005":"10115","2006":"10101","2007":"10075","2008":"10047","2009":"10028","2010":"10025","2011":"10057","2012":"10279","2013":"10821","2014":"11853","2015":"12475","2016":13049,"Country Name":"Nauru","Country Code":"NRU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2371800,"1961":2419700,"1962":2482000,"1963":2531800,"1964":2585400,"1965":2628400,"1966":2675900,"1967":2724100,"1968":2748100,"1969":2772800,"1970":2810700,"1971":2853000,"1972":2903900,"1973":2961300,"1974":3023700,"1975":3083100,"1976":3110500,"1977":3120200,"1978":3121200,"1979":3109000,"1980":3112900,"1981":3124900,"1982":3156100,"1983":3199300,"1984":3227100,"1985":3247100,"1986":3246300,"1987":3274400,"1988":3283400,"1989":3299200,"1990":3329800,"1991":3495100,"1992":3531700,"1993":3572200,"1994":3620000,"1995":3673400,"1996":3732000,"1997":3781300,"1998":3815000,"1999":3835100,"2000":3857700,"2001":3880500,"2002":"3948500","2003":"4027200","2004":"4087500","2005":"4133900","2006":"4184600","2007":"4223800","2008":"4259800","2009":"4302600","2010":"4350700","2011":"4384000","2012":"4408100","2013":"4442100","2014":"4509700","2015":"4595700","2016":4692700,"Country Name":"New Zealand","Country Code":"NZL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":788709114,"1961":801024442,"1962":811972766,"1963":822892098,"1964":833781082,"1965":844331730,"1966":854364014,"1967":863999086,"1968":872731745,"1969":883261223,"1970":892839932,"1971":903117690,"1972":913621315,"1973":923253553,"1974":933925905,"1975":944064422,"1976":952681739,"1977":961470085,"1978":970246409,"1979":979148318,"1980":987928331,"1981":996593865,"1982":1004836945,"1983":1012713908,"1984":1020245362,"1985":1027839846,"1986":1035732254,"1987":1043574007,"1988":1051552697,"1989":1060038063,"1990":1069095267,"1991":1078768056,"1992":1088596983,"1993":1097985088,"1994":1106885537,"1995":1115600406,"1996":1124083112,"1997":1132508266,"1998":1140597139,"1999":1148685952,"2000":1156568670,"2001":1164785029,"2002":"1173046153","2003":"1181328842","2004":"1189684726","2005":"1198065132","2006":"1206821076","2007":"1215883022","2008":"1225426692","2009":"1234203233","2010":"1242391523","2011":"1248769315","2012":"1256599264","2013":"1264695223","2014":"1273109967","2015":"1281401703","2016":1289937319,"Country Name":"OECD members","Country Code":"OED","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":551740,"1961":564890,"1962":578824,"1963":593501,"1964":608887,"1965":625009,"1966":642003,"1967":660119,"1968":679597,"1969":700725,"1970":723852,"1971":748973,"1972":776383,"1973":806991,"1974":841948,"1975":882044,"1976":927439,"1977":977808,"1978":1032800,"1979":1091853,"1980":1154379,"1981":1220587,"1982":1290111,"1983":1361097,"1984":1431077,"1985":1498417,"1986":1561185,"1987":1619864,"1988":1678116,"1989":1741160,"1990":1812160,"1991":1893771,"1992":1983277,"1993":2072111,"1994":2148428,"1995":2204283,"1996":2236666,"1997":2249773,"1998":2251875,"1999":2254918,"2000":2267991,"2001":2294787,"2002":"2334285","2003":"2385255","2004":"2444751","2005":"2511269","2006":"2582991","2007":"2662762","2008":"2759014","2009":"2882942","2010":"3041460","2011":"3237268","2012":"3464644","2013":"3711481","2014":"3960925","2015":"4199810","2016":4424762,"Country Name":"Oman","Country Code":"OMN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":9196324,"1961":9366201,"1962":9539303,"1963":9715748,"1964":9898587,"1965":10086706,"1966":10278079,"1967":10473132,"1968":10676961,"1969":10888229,"1970":11107495,"1971":11337824,"1972":11575349,"1973":11816118,"1974":12059314,"1975":12306778,"1976":12553340,"1977":12802730,"1978":13058255,"1979":13332553,"1980":13628831,"1981":13946143,"1982":14286062,"1983":14639787,"1984":15008538,"1985":15397918,"1986":15805945,"1987":16230440,"1988":16657359,"1989":17075243,"1990":17465684,"1991":17848156,"1992":18188830,"1993":18507402,"1994":18826109,"1995":19150245,"1996":19481582,"1997":19820722,"1998":20172617,"1999":20555223,"2000":20944988,"2001":21329094,"2002":"21724724","2003":"22143131","2004":"22602097","2005":"23114953","2006":"23687194","2007":"24313721","2008":"24972681","2009":"25620918","2010":"26269542","2011":"26902018","2012":"27527819","2013":"28146089","2014":"28759578","2015":"29374084","2016":29983809,"Country Name":"Other small states","Country Code":"OSS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":44908293,"1961":45984892,"1962":47119361,"1963":48309315,"1964":49551904,"1965":50845221,"1966":52191095,"1967":53590929,"1968":55042397,"1969":56542434,"1970":58090759,"1971":59687140,"1972":61338261,"1973":63059481,"1974":64870833,"1975":66787901,"1976":68813220,"1977":70946231,"1978":73194937,"1979":75567682,"1980":78068144,"1981":80696945,"1982":83445863,"1983":86297640,"1984":89228949,"1985":92219488,"1986":95264460,"1987":98357473,"1988":101474835,"1989":104588490,"1990":107678614,"1991":110730420,"1992":113747135,"1993":116749560,"1994":119769556,"1995":122829148,"1996":125938339,"1997":129086987,"1998":132253264,"1999":135405584,"2000":138523285,"2001":141601437,"2002":"144654143","2003":"147703401","2004":"150780300","2005":"153909667","2006":"157093993","2007":"160332974","2008":"163644603","2009":"167049580","2010":"170560182","2011":"174184265","2012":"177911533","2013":"181712595","2014":"185546257","2015":"189380513","2016":193203476,"Country Name":"Pakistan","Country Code":"PAK","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1132921,"1961":1167035,"1962":1202373,"1963":1238823,"1964":1276276,"1965":1314626,"1966":1353804,"1967":1393799,"1968":1434657,"1969":1476479,"1970":1519299,"1971":1563115,"1972":1607834,"1973":1653256,"1974":1699113,"1975":1745205,"1976":1791453,"1977":1837890,"1978":1884515,"1979":1931389,"1980":1978578,"1981":2026065,"1982":2073844,"1983":2121939,"1984":2170409,"1985":2219276,"1986":2268574,"1987":2318332,"1988":2368618,"1989":2419491,"1990":2471009,"1991":2523181,"1992":2576018,"1993":2629644,"1994":2684183,"1995":2739730,"1996":2796344,"1997":2853941,"1998":2912328,"1999":2971197,"2000":3030347,"2001":3089684,"2002":"3149265","2003":"3209174","2004":"3269541","2005":"3330465","2006":"3391905","2007":"3453807","2008":"3516268","2009":"3579385","2010":"3643222","2011":"3707782","2012":"3772938","2013":"3838462","2014":"3903986","2015":"3969249","2016":4034119,"Country Name":"Panama","Country Code":"PAN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":10061515,"1961":10350242,"1962":10650667,"1963":10961540,"1964":11281015,"1965":11607681,"1966":11941325,"1967":12282082,"1968":12629329,"1969":12982449,"1970":13341069,"1971":13704335,"1972":14072476,"1973":14447648,"1974":14832841,"1975":15229947,"1976":15639901,"1977":16061323,"1978":16491083,"1979":16924753,"1980":17359120,"1981":17792549,"1982":18225730,"1983":18660439,"1984":19099584,"1985":19544956,"1986":19996253,"1987":20451710,"1988":20909895,"1989":21368859,"1990":21826658,"1991":22283128,"1992":22737056,"1993":23184228,"1994":23619356,"1995":24038760,"1996":24441074,"1997":24827406,"1998":25199748,"1999":25561299,"2000":25914879,"2001":26261363,"2002":"26601467","2003":"26937738","2004":"27273194","2005":"27610410","2006":"27949944","2007":"28292724","2008":"28641980","2009":"29001507","2010":"29373646","2011":"29759989","2012":"30158966","2013":"30565716","2014":"30973354","2015":"31376671","2016":31773839,"Country Name":"Peru","Country Code":"PER","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":26273025,"1961":27164617,"1962":28081231,"1963":29016771,"1964":29962876,"1965":30913933,"1966":31867563,"1967":32826599,"1968":33797042,"1969":34787588,"1970":35804729,"1971":36851055,"1972":37925400,"1973":39026082,"1974":40149961,"1975":41295124,"1976":42461193,"1977":43650333,"1978":44866273,"1979":46113995,"1980":47396968,"1981":48715592,"1982":50068493,"1983":51455033,"1984":52873974,"1985":54323648,"1986":55804072,"1987":57313311,"1988":58845205,"1989":60391867,"1990":61947348,"1991":63508459,"1992":65075486,"1993":66650247,"1994":68236230,"1995":69835715,"1996":71446107,"1997":73064764,"1998":74693695,"1999":76335812,"2000":77991569,"2001":79665315,"2002":"81352060","2003":"83031954","2004":"84678493","2005":"86274237","2006":"87809419","2007":"89293490","2008":"90751864","2009":"92220879","2010":"93726624","2011":"95277940","2012":"96866642","2013":"98481032","2014":"100102249","2015":"101716359","2016":103320222,"Country Name":"Philippines","Country Code":"PHL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":9642,"1961":9900,"1962":10151,"1963":10378,"1964":10593,"1965":10782,"1966":10946,"1967":11080,"1968":11205,"1969":11331,"1970":11480,"1971":11654,"1972":11852,"1973":12046,"1974":12197,"1975":12278,"1976":12285,"1977":12225,"1978":12153,"1979":12124,"1980":12194,"1981":12387,"1982":12663,"1983":13012,"1984":13372,"1985":13696,"1986":13985,"1987":14240,"1988":14490,"1989":14757,"1990":15088,"1991":15474,"1992":15894,"1993":16342,"1994":16806,"1995":17253,"1996":17691,"1997":18123,"1998":18524,"1999":18879,"2000":19175,"2001":19404,"2002":"19574","2003":"19700","2004":"19804","2005":"19906","2006":"20012","2007":"20116","2008":"20228","2009":"20342","2010":"20470","2011":"20599","2012":"20758","2013":"20920","2014":"21094","2015":"21288","2016":21503,"Country Name":"Palau","Country Code":"PLW","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2010677,"1961":2051947,"1962":2094687,"1963":2139303,"1964":2186340,"1965":2236206,"1966":2289109,"1967":2344977,"1968":2403595,"1969":2464548,"1970":2527586,"1971":2592628,"1972":2659851,"1973":2729580,"1974":2802243,"1975":2878156,"1976":2957339,"1977":3039660,"1978":3125034,"1979":3213360,"1980":3304473,"1981":3398469,"1982":3495199,"1983":3594004,"1984":3694041,"1985":3794720,"1986":3895852,"1987":3997702,"1988":4100729,"1989":4205654,"1990":4313059,"1991":4423007,"1992":4535520,"1993":4651169,"1994":4770606,"1995":4894276,"1996":5022437,"1997":5154910,"1998":5291178,"1999":5430479,"2000":5572222,"2001":5716152,"2002":"5862316","2003":"6010724","2004":"6161517","2005":"6314709","2006":"6470272","2007":"6627922","2008":"6787187","2009":"6947447","2010":"7108239","2011":"7269348","2012":"7430836","2013":"7592865","2014":"7755785","2015":"7919825","2016":8084991,"Country Name":"Papua New Guinea","Country Code":"PNG","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":29637450,"1961":29964000,"1962":30308500,"1963":30712000,"1964":31139450,"1965":31444950,"1966":31681000,"1967":31987155,"1968":32294655,"1969":32548300,"1970":32664300,"1971":32783500,"1972":33055650,"1973":33357200,"1974":33678899,"1975":34015199,"1976":34356300,"1977":34689050,"1978":34965600,"1979":35247217,"1980":35574150,"1981":35898587,"1982":36230481,"1983":36571808,"1984":36904134,"1985":37201885,"1986":37456119,"1987":37668045,"1988":37824487,"1989":37961529,"1990":38110782,"1991":38246193,"1992":38363667,"1993":38461408,"1994":38542652,"1995":38594998,"1996":38624370,"1997":38649660,"1998":38663481,"1999":38660271,"2000":38258629,"2001":38248076,"2002":"38230364","2003":"38204570","2004":"38182222","2005":"38165445","2006":"38141267","2007":"38120560","2008":"38125759","2009":"38151603","2010":"38042794","2011":"38063255","2012":"38063164","2013":"38040196","2014":"38011735","2015":"37986412","2016":37948016,"Country Name":"Poland","Country Code":"POL","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":188636191,"1961":192957526,"1962":197466057,"1963":202169074,"1964":207073952,"1965":212187233,"1966":217522775,"1967":223086567,"1968":228868113,"1969":234850584,"1970":241027706,"1971":247376381,"1972":253914730,"1973":260725221,"1974":267918888,"1975":275565267,"1976":283715621,"1977":292321446,"1978":301230680,"1979":310230861,"1980":319174900,"1981":328020973,"1982":336834728,"1983":345711225,"1984":354794146,"1985":364199513,"1986":373930490,"1987":383984828,"1988":394465713,"1989":405497636,"1990":417158756,"1991":429531376,"1992":442573477,"1993":456086696,"1994":469790790,"1995":483495980,"1996":497126039,"1997":510777895,"1998":524647448,"1999":539018066,"2000":554097477,"2001":569959700,"2002":"586553190","2003":"603809871","2004":"621611464","2005":"639876871","2006":"658586521","2007":"677788806","2008":"697549138","2009":"717959651","2010":"739082260","2011":"760942116","2012":"783505835","2013":"806705375","2014":"830442736","2015":"854646007","2016":879292453,"Country Name":"Pre-demographic dividend","Country Code":"PRE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2358000,"1961":2399722,"1962":2450322,"1963":2504530,"1964":2554066,"1965":2594000,"1966":2624995,"1967":2645674,"1968":2662064,"1969":2684150,"1970":2718000,"1971":2762190,"1972":2817256,"1973":2878786,"1974":2939299,"1975":2994000,"1976":3043854,"1977":3088690,"1978":3129421,"1979":3168088,"1980":3206000,"1981":3242552,"1982":3277453,"1983":3311138,"1984":3344190,"1985":3377000,"1986":3409554,"1987":3441850,"1988":3473898,"1989":3505650,"1990":3537000,"1991":3562110,"1992":3585176,"1993":3615497,"1994":3649237,"1995":3683103,"1996":3724655,"1997":3759430,"1998":3781101,"1999":3800081,"2000":3810605,"2001":3818774,"2002":"3823701","2003":"3826095","2004":"3826878","2005":"3821362","2006":"3805214","2007":"3782995","2008":"3760866","2009":"3740410","2010":"3721525","2011":"3678732","2012":"3634488","2013":"3593077","2014":"3534874","2015":"3473181","2016":3411307,"Country Name":"Puerto Rico","Country Code":"PRI","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":11424176,"1961":11665595,"1962":11871712,"1963":12065468,"1964":12282419,"1965":12547525,"1966":12864954,"1967":13222694,"1968":13609982,"1969":14010339,"1970":14410400,"1971":14809521,"1972":15207771,"1973":15593351,"1974":15952078,"1975":16274740,"1976":16554746,"1977":16796578,"1978":17015983,"1979":17235666,"1980":17472140,"1981":17731230,"1982":18008564,"1983":18298214,"1984":18590138,"1985":18877238,"1986":19156795,"1987":19431986,"1988":19708323,"1989":19993755,"1990":20293054,"1991":20609150,"1992":20937404,"1993":21265834,"1994":21577982,"1995":21862299,"1996":22113548,"1997":22335638,"1998":22537336,"1999":22731985,"2000":22929075,"2001":23131810,"2002":"23336681","2003":"23538540","2004":"23729498","2005":"23904167","2006":"24061097","2007":"24203289","2008":"24335146","2009":"24463021","2010":"24591599","2011":"24722298","2012":"24854034","2013":"24985976","2014":"25116363","2015":"25243917","2016":25368620,"Country Name":"North Korea","Country Code":"PRK","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8857716,"1961":8929316,"1962":8993985,"1963":9030355,"1964":9035365,"1965":8998595,"1966":8930990,"1967":8874520,"1968":8836650,"1969":8757705,"1970":8680431,"1971":8643756,"1972":8630430,"1973":8633100,"1974":8754365,"1975":9093470,"1976":9355810,"1977":9455675,"1978":9558250,"1979":9661265,"1980":9766312,"1981":9851362,"1982":9911771,"1983":9957865,"1984":9996232,"1985":10023613,"1986":10032734,"1987":10030031,"1988":10019610,"1989":10005000,"1990":9983218,"1991":9960235,"1992":9952494,"1993":9964675,"1994":9991525,"1995":10026176,"1996":10063945,"1997":10108977,"1998":10160196,"1999":10217828,"2000":10289898,"2001":10362722,"2002":"10419631","2003":"10458821","2004":"10483861","2005":"10503330","2006":"10522288","2007":"10542964","2008":"10558177","2009":"10568247","2010":"10573100","2011":"10557560","2012":"10514844","2013":"10457295","2014":"10401062","2015":"10358076","2016":10324611,"Country Name":"Portugal","Country Code":"PRT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1902875,"1961":1953328,"1962":2005337,"1963":2058915,"1964":2114095,"1965":2170859,"1966":2229376,"1967":2289582,"1968":2350901,"1969":2412566,"1970":2474106,"1971":2535359,"1972":2596739,"1973":2659088,"1974":2723523,"1975":2790962,"1976":2861581,"1977":2935375,"1978":3012829,"1979":3094482,"1980":3180630,"1981":3271456,"1982":3366719,"1983":3465793,"1984":3567752,"1985":3671826,"1986":3777763,"1987":3885436,"1988":3994331,"1989":4103911,"1990":4213742,"1991":4323410,"1992":4432736,"1993":4541902,"1994":4651225,"1995":4760850,"1996":4870694,"1997":4980344,"1998":5089310,"1999":5196937,"2000":5302700,"2001":5406624,"2002":"5508611","2003":"5607950","2004":"5703740","2005":"5795494","2006":"5882796","2007":"5966159","2008":"6047117","2009":"6127837","2010":"6209877","2011":"6293783","2012":"6379219","2013":"6465740","2014":"6552584","2015":"6639119","2016":6725308,"Country Name":"Paraguay","Country Code":"PRY","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":null,"1961":null,"1962":null,"1963":null,"1964":null,"1965":null,"1966":null,"1967":null,"1968":null,"1969":null,"1970":null,"1971":null,"1972":null,"1973":null,"1974":null,"1975":null,"1976":null,"1977":null,"1978":null,"1979":null,"1980":null,"1981":null,"1982":null,"1983":null,"1984":null,"1985":null,"1986":null,"1987":null,"1988":null,"1989":null,"1990":1978248,"1991":2068845,"1992":2163591,"1993":2262676,"1994":2366298,"1995":2474666,"1996":2587997,"1997":2706518,"1998":2776568,"1999":2848431,"2000":2922153,"2001":2997784,"2002":"3075373","2003":"3154969","2004":"3236626","2005":"3320396","2006":"3406334","2007":"3494496","2008":"3596688","2009":"3702218","2010":"3811102","2011":"3927051","2012":"4046901","2013":"4169506","2014":"4294682","2015":"4422143","2016":4551566,"Country Name":"Palestine","Country Code":"PSE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":865809,"1961":894213,"1962":924220,"1963":955104,"1964":985873,"1965":1015763,"1966":1044550,"1967":1072397,"1968":1099420,"1969":1125867,"1970":1152033,"1971":1177892,"1972":1203419,"1973":1228876,"1974":1254518,"1975":1280561,"1976":1306937,"1977":1333621,"1978":1361133,"1979":1390028,"1980":1420671,"1981":1453521,"1982":1488185,"1983":1523012,"1984":1555767,"1985":1585015,"1986":1609919,"1987":1631156,"1988":1650642,"1989":1671078,"1990":1694410,"1991":1721268,"1992":1750900,"1993":1782065,"1994":1812883,"1995":1841945,"1996":1869030,"1997":1894563,"1998":1918749,"1999":1941852,"2000":1964221,"2001":1985713,"2002":"2006441","2003":"2027202","2004":"2049012","2005":"2072666","2006":"2098522","2007":"2126308","2008":"2155439","2009":"2184920","2010":"2214096","2011":"2242763","2012":"2271298","2013":"2300045","2014":"2329458","2015":"2358955","2016":2388875,"Country Name":"Pacific island small states","Country Code":"PSS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":754705296,"1961":765517069,"1962":774970556,"1963":784274508,"1964":793405703,"1965":802234753,"1966":810477286,"1967":818162391,"1968":824881275,"1969":833307280,"1970":840843453,"1971":848964693,"1972":857032016,"1973":864105636,"1974":872196067,"1975":879650582,"1976":885529196,"1977":891585019,"1978":897682739,"1979":904034683,"1980":910110515,"1981":916187214,"1982":921702426,"1983":926784900,"1984":931567479,"1985":936391539,"1986":941637615,"1987":946964644,"1988":952508537,"1989":958458726,"1990":964601905,"1991":970905788,"1992":977731113,"1993":984287542,"1994":989994339,"1995":995414349,"1996":1000643917,"1997":1005863658,"1998":1010698898,"1999":1015607141,"2000":1020591851,"2001":1025668442,"2002":"1030742327","2003":"1035918960","2004":"1041303142","2005":"1046610825","2006":"1052236679","2007":"1058174512","2008":"1064603305","2009":"1070107590","2010":"1075140985","2011":"1078083259","2012":"1082722218","2013":"1087560614","2014":"1092601669","2015":"1097570905","2016":1102730983,"Country Name":"Post-demographic dividend","Country Code":"PST","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":78076,"1961":80703,"1962":83651,"1963":86837,"1964":90132,"1965":93438,"1966":96732,"1967":100029,"1968":103386,"1969":106857,"1970":110495,"1971":114313,"1972":118279,"1973":122356,"1974":126486,"1975":130619,"1976":134748,"1977":138864,"1978":143032,"1979":147296,"1980":151708,"1981":156243,"1982":160888,"1983":165613,"1984":170396,"1985":175204,"1986":180075,"1987":184950,"1988":189738,"1989":194252,"1990":198375,"1991":202016,"1992":205266,"1993":208345,"1994":211579,"1995":215196,"1996":219283,"1997":223731,"1998":228376,"1999":232952,"2000":237258,"2001":241273,"2002":"245006","2003":"248499","2004":"251775","2005":"254886","2006":"257832","2007":"260594","2008":"263179","2009":"265581","2010":"267820","2011":"269843","2012":"271703","2013":"273528","2014":"275484","2015":"277690","2016":280208,"Country Name":"French Polynesia","Country Code":"PYF","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":47384,"1961":51421,"1962":56263,"1963":61717,"1964":67567,"1965":73633,"1966":79844,"1967":86295,"1968":93201,"1969":100874,"1970":109514,"1971":119424,"1972":130534,"1973":142241,"1974":153704,"1975":164413,"1976":173836,"1977":182443,"1978":192093,"1979":205313,"1980":223775,"1981":248144,"1982":277396,"1983":309479,"1984":341455,"1985":371081,"1986":397932,"1987":422341,"1988":443794,"1989":461870,"1990":476445,"1991":487491,"1992":495517,"1993":501566,"1994":507095,"1995":513455,"1996":522304,"1997":534608,"1998":550430,"1999":569447,"2000":592267,"2001":616886,"2002":"645659","2003":"688586","2004":"758855","2005":"864863","2006":"1010382","2007":"1189633","2008":"1389342","2009":"1590780","2010":"1779676","2011":"1952054","2012":"2109568","2013":"2250473","2014":"2374419","2015":"2481539","2016":2569804,"Country Name":"Qatar","Country Code":"QAT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":18406905,"1961":18555250,"1962":18676550,"1963":18797850,"1964":18919126,"1965":19031576,"1966":19215450,"1967":19534242,"1968":19799831,"1969":20009141,"1970":20250398,"1971":20461567,"1972":20657957,"1973":20835681,"1974":21029429,"1975":21293583,"1976":21551634,"1977":21756096,"1978":21951464,"1979":22090488,"1980":22242653,"1981":22415169,"1982":22515389,"1983":22588790,"1984":22655940,"1985":22755427,"1986":22859269,"1987":22949430,"1988":23057662,"1989":23161458,"1990":23201835,"1991":23001155,"1992":22794284,"1993":22763280,"1994":22730211,"1995":22684270,"1996":22619004,"1997":22553978,"1998":22507344,"1999":22472040,"2000":22442971,"2001":22131970,"2002":"21730496","2003":"21574326","2004":"21451748","2005":"21319685","2006":"21193760","2007":"20882982","2008":"20537875","2009":"20367487","2010":"20246871","2011":"20147528","2012":"20058035","2013":"19983693","2014":"19908979","2015":"19815481","2016":19705301,"Country Name":"Romania","Country Code":"ROU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":119897000,"1961":121236000,"1962":122591000,"1963":123960000,"1964":125345000,"1965":126745000,"1966":127468000,"1967":128196000,"1968":128928000,"1969":129664000,"1970":130404000,"1971":131155000,"1972":131909000,"1973":132669000,"1974":133432000,"1975":134200000,"1976":135147000,"1977":136100000,"1978":137060000,"1979":138027000,"1980":139010000,"1981":139941000,"1982":140823000,"1983":141668000,"1984":142745000,"1985":143858000,"1986":144894000,"1987":145908000,"1988":146857000,"1989":147721000,"1990":148292000,"1991":148624000,"1992":148689000,"1993":148520000,"1994":148336000,"1995":148375726,"1996":148160042,"1997":147915307,"1998":147670692,"1999":147214392,"2000":146596557,"2001":145976083,"2002":"145306046","2003":"144648257","2004":"144067054","2005":"143518523","2006":"143049528","2007":"142805088","2008":"142742350","2009":"142785342","2010":"142849449","2011":"142960868","2012":"143201676","2013":"143506911","2014":"143819666","2015":"144096870","2016":144342396,"Country Name":"Russia","Country Code":"RUS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2933428,"1961":2996096,"1962":3050604,"1963":3102972,"1964":3161724,"1965":3232934,"1966":3319082,"1967":3418317,"1968":3527263,"1969":3640591,"1970":3754541,"1971":3868337,"1972":3983700,"1973":4102321,"1974":4226799,"1975":4359092,"1976":4499509,"1977":4647615,"1978":4803725,"1979":4968074,"1980":5140716,"1981":5315032,"1982":5489322,"1983":5673614,"1984":5881906,"1985":6120107,"1986":6407672,"1987":6732131,"1988":7030179,"1989":7216028,"1990":7235798,"1991":7051759,"1992":6701851,"1993":6299909,"1994":6005095,"1995":5928078,"1996":6115168,"1997":6522382,"1998":7059813,"1999":7593239,"2000":8025703,"2001":8329406,"2002":"8536205","2003":"8680346","2004":"8818438","2005":"8991735","2006":"9206580","2007":"9447402","2008":"9708169","2009":"9977446","2010":"10246842","2011":"10516071","2012":"10788853","2013":"11065151","2014":"11345357","2015":"11629553","2016":11917508,"Country Name":"Rwanda","Country Code":"RWA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":571857185,"1961":583950448,"1962":596504751,"1963":609376285,"1964":622875636,"1965":636754992,"1966":651094669,"1967":665871993,"1968":681109271,"1969":696734230,"1970":712769163,"1971":729115720,"1972":745871099,"1973":763149474,"1974":780922591,"1975":799294145,"1976":818264619,"1977":837811015,"1978":857934480,"1979":878616424,"1980":899787611,"1981":921270524,"1982":943375098,"1983":965905841,"1984":988820543,"1985":1012080845,"1986":1035652813,"1987":1059520266,"1988":1083674191,"1989":1108116731,"1990":1132832536,"1991":1157821722,"1992":1183034707,"1993":1208411907,"1994":1233869424,"1995":1259358616,"1996":1284818746,"1997":1310234107,"1998":1335633730,"1999":1361053702,"2000":1386504523,"2001":1411993292,"2002":"1437450586","2003":"1462776158","2004":"1487832276","2005":"1512521166","2006":"1536799012","2007":"1560689001","2008":"1584247163","2009":"1607562312","2010":"1630729920","2011":"1653756466","2012":"1676614288","2013":"1699306053","2014":"1721840539","2015":"1744190704","2016":1766383450,"Country Name":"South Asia","Country Code":"SAS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4086539,"1961":4218879,"1962":4362864,"1963":4516659,"1964":4677404,"1965":4843635,"1966":5015204,"1967":5194846,"1968":5387486,"1969":5599628,"1970":5836389,"1971":6100994,"1972":6393894,"1973":6714095,"1974":7059334,"1975":7428703,"1976":7818613,"1977":8231604,"1978":8679840,"1979":9179621,"1980":9740599,"1981":10366661,"1982":11048080,"1983":11763837,"1984":12484967,"1985":13189115,"1986":13869012,"1987":14525660,"1988":15155223,"1989":15755944,"1990":16326815,"1991":16867829,"1992":17378833,"1993":17859750,"1994":18311090,"1995":18735841,"1996":19131578,"1997":19505576,"1998":19882458,"1999":20294406,"2000":20764312,"2001":21303592,"2002":"21906308","2003":"22556425","2004":"23228890","2005":"23905654","2006":"24578301","2007":"25252569","2008":"25940770","2009":"26661492","2010":"27425676","2011":"28238020","2012":"29086357","2013":"29944476","2014":"30776722","2015":"31557144","2016":32275687,"Country Name":"Saudi Arabia","Country Code":"SAU","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7544491,"1961":7769482,"1962":8004121,"1963":8248812,"1964":8503994,"1965":8770097,"1966":9047798,"1967":9337657,"1968":9639840,"1969":9954410,"1970":10281700,"1971":10621472,"1972":10974622,"1973":11343926,"1974":11732958,"1975":12144135,"1976":12578407,"1977":13034625,"1978":13510421,"1979":14002303,"1980":14507468,"1981":15027270,"1982":15562194,"1983":16107730,"1984":16658054,"1985":17210187,"1986":17757169,"1987":18302587,"1988":18866319,"1989":19475609,"1990":20147590,"1991":20893625,"1992":21701476,"1993":22535937,"1994":23347885,"1995":24102986,"1996":24786190,"1997":25410451,"1998":26003542,"1999":26607042,"2000":27250535,"2001":27945005,"2002":"28679565","2003":"29435944","2004":"30186341","2005":"30911914","2006":"31607064","2007":"32282526","2008":"32955496","2009":"33650619","2010":"34385963","2011":"35167314","2012":"35990192","2013":"36849918","2014":"37737913","2015":"38647803","2016":39578828,"Country Name":"Sudan","Country Code":"SDN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3206749,"1961":3295293,"1962":3386863,"1963":3481745,"1964":3580312,"1965":3682876,"1966":3789211,"1967":3899237,"1968":4013539,"1969":4132844,"1970":4257505,"1971":4388458,"1972":4525114,"1973":4664444,"1974":4802348,"1975":4936209,"1976":5064674,"1977":5189539,"1978":5315265,"1979":5448110,"1980":5592646,"1981":5750338,"1982":5920059,"1983":6100495,"1984":6289327,"1985":6484738,"1986":6686159,"1987":6893896,"1988":7107976,"1989":7328600,"1990":7555617,"1991":7789653,"1992":8029725,"1993":8272170,"1994":8512173,"1995":8746606,"1996":8974077,"1997":9196528,"1998":9418393,"1999":9645957,"2000":9884052,"2001":10134497,"2002":"10396861","2003":"10670990","2004":"10955944","2005":"11251266","2006":"11556763","2007":"11873557","2008":"12203957","2009":"12550917","2010":"12916229","2011":"13300910","2012":"13703513","2013":"14120320","2014":"14546111","2015":"14976994","2016":15411614,"Country Name":"Senegal","Country Code":"SEN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1646400,"1961":1702400,"1962":1750200,"1963":1795000,"1964":1841600,"1965":1886900,"1966":1934400,"1967":1977600,"1968":2012000,"1969":2042500,"1970":2074500,"1971":2112900,"1972":2152400,"1973":2193000,"1974":2229800,"1975":2262600,"1976":2293300,"1977":2325300,"1978":2353600,"1979":2383500,"1980":2413945,"1981":2532835,"1982":2646466,"1983":2681061,"1984":2732221,"1985":2735957,"1986":2733373,"1987":2774789,"1988":2846108,"1989":2930901,"1990":3047132,"1991":3135083,"1992":3230698,"1993":3313471,"1994":3419048,"1995":3524506,"1996":3670704,"1997":3796038,"1998":3927213,"1999":3958723,"2000":4027887,"2001":4138012,"2002":"4175950","2003":"4114826","2004":"4166664","2005":"4265762","2006":"4401365","2007":"4588599","2008":"4839396","2009":"4987573","2010":"5076732","2011":"5183688","2012":"5312437","2013":"5399162","2014":"5469724","2015":"5535002","2016":5607283,"Country Name":"Singapore","Country Code":"SGP","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":117866,"1961":121396,"1962":125064,"1963":128866,"1964":132782,"1965":136847,"1966":141026,"1967":145351,"1968":149921,"1969":154875,"1970":160290,"1971":166212,"1972":172598,"1973":179349,"1974":186332,"1975":193445,"1976":200640,"1977":207937,"1978":215347,"1979":222897,"1980":230607,"1981":238479,"1982":246493,"1983":254596,"1984":262709,"1985":270801,"1986":278838,"1987":286863,"1988":294964,"1989":303253,"1990":311840,"1991":320753,"1992":329953,"1993":339456,"1994":349225,"1995":359225,"1996":369469,"1997":379947,"1998":390643,"1999":401538,"2000":412609,"2001":423853,"2002":"435262","2003":"446769","2004":"458324","2005":"469885","2006":"481422","2007":"492940","2008":"504477","2009":"516079","2010":"527790","2011":"539614","2012":"551531","2013":"563513","2014":"575504","2015":"587482","2016":599419,"Country Name":"Solomon Is.","Country Code":"SLB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2297110,"1961":2329204,"1962":2363013,"1963":2398414,"1964":2435204,"1965":2473294,"1966":2512652,"1967":2553529,"1968":2596568,"1969":2642608,"1970":2692259,"1971":2745779,"1972":2803031,"1973":2863739,"1974":2927468,"1975":2993876,"1976":3062956,"1977":3134800,"1978":3209263,"1979":3286179,"1980":3365441,"1981":3445277,"1982":3525399,"1983":3608751,"1984":3699467,"1985":3799550,"1986":3912438,"1987":4034668,"1988":4152984,"1989":4249468,"1990":4312246,"1991":4337239,"1992":4331332,"1993":4307299,"1994":4283621,"1995":4274819,"1996":4282350,"1997":4305455,"1998":4353646,"1999":4437803,"2000":4564297,"2001":4739147,"2002":"4957216","2003":"5199549","2004":"5439695","2005":"5658379","2006":"5848692","2007":"6015417","2008":"6165372","2009":"6310260","2010":"6458720","2011":"6611692","2012":"6766103","2013":"6922079","2014":"7079162","2015":"7237025","2016":7396190,"Country Name":"Sierra Leone","Country Code":"SLE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2762899,"1961":2843240,"1962":2927857,"1963":3015887,"1964":3106186,"1965":3197863,"1966":3290411,"1967":3383701,"1968":3477742,"1969":3572707,"1970":3668595,"1971":3765166,"1972":3861931,"1973":3958323,"1974":4053713,"1975":4147525,"1976":4239675,"1977":4329964,"1978":4417516,"1979":4501316,"1980":4580704,"1981":4655364,"1982":4725720,"1983":4792903,"1984":4858532,"1985":4923860,"1986":4988943,"1987":5053714,"1988":5119035,"1989":5185943,"1990":5254984,"1991":5326657,"1992":5400331,"1993":5474000,"1994":5544945,"1995":5611115,"1996":5671925,"1997":5727755,"1998":5778706,"1999":5825187,"2000":5867626,"2001":5905962,"2002":"5940303","2003":"5971535","2004":"6000775","2005":"6028961","2006":"6056478","2007":"6083475","2008":"6110301","2009":"6137276","2010":"6164626","2011":"6192560","2012":"6221246","2013":"6250777","2014":"6281189","2015":"6312478","2016":6344722,"Country Name":"El Salvador","Country Code":"SLV","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":15397,"1961":15789,"1962":16199,"1963":16621,"1964":17032,"1965":17441,"1966":17835,"1967":18229,"1968":18589,"1969":18895,"1970":19138,"1971":19303,"1972":19398,"1973":19466,"1974":19562,"1975":19735,"1976":19980,"1977":20296,"1978":20660,"1979":21030,"1980":21361,"1981":21666,"1982":21943,"1983":22210,"1984":22455,"1985":22708,"1986":22961,"1987":23210,"1988":23466,"1989":23740,"1990":24043,"1991":24386,"1992":24749,"1993":25141,"1994":25516,"1995":25877,"1996":26209,"1997":26508,"1998":26799,"1999":27096,"2000":27418,"2001":27762,"2002":"28121","2003":"28494","2004":"28866","2005":"29240","2006":"29614","2007":"29977","2008":"30351","2009":"30723","2010":"31110","2011":"31504","2012":"31914","2013":"32303","2014":"32657","2015":"32960","2016":33203,"Country Name":"San Marino","Country Code":"SMR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2755947,"1961":2814096,"1962":2874190,"1963":2936443,"1964":3001126,"1965":3068437,"1966":3143836,"1967":3228495,"1968":3313786,"1969":3387632,"1970":3444553,"1971":3470324,"1972":3475022,"1973":3506008,"1974":3627504,"1975":3880320,"1976":4289469,"1977":4827362,"1978":5417740,"1979":5953615,"1980":6359126,"1981":6604872,"1982":6716448,"1983":6740220,"1984":6747932,"1985":6791716,"1986":6887372,"1987":7018109,"1988":7165295,"1989":7298417,"1990":7397347,"1991":7455936,"1992":7488544,"1993":7519811,"1994":7583954,"1995":7704894,"1996":7892389,"1997":8137475,"1998":8422372,"1999":8720231,"2000":9011479,"2001":9290823,"2002":"9564167","2003":"9836397","2004":"10116228","2005":"10409925","2006":"10718317","2007":"11038596","2008":"11369276","2009":"11707990","2010":"12053223","2011":"12404725","2012":"12763776","2013":"13132349","2014":"13513125","2015":"13908129","2016":14317996,"Country Name":"Somalia","Country Code":"SOM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":null,"1961":null,"1962":null,"1963":null,"1964":null,"1965":null,"1966":null,"1967":null,"1968":null,"1969":null,"1970":null,"1971":null,"1972":null,"1973":null,"1974":null,"1975":null,"1976":null,"1977":null,"1978":null,"1979":null,"1980":null,"1981":null,"1982":null,"1983":null,"1984":null,"1985":null,"1986":null,"1987":null,"1988":null,"1989":null,"1990":7586000,"1991":7595636,"1992":7646424,"1993":7699307,"1994":7734639,"1995":7625357,"1996":7617794,"1997":7596501,"1998":7567745,"1999":7540401,"2000":7516346,"2001":7503433,"2002":"7496522","2003":"7480591","2004":"7463157","2005":"7440769","2006":"7411569","2007":"7381579","2008":"7350222","2009":"7320807","2010":"7291436","2011":"7234099","2012":"7199077","2013":"7164132","2014":"7130576","2015":"7095383","2016":7057412,"Country Name":"Serbia","Country Code":"SRB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":228483817,"1961":233895063,"1962":239523824,"1963":245368754,"1964":251425272,"1965":257692753,"1966":264176263,"1967":270887360,"1968":277840203,"1969":285051902,"1970":292538525,"1971":300306321,"1972":308363872,"1973":316732080,"1974":325435432,"1975":334492038,"1976":343911628,"1977":353693831,"1978":363829976,"1979":374316066,"1980":385138692,"1981":396297441,"1982":407793567,"1983":419619388,"1984":431770082,"1985":444235680,"1986":457012890,"1987":470103300,"1988":483514016,"1989":497257833,"1990":511340559,"1991":525783087,"1992":540581485,"1993":555699023,"1994":571093992,"1995":586732965,"1996":602620918,"1997":618795119,"1998":635315649,"1999":652274408,"2000":669737048,"2001":687462724,"2002":"705845436,9","2003":"724827302,9","2004":"744459949","2005":"764783733,2","2006":"785820414,5","2007":"807571797","2008":"830024044,3","2009":"853151354,1","2010":"876933366,4","2011":"901368314,4","2012":"926459874,1","2013":"952188682,6","2014":"978533722,7","2015":"1005477382","2016":1033011458,"Country Name":"Sub-Saharan Africa (excluding high income)","Country Code":"SSA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2955152,"1961":3011110,"1962":3069913,"1963":3131557,"1964":3196113,"1965":3263638,"1966":3334191,"1967":3407800,"1968":3484537,"1969":3564465,"1970":3647709,"1971":3734418,"1972":3824762,"1973":3918922,"1974":4017075,"1975":4119438,"1976":4224529,"1977":4332287,"1978":4445826,"1979":4569423,"1980":4705224,"1981":4853927,"1982":5011726,"1983":5170558,"1984":5319609,"1985":5450424,"1986":5565545,"1987":5666078,"1988":5741235,"1989":5777498,"1990":5768481,"1991":5705378,"1992":5599814,"1993":5490915,"1994":5431738,"1995":5459519,"1996":5591114,"1997":5814006,"1998":6099923,"1999":6405864,"2000":6700656,"2001":6974442,"2002":"7237276","2003":"7501642","2004":"7787655","2005":"8108877","2006":"8468152","2007":"8856800","2008":"9263136","2009":"9670667","2010":"10067192","2011":"10448857","2012":"10818258","2013":"11177490","2014":"11530971","2015":"11882136","2016":12230730,"Country Name":"S. Sudan","Country Code":"SSD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":228525517,"1961":233937952,"1962":239567866,"1963":245413930,"1964":251471594,"1965":257740253,"1966":264224962,"1967":270937271,"1968":277891337,"1969":285104267,"1970":292592125,"1971":300361016,"1972":308419901,"1973":316788972,"1974":325493369,"1975":334551330,"1976":343972132,"1977":353755617,"1978":363892126,"1979":374378752,"1980":385201953,"1981":396361476,"1982":407857980,"1983":419683723,"1984":431834799,"1985":444300924,"1986":457078542,"1987":470171799,"1988":483582771,"1989":497327000,"1990":511410066,"1991":525853526,"1992":540652248,"1993":555771276,"1994":571168197,"1995":586808269,"1996":602697335,"1997":618872438,"1998":635394495,"1999":652354818,"2000":669818179,"2001":687543926,"2002":"705929159,9","2003":"724910083,9","2004":"744542424","2005":"764866591,2","2006":"785905014,5","2007":"807656830","2008":"830111000,3","2009":"853238652,1","2010":"877023136,4","2011":"901455755,4","2012":"926548177,1","2013":"952278631,6","2014":"978625081,7","2015":"1005570801","2016":1033106135,"Country Name":"Sub-Saharan Africa","Country Code":"SSF","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":14260440,"1961":14538216,"1962":14821269,"1963":15107656,"1964":15397706,"1965":15688246,"1966":15976548,"1967":16263696,"1968":16556005,"1969":16853977,"1970":17159587,"1971":17476363,"1972":17800127,"1973":18127043,"1974":18456078,"1975":18789044,"1976":19120339,"1977":19453893,"1978":19794781,"1979":20157724,"1980":20547258,"1981":20963864,"1982":21407908,"1983":21865553,"1984":22331262,"1985":22806175,"1986":23285887,"1987":23770482,"1988":24251662,"1989":24726228,"1990":25181708,"1991":25639628,"1992":26063995,"1993":26471005,"1994":26877568,"1995":27285017,"1996":27694295,"1997":28107325,"1998":28529953,"1999":28981585,"2000":29439900,"2001":29892023,"2002":"30354957","2003":"30840609","2004":"31367482","2005":"31949551","2006":"32592554","2007":"33291250","2008":"34023435","2009":"34745372","2010":"35467734","2011":"36173803","2012":"36873246","2013":"37565022","2014":"38251715","2015":"38937987","2016":39618156,"Country Name":"Small states","Country Code":"SST","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":64253,"1961":64551,"1962":64432,"1963":64177,"1964":64212,"1965":64796,"1966":66063,"1967":67873,"1968":70046,"1969":72241,"1970":74253,"1971":75988,"1972":77537,"1973":79022,"1974":80670,"1975":82607,"1976":84885,"1977":87434,"1978":90089,"1979":92649,"1980":94949,"1981":96950,"1982":98706,"1983":100318,"1984":101915,"1985":103634,"1986":105474,"1987":107415,"1988":109470,"1989":111627,"1990":113893,"1991":116294,"1992":118816,"1993":121407,"1994":123973,"1995":126454,"1996":128821,"1997":131107,"1998":133418,"1999":135886,"2000":138606,"2001":141622,"2002":"144889","2003":"148372","2004":"151969","2005":"155630","2006":"159328","2007":"163101","2008":"166913","2009":"170813","2010":"174776","2011":"178800","2012":"182889","2013":"187045","2014":"191266","2015":"195553","2016":199910,"Country Name":"Sao Tome and Principe","Country Code":"STP","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":289966,"1961":298188,"1962":306328,"1963":314528,"1964":322997,"1965":331793,"1966":341133,"1967":350751,"1968":359733,"1969":366848,"1970":371273,"1971":372623,"1972":371324,"1973":368344,"1974":365099,"1975":362654,"1976":361364,"1977":361043,"1978":361457,"1979":362125,"1980":362777,"1981":363325,"1982":364032,"1983":365300,"1984":367660,"1985":371470,"1986":376867,"1987":383654,"1988":391391,"1989":399492,"1990":407472,"1991":415216,"1992":422763,"1993":430039,"1994":437037,"1995":443724,"1996":450036,"1997":455954,"1998":461560,"1999":467003,"2000":472390,"2001":477740,"2002":"483044","2003":"488332","2004":"493630","2005":"498946","2006":"504307","2007":"509705","2008":"515148","2009":"520619","2010":"526103","2011":"531589","2012":"537077","2013":"542540","2014":"547928","2015":"553208","2016":558368,"Country Name":"Suriname","Country Code":"SUR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4068095,"1961":4191667,"1962":4238188,"1963":4282017,"1964":4327341,"1965":4370983,"1966":4411666,"1967":4449367,"1968":4483915,"1969":4518607,"1970":4538223,"1971":4557449,"1972":4596622,"1973":4641445,"1974":4689623,"1975":4739105,"1976":4789507,"1977":4840501,"1978":4890125,"1979":4938973,"1980":4979815,"1981":5016105,"1982":5055099,"1983":5091971,"1984":5127097,"1985":5161768,"1986":5193838,"1987":5222840,"1988":5250596,"1989":5275942,"1990":5299187,"1991":5303294,"1992":5305016,"1993":5325305,"1994":5346331,"1995":5361999,"1996":5373361,"1997":5383291,"1998":5390516,"1999":5396020,"2000":5388720,"2001":5378867,"2002":"5376912","2003":"5373374","2004":"5372280","2005":"5372807","2006":"5373054","2007":"5374622","2008":"5379233","2009":"5386406","2010":"5391428","2011":"5398384","2012":"5407579","2013":"5413393","2014":"5418649","2015":"5423801","2016":5428704,"Country Name":"Slovakia","Country Code":"SVK","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1584720,"1961":1594131,"1962":1603649,"1963":1616971,"1964":1632114,"1965":1649160,"1966":1669905,"1967":1689528,"1968":1704546,"1969":1713874,"1970":1724891,"1971":1738335,"1972":1752233,"1973":1766697,"1974":1776132,"1975":1793581,"1976":1820249,"1977":1842377,"1978":1862548,"1979":1882599,"1980":1901315,"1981":1906531,"1982":1910334,"1983":1922321,"1984":1932154,"1985":1941641,"1986":1965964,"1987":1989776,"1988":1995196,"1989":1996351,"1990":1998161,"1991":1999429,"1992":1996498,"1993":1991746,"1994":1989443,"1995":1989872,"1996":1988628,"1997":1985956,"1998":1981629,"1999":1983045,"2000":1988925,"2001":1992060,"2002":"1994530","2003":"1995733","2004":"1997012","2005":"2000474","2006":"2006868","2007":"2018122","2008":"2021316","2009":"2039669","2010":"2048583","2011":"2052843","2012":"2057159","2013":"2059953","2014":"2061980","2015":"2063531","2016":2064845,"Country Name":"Slovenia","Country Code":"SVN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":7484656,"1961":7519998,"1962":7561588,"1963":7604328,"1964":7661354,"1965":7733853,"1966":7807797,"1967":7867931,"1968":7912273,"1969":7968072,"1970":8042801,"1971":8098334,"1972":8122300,"1973":8136312,"1974":8159955,"1975":8192437,"1976":8222286,"1977":8251540,"1978":8275599,"1979":8293678,"1980":8310531,"1981":8320503,"1982":8325263,"1983":8329033,"1984":8336605,"1985":8350386,"1986":8369829,"1987":8397804,"1988":8436489,"1989":8492964,"1990":8558835,"1991":8617375,"1992":8668067,"1993":8718561,"1994":8780745,"1995":8826939,"1996":8840998,"1997":8846062,"1998":8850974,"1999":8857874,"2000":8872109,"2001":8895960,"2002":"8924958","2003":"8958229","2004":"8993531","2005":"9029572","2006":"9080505","2007":"9148092","2008":"9219637","2009":"9298515","2010":"9378126","2011":"9449213","2012":"9519374","2013":"9600379","2014":"9696110","2015":"9799186","2016":9903122,"Country Name":"Sweden","Country Code":"SWE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":349174,"1961":357453,"1962":365636,"1963":373897,"1964":382469,"1965":391546,"1966":401183,"1967":411352,"1968":422140,"1969":433588,"1970":445729,"1971":458605,"1972":472230,"1973":486561,"1974":501512,"1975":517024,"1976":533214,"1977":550118,"1978":567559,"1979":585344,"1980":603372,"1981":621276,"1982":639237,"1983":658320,"1984":679976,"1985":705085,"1986":734243,"1987":766707,"1988":800456,"1989":832682,"1990":861373,"1991":885623,"1992":906034,"1993":924025,"1994":941774,"1995":960792,"1996":981764,"1997":1003995,"1998":1026009,"1999":1045629,"2000":1061468,"2001":1072927,"2002":"1080930","2003":"1087392","2004":"1095053","2005":"1105873","2006":"1120514","2007":"1138434","2008":"1158897","2009":"1180675","2010":"1202843","2011":"1225258","2012":"1248158","2013":"1271456","2014":"1295097","2015":"1319011","2016":1343098,"Country Name":"Swaziland","Country Code":"SWZ","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":null,"1961":null,"1962":null,"1963":null,"1964":null,"1965":null,"1966":null,"1967":null,"1968":null,"1969":null,"1970":null,"1971":null,"1972":null,"1973":null,"1974":null,"1975":null,"1976":null,"1977":null,"1978":null,"1979":null,"1980":null,"1981":null,"1982":null,"1983":null,"1984":null,"1985":null,"1986":null,"1987":null,"1988":null,"1989":null,"1990":null,"1991":null,"1992":null,"1993":null,"1994":null,"1995":null,"1996":null,"1997":null,"1998":31240,"1999":31084,"2000":30519,"2001":31189,"2002":"32566","2003":"33790","2004":"35316","2005":"36934","2006":"38270","2007":"39462","2008":"40458","2009":"39133","2010":"35474","2011":"33435","2012":"34640","2013":"36607","2014":"37685","2015":"38824","2016":40005,"Country Name":"Sint Maarten (Dutch part)","Country Code":"SXM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":41700,"1961":42889,"1962":44042,"1963":45176,"1964":46322,"1965":47500,"1966":48699,"1967":49911,"1968":51134,"1969":52365,"1970":53600,"1971":54695,"1972":56029,"1973":56892,"1974":57937,"1975":59292,"1976":60504,"1977":61786,"1978":62150,"1979":62686,"1980":63261,"1981":64035,"1982":64413,"1983":64335,"1984":64717,"1985":65244,"1986":65652,"1987":68499,"1988":68755,"1989":69167,"1990":69507,"1991":70439,"1992":70763,"1993":72253,"1994":74205,"1995":75304,"1996":76417,"1997":77319,"1998":78846,"1999":80410,"2000":81131,"2001":81202,"2002":"83723","2003":"82781","2004":"82475","2005":"82858","2006":"84600","2007":"85033","2008":"86956","2009":"87298","2010":"89770","2011":"87441","2012":"88303","2013":"89949","2014":"91359","2015":"93419","2016":94677,"Country Name":"Seychelles","Country Code":"SYC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4573512,"1961":4721896,"1962":4875422,"1963":5034646,"1964":5200336,"1965":5373137,"1966":5553246,"1967":5740710,"1968":5935860,"1969":6139048,"1970":6350541,"1971":6570857,"1972":6800141,"1973":7037851,"1974":7283177,"1975":7535714,"1976":7794662,"1977":8060649,"1978":8336418,"1979":8625690,"1980":8930774,"1981":9252851,"1982":9590227,"1983":9938847,"1984":10293049,"1985":10648632,"1986":11004272,"1987":11360852,"1988":11719071,"1989":12080444,"1990":12446171,"1991":12815219,"1992":13187085,"1993":13564167,"1994":13949697,"1995":14345492,"1996":14755286,"1997":15177456,"1998":15602210,"1999":16016092,"2000":16410848,"2001":16766899,"2002":"17087901","2003":"17415266","2004":"17806638","2005":"18294611","2006":"18914977","2007":"19632806","2008":"20325443","2009":"20824893","2010":"21018834","2011":"20863993","2012":"20420701","2013":"19809141","2014":"19203090","2015":"18734987","2016":18430453,"Country Name":"Syria","Country Code":"SYR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5726,"1961":5763,"1962":5763,"1963":5740,"1964":5710,"1965":5672,"1966":5629,"1967":5590,"1968":5559,"1969":5571,"1970":5633,"1971":5756,"1972":5922,"1973":6126,"1974":6346,"1975":6548,"1976":6723,"1977":6886,"1978":7053,"1979":7264,"1980":7519,"1981":7858,"1982":8244,"1983":8669,"1984":9095,"1985":9506,"1986":9875,"1987":10224,"1988":10582,"1989":11017,"1990":11552,"1991":12206,"1992":12968,"1993":13789,"1994":14597,"1995":15332,"1996":15966,"1997":16528,"1998":17115,"1999":17864,"2000":18873,"2001":20185,"2002":"21742","2003":"23410","2004":"25028","2005":"26448","2006":"27642","2007":"28640","2008":"29481","2009":"30245","2010":"30994","2011":"31731","2012":"32431","2013":"33108","2014":"33739","2015":"34339","2016":34900,"Country Name":"Turks and Caicos Islands","Country Code":"TCA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3001593,"1961":3060355,"1962":3121216,"1963":3183551,"1964":3246505,"1965":3309573,"1966":3372170,"1967":3434811,"1968":3499352,"1969":3568376,"1970":3643549,"1971":3726091,"1972":3815103,"1973":3907632,"1974":3999512,"1975":4087948,"1976":4172230,"1977":4253989,"1978":4335645,"1979":4420716,"1980":4512042,"1981":4610167,"1982":4715197,"1983":4829094,"1984":4954046,"1985":5091535,"1986":5243006,"1987":5408087,"1988":5584339,"1989":5768086,"1990":5956859,"1991":6150081,"1992":6349089,"1993":6555603,"1994":6772133,"1995":7000722,"1996":7241134,"1997":7493251,"1998":7759258,"1999":8041846,"2000":8342559,"2001":8663012,"2002":"9001689","2003":"9353201","2004":"9710043","2005":"10067009","2006":"10421597","2007":"10775708","2008":"11133861","2009":"11502786","2010":"11887202","2011":"12288651","2012":"12705135","2013":"13133589","2014":"13569438","2015":"14009413","2016":14452543,"Country Name":"Chad","Country Code":"TCD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":884594151,"1961":883622082,"1962":895002116,"1963":917678098,"1964":939976174,"1965":963246433,"1966":990056431,"1967":1015955063,"1968":1042826969,"1969":1071434338,"1970":1101000676,"1971":1131263830,"1972":1159838734,"1973":1187515154,"1974":1213723493,"1975":1237541051,"1976":1259540585,"1977":1279975038,"1978":1300380203,"1979":1321054512,"1980":1341328073,"1981":1362159945,"1982":1385232730,"1983":1408390228,"1984":1430515138,"1985":1453475988,"1986":1478163226,"1987":1504452906,"1988":1531050837,"1989":1556971773,"1990":1582008622,"1991":1605931102,"1992":1628282963,"1993":1649805506,"1994":1671218210,"1995":1692280431,"1996":1713057144,"1997":1733683046,"1998":1753650434,"1999":1772519122,"2000":1790334133,"2001":1807343753,"2002":"1823578257","2003":"1839213961","2004":"1854486630","2005":"1869631076","2006":"1884292297","2007":"1898416530","2008":"1912402987","2009":"1926269218","2010":"1940064830","2011":"1953970563","2012":"1968120178","2013":"1982414412","2014":"1996870376","2015":"2011274432","2016":2026028438,"Country Name":"East Asia & Pacific (IDA & IBRD countries)","Country Code":"TEA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":308725388,"1961":313380986,"1962":318070294,"1963":322832322,"1964":327602523,"1965":332185772,"1966":336037201,"1967":340026927,"1968":343930844,"1969":347710540,"1970":351363928,"1971":355018390,"1972":358817766,"1973":362625007,"1974":366468511,"1975":370345370,"1976":374380988,"1977":378335273,"1978":382215827,"1979":386070618,"1980":390068206,"1981":394132391,"1982":398033246,"1983":401922560,"1984":406045884,"1985":410151269,"1986":414186469,"1987":418164696,"1988":421971143,"1989":425588882,"1990":428318228,"1991":430153302,"1992":431844672,"1993":433366951,"1994":434111200,"1995":434648577,"1996":434909531,"1997":435422592,"1998":435662495,"1999":435732195,"2000":435342598,"2001":435134241,"2002":"434804671","2003":"434924961","2004":"435247221","2005":"435634937","2006":"436152601","2007":"436814265","2008":"437864853","2009":"439624552","2010":"441513488","2011":"443585208","2012":"445769749","2013":"448166840","2014":"450522686","2015":"452962149","2016":455372659,"Country Name":"Europe & Central Asia (IDA & IBRD countries)","Country Code":"TEC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1580513,"1961":1597526,"1962":1612755,"1963":1631764,"1964":1662073,"1965":1708630,"1966":1774029,"1967":1855442,"1968":1945780,"1969":2034907,"1970":2115522,"1971":2185662,"1972":2247582,"1973":2303345,"1974":2356622,"1975":2410446,"1976":2464455,"1977":2518566,"1978":2576469,"1979":2642846,"1980":2720839,"1981":2812039,"1982":2915066,"1983":3026238,"1984":3140237,"1985":3252994,"1986":3364020,"1987":3474080,"1988":3581928,"1989":3686373,"1990":3786940,"1991":3882271,"1992":3973327,"1993":4064926,"1994":4163642,"1995":4274024,"1996":4398238,"1997":4534551,"1998":4679023,"1999":4825704,"2000":4970367,"2001":5111770,"2002":"5251472","2003":"5391401","2004":"5534598","2005":"5683268","2006":"5837792","2007":"5997385","2008":"6161796","2009":"6330472","2010":"6502952","2011":"6679282","2012":"6859482","2013":"7042948","2014":"7228915","2015":"7416802","2016":7606374,"Country Name":"Togo","Country Code":"TGO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":27397175,"1961":28224204,"1962":29081034,"1963":29967041,"1964":30881332,"1965":31822796,"1966":32789096,"1967":33778504,"1968":34790945,"1969":35826804,"1970":36884913,"1971":37964925,"1972":39061994,"1973":40164966,"1974":41259536,"1975":42334954,"1976":43386841,"1977":44416010,"1978":45423436,"1979":46412307,"1980":47385323,"1981":48337503,"1982":49267560,"1983":50186199,"1984":51108082,"1985":52041469,"1986":52996467,"1987":53964406,"1988":54912334,"1989":55795106,"1990":56582821,"1991":57258401,"1992":57837878,"1993":58364891,"1994":58901666,"1995":59491790,"1996":60151472,"1997":60863506,"1998":61597283,"1999":62306651,"2000":62958021,"2001":63543322,"2002":"64073164","2003":"64554952","2004":"65002231","2005":"65425470","2006":"65824164","2007":"66195615","2008":"66545760","2009":"66881867","2010":"67208808","2011":"67530130","2012":"67843979","2013":"68143065","2014":"68416772","2015":"68657600","2016":68863514,"Country Name":"Thailand","Country Code":"THA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2087038,"1961":2159123,"1962":2236559,"1963":2318234,"1964":2402455,"1965":2487953,"1966":2574478,"1967":2662230,"1968":2750894,"1969":2840228,"1970":2930079,"1971":3020391,"1972":3111264,"1973":3203019,"1974":3296095,"1975":3390935,"1976":3487644,"1977":3586499,"1978":3688385,"1979":3794420,"1980":3905413,"1981":4020778,"1982":4140258,"1983":4265247,"1984":4397525,"1985":4537789,"1986":4687283,"1987":4843951,"1988":5001110,"1989":5149803,"1990":5283728,"1991":5400714,"1992":5502976,"1993":5594114,"1994":5679832,"1995":5764712,"1996":5849540,"1997":5934282,"1998":6021691,"1999":6114886,"2000":6216205,"2001":6327125,"2002":"6447688","2003":"6576877","2004":"6712841","2005":"6854176","2006":"7000557","2007":"7152385","2008":"7309728","2009":"7472819","2010":"7641630","2011":"7815949","2012":"7995062","2013":"8177809","2014":"8362745","2015":"8548651","2016":8734951,"Country Name":"Tajikistan","Country Code":"TJK","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1603258,"1961":1658362,"1962":1715408,"1963":1773853,"1964":1833063,"1965":1892599,"1966":1952141,"1967":2011763,"1968":2071789,"1969":2132799,"1970":2195173,"1971":2258964,"1972":2324013,"1973":2390213,"1974":2457382,"1975":2525361,"1976":2594311,"1977":2664257,"1978":2734896,"1979":2805818,"1980":2876808,"1981":2947779,"1982":3019066,"1983":3091511,"1984":3166221,"1985":3244018,"1986":3324456,"1987":3407319,"1988":3493894,"1989":3585867,"1990":3683966,"1991":3789185,"1992":3899843,"1993":4010789,"1994":4115099,"1995":4207840,"1996":4287344,"1997":4355114,"1998":4413477,"1999":4466132,"2000":4516131,"2001":4564080,"2002":"4610002","2003":"4655741","2004":"4703398","2005":"4754641","2006":"4810105","2007":"4870137","2008":"4935762","2009":"5007950","2010":"5087210","2011":"5174061","2012":"5267839","2013":"5366277","2014":"5466241","2015":"5565284","2016":5662544,"Country Name":"Turkmenistan","Country Code":"TKM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":210357620,"1961":216285875,"1962":222396518,"1963":228663034,"1964":235048548,"1965":241525127,"1966":248082224,"1967":254723773,"1968":261454660,"1969":268285362,"1970":275222756,"1971":282265414,"1972":289406786,"1973":296643292,"1974":303970215,"1975":311383650,"1976":318876360,"1977":326446030,"1978":334099163,"1979":341845707,"1980":349689363,"1981":357632874,"1982":365662995,"1983":373747579,"1984":381844359,"1985":389922156,"1986":397961545,"1987":405966436,"1988":413957171,"1989":421966286,"1990":430014112,"1991":438102530,"1992":446211495,"1993":454312822,"1994":462368285,"1995":470347459,"1996":478247051,"1997":486067029,"1998":493785288,"1999":501376484,"2000":508826710,"2001":516120111,"2002":"523270767","2003":"530331985","2004":"537377388","2005":"544459791","2006":"551595525","2007":"558768052","2008":"565956228","2009":"573125269","2010":"580246796","2011":"587315129","2012":"594330743","2013":"601277206","2014":"608136047","2015":"614891969","2016":621534921,"Country Name":"Latin America & the Caribbean (IDA & IBRD countries)","Country Code":"TLA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":499950,"1961":508845,"1962":518107,"1963":527749,"1964":537786,"1965":548218,"1966":558676,"1967":569031,"1968":579807,"1969":591739,"1970":605125,"1971":620945,"1972":638499,"1973":654437,"1974":664223,"1975":664984,"1976":654947,"1977":636096,"1978":613857,"1979":595872,"1980":587563,"1981":591005,"1982":604430,"1983":624648,"1984":646688,"1985":666945,"1986":684184,"1987":699522,"1988":714474,"1989":731444,"1990":751933,"1991":777011,"1992":805435,"1993":833611,"1994":856684,"1995":871447,"1996":875916,"1997":871994,"1998":865194,"1999":863269,"2000":871607,"2001":892531,"2002":"923825","2003":"960852","2004":"996698","2005":"1026484","2006":"1048621","2007":"1064973","2008":"1078110","2009":"1092021","2010":"1109591","2011":"1131523","2012":"1156760","2013":"1184366","2014":"1212814","2015":"1240977","2016":1268671,"Country Name":"Timor-Leste","Country Code":"TLS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":97837766,"1961":100458479,"1962":103147177,"1963":105914391,"1964":108774858,"1965":111738154,"1966":114816087,"1967":118004103,"1968":121276296,"1969":124596411,"1970":127942543,"1971":131309640,"1972":134719523,"1973":138211123,"1974":141837810,"1975":145642454,"1976":149628962,"1977":153798274,"1978":158185098,"1979":162829871,"1980":167755859,"1981":172967490,"1982":178440308,"1983":184129812,"1984":189974163,"1985":195917732,"1986":201950420,"1987":208051337,"1988":214140741,"1989":220121789,"1990":225925572,"1991":231513429,"1992":236899060,"1993":242132775,"1994":247294351,"1995":252443551,"1996":257602127,"1997":262757426,"1998":267895723,"1999":272991630,"2000":278033137,"2001":283018341,"2002":"287975628","2003":"292959567","2004":"298041669","2005":"303274818","2006":"308672973","2007":"314226665","2008":"319934461","2009":"325786717","2010":"331770455","2011":"337894992","2012":"344148796","2013":"350471538","2014":"356783315","2015":"363027163","2016":369167489,"Country Name":"Middle East & North Africa (IDA & IBRD countries)","Country Code":"TMN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":61601,"1961":63745,"1962":66259,"1963":69005,"1964":71757,"1965":74362,"1966":76779,"1967":79052,"1968":81097,"1969":82877,"1970":84369,"1971":85518,"1972":86347,"1973":86988,"1974":87609,"1975":88348,"1976":89254,"1977":90295,"1978":91364,"1979":92300,"1980":93007,"1981":93453,"1982":93681,"1983":93774,"1984":93842,"1985":93953,"1986":94145,"1987":94384,"1988":94667,"1989":94929,"1990":95153,"1991":95333,"1992":95496,"1993":95644,"1994":95833,"1995":96076,"1996":96369,"1997":96725,"1998":97135,"1999":97591,"2000":98082,"2001":98611,"2002":"99184","2003":"99789","2004":"100406","2005":"101041","2006":"101689","2007":"102357","2008":"103005","2009":"103604","2010":"104137","2011":"104577","2012":"104951","2013":"105328","2014":"105782","2015":"106364","2016":107122,"Country Name":"Tonga","Country Code":"TON","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":571857185,"1961":583950448,"1962":596504751,"1963":609376285,"1964":622875636,"1965":636754992,"1966":651094669,"1967":665871993,"1968":681109271,"1969":696734230,"1970":712769163,"1971":729115720,"1972":745871099,"1973":763149474,"1974":780922591,"1975":799294145,"1976":818264619,"1977":837811015,"1978":857934480,"1979":878616424,"1980":899787611,"1981":921270524,"1982":943375098,"1983":965905841,"1984":988820543,"1985":1012080845,"1986":1035652813,"1987":1059520266,"1988":1083674191,"1989":1108116731,"1990":1132832536,"1991":1157821722,"1992":1183034707,"1993":1208411907,"1994":1233869424,"1995":1259358616,"1996":1284818746,"1997":1310234107,"1998":1335633730,"1999":1361053702,"2000":1386504523,"2001":1411993292,"2002":"1437450586","2003":"1462776158","2004":"1487832276","2005":"1512521166","2006":"1536799012","2007":"1560689001","2008":"1584247163","2009":"1607562312","2010":"1630729920","2011":"1653756466","2012":"1676614288","2013":"1699306053","2014":"1721840539","2015":"1744190704","2016":1766383450,"Country Name":"South Asia (IDA & IBRD)","Country Code":"TSA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":228525517,"1961":233937952,"1962":239567866,"1963":245413930,"1964":251471594,"1965":257740253,"1966":264224962,"1967":270937271,"1968":277891337,"1969":285104267,"1970":292592125,"1971":300361016,"1972":308419901,"1973":316788972,"1974":325493369,"1975":334551330,"1976":343972132,"1977":353755617,"1978":363892126,"1979":374378752,"1980":385201953,"1981":396361476,"1982":407857980,"1983":419683723,"1984":431834799,"1985":444300924,"1986":457078542,"1987":470171799,"1988":483582771,"1989":497327000,"1990":511410066,"1991":525853526,"1992":540652248,"1993":555771276,"1994":571168197,"1995":586808269,"1996":602697335,"1997":618872438,"1998":635394495,"1999":652354818,"2000":669818179,"2001":687543926,"2002":"705929159,9","2003":"724910083,9","2004":"744542424","2005":"764866591,2","2006":"785905014,5","2007":"807656830","2008":"830111000,3","2009":"853238652,1","2010":"877023136,4","2011":"901455755,4","2012":"926548177,1","2013":"952278631,6","2014":"978625081,7","2015":"1005570801","2016":1033106135,"Country Name":"Sub-Saharan Africa (IDA & IBRD countries)","Country Code":"TSS","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":848479,"1961":865360,"1962":880023,"1963":892569,"1964":903275,"1965":912417,"1966":919903,"1967":925909,"1968":931468,"1969":937848,"1970":945993,"1971":956366,"1972":968741,"1973":982592,"1974":997053,"1975":1011490,"1976":1025658,"1977":1039761,"1978":1054116,"1979":1069202,"1980":1085308,"1981":1102556,"1982":1120611,"1983":1138676,"1984":1155695,"1985":1170928,"1986":1184051,"1987":1195247,"1988":1204893,"1989":1213624,"1990":1221900,"1991":1229907,"1992":1237487,"1993":1244407,"1994":1250318,"1995":1255001,"1996":1258364,"1997":1260678,"1998":1262542,"1999":1264775,"2000":1267984,"2001":1272380,"2002":"1277837","2003":"1284052","2004":"1290535","2005":"1296934","2006":"1303144","2007":"1309260","2008":"1315372","2009":"1321618","2010":"1328100","2011":"1334788","2012":"1341588","2013":"1348248","2014":"1354493","2015":"1360092","2016":1364962,"Country Name":"Trinidad and Tobago","Country Code":"TTO","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":4176266,"1961":4235937,"1962":4303131,"1963":4377637,"1964":4458611,"1965":4545339,"1966":4638275,"1967":4737627,"1968":4842167,"1969":4950153,"1970":5060397,"1971":5172691,"1972":5287543,"1973":5405355,"1974":5526764,"1975":5652476,"1976":5781796,"1977":5915006,"1978":6054911,"1979":6205212,"1980":6368167,"1981":6545024,"1982":6733961,"1983":6930387,"1984":7127941,"1985":7321876,"1986":7509756,"1987":7692254,"1988":7871459,"1989":8050932,"1990":8232797,"1991":8417684,"1992":8603225,"1993":8784888,"1994":8956596,"1995":9113975,"1996":9256037,"1997":9384152,"1998":9499395,"1999":9603742,"2000":9699197,"2001":9785701,"2002":"9864326","2003":"9939678","2004":"10017601","2005":"10102482","2006":"10196136","2007":"10298087","2008":"10407336","2009":"10521834","2010":"10639931","2011":"10761467","2012":"10886668","2013":"11014558","2014":"11143908","2015":"11273661","2016":11403248,"Country Name":"Tunisia","Country Code":"TUN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":27472331,"1961":28146893,"1962":28832805,"1963":29531342,"1964":30244232,"1965":30972965,"1966":31717477,"1967":32477961,"1968":33256432,"1969":34055361,"1970":34876267,"1971":35720568,"1972":36587225,"1973":37472298,"1974":38370241,"1975":39277211,"1976":40189511,"1977":41108248,"1978":42039935,"1979":42993991,"1980":43975921,"1981":44988356,"1982":46025357,"1983":47073422,"1984":48114105,"1985":49133883,"1986":50128489,"1987":51100878,"1988":52053704,"1989":52992429,"1990":53921699,"1991":54840531,"1992":55748875,"1993":56653729,"1994":57564132,"1995":58486381,"1996":59423208,"1997":60372499,"1998":61329590,"1999":62287326,"2000":63240121,"2001":64191474,"2002":"65143054","2003":"66085803","2004":"67007855","2005":"67903406","2006":"68763405","2007":"69597281","2008":"70440032","2009":"71339185","2010":"72326914","2011":"73409455","2012":"74569867","2013":"75787333","2014":"77030628","2015":"78271472","2016":79512426,"Country Name":"Turkey","Country Code":"TUR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":6104,"1961":6246,"1962":6389,"1963":6538,"1964":6684,"1965":6815,"1966":6938,"1967":7040,"1968":7133,"1969":7214,"1970":7303,"1971":7381,"1972":7458,"1973":7537,"1974":7616,"1975":7677,"1976":7749,"1977":7816,"1978":7888,"1979":7962,"1980":8052,"1981":8154,"1982":8284,"1983":8413,"1984":8530,"1985":8650,"1986":8747,"1987":8820,"1988":8883,"1989":8947,"1990":9003,"1991":9053,"1992":9109,"1993":9156,"1994":9190,"1995":9230,"1996":9256,"1997":9277,"1998":9306,"1999":9345,"2000":9420,"2001":9512,"2002":"9635","2003":"9767","2004":"9894","2005":"10027","2006":"10137","2007":"10243","2008":"10340","2009":"10441","2010":"10531","2011":"10628","2012":"10725","2013":"10819","2014":"10908","2015":"11001","2016":11097,"Country Name":"Tuvalu","Country Code":"TUV","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":10074507,"1961":10373398,"1962":10683906,"1963":11005905,"1964":11339097,"1965":11683528,"1966":12038903,"1967":12406040,"1968":12787489,"1969":13186557,"1970":13605529,"1971":14045824,"1972":14506617,"1973":14985131,"1974":15477294,"1975":15980301,"1976":16493305,"1977":17017670,"1978":17555494,"1979":18109884,"1980":18683157,"1981":19277108,"1982":19891548,"1983":20524666,"1984":21173603,"1985":21836999,"1986":22511243,"1987":23198533,"1988":23909954,"1989":24660575,"1990":25459604,"1991":26315013,"1992":27219619,"1993":28149328,"1994":29070615,"1995":29960776,"1996":30811854,"1997":31635251,"1998":32451713,"1999":33291540,"2000":34178042,"2001":35117019,"2002":"36105808","2003":"37149072","2004":"38249984","2005":"39410545","2006":"40634948","2007":"41923715","2008":"43270144","2009":"44664231","2010":"46098591","2011":"47570902","2012":"49082997","2013":"50636595","2014":"52234869","2015":"53879957","2016":55572201,"Country Name":"Tanzania","Country Code":"TZA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":6788214,"1961":7006633,"1962":7240174,"1963":7487429,"1964":7746198,"1965":8014401,"1966":8292776,"1967":8580676,"1968":8872920,"1969":9162833,"1970":9446064,"1971":9720399,"1972":9988380,"1973":10256429,"1974":10533716,"1975":10827147,"1976":11139833,"1977":11470867,"1978":11818307,"1979":12178544,"1980":12549540,"1981":12930209,"1982":13323332,"1983":13735271,"1984":14174470,"1985":14646624,"1986":15154521,"1987":15695411,"1988":16262533,"1989":16846090,"1990":17438907,"1991":18040438,"1992":18652889,"1993":19275422,"1994":19907634,"1995":20550291,"1996":21202118,"1997":21865931,"1998":22551789,"1999":23272995,"2000":24039274,"2001":24854892,"2002":"25718048","2003":"26624820","2004":"27568436","2005":"28543940","2006":"29550662","2007":"30590487","2008":"31663896","2009":"32771895","2010":"33915133","2011":"35093648","2012":"36306796","2013":"37553726","2014":"38833338","2015":"40144870","2016":41487965,"Country Name":"Uganda","Country Code":"UGA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":42662149,"1961":43203635,"1962":43749470,"1963":44285899,"1964":44794327,"1965":45261935,"1966":45682308,"1967":46060452,"1968":46409002,"1969":46746669,"1970":47086761,"1971":47433805,"1972":47783011,"1973":48127172,"1974":48455122,"1975":48758987,"1976":49036456,"1977":49290905,"1978":49526883,"1979":49751257,"1980":49968812,"1981":50221000,"1982":50384000,"1983":50564000,"1984":50754000,"1985":50917000,"1986":51097000,"1987":51293000,"1988":51521000,"1989":51773000,"1990":51892000,"1991":52000470,"1992":52150266,"1993":52179210,"1994":51921041,"1995":51512299,"1996":51057189,"1997":50594105,"1998":50143939,"1999":49673350,"2000":49175848,"2001":48683865,"2002":"48202500","2003":"47812950","2004":"47451600","2005":"47105150","2006":"46787750","2007":"46509350","2008":"46258200","2009":"46053300","2010":"45870700","2011":"45706100","2012":"45593300","2013":"45489600","2014":"45271947","2015":"45154029","2016":45004645,"Country Name":"Ukraine","Country Code":"UKR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":1169383343,"1961":1173937918,"1962":1190950075,"1963":1219340759,"1964":1247381879,"1965":1276358974,"1966":1308236986,"1967":1339305475,"1968":1371288764,"1969":1404959930,"1970":1439634842,"1971":1475016962,"1972":1508725239,"1973":1541588642,"1974":1573124797,"1975":1602470887,"1976":1630343319,"1977":1656761058,"1978":1683277739,"1979":1710120769,"1980":1736712813,"1981":1764018911,"1982":1793557193,"1983":1823149546,"1984":1851901762,"1985":1881420096,"1986":1912435225,"1987":1944908999,"1988":1977511264,"1989":2009227645,"1990":2039466775,"1991":2067741505,"1992":2094185393,"1993":2119779275,"1994":2144910438,"1995":2169706348,"1996":2193932118,"1997":2218221023,"1998":2241635821,"1999":2263862392,"2000":2284670482,"2001":2303956411,"2002":"2322321869","2003":"2340363117","2004":"2358173887","2005":"2376019944","2006":"2393626721","2007":"2410867952","2008":"2428374657","2009":"2446466231","2010":"2464534816","2011":"2482888622","2012":"2501989805","2013":"2521454987","2014":"2541065425","2015":"2560411826","2016":2579909675,"Country Name":"Upper middle income","Country Code":"UMC","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":2538651,"1961":2571690,"1962":2603887,"1963":2635129,"1964":2665390,"1965":2694537,"1966":2722877,"1967":2750093,"1968":2774774,"1969":2795046,"1970":2809803,"1971":2818270,"1972":2821439,"1973":2822081,"1974":2824069,"1975":2830172,"1976":2841429,"1977":2857105,"1978":2875966,"1979":2896023,"1980":2915778,"1981":2935036,"1982":2954282,"1983":2973463,"1984":2992645,"1985":3011908,"1986":3031038,"1987":3049966,"1988":3069099,"1989":3088984,"1990":3109989,"1991":3132050,"1992":3154855,"1993":3178155,"1994":3201607,"1995":3224804,"1996":3248035,"1997":3271010,"1998":3292138,"1999":3309318,"2000":3321245,"2001":3327103,"2002":"3327773","2003":"3325637","2004":"3324096","2005":"3325612","2006":"3331043","2007":"3339741","2008":"3350824","2009":"3362755","2010":"3374415","2011":"3385624","2012":"3396777","2013":"3408005","2014":"3419546","2015":"3431552","2016":3444006,"Country Name":"Uruguay","Country Code":"URY","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":180671000,"1961":183691000,"1962":186538000,"1963":189242000,"1964":191889000,"1965":194303000,"1966":196560000,"1967":198712000,"1968":200706000,"1969":202677000,"1970":205052000,"1971":207661000,"1972":209896000,"1973":211909000,"1974":213854000,"1975":215973000,"1976":218035000,"1977":220239000,"1978":222585000,"1979":225055000,"1980":227225000,"1981":229466000,"1982":231664000,"1983":233792000,"1984":235825000,"1985":237924000,"1986":240133000,"1987":242289000,"1988":244499000,"1989":246819000,"1990":249623000,"1991":252981000,"1992":256514000,"1993":259919000,"1994":263126000,"1995":266278000,"1996":269394000,"1997":272657000,"1998":275854000,"1999":279040000,"2000":282162411,"2001":284968955,"2002":"287625193","2003":"290107933","2004":"292805298","2005":"295516599","2006":"298379912","2007":"301231207","2008":"304093966","2009":"306771529","2010":"309348193","2011":"311663358","2012":"313998379","2013":"316204908","2014":"318563456","2015":"320896618","2016":323127513,"Country Name":"United States","Country Code":"USA","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8549493,"1961":8837349,"1962":9138097,"1963":9454250,"1964":9788986,"1965":10143740,"1966":10520879,"1967":10917446,"1968":11323095,"1969":11723846,"1970":12110028,"1971":12477058,"1972":12828625,"1973":13173590,"1974":13525094,"1975":13892638,"1976":14279120,"1977":14681459,"1978":15096012,"1979":15516862,"1980":15939744,"1981":16363562,"1982":16790069,"1983":17221212,"1984":17659975,"1985":18108300,"1986":18565477,"1987":19029877,"1988":19501225,"1989":19979127,"1990":20510000,"1991":20952000,"1992":21449000,"1993":21942000,"1994":22377000,"1995":22785000,"1996":23225000,"1997":23667000,"1998":24051000,"1999":24311650,"2000":24650400,"2001":24964450,"2002":"25271850","2003":"25567650","2004":"25864350","2005":"26167000","2006":"26488250","2007":"26868000","2008":"27302800","2009":"27767400","2010":"28562400","2011":"29339400","2012":"29774500","2013":"30243200","2014":"30757700","2015":"31298900","2016":31848200,"Country Name":"Uzbekistan","Country Code":"UZB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":80949,"1961":82142,"1962":83206,"1963":84167,"1964":85069,"1965":85970,"1966":86857,"1967":87736,"1968":88613,"1969":89516,"1970":90452,"1971":91440,"1972":92463,"1973":93517,"1974":94568,"1975":95611,"1976":96641,"1977":97649,"1978":98633,"1979":99590,"1980":100505,"1981":101379,"1982":102204,"1983":102984,"1984":103742,"1985":104477,"1986":105198,"1987":105896,"1988":106536,"1989":107084,"1990":107505,"1991":107814,"1992":108003,"1993":108092,"1994":108129,"1995":108122,"1996":108075,"1997":108004,"1998":107922,"1999":107880,"2000":107898,"2001":107988,"2002":"108146","2003":"108350","2004":"108559","2005":"108744","2006":"108907","2007":"109047","2008":"109165","2009":"109253","2010":"109315","2011":"109341","2012":"109328","2013":"109320","2014":"109357","2015":"109455","2016":109643,"Country Name":"St. Vincent and the Grenadines","Country Code":"VCT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8146847,"1961":8461685,"1962":8790589,"1963":9130349,"1964":9476252,"1965":9824692,"1966":10175140,"1967":10528054,"1968":10881995,"1969":11235491,"1970":11587761,"1971":11937805,"1972":12286439,"1973":12636969,"1974":12994025,"1975":13360987,"1976":13739142,"1977":14127787,"1978":14525931,"1979":14931739,"1980":15343916,"1981":15761799,"1982":16185894,"1983":16617346,"1984":17057785,"1985":17508059,"1986":17968552,"1987":18437794,"1988":18912526,"1989":19388342,"1990":19861956,"1991":20332079,"1992":20799075,"1993":21263443,"1994":21726352,"1995":22188667,"1996":22650102,"1997":23110178,"1998":23569454,"1999":24028689,"2000":24488340,"2001":24948476,"2002":"25408700","2003":"25868523","2004":"26327225","2005":"26784161","2006":"27239168","2007":"27691965","2008":"28141701","2009":"28587323","2010":"29028033","2011":"29463291","2012":"29893080","2013":"30317848","2014":"30738378","2015":"31155134","2016":31568179,"Country Name":"Venezuela","Country Code":"VEN","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":8033,"1961":8155,"1962":8298,"1963":8452,"1964":8627,"1965":8814,"1966":9007,"1967":9218,"1968":9424,"1969":9621,"1970":9803,"1971":9970,"1972":10125,"1973":10264,"1974":10379,"1975":10476,"1976":10543,"1977":10591,"1978":10662,"1979":10792,"1980":11002,"1981":11315,"1982":11712,"1983":12188,"1984":12731,"1985":13304,"1986":13938,"1987":14589,"1988":15266,"1989":15900,"1990":16461,"1991":16934,"1992":17344,"1993":17703,"1994":18052,"1995":18427,"1996":18833,"1997":19270,"1998":19722,"1999":20188,"2000":20645,"2001":21085,"2002":"21529","2003":"22000","2004":"22541","2005":"23168","2006":"23905","2007":"24731","2008":"25604","2009":"26447","2010":"27224","2011":"27901","2012":"28509","2013":"29056","2014":"29588","2015":"30113","2016":30661,"Country Name":"British Virgin Islands","Country Code":"VGB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":32000,"1961":34100,"1962":36300,"1963":38700,"1964":41300,"1965":44000,"1966":47300,"1967":50800,"1968":54600,"1969":58600,"1970":63000,"1971":71000,"1972":76000,"1973":84000,"1974":90000,"1975":94000,"1976":96000,"1977":93000,"1978":96000,"1979":96000,"1980":97000,"1981":98000,"1982":102000,"1983":104000,"1984":108000,"1985":107000,"1986":106500,"1987":106000,"1988":104500,"1989":103000,"1990":103963,"1991":104807,"1992":105711,"1993":106577,"1994":107317,"1995":107817,"1996":108093,"1997":108355,"1998":108535,"1999":108596,"2000":108639,"2001":108386,"2002":"108208","2003":"108085","2004":"107950","2005":"107863","2006":"107700","2007":"107423","2008":"107091","2009":"106707","2010":"106267","2011":"105784","2012":"105275","2013":"104737","2014":"104170","2015":"103574","2016":102951,"Country Name":"Virgin Islands (U.S.)","Country Code":"VIR","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":34743000,"1961":35428000,"1962":36123000,"1963":36836000,"1964":37574000,"1965":38341000,"1966":39142000,"1967":39980000,"1968":40856000,"1969":41773000,"1970":42729000,"1971":43725000,"1972":44758000,"1973":45825000,"1974":46918000,"1975":48030000,"1976":49158000,"1977":50295000,"1978":51436000,"1979":52574000,"1980":53700000,"1981":54722000,"1982":55687000,"1983":56655000,"1984":57692000,"1985":58868000,"1986":60249000,"1987":61750000,"1988":63263000,"1989":64774000,"1990":66016700,"1991":67242400,"1992":68450100,"1993":69644500,"1994":70824500,"1995":71995500,"1996":73156700,"1997":74306900,"1998":75456300,"1999":76596700,"2000":77630900,"2001":78620500,"2002":"79537700","2003":"80467400","2004":"81436400","2005":"82392100","2006":"83311200","2007":"84218500","2008":"85118700","2009":"86025000","2010":"86932500","2011":"87860300","2012":"88809200","2013":"89759500","2014":"90728900","2015":"91713300","2016":92701100,"Country Name":"Vietnam","Country Code":"VNM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":63699,"1961":65713,"1962":67808,"1963":69964,"1964":72131,"1965":74289,"1966":76413,"1967":78522,"1968":80673,"1969":82940,"1970":85389,"1971":88022,"1972":90823,"1973":93765,"1974":96796,"1975":99872,"1976":103028,"1977":106222,"1978":109429,"1979":112580,"1980":115632,"1981":118580,"1982":121435,"1983":124249,"1984":127092,"1985":130027,"1986":133038,"1987":136125,"1988":139366,"1989":142849,"1990":146634,"1991":150778,"1992":155243,"1993":159814,"1994":164208,"1995":168235,"1996":171801,"1997":174999,"1998":178078,"1999":181345,"2000":185063,"2001":189290,"2002":"193956","2003":"198964","2004":"204143","2005":"209370","2006":"214634","2007":"219953","2008":"225340","2009":"230785","2010":"236295","2011":"241871","2012":"247485","2013":"253142","2014":"258850","2015":"264603","2016":270402,"Country Name":"Vanuatu","Country Code":"VUT","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3034193297,"1961":3075115342,"1962":3127961482,"1963":3192794384,"1964":3258201476,"1965":3324951621,"1966":3394864530,"1967":3464439525,"1968":3534821115,"1969":3609383725,"1970":3684765870,"1971":3762198347,"1972":3838924951,"1973":3914857611,"1974":3991430917,"1975":4066267984,"1976":4139151082,"1977":4211781677,"1978":4285609387,"1979":4361295248,"1980":4437690434,"1981":4515764583,"1982":4596813158,"1983":4678525765,"1984":4759982360,"1985":4843067309,"1986":4928822143,"1987":5016798785,"1988":5105701987,"1989":5194731380,"1990":5284886348,"1991":5372078249,"1992":5456141249,"1993":5541075501,"1994":5624840414,"1995":5709757338,"1996":5792568347,"1997":5875398158,"1998":5957237460,"1999":6038067278,"2000":6118075293,"2001":6197638117,"2002":"6276824418","2003":"6356259574","2004":"6436346998","2005":"6517020798","2006":"6598421257","2007":"6680423047","2008":"6763745673","2009":"6847214549","2010":"6930656699","2011":"7012843635","2012":"7097400665","2013":"7182860115","2014":"7268986176","2015":"7355220412","2016":7442135578,"Country Name":"World","Country Code":"WLD","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":108646,"1961":112119,"1962":115788,"1963":119561,"1964":123354,"1965":127068,"1966":130688,"1967":134193,"1968":137506,"1969":140518,"1970":143176,"1971":145439,"1972":147321,"1973":148889,"1974":150221,"1975":151387,"1976":152390,"1977":153247,"1978":154007,"1979":154760,"1980":155557,"1981":156428,"1982":157403,"1983":158384,"1984":159283,"1985":160031,"1986":160592,"1987":161015,"1988":161421,"1989":161998,"1990":162866,"1991":164076,"1992":165570,"1993":167207,"1994":168788,"1995":170157,"1996":171283,"1997":172198,"1998":172981,"1999":173755,"2000":174610,"2001":175566,"2002":"176582","2003":"177662","2004":"178781","2005":"179929","2006":"181094","2007":"182286","2008":"183526","2009":"184826","2010":"186205","2011":"187665","2012":"189194","2013":"190757","2014":"192290","2015":"193759","2016":195125,"Country Name":"Samoa","Country Code":"WSM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":947000,"1961":966000,"1962":994000,"1963":1022000,"1964":1050000,"1965":1078000,"1966":1106000,"1967":1135000,"1968":1163000,"1969":1191000,"1970":1219000,"1971":1247000,"1972":1278000,"1973":1308000,"1974":1339000,"1975":1369000,"1976":1400000,"1977":1430000,"1978":1460000,"1979":1491000,"1980":1521000,"1981":1552000,"1982":1582000,"1983":1614000,"1984":1647000,"1985":1682000,"1986":1717000,"1987":1753000,"1988":1791000,"1989":1827000,"1990":1862000,"1991":1898000,"1992":1932000,"1993":1965000,"1994":1997000,"1995":2029000,"1996":2059000,"1997":2086000,"1998":1966000,"1999":1762000,"2000":1700000,"2001":1701154,"2002":"1702310","2003":"1703466","2004":"1704622","2005":"1705780","2006":"1719536","2007":"1733404","2008":"1747383","2009":"1761474","2010":"1775680","2011":"1791000","2012":"1805200","2013":"1824100","2014":"1821800","2015":"1801800","2016":1816200,"Country Name":"Kosovo","Country Code":"XKX","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":5172135,"1961":5260501,"1962":5351799,"1963":5446063,"1964":5543339,"1965":5643643,"1966":5748588,"1967":5858638,"1968":5971407,"1969":6083619,"1970":6193810,"1971":6300554,"1972":6407295,"1973":6523452,"1974":6661566,"1975":6830692,"1976":7034868,"1977":7271872,"1978":7536764,"1979":7821552,"1980":8120497,"1981":8434017,"1982":8764621,"1983":9111097,"1984":9472170,"1985":9847899,"1986":10232733,"1987":10628585,"1988":11051504,"1989":11523267,"1990":12057039,"1991":12661614,"1992":13325583,"1993":14017239,"1994":14692686,"1995":15320653,"1996":15889449,"1997":16408954,"1998":16896210,"1999":17378098,"2000":17874725,"2001":18390135,"2002":"18919179","2003":"19462086","2004":"20017068","2005":"20582927","2006":"21160534","2007":"21751605","2008":"22356391","2009":"22974929","2010":"23606779","2011":"24252206","2012":"24909969","2013":"25576322","2014":"26246327","2015":"26916207","2016":27584213,"Country Name":"Yemen","Country Code":"YEM","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":17396367,"1961":17850045,"1962":18322335,"1963":18809939,"1964":19308166,"1965":19813947,"1966":20325230,"1967":20843785,"1968":21374931,"1969":21926165,"1970":22502502,"1971":23106806,"1972":23736489,"1973":24384538,"1974":25040940,"1975":25698856,"1976":26354140,"1977":27009755,"1978":27674446,"1979":28360820,"1980":29077143,"1981":29828874,"1982":30611206,"1983":31409913,"1984":32204952,"1985":32983013,"1986":33733547,"1987":34463077,"1988":35195598,"1989":35965131,"1990":36793490,"1991":37692367,"1992":38646788,"1993":39619539,"1994":40558495,"1995":41426810,"1996":42210216,"1997":42921506,"1998":43584030,"1999":44233730,"2000":44896856,"2001":45312937,"2002":"45855482,88","2003":"46418193,9","2004":"47001700,99","2005":"47606670,24","2006":"48233804,48","2007":"48883844,99","2008":"49557573,3","2009":"50255813,11","2010":"50979432,36","2011":"51729345,36","2012":"52506515,08","2013":"53311955,61","2014":"54146734,74","2015":"55011976,68","2016":55908865,"Country Name":"South Africa","Country Code":"ZAF","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3044846,"1961":3140264,"1962":3240587,"1963":3345145,"1964":3452942,"1965":3563407,"1966":3676189,"1967":3791887,"1968":3912085,"1969":4038923,"1970":4173928,"1971":4317748,"1972":4469895,"1973":4629402,"1974":4794754,"1975":4964831,"1976":5139030,"1977":5317631,"1978":5501445,"1979":5691749,"1980":5889230,"1981":6094206,"1982":6305709,"1983":6521542,"1984":6738765,"1985":6955212,"1986":7170656,"1987":7385686,"1988":7600072,"1989":7813808,"1990":8027253,"1991":8239732,"1992":8452275,"1993":8669168,"1994":8896109,"1995":9137077,"1996":9394304,"1997":9666578,"1998":9950224,"1999":10239714,"2000":10531221,"2001":10824125,"2002":"11120409","2003":"11421984","2004":"11731746","2005":"12052156","2006":"12383446","2007":"12725974","2008":"13082517","2009":"13456417","2010":"13850033","2011":"14264756","2012":"14699937","2013":"15153210","2014":"15620974","2015":"16100587","2016":16591390,"Country Name":"Zambia","Country Code":"ZMB","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"},{"1960":3747369,"1961":3870756,"1962":3999419,"1963":4132756,"1964":4269863,"1965":4410212,"1966":4553433,"1967":4700041,"1968":4851431,"1969":5009514,"1970":5175618,"1971":5351195,"1972":5535874,"1973":5727044,"1974":5920943,"1975":6115370,"1976":6308300,"1977":6501893,"1978":6703182,"1979":6921790,"1980":7164172,"1981":7431940,"1982":7721536,"1983":8027565,"1984":8342195,"1985":8658857,"1986":8976205,"1987":9293283,"1988":9604302,"1989":9902540,"1990":10183113,"1991":10443043,"1992":10682868,"1993":10905756,"1994":11116948,"1995":11320346,"1996":11518262,"1997":11709997,"1998":11893272,"1999":12064537,"2000":12222251,"2001":12366165,"2002":"12500525","2003":"12633897","2004":"12777511","2005":"12940032","2006":"13124267","2007":"13329909","2008":"13558469","2009":"13810599","2010":"14086317","2011":"14386649","2012":"14710826","2013":"15054506","2014":"15411675","2015":"15777451","2016":16150362,"Country Name":"Zimbabwe","Country Code":"ZWE","Indicator Name":"Population, total","Indicator Code":"SP.POP.TOTL"}]

/***/ }),
/* 916 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * This is the initialization file for global variables
 */
/* harmony default export */ __webpack_exports__["a"] = (function () {
    window.year = '1971';
    window.country = 'Finland';
    window.map.allCoordinates = [];
    window.map.fromCountryList = [];
    window.map.geoData = undefined;
    window.additionalCountries = {
        to: '',
        year: '',
        countries: []
    };
    window.sliderPlaying = false;
});

/***/ })
/******/ ]);